
producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000301b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00030000 paddr 0x00030000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00030020 paddr 0x00030020 align 2**12
         filesz 0x0000c9d0 memsz 0x0000c9d0 flags r-x
    LOAD off    0x0000e380 vaddr 0x00048380 paddr 0x0003c9f0 align 2**12
         filesz 0x00001a5c memsz 0x00001d5c flags rw-
    LOAD off    0x00010000 vaddr 0x00048000 paddr 0x00048000 align 2**12
         filesz 0x00000380 memsz 0x00000380 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00030000  00030000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00030020  00030020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c83c  000301b4  000301b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000380  00048000  00048000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  00048380  0003c9f0  0000e380  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00049ddc  0003e44c  0000fddc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010380  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  000103a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001400  00000000  00000000  00011060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002358a  00000000  00000000  00012460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000079fe  00000000  00000000  000359ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000137a7  00000000  00000000  0003d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018e0  00000000  00000000  00050b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000223c  00000000  00000000  00052470  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be48  00000000  00000000  000546ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000604f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00060518  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063f28  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00063f2b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063f2f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063f30  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00063f31  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00063f35  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00063f39  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000a  00000000  00000000  00063f3d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000a  00000000  00000000  00063f47  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000a  00000000  00000000  00063f51  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  00063f5b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000058  00000000  00000000  00063f60  2**0
                  CONTENTS, READONLY
 29 .jdi          0000872d  00000000  00000000  00063fb8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00062eff  00000000  00000000  0006c6e5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00030000 l    d  .entry	00000000 .entry
00030020 l    d  .exceptions	00000000 .exceptions
000301b4 l    d  .text	00000000 .text
00048000 l    d  .rodata	00000000 .rodata
00048380 l    d  .rwdata	00000000 .rwdata
00049ddc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000301ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00030640 l     F .text	00000058 __sprint_r
000480b6 l     O .rodata	00000010 blanks.3452
000480a6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000326bc l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000340e4 l     F .text	00000058 std
000341f0 l     F .text	00000008 __fp_lock
000341f8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00048380 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00049da8 l     O .rwdata	00000004 charset
000480ec l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00048234 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000385a4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000396d0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0003a00c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0003a06c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0003a170 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0003a294 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0003a374 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0003a4d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0003a704 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00049dcc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0003a9bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00048d3c l     O .rwdata	00001060 jtag_uart0
0003aaac l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0003acec l     F .text	00000228 altera_avalon_jtag_uart_irq
0003af14 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0003b590 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0003b8b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0003bcd8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0003be28 l     F .text	000000f8 alt_file_locked
0003c0ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0003c7d8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0003c98c l     F .text	00000040 alt_sim_halt
00035ed4 g     F .text	00000094 _mprec_log10
00035fc0 g     F .text	00000088 __any_on
00037778 g     F .text	00000070 _isatty_r
0004820c g     O .rodata	00000028 __mprec_tinytens
0003a534 g     F .text	0000006c alt_main
00030518 g     F .text	000000a0 _puts_r
00049ddc g     O .bss	00000004 writep
00049e4c g     O .bss	00000100 alt_irq
000377e8 g     F .text	00000078 _lseek_r
0003c9f0 g       *ABS*	00000000 __flash_rwdata_start
000390c4 g     F .text	00000088 __eqdf2
00030320 g     F .text	0000008c FIFO_1_INIT
0004a0dc g       *ABS*	00000000 __alt_heap_start
000304a0 g     F .text	00000044 printf
00037230 g     F .text	00000068 __sseek
0003414c g     F .text	000000a4 __sinit
00034e58 g     F .text	00000084 _setlocale_r
0003424c g     F .text	0000009c __sfmoreglue
0003a5c0 g     F .text	00000020 __malloc_unlock
00035950 g     F .text	000000e0 memmove
0003423c g     F .text	00000010 _cleanup
00036048 g     F .text	000000bc _Balloc
00020000 g       *ABS*	00000000 __alt_mem_onchip_sharedmem
000391d4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00030000 g     F .entry	0000001c __reset
00030020 g       *ABS*	00000000 __flash_exceptions_start
00037704 g     F .text	00000074 _fstat_r
00049e08 g     O .bss	00000004 errno
00049e10 g     O .bss	00000004 alt_argv
00051d9c g       *ABS*	00000000 _gp
00048bbc g     O .rwdata	00000180 alt_fd_list
0003c2d0 g     F .text	00000094 alt_find_dev
000358b0 g     F .text	000000a0 memcpy
00030000 g       *ABS*	00000000 __alt_mem_onchip_mem0
00034230 g     F .text	0000000c _cleanup_r
0003936c g     F .text	000000f8 __floatsidf
0003bdb0 g     F .text	00000078 alt_io_redirect
000392e4 g     F .text	00000088 __ltdf2
0003c9f0 g       *ABS*	00000000 __DTOR_END__
000305b8 g     F .text	00000014 puts
00035e24 g     F .text	000000b0 __ratio
0003b12c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000304e4 g     F .text	00000034 _printf_r
0003980c g     F .text	00000008 __udivsi3
0003a1d0 g     F .text	000000c4 isatty
0004811c g     O .rodata	000000c8 __mprec_tens
00034e34 g     F .text	00000008 __locale_charset
0003c554 g     F .text	00000090 alt_icache_flush
00049dfc g     O .bss	00000004 __malloc_top_pad
00049da4 g     O .rwdata	00000004 __mb_cur_max
00034e3c g     F .text	0000000c _localeconv_r
000367ac g     F .text	0000003c __i2b
00034818 g     F .text	0000049c __sfvwrite_r
000371b8 g     F .text	00000070 _sbrk_r
00049de0 g     O .bss	00000004 fullp
00037860 g     F .text	00000078 _read_r
00048780 g     O .rwdata	0000000c __lc_ctype
00049dc4 g     O .rwdata	00000004 alt_max_fd
00039d0c g     F .text	00000138 __unpack_d
000375e0 g     F .text	00000110 _fclose_r
000340b0 g     F .text	00000034 fflush
00049e00 g     O .bss	00000004 __malloc_max_sbrked_mem
00038a34 g     F .text	00000074 __adddf3
00035d04 g     F .text	00000120 __b2d
00037f44 g     F .text	00000660 __umoddi3
0003a3e0 g     F .text	000000f4 lseek
00049da0 g     O .rwdata	00000004 _global_impure_ptr
00036b54 g     F .text	000005f4 _realloc_r
0004a0dc g       *ABS*	00000000 __bss_end
0003bbe0 g     F .text	000000f8 alt_iic_isr_register
0003c1a4 g     F .text	0000010c alt_tick
000378d8 g     F .text	0000066c __udivdi3
000481e4 g     O .rodata	00000028 __mprec_bigtens
00036a34 g     F .text	00000120 __s2b
0003953c g     F .text	00000194 __floatunsidf
00035c24 g     F .text	00000060 __mcmp
00034218 g     F .text	00000018 __fp_lock_all
0003bb98 g     F .text	00000048 alt_ic_irq_enabled
000303c4 g     F .text	00000098 producer
0003c10c g     F .text	00000098 alt_alarm_stop
00049e18 g     O .bss	00000004 alt_irq_active
000300ec g     F .exceptions	000000c8 alt_irq_handler
00048b94 g     O .rwdata	00000028 alt_dev_null
0003b7e4 g     F .text	0000001c alt_dcache_flush_all
00035af0 g     F .text	00000070 __hi0bits
00039464 g     F .text	000000d8 __fixdfsi
00049ddc g       *ABS*	00000000 __ram_rwdata_end
00049dbc g     O .rwdata	00000008 alt_dev_list
0003a898 g     F .text	00000124 write
00048380 g       *ABS*	00000000 __ram_rodata_end
0003a098 g     F .text	000000d8 fstat
00048000 g       *ABS*	00000000 __alt_mem_onchip_memdata0
00036914 g     F .text	00000120 __pow5mult
00049df0 g     O .bss	00000004 __nlocale_changed
00039814 g     F .text	00000008 __umodsi3
0004a0dc g       *ABS*	00000000 end
0003ac2c g     F .text	000000c0 altera_avalon_jtag_uart_init
0003c9ec g       *ABS*	00000000 __CTOR_LIST__
00050000 g       *ABS*	00000000 __alt_stack_pointer
0003b600 g     F .text	00000090 alt_avalon_timer_sc_init
00039978 g     F .text	00000080 __clzsi2
0003b350 g     F .text	00000240 altera_avalon_jtag_uart_write
0003413c g     F .text	00000004 __sfp_lock_acquire
000357cc g     F .text	000000e4 memchr
00030698 g     F .text	00001ec4 ___vfprintf_internal_r
00034504 g     F .text	00000314 _free_r
0003c7dc g     F .text	000001b0 __call_exitprocs
00049df4 g     O .bss	00000004 __mlocale_changed
00049db0 g     O .rwdata	00000004 __malloc_sbrk_base
000301b4 g     F .text	0000003c _start
00049e1c g     O .bss	00000004 _alt_tick_rate
0003640c g     F .text	0000014c __lshift
00049e20 g     O .bss	00000004 _alt_nticks
0003a5e0 g     F .text	00000124 read
0003aa50 g     F .text	0000005c alt_sys_init
0003c6a4 g     F .text	00000134 __register_exitproc
00036558 g     F .text	00000254 __multiply
0003afc4 g     F .text	00000074 altera_avalon_jtag_uart_close
0003981c g     F .text	00000038 __mulsi3
00048380 g       *ABS*	00000000 __ram_rwdata_start
00048000 g       *ABS*	00000000 __ram_rodata_start
00049e24 g     O .bss	00000028 __malloc_current_mallinfo
00036104 g     F .text	0000017c __d2b
0003aae4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0003c484 g     F .text	000000d0 alt_get_fd
00039e44 g     F .text	000000c8 __fpcmp_parts_d
00037570 g     F .text	00000070 _close_r
0003c630 g     F .text	00000074 memcmp
0003ab94 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0004a0dc g       *ABS*	00000000 __alt_stack_base
0003abdc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00032580 g     F .text	0000013c __swsetup_r
00038e6c g     F .text	00000258 __divdf3
000342e8 g     F .text	000000f0 __sfp
00035f68 g     F .text	00000058 __copybits
0004878c g     O .rwdata	00000408 __malloc_av_
00034148 g     F .text	00000004 __sinit_lock_release
00038aa8 g     F .text	000003c4 __muldf3
00037314 g     F .text	00000060 __sread
0003c364 g     F .text	00000120 alt_find_file
0003b800 g     F .text	000000b4 alt_dev_llist_insert
0003a5a0 g     F .text	00000020 __malloc_lock
0003a7dc g     F .text	000000bc sbrk
00033eb4 g     F .text	000001fc _fflush_r
000374a8 g     F .text	000000c8 _calloc_r
00049ddc g       *ABS*	00000000 __bss_start
00035a30 g     F .text	00000098 memset
000303ac g     F .text	00000018 main
00049e14 g     O .bss	00000004 alt_envp
00049e04 g     O .bss	00000004 __malloc_max_total_mem
0003ab3c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00037228 g     F .text	00000008 __sclose
00050000 g       *ABS*	00000000 __alt_heap_limit
000376f0 g     F .text	00000014 fclose
00049f4c g     O .bss	00000190 _atexit0
00032900 g     F .text	000015b4 _dtoa_r
0003508c g     F .text	00000740 _malloc_r
00049dc8 g     O .rwdata	00000004 alt_errno
00034d7c g     F .text	000000b8 _fwalk
000301f0 g     F .text	00000130 WRITE_FIFO_1
0003974c g     F .text	00000060 __divsi3
00048240 g     O .rodata	00000014 __thenan_df
000343d8 g     F .text	0000012c _malloc_trim_r
0003c9f0 g       *ABS*	00000000 __CTOR_END__
00037374 g     F .text	000000bc strcmp
00048000 g       *ABS*	00000000 __flash_rodata_start
0003c9f0 g       *ABS*	00000000 __DTOR_LIST__
0003045c g     F .text	00000044 delay
0003914c g     F .text	00000088 __nedf2
0003aa1c g     F .text	00000034 alt_irq_init
0003a764 g     F .text	00000078 alt_release_fd
00048254 g     O .rodata	00000100 __clz_tab
00049df8 g     O .bss	00000004 _PathLocale
0003c5e4 g     F .text	00000014 atexit
00037430 g     F .text	00000078 _write_r
00034edc g     F .text	0000001c setlocale
00049d9c g     O .rwdata	00000004 _impure_ptr
00049e0c g     O .bss	00000004 alt_argc
0003b978 g     F .text	00000064 _do_dtors
00030020 g       .exceptions	00000000 alt_irq_entry
00035c84 g     F .text	00000080 __ulp
00037148 g     F .text	00000040 __isinfd
00034200 g     F .text	00000018 __fp_unlock_all
00049db4 g     O .rwdata	00000008 alt_fs_list
00030020 g       *ABS*	00000000 __ram_exceptions_start
00034e48 g     F .text	00000010 localeconv
0003ba0c g     F .text	00000050 alt_ic_isr_register
00049ddc g       *ABS*	00000000 _edata
0004a0dc g       *ABS*	00000000 _end
000301b4 g       *ABS*	00000000 __ram_exceptions_end
0003b038 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0003baf8 g     F .text	000000a0 alt_ic_irq_disable
00037298 g     F .text	0000007c __swrite
00049dac g     O .rwdata	00000004 __malloc_trim_threshold
0003c2b0 g     F .text	00000020 altera_nios2_qsys_irq_init
0003c5f8 g     F .text	00000038 exit
00034cb4 g     F .text	000000c8 _fwalk_reent
00036280 g     F .text	0000018c __mdiff
00049de4 g     O .bss	00000004 readpp
000397ac g     F .text	00000060 __modsi3
00050000 g       *ABS*	00000000 __alt_data_end
00030020 g     F .exceptions	00000000 alt_exception
00034140 g     F .text	00000004 __sfp_lock_release
0003c9cc g     F .text	00000020 _exit
00037188 g     F .text	00000030 __isnand
0003b690 g     F .text	00000154 alt_alarm_start
00039854 g     F .text	00000124 __muldi3
00034ef8 g     F .text	00000194 __smakebuf_r
000305cc g     F .text	00000074 strlen
0003bf20 g     F .text	0000018c open
0003925c g     F .text	00000088 __gedf2
0003b9dc g     F .text	00000030 alt_icache_flush_all
00049dd0 g     O .rwdata	00000004 alt_priority_mask
00049de8 g     O .bss	00000004 emptyp
0003ba5c g     F .text	0000009c alt_ic_irq_enable
0003255c g     F .text	00000024 __vfprintf_internal
000389b4 g     F .text	00000080 __subdf3
00035b60 g     F .text	000000c4 __lo0bits
00049dd4 g     O .rwdata	00000008 alt_alarm_list
0003b914 g     F .text	00000064 _do_ctors
00049dec g     O .bss	00000004 countp
00039f0c g     F .text	00000100 close
0003a2f4 g     F .text	00000080 alt_load
000399f8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00034144 g     F .text	00000004 __sinit_lock_acquire
000367e8 g     F .text	0000012c __multadd
00035ac8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00030000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   30000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   30004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   30008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   3000c:	00bffd16 	blt	zero,r2,30004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   30010:	004000f4 	movhi	at,3
    ori r1, r1, %lo(_start)
   30014:	08406d14 	ori	at,at,436
    jmp r1
   30018:	0800683a 	jmp	at
   3001c:	00000000 	call	0 <__alt_mem_onchip_sharedmem-0x20000>

Disassembly of section .exceptions:

00030020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   30020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   30024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   30028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   3002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   30030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   30034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   30038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   3003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   30040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   30044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   30048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   3004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   30050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   30054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   30058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   3005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   30060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   30064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   30068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   3006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   30070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   30074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   30078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   3007c:	10000326 	beq	r2,zero,3008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   30080:	20000226 	beq	r4,zero,3008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   30084:	00300ec0 	call	300ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   30088:	00000306 	br	30098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   3008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   30090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   30094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   30098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   3009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   300a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   300a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   300a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   300ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   300b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   300b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   300b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   300bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   300c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   300c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   300c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   300cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   300d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   300d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   300d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   300dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   300e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   300e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   300e8:	ef80083a 	eret

000300ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   300ec:	defff904 	addi	sp,sp,-28
   300f0:	dfc00615 	stw	ra,24(sp)
   300f4:	df000515 	stw	fp,20(sp)
   300f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   300fc:	0005313a 	rdctl	r2,ipending
   30100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   30104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   30108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   3010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   30110:	00800044 	movi	r2,1
   30114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   30118:	e0ffff17 	ldw	r3,-4(fp)
   3011c:	e0bffe17 	ldw	r2,-8(fp)
   30120:	1884703a 	and	r2,r3,r2
   30124:	1005003a 	cmpeq	r2,r2,zero
   30128:	1000161e 	bne	r2,zero,30184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   3012c:	e0bffd17 	ldw	r2,-12(fp)
   30130:	00c00174 	movhi	r3,5
   30134:	18e79304 	addi	r3,r3,-25012
   30138:	100490fa 	slli	r2,r2,3
   3013c:	10c5883a 	add	r2,r2,r3
   30140:	11400017 	ldw	r5,0(r2)
   30144:	e0bffd17 	ldw	r2,-12(fp)
   30148:	00c00174 	movhi	r3,5
   3014c:	18e79304 	addi	r3,r3,-25012
   30150:	100490fa 	slli	r2,r2,3
   30154:	10c5883a 	add	r2,r2,r3
   30158:	10800104 	addi	r2,r2,4
   3015c:	11000017 	ldw	r4,0(r2)
   30160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   30164:	0005313a 	rdctl	r2,ipending
   30168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   3016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   30170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   30174:	e0bfff17 	ldw	r2,-4(fp)
   30178:	1004c03a 	cmpne	r2,r2,zero
   3017c:	103fe31e 	bne	r2,zero,3010c <alt_irq_handler+0x20>
   30180:	00000706 	br	301a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   30184:	e0bffe17 	ldw	r2,-8(fp)
   30188:	1085883a 	add	r2,r2,r2
   3018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   30190:	e0bffd17 	ldw	r2,-12(fp)
   30194:	10800044 	addi	r2,r2,1
   30198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   3019c:	003fde06 	br	30118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   301a0:	e037883a 	mov	sp,fp
   301a4:	dfc00117 	ldw	ra,4(sp)
   301a8:	df000017 	ldw	fp,0(sp)
   301ac:	dec00204 	addi	sp,sp,8
   301b0:	f800283a 	ret

Disassembly of section .text:

000301b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   301b4:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   301b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   301bc:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   301c0:	d6876714 	ori	gp,gp,7580
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   301c4:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   301c8:	10a77714 	ori	r2,r2,40412

    movhi r3, %hi(__bss_end)
   301cc:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   301d0:	18e83714 	ori	r3,r3,41180

    beq r2, r3, 1f
   301d4:	10c00326 	beq	r2,r3,301e4 <_start+0x30>

0:
    stw zero, (r2)
   301d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   301dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   301e0:	10fffd36 	bltu	r2,r3,301d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   301e4:	003a2f40 	call	3a2f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   301e8:	003a5340 	call	3a534 <alt_main>

000301ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   301ec:	003fff06 	br	301ec <alt_after_alt_main>

000301f0 <WRITE_FIFO_1>:

#include "FIFO_1.h"


void WRITE_FIFO_1(int *buffer)
{
   301f0:	defffd04 	addi	sp,sp,-12
   301f4:	dfc00215 	stw	ra,8(sp)
   301f8:	df000115 	stw	fp,4(sp)
   301fc:	df000104 	addi	fp,sp,4
   30200:	e13fff15 	stw	r4,-4(fp)

	// Wait if the FIFO is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==1);
   30204:	d0a01117 	ldw	r2,-32700(gp)
   30208:	1007883a 	mov	r3,r2
   3020c:	008000b4 	movhi	r2,2
   30210:	1885883a 	add	r2,r3,r2
   30214:	10800037 	ldwio	r2,0(r2)
   30218:	10800060 	cmpeqi	r2,r2,1
   3021c:	103ff91e 	bne	r2,zero,30204 <WRITE_FIFO_1+0x14>
	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE, writep, *buffer);
   30220:	d0a01017 	ldw	r2,-32704(gp)
   30224:	1007883a 	mov	r3,r2
   30228:	008000b4 	movhi	r2,2
   3022c:	1889883a 	add	r4,r3,r2
   30230:	e0bfff17 	ldw	r2,-4(fp)
   30234:	10c00017 	ldw	r3,0(r2)
   30238:	2005883a 	mov	r2,r4
   3023c:	10c00035 	stwio	r3,0(r2)
	// Update the write pointer
	writep += UNIT_SIZE;
   30240:	d0a01017 	ldw	r2,-32704(gp)
   30244:	10800104 	addi	r2,r2,4
   30248:	d0a01015 	stw	r2,-32704(gp)
	// Update "count" in shared memory
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp)+1);
   3024c:	d0a01417 	ldw	r2,-32688(gp)
   30250:	1007883a 	mov	r3,r2
   30254:	008000b4 	movhi	r2,2
   30258:	1889883a 	add	r4,r3,r2
   3025c:	d0a01417 	ldw	r2,-32688(gp)
   30260:	1007883a 	mov	r3,r2
   30264:	008000b4 	movhi	r2,2
   30268:	1885883a 	add	r2,r3,r2
   3026c:	10800037 	ldwio	r2,0(r2)
   30270:	10c00044 	addi	r3,r2,1
   30274:	2005883a 	mov	r2,r4
   30278:	10c00035 	stwio	r3,0(r2)
	// Update the "full?" and "empty?" flags accordingly
	if(IORD_32DIRECT(MEM_BASE, countp) == CAPACITY){
   3027c:	d0a01417 	ldw	r2,-32688(gp)
   30280:	1007883a 	mov	r3,r2
   30284:	008000b4 	movhi	r2,2
   30288:	1885883a 	add	r2,r3,r2
   3028c:	10800037 	ldwio	r2,0(r2)
   30290:	10800418 	cmpnei	r2,r2,16
   30294:	1000081e 	bne	r2,zero,302b8 <WRITE_FIFO_1+0xc8>
		IOWR_32DIRECT(MEM_BASE, fullp, 0x1);
   30298:	d0a01117 	ldw	r2,-32700(gp)
   3029c:	1007883a 	mov	r3,r2
   302a0:	008000b4 	movhi	r2,2
   302a4:	1885883a 	add	r2,r3,r2
   302a8:	1007883a 	mov	r3,r2
   302ac:	00800044 	movi	r2,1
   302b0:	18800035 	stwio	r2,0(r3)
   302b4:	00000c06 	br	302e8 <WRITE_FIFO_1+0xf8>
	}
	// Reset the empty flag if FIFO now has atleast one entry
	else if(IORD_32DIRECT(MEM_BASE, countp) > 0){
   302b8:	d0a01417 	ldw	r2,-32688(gp)
   302bc:	1007883a 	mov	r3,r2
   302c0:	008000b4 	movhi	r2,2
   302c4:	1885883a 	add	r2,r3,r2
   302c8:	10800037 	ldwio	r2,0(r2)
   302cc:	10800050 	cmplti	r2,r2,1
   302d0:	1000051e 	bne	r2,zero,302e8 <WRITE_FIFO_1+0xf8>
		IOWR_32DIRECT(MEM_BASE, emptyp, 0x0);
   302d4:	d0a01317 	ldw	r2,-32692(gp)
   302d8:	1007883a 	mov	r3,r2
   302dc:	008000b4 	movhi	r2,2
   302e0:	1885883a 	add	r2,r3,r2
   302e4:	10000035 	stwio	zero,0(r2)
	}
	printf("%d  ",writep);
   302e8:	d1601017 	ldw	r5,-32704(gp)
   302ec:	01000174 	movhi	r4,5
   302f0:	21200004 	addi	r4,r4,-32768
   302f4:	00304a00 	call	304a0 <printf>
	//if write pointer hit the end off the queue
	if(writep == STARTP + CAPACITY*UNIT_SIZE)
   302f8:	d0a01017 	ldw	r2,-32704(gp)
   302fc:	10801318 	cmpnei	r2,r2,76
   30300:	1000021e 	bne	r2,zero,3030c <WRITE_FIFO_1+0x11c>
		writep = STARTP;
   30304:	00800304 	movi	r2,12
   30308:	d0a01015 	stw	r2,-32704(gp)

}
   3030c:	e037883a 	mov	sp,fp
   30310:	dfc00117 	ldw	ra,4(sp)
   30314:	df000017 	ldw	fp,0(sp)
   30318:	dec00204 	addi	sp,sp,8
   3031c:	f800283a 	ret

00030320 <FIFO_1_INIT>:



//Initialization
void FIFO_1_INIT()
{
   30320:	deffff04 	addi	sp,sp,-4
   30324:	df000015 	stw	fp,0(sp)
   30328:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   3032c:	00800304 	movi	r2,12
   30330:	d0a01015 	stw	r2,-32704(gp)
	readpp  = STARTP;
   30334:	00800304 	movi	r2,12
   30338:	d0a01215 	stw	r2,-32696(gp)
	fullp   = 0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   3033c:	d0201115 	stw	zero,-32700(gp)
	emptyp   = fullp + 0x4;
   30340:	d0a01117 	ldw	r2,-32700(gp)
   30344:	10800104 	addi	r2,r2,4
   30348:	d0a01315 	stw	r2,-32692(gp)
	countp  = emptyp + 0x4;
   3034c:	d0a01317 	ldw	r2,-32692(gp)
   30350:	10800104 	addi	r2,r2,4
   30354:	d0a01415 	stw	r2,-32688(gp)

	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
   30358:	d0a01117 	ldw	r2,-32700(gp)
   3035c:	1007883a 	mov	r3,r2
   30360:	008000b4 	movhi	r2,2
   30364:	1885883a 	add	r2,r3,r2
   30368:	10000035 	stwio	zero,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
   3036c:	d0a01317 	ldw	r2,-32692(gp)
   30370:	1007883a 	mov	r3,r2
   30374:	008000b4 	movhi	r2,2
   30378:	1885883a 	add	r2,r3,r2
   3037c:	1007883a 	mov	r3,r2
   30380:	00800044 	movi	r2,1
   30384:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
   30388:	d0a01417 	ldw	r2,-32688(gp)
   3038c:	1007883a 	mov	r3,r2
   30390:	008000b4 	movhi	r2,2
   30394:	1885883a 	add	r2,r3,r2
   30398:	10000035 	stwio	zero,0(r2)
}
   3039c:	e037883a 	mov	sp,fp
   303a0:	df000017 	ldw	fp,0(sp)
   303a4:	dec00104 	addi	sp,sp,4
   303a8:	f800283a 	ret

000303ac <main>:
void delay(int n);
int producer();


int main()
{
   303ac:	defffe04 	addi	sp,sp,-8
   303b0:	dfc00115 	stw	ra,4(sp)
   303b4:	df000015 	stw	fp,0(sp)
   303b8:	d839883a 	mov	fp,sp
	producer();
   303bc:	00303c40 	call	303c4 <producer>

	while(1) { }
   303c0:	003fff06 	br	303c0 <main+0x14>

000303c4 <producer>:
	return 0;
}


int producer()
{
   303c4:	defffd04 	addi	sp,sp,-12
   303c8:	dfc00215 	stw	ra,8(sp)
   303cc:	df000115 	stw	fp,4(sp)
   303d0:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
   303d4:	01000174 	movhi	r4,5
   303d8:	21200204 	addi	r4,r4,-32760
   303dc:	00305b80 	call	305b8 <puts>

	FIFO_1_INIT(); // Initialize the FIFO
   303e0:	00303200 	call	30320 <FIFO_1_INIT>

	int j = 5;
   303e4:	00800144 	movi	r2,5
   303e8:	e0bfff15 	stw	r2,-4(fp)
	while(j<=500)
   303ec:	00000f06 	br	3042c <producer+0x68>
	{
		delay(100000);
   303f0:	010000b4 	movhi	r4,2
   303f4:	2121a804 	addi	r4,r4,-31072
   303f8:	003045c0 	call	3045c <delay>
		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
   303fc:	e13fff04 	addi	r4,fp,-4
   30400:	00301f00 	call	301f0 <WRITE_FIFO_1>
		delay(100000);
   30404:	010000b4 	movhi	r4,2
   30408:	2121a804 	addi	r4,r4,-31072
   3040c:	003045c0 	call	3045c <delay>

		printf("Producer sent [%i]\n",j);
   30410:	e17fff17 	ldw	r5,-4(fp)
   30414:	01000174 	movhi	r4,5
   30418:	21200704 	addi	r4,r4,-32740
   3041c:	00304a00 	call	304a0 <printf>
		j+=10;
   30420:	e0bfff17 	ldw	r2,-4(fp)
   30424:	10800284 	addi	r2,r2,10
   30428:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while(j<=500)
   3042c:	e0bfff17 	ldw	r2,-4(fp)
   30430:	10807d50 	cmplti	r2,r2,501
   30434:	103fee1e 	bne	r2,zero,303f0 <producer+0x2c>

		printf("Producer sent [%i]\n",j);
		j+=10;
	}

	printf("Producer finished..\n");
   30438:	01000174 	movhi	r4,5
   3043c:	21200c04 	addi	r4,r4,-32720
   30440:	00305b80 	call	305b8 <puts>
	return 0;
   30444:	0005883a 	mov	r2,zero
}
   30448:	e037883a 	mov	sp,fp
   3044c:	dfc00117 	ldw	ra,4(sp)
   30450:	df000017 	ldw	fp,0(sp)
   30454:	dec00204 	addi	sp,sp,8
   30458:	f800283a 	ret

0003045c <delay>:


void delay(int n)
{
   3045c:	defffd04 	addi	sp,sp,-12
   30460:	df000215 	stw	fp,8(sp)
   30464:	df000204 	addi	fp,sp,8
   30468:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   3046c:	e0bfff17 	ldw	r2,-4(fp)
   30470:	e0bffe15 	stw	r2,-8(fp)
   30474:	00000306 	br	30484 <delay+0x28>
   30478:	e0bffe17 	ldw	r2,-8(fp)
   3047c:	10bfffc4 	addi	r2,r2,-1
   30480:	e0bffe15 	stw	r2,-8(fp)
   30484:	e0bffe17 	ldw	r2,-8(fp)
   30488:	10800048 	cmpgei	r2,r2,1
   3048c:	103ffa1e 	bne	r2,zero,30478 <delay+0x1c>
	{
		continue;
	}
   30490:	e037883a 	mov	sp,fp
   30494:	df000017 	ldw	fp,0(sp)
   30498:	dec00104 	addi	sp,sp,4
   3049c:	f800283a 	ret

000304a0 <printf>:
   304a0:	defffb04 	addi	sp,sp,-20
   304a4:	dfc00115 	stw	ra,4(sp)
   304a8:	d9400215 	stw	r5,8(sp)
   304ac:	d9800315 	stw	r6,12(sp)
   304b0:	d9c00415 	stw	r7,16(sp)
   304b4:	00800174 	movhi	r2,5
   304b8:	10a76704 	addi	r2,r2,-25188
   304bc:	10c00017 	ldw	r3,0(r2)
   304c0:	200b883a 	mov	r5,r4
   304c4:	d8800204 	addi	r2,sp,8
   304c8:	19000217 	ldw	r4,8(r3)
   304cc:	100d883a 	mov	r6,r2
   304d0:	d8800015 	stw	r2,0(sp)
   304d4:	003255c0 	call	3255c <__vfprintf_internal>
   304d8:	dfc00117 	ldw	ra,4(sp)
   304dc:	dec00504 	addi	sp,sp,20
   304e0:	f800283a 	ret

000304e4 <_printf_r>:
   304e4:	defffc04 	addi	sp,sp,-16
   304e8:	dfc00115 	stw	ra,4(sp)
   304ec:	d9800215 	stw	r6,8(sp)
   304f0:	d9c00315 	stw	r7,12(sp)
   304f4:	280d883a 	mov	r6,r5
   304f8:	21400217 	ldw	r5,8(r4)
   304fc:	d8c00204 	addi	r3,sp,8
   30500:	180f883a 	mov	r7,r3
   30504:	d8c00015 	stw	r3,0(sp)
   30508:	00306980 	call	30698 <___vfprintf_internal_r>
   3050c:	dfc00117 	ldw	ra,4(sp)
   30510:	dec00404 	addi	sp,sp,16
   30514:	f800283a 	ret

00030518 <_puts_r>:
   30518:	defff604 	addi	sp,sp,-40
   3051c:	dc400715 	stw	r17,28(sp)
   30520:	2023883a 	mov	r17,r4
   30524:	2809883a 	mov	r4,r5
   30528:	dfc00915 	stw	ra,36(sp)
   3052c:	dcc00815 	stw	r19,32(sp)
   30530:	2827883a 	mov	r19,r5
   30534:	00305cc0 	call	305cc <strlen>
   30538:	89400217 	ldw	r5,8(r17)
   3053c:	00c00174 	movhi	r3,5
   30540:	18e01104 	addi	r3,r3,-32700
   30544:	01c00044 	movi	r7,1
   30548:	12000044 	addi	r8,r2,1
   3054c:	d8c00515 	stw	r3,20(sp)
   30550:	d9c00615 	stw	r7,24(sp)
   30554:	d8c00304 	addi	r3,sp,12
   30558:	01c00084 	movi	r7,2
   3055c:	8809883a 	mov	r4,r17
   30560:	d80d883a 	mov	r6,sp
   30564:	d8c00015 	stw	r3,0(sp)
   30568:	dcc00315 	stw	r19,12(sp)
   3056c:	da000215 	stw	r8,8(sp)
   30570:	d9c00115 	stw	r7,4(sp)
   30574:	d8800415 	stw	r2,16(sp)
   30578:	00348180 	call	34818 <__sfvwrite_r>
   3057c:	00ffffc4 	movi	r3,-1
   30580:	10000626 	beq	r2,zero,3059c <_puts_r+0x84>
   30584:	1805883a 	mov	r2,r3
   30588:	dfc00917 	ldw	ra,36(sp)
   3058c:	dcc00817 	ldw	r19,32(sp)
   30590:	dc400717 	ldw	r17,28(sp)
   30594:	dec00a04 	addi	sp,sp,40
   30598:	f800283a 	ret
   3059c:	00c00284 	movi	r3,10
   305a0:	1805883a 	mov	r2,r3
   305a4:	dfc00917 	ldw	ra,36(sp)
   305a8:	dcc00817 	ldw	r19,32(sp)
   305ac:	dc400717 	ldw	r17,28(sp)
   305b0:	dec00a04 	addi	sp,sp,40
   305b4:	f800283a 	ret

000305b8 <puts>:
   305b8:	00800174 	movhi	r2,5
   305bc:	10a76704 	addi	r2,r2,-25188
   305c0:	200b883a 	mov	r5,r4
   305c4:	11000017 	ldw	r4,0(r2)
   305c8:	00305181 	jmpi	30518 <_puts_r>

000305cc <strlen>:
   305cc:	208000cc 	andi	r2,r4,3
   305d0:	2011883a 	mov	r8,r4
   305d4:	1000161e 	bne	r2,zero,30630 <strlen+0x64>
   305d8:	20c00017 	ldw	r3,0(r4)
   305dc:	017fbff4 	movhi	r5,65279
   305e0:	297fbfc4 	addi	r5,r5,-257
   305e4:	01e02074 	movhi	r7,32897
   305e8:	39e02004 	addi	r7,r7,-32640
   305ec:	1945883a 	add	r2,r3,r5
   305f0:	11c4703a 	and	r2,r2,r7
   305f4:	00c6303a 	nor	r3,zero,r3
   305f8:	1886703a 	and	r3,r3,r2
   305fc:	18000c1e 	bne	r3,zero,30630 <strlen+0x64>
   30600:	280d883a 	mov	r6,r5
   30604:	380b883a 	mov	r5,r7
   30608:	21000104 	addi	r4,r4,4
   3060c:	20800017 	ldw	r2,0(r4)
   30610:	1187883a 	add	r3,r2,r6
   30614:	1946703a 	and	r3,r3,r5
   30618:	0084303a 	nor	r2,zero,r2
   3061c:	10c4703a 	and	r2,r2,r3
   30620:	103ff926 	beq	r2,zero,30608 <strlen+0x3c>
   30624:	20800007 	ldb	r2,0(r4)
   30628:	10000326 	beq	r2,zero,30638 <strlen+0x6c>
   3062c:	21000044 	addi	r4,r4,1
   30630:	20800007 	ldb	r2,0(r4)
   30634:	103ffd1e 	bne	r2,zero,3062c <strlen+0x60>
   30638:	2205c83a 	sub	r2,r4,r8
   3063c:	f800283a 	ret

00030640 <__sprint_r>:
   30640:	30800217 	ldw	r2,8(r6)
   30644:	defffe04 	addi	sp,sp,-8
   30648:	dc000015 	stw	r16,0(sp)
   3064c:	dfc00115 	stw	ra,4(sp)
   30650:	3021883a 	mov	r16,r6
   30654:	0007883a 	mov	r3,zero
   30658:	1000061e 	bne	r2,zero,30674 <__sprint_r+0x34>
   3065c:	1805883a 	mov	r2,r3
   30660:	30000115 	stw	zero,4(r6)
   30664:	dfc00117 	ldw	ra,4(sp)
   30668:	dc000017 	ldw	r16,0(sp)
   3066c:	dec00204 	addi	sp,sp,8
   30670:	f800283a 	ret
   30674:	00348180 	call	34818 <__sfvwrite_r>
   30678:	1007883a 	mov	r3,r2
   3067c:	1805883a 	mov	r2,r3
   30680:	80000115 	stw	zero,4(r16)
   30684:	80000215 	stw	zero,8(r16)
   30688:	dfc00117 	ldw	ra,4(sp)
   3068c:	dc000017 	ldw	r16,0(sp)
   30690:	dec00204 	addi	sp,sp,8
   30694:	f800283a 	ret

00030698 <___vfprintf_internal_r>:
   30698:	defea404 	addi	sp,sp,-1392
   3069c:	dd815815 	stw	r22,1376(sp)
   306a0:	dc015215 	stw	r16,1352(sp)
   306a4:	d9c15115 	stw	r7,1348(sp)
   306a8:	dfc15b15 	stw	ra,1388(sp)
   306ac:	df015a15 	stw	fp,1384(sp)
   306b0:	ddc15915 	stw	r23,1380(sp)
   306b4:	dd415715 	stw	r21,1372(sp)
   306b8:	dd015615 	stw	r20,1368(sp)
   306bc:	dcc15515 	stw	r19,1364(sp)
   306c0:	dc815415 	stw	r18,1360(sp)
   306c4:	dc415315 	stw	r17,1356(sp)
   306c8:	282d883a 	mov	r22,r5
   306cc:	3021883a 	mov	r16,r6
   306d0:	d9014f15 	stw	r4,1340(sp)
   306d4:	0034e3c0 	call	34e3c <_localeconv_r>
   306d8:	10800017 	ldw	r2,0(r2)
   306dc:	d9c15117 	ldw	r7,1348(sp)
   306e0:	d8814915 	stw	r2,1316(sp)
   306e4:	d8814f17 	ldw	r2,1340(sp)
   306e8:	10000226 	beq	r2,zero,306f4 <___vfprintf_internal_r+0x5c>
   306ec:	10800e17 	ldw	r2,56(r2)
   306f0:	10020d26 	beq	r2,zero,30f28 <___vfprintf_internal_r+0x890>
   306f4:	b080030b 	ldhu	r2,12(r22)
   306f8:	1080020c 	andi	r2,r2,8
   306fc:	10020e26 	beq	r2,zero,30f38 <___vfprintf_internal_r+0x8a0>
   30700:	b0800417 	ldw	r2,16(r22)
   30704:	10020c26 	beq	r2,zero,30f38 <___vfprintf_internal_r+0x8a0>
   30708:	b200030b 	ldhu	r8,12(r22)
   3070c:	00800284 	movi	r2,10
   30710:	40c0068c 	andi	r3,r8,26
   30714:	18802f1e 	bne	r3,r2,307d4 <___vfprintf_internal_r+0x13c>
   30718:	b080038f 	ldh	r2,14(r22)
   3071c:	10002d16 	blt	r2,zero,307d4 <___vfprintf_internal_r+0x13c>
   30720:	b240038b 	ldhu	r9,14(r22)
   30724:	b2800717 	ldw	r10,28(r22)
   30728:	b2c00917 	ldw	r11,36(r22)
   3072c:	d9014f17 	ldw	r4,1340(sp)
   30730:	dc402904 	addi	r17,sp,164
   30734:	d8804004 	addi	r2,sp,256
   30738:	00c10004 	movi	r3,1024
   3073c:	423fff4c 	andi	r8,r8,65533
   30740:	800d883a 	mov	r6,r16
   30744:	880b883a 	mov	r5,r17
   30748:	da002c0d 	sth	r8,176(sp)
   3074c:	da402c8d 	sth	r9,178(sp)
   30750:	da803015 	stw	r10,192(sp)
   30754:	dac03215 	stw	r11,200(sp)
   30758:	d8802d15 	stw	r2,180(sp)
   3075c:	d8c02e15 	stw	r3,184(sp)
   30760:	d8802915 	stw	r2,164(sp)
   30764:	d8c02b15 	stw	r3,172(sp)
   30768:	d8002f15 	stw	zero,188(sp)
   3076c:	00306980 	call	30698 <___vfprintf_internal_r>
   30770:	d8814b15 	stw	r2,1324(sp)
   30774:	10000416 	blt	r2,zero,30788 <___vfprintf_internal_r+0xf0>
   30778:	d9014f17 	ldw	r4,1340(sp)
   3077c:	880b883a 	mov	r5,r17
   30780:	0033eb40 	call	33eb4 <_fflush_r>
   30784:	1002321e 	bne	r2,zero,31050 <___vfprintf_internal_r+0x9b8>
   30788:	d8802c0b 	ldhu	r2,176(sp)
   3078c:	1080100c 	andi	r2,r2,64
   30790:	10000326 	beq	r2,zero,307a0 <___vfprintf_internal_r+0x108>
   30794:	b080030b 	ldhu	r2,12(r22)
   30798:	10801014 	ori	r2,r2,64
   3079c:	b080030d 	sth	r2,12(r22)
   307a0:	d8814b17 	ldw	r2,1324(sp)
   307a4:	dfc15b17 	ldw	ra,1388(sp)
   307a8:	df015a17 	ldw	fp,1384(sp)
   307ac:	ddc15917 	ldw	r23,1380(sp)
   307b0:	dd815817 	ldw	r22,1376(sp)
   307b4:	dd415717 	ldw	r21,1372(sp)
   307b8:	dd015617 	ldw	r20,1368(sp)
   307bc:	dcc15517 	ldw	r19,1364(sp)
   307c0:	dc815417 	ldw	r18,1360(sp)
   307c4:	dc415317 	ldw	r17,1356(sp)
   307c8:	dc015217 	ldw	r16,1352(sp)
   307cc:	dec15c04 	addi	sp,sp,1392
   307d0:	f800283a 	ret
   307d4:	0005883a 	mov	r2,zero
   307d8:	0007883a 	mov	r3,zero
   307dc:	dd401904 	addi	r21,sp,100
   307e0:	d8814215 	stw	r2,1288(sp)
   307e4:	802f883a 	mov	r23,r16
   307e8:	d8c14315 	stw	r3,1292(sp)
   307ec:	d8014b15 	stw	zero,1324(sp)
   307f0:	d8014815 	stw	zero,1312(sp)
   307f4:	d8014415 	stw	zero,1296(sp)
   307f8:	d8014715 	stw	zero,1308(sp)
   307fc:	dd400c15 	stw	r21,48(sp)
   30800:	d8000e15 	stw	zero,56(sp)
   30804:	d8000d15 	stw	zero,52(sp)
   30808:	b8800007 	ldb	r2,0(r23)
   3080c:	10001926 	beq	r2,zero,30874 <___vfprintf_internal_r+0x1dc>
   30810:	00c00944 	movi	r3,37
   30814:	10c01726 	beq	r2,r3,30874 <___vfprintf_internal_r+0x1dc>
   30818:	b821883a 	mov	r16,r23
   3081c:	00000106 	br	30824 <___vfprintf_internal_r+0x18c>
   30820:	10c00326 	beq	r2,r3,30830 <___vfprintf_internal_r+0x198>
   30824:	84000044 	addi	r16,r16,1
   30828:	80800007 	ldb	r2,0(r16)
   3082c:	103ffc1e 	bne	r2,zero,30820 <___vfprintf_internal_r+0x188>
   30830:	85e7c83a 	sub	r19,r16,r23
   30834:	98000e26 	beq	r19,zero,30870 <___vfprintf_internal_r+0x1d8>
   30838:	dc800e17 	ldw	r18,56(sp)
   3083c:	dc400d17 	ldw	r17,52(sp)
   30840:	008001c4 	movi	r2,7
   30844:	94e5883a 	add	r18,r18,r19
   30848:	8c400044 	addi	r17,r17,1
   3084c:	adc00015 	stw	r23,0(r21)
   30850:	dc800e15 	stw	r18,56(sp)
   30854:	acc00115 	stw	r19,4(r21)
   30858:	dc400d15 	stw	r17,52(sp)
   3085c:	14428b16 	blt	r2,r17,3128c <___vfprintf_internal_r+0xbf4>
   30860:	ad400204 	addi	r21,r21,8
   30864:	d9014b17 	ldw	r4,1324(sp)
   30868:	24c9883a 	add	r4,r4,r19
   3086c:	d9014b15 	stw	r4,1324(sp)
   30870:	802f883a 	mov	r23,r16
   30874:	b8800007 	ldb	r2,0(r23)
   30878:	10013c26 	beq	r2,zero,30d6c <___vfprintf_internal_r+0x6d4>
   3087c:	bdc00044 	addi	r23,r23,1
   30880:	d8000405 	stb	zero,16(sp)
   30884:	b8c00007 	ldb	r3,0(r23)
   30888:	04ffffc4 	movi	r19,-1
   3088c:	d8014c15 	stw	zero,1328(sp)
   30890:	d8014a15 	stw	zero,1320(sp)
   30894:	d8c14d15 	stw	r3,1332(sp)
   30898:	bdc00044 	addi	r23,r23,1
   3089c:	d9414d17 	ldw	r5,1332(sp)
   308a0:	00801604 	movi	r2,88
   308a4:	28fff804 	addi	r3,r5,-32
   308a8:	10c06036 	bltu	r2,r3,30a2c <___vfprintf_internal_r+0x394>
   308ac:	18c5883a 	add	r2,r3,r3
   308b0:	1085883a 	add	r2,r2,r2
   308b4:	00c000f4 	movhi	r3,3
   308b8:	18c23204 	addi	r3,r3,2248
   308bc:	10c5883a 	add	r2,r2,r3
   308c0:	11000017 	ldw	r4,0(r2)
   308c4:	2000683a 	jmp	r4
   308c8:	0003183c 	xorhi	zero,zero,3168
   308cc:	00030a2c 	andhi	zero,zero,3112
   308d0:	00030a2c 	andhi	zero,zero,3112
   308d4:	00031828 	cmpgeui	zero,zero,3168
   308d8:	00030a2c 	andhi	zero,zero,3112
   308dc:	00030a2c 	andhi	zero,zero,3112
   308e0:	00030a2c 	andhi	zero,zero,3112
   308e4:	00030a2c 	andhi	zero,zero,3112
   308e8:	00030a2c 	andhi	zero,zero,3112
   308ec:	00030a2c 	andhi	zero,zero,3112
   308f0:	00031608 	cmpgei	zero,zero,3160
   308f4:	00031818 	cmpnei	zero,zero,3168
   308f8:	00030a2c 	andhi	zero,zero,3112
   308fc:	00031620 	cmpeqi	zero,zero,3160
   30900:	000318c0 	call	318c <__alt_mem_onchip_sharedmem-0x1ce74>
   30904:	00030a2c 	andhi	zero,zero,3112
   30908:	000318ac 	andhi	zero,zero,3170
   3090c:	00031868 	cmpgeui	zero,zero,3169
   30910:	00031868 	cmpgeui	zero,zero,3169
   30914:	00031868 	cmpgeui	zero,zero,3169
   30918:	00031868 	cmpgeui	zero,zero,3169
   3091c:	00031868 	cmpgeui	zero,zero,3169
   30920:	00031868 	cmpgeui	zero,zero,3169
   30924:	00031868 	cmpgeui	zero,zero,3169
   30928:	00031868 	cmpgeui	zero,zero,3169
   3092c:	00031868 	cmpgeui	zero,zero,3169
   30930:	00030a2c 	andhi	zero,zero,3112
   30934:	00030a2c 	andhi	zero,zero,3112
   30938:	00030a2c 	andhi	zero,zero,3112
   3093c:	00030a2c 	andhi	zero,zero,3112
   30940:	00030a2c 	andhi	zero,zero,3112
   30944:	00030a2c 	andhi	zero,zero,3112
   30948:	00030a2c 	andhi	zero,zero,3112
   3094c:	00030a2c 	andhi	zero,zero,3112
   30950:	00030a2c 	andhi	zero,zero,3112
   30954:	00030a2c 	andhi	zero,zero,3112
   30958:	00031084 	movi	zero,3138
   3095c:	000316f0 	cmpltui	zero,zero,3163
   30960:	00030a2c 	andhi	zero,zero,3112
   30964:	000316f0 	cmpltui	zero,zero,3163
   30968:	00030a2c 	andhi	zero,zero,3112
   3096c:	00030a2c 	andhi	zero,zero,3112
   30970:	00030a2c 	andhi	zero,zero,3112
   30974:	00030a2c 	andhi	zero,zero,3112
   30978:	00031854 	movui	zero,3169
   3097c:	00030a2c 	andhi	zero,zero,3112
   30980:	00030a2c 	andhi	zero,zero,3112
   30984:	00031138 	rdprs	zero,zero,3140
   30988:	00030a2c 	andhi	zero,zero,3112
   3098c:	00030a2c 	andhi	zero,zero,3112
   30990:	00030a2c 	andhi	zero,zero,3112
   30994:	00030a2c 	andhi	zero,zero,3112
   30998:	00030a2c 	andhi	zero,zero,3112
   3099c:	00031184 	movi	zero,3142
   309a0:	00030a2c 	andhi	zero,zero,3112
   309a4:	00030a2c 	andhi	zero,zero,3112
   309a8:	000317a4 	muli	zero,zero,3166
   309ac:	00030a2c 	andhi	zero,zero,3112
   309b0:	00030a2c 	andhi	zero,zero,3112
   309b4:	00030a2c 	andhi	zero,zero,3112
   309b8:	00030a2c 	andhi	zero,zero,3112
   309bc:	00030a2c 	andhi	zero,zero,3112
   309c0:	00030a2c 	andhi	zero,zero,3112
   309c4:	00030a2c 	andhi	zero,zero,3112
   309c8:	00030a2c 	andhi	zero,zero,3112
   309cc:	00030a2c 	andhi	zero,zero,3112
   309d0:	00030a2c 	andhi	zero,zero,3112
   309d4:	00031778 	rdprs	zero,zero,3165
   309d8:	00031090 	cmplti	zero,zero,3138
   309dc:	000316f0 	cmpltui	zero,zero,3163
   309e0:	000316f0 	cmpltui	zero,zero,3163
   309e4:	000316f0 	cmpltui	zero,zero,3163
   309e8:	000316dc 	xori	zero,zero,3163
   309ec:	00031090 	cmplti	zero,zero,3138
   309f0:	00030a2c 	andhi	zero,zero,3112
   309f4:	00030a2c 	andhi	zero,zero,3112
   309f8:	00031664 	muli	zero,zero,3161
   309fc:	00030a2c 	andhi	zero,zero,3112
   30a00:	00031634 	movhi	zero,3160
   30a04:	00031144 	movi	zero,3141
   30a08:	00031694 	movui	zero,3162
   30a0c:	00031680 	call	3168 <__alt_mem_onchip_sharedmem-0x1ce98>
   30a10:	00030a2c 	andhi	zero,zero,3112
   30a14:	00031928 	cmpgeui	zero,zero,3172
   30a18:	00030a2c 	andhi	zero,zero,3112
   30a1c:	00031190 	cmplti	zero,zero,3142
   30a20:	00030a2c 	andhi	zero,zero,3112
   30a24:	00030a2c 	andhi	zero,zero,3112
   30a28:	00031808 	cmpgei	zero,zero,3168
   30a2c:	d9014d17 	ldw	r4,1332(sp)
   30a30:	2000ce26 	beq	r4,zero,30d6c <___vfprintf_internal_r+0x6d4>
   30a34:	01400044 	movi	r5,1
   30a38:	d9800f04 	addi	r6,sp,60
   30a3c:	d9c14015 	stw	r7,1280(sp)
   30a40:	d9414515 	stw	r5,1300(sp)
   30a44:	d9814115 	stw	r6,1284(sp)
   30a48:	280f883a 	mov	r7,r5
   30a4c:	d9000f05 	stb	r4,60(sp)
   30a50:	d8000405 	stb	zero,16(sp)
   30a54:	d8014615 	stw	zero,1304(sp)
   30a58:	d8c14c17 	ldw	r3,1328(sp)
   30a5c:	1880008c 	andi	r2,r3,2
   30a60:	1005003a 	cmpeq	r2,r2,zero
   30a64:	d8815015 	stw	r2,1344(sp)
   30a68:	1000031e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x3e0>
   30a6c:	d9014517 	ldw	r4,1300(sp)
   30a70:	21000084 	addi	r4,r4,2
   30a74:	d9014515 	stw	r4,1300(sp)
   30a78:	d9414c17 	ldw	r5,1328(sp)
   30a7c:	2940210c 	andi	r5,r5,132
   30a80:	d9414e15 	stw	r5,1336(sp)
   30a84:	28002d1e 	bne	r5,zero,30b3c <___vfprintf_internal_r+0x4a4>
   30a88:	d9814a17 	ldw	r6,1320(sp)
   30a8c:	d8814517 	ldw	r2,1300(sp)
   30a90:	30a1c83a 	sub	r16,r6,r2
   30a94:	0400290e 	bge	zero,r16,30b3c <___vfprintf_internal_r+0x4a4>
   30a98:	00800404 	movi	r2,16
   30a9c:	14045e0e 	bge	r2,r16,31c18 <___vfprintf_internal_r+0x1580>
   30aa0:	dc800e17 	ldw	r18,56(sp)
   30aa4:	dc400d17 	ldw	r17,52(sp)
   30aa8:	1027883a 	mov	r19,r2
   30aac:	07000174 	movhi	fp,5
   30ab0:	e7202d84 	addi	fp,fp,-32586
   30ab4:	050001c4 	movi	r20,7
   30ab8:	00000306 	br	30ac8 <___vfprintf_internal_r+0x430>
   30abc:	843ffc04 	addi	r16,r16,-16
   30ac0:	ad400204 	addi	r21,r21,8
   30ac4:	9c00130e 	bge	r19,r16,30b14 <___vfprintf_internal_r+0x47c>
   30ac8:	94800404 	addi	r18,r18,16
   30acc:	8c400044 	addi	r17,r17,1
   30ad0:	af000015 	stw	fp,0(r21)
   30ad4:	acc00115 	stw	r19,4(r21)
   30ad8:	dc800e15 	stw	r18,56(sp)
   30adc:	dc400d15 	stw	r17,52(sp)
   30ae0:	a47ff60e 	bge	r20,r17,30abc <___vfprintf_internal_r+0x424>
   30ae4:	d9014f17 	ldw	r4,1340(sp)
   30ae8:	b00b883a 	mov	r5,r22
   30aec:	d9800c04 	addi	r6,sp,48
   30af0:	d9c15115 	stw	r7,1348(sp)
   30af4:	00306400 	call	30640 <__sprint_r>
   30af8:	d9c15117 	ldw	r7,1348(sp)
   30afc:	10009e1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   30b00:	843ffc04 	addi	r16,r16,-16
   30b04:	dc800e17 	ldw	r18,56(sp)
   30b08:	dc400d17 	ldw	r17,52(sp)
   30b0c:	dd401904 	addi	r21,sp,100
   30b10:	9c3fed16 	blt	r19,r16,30ac8 <___vfprintf_internal_r+0x430>
   30b14:	9425883a 	add	r18,r18,r16
   30b18:	8c400044 	addi	r17,r17,1
   30b1c:	008001c4 	movi	r2,7
   30b20:	af000015 	stw	fp,0(r21)
   30b24:	ac000115 	stw	r16,4(r21)
   30b28:	dc800e15 	stw	r18,56(sp)
   30b2c:	dc400d15 	stw	r17,52(sp)
   30b30:	1441f516 	blt	r2,r17,31308 <___vfprintf_internal_r+0xc70>
   30b34:	ad400204 	addi	r21,r21,8
   30b38:	00000206 	br	30b44 <___vfprintf_internal_r+0x4ac>
   30b3c:	dc800e17 	ldw	r18,56(sp)
   30b40:	dc400d17 	ldw	r17,52(sp)
   30b44:	d8800407 	ldb	r2,16(sp)
   30b48:	10000b26 	beq	r2,zero,30b78 <___vfprintf_internal_r+0x4e0>
   30b4c:	00800044 	movi	r2,1
   30b50:	94800044 	addi	r18,r18,1
   30b54:	8c400044 	addi	r17,r17,1
   30b58:	a8800115 	stw	r2,4(r21)
   30b5c:	d8c00404 	addi	r3,sp,16
   30b60:	008001c4 	movi	r2,7
   30b64:	a8c00015 	stw	r3,0(r21)
   30b68:	dc800e15 	stw	r18,56(sp)
   30b6c:	dc400d15 	stw	r17,52(sp)
   30b70:	1441da16 	blt	r2,r17,312dc <___vfprintf_internal_r+0xc44>
   30b74:	ad400204 	addi	r21,r21,8
   30b78:	d9015017 	ldw	r4,1344(sp)
   30b7c:	20000b1e 	bne	r4,zero,30bac <___vfprintf_internal_r+0x514>
   30b80:	d8800444 	addi	r2,sp,17
   30b84:	94800084 	addi	r18,r18,2
   30b88:	8c400044 	addi	r17,r17,1
   30b8c:	a8800015 	stw	r2,0(r21)
   30b90:	00c00084 	movi	r3,2
   30b94:	008001c4 	movi	r2,7
   30b98:	a8c00115 	stw	r3,4(r21)
   30b9c:	dc800e15 	stw	r18,56(sp)
   30ba0:	dc400d15 	stw	r17,52(sp)
   30ba4:	1441c216 	blt	r2,r17,312b0 <___vfprintf_internal_r+0xc18>
   30ba8:	ad400204 	addi	r21,r21,8
   30bac:	d9414e17 	ldw	r5,1336(sp)
   30bb0:	00802004 	movi	r2,128
   30bb4:	2880b126 	beq	r5,r2,30e7c <___vfprintf_internal_r+0x7e4>
   30bb8:	d8c14617 	ldw	r3,1304(sp)
   30bbc:	19e1c83a 	sub	r16,r3,r7
   30bc0:	0400260e 	bge	zero,r16,30c5c <___vfprintf_internal_r+0x5c4>
   30bc4:	00800404 	movi	r2,16
   30bc8:	1403cf0e 	bge	r2,r16,31b08 <___vfprintf_internal_r+0x1470>
   30bcc:	1027883a 	mov	r19,r2
   30bd0:	07000174 	movhi	fp,5
   30bd4:	e7202984 	addi	fp,fp,-32602
   30bd8:	050001c4 	movi	r20,7
   30bdc:	00000306 	br	30bec <___vfprintf_internal_r+0x554>
   30be0:	843ffc04 	addi	r16,r16,-16
   30be4:	ad400204 	addi	r21,r21,8
   30be8:	9c00130e 	bge	r19,r16,30c38 <___vfprintf_internal_r+0x5a0>
   30bec:	94800404 	addi	r18,r18,16
   30bf0:	8c400044 	addi	r17,r17,1
   30bf4:	af000015 	stw	fp,0(r21)
   30bf8:	acc00115 	stw	r19,4(r21)
   30bfc:	dc800e15 	stw	r18,56(sp)
   30c00:	dc400d15 	stw	r17,52(sp)
   30c04:	a47ff60e 	bge	r20,r17,30be0 <___vfprintf_internal_r+0x548>
   30c08:	d9014f17 	ldw	r4,1340(sp)
   30c0c:	b00b883a 	mov	r5,r22
   30c10:	d9800c04 	addi	r6,sp,48
   30c14:	d9c15115 	stw	r7,1348(sp)
   30c18:	00306400 	call	30640 <__sprint_r>
   30c1c:	d9c15117 	ldw	r7,1348(sp)
   30c20:	1000551e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   30c24:	843ffc04 	addi	r16,r16,-16
   30c28:	dc800e17 	ldw	r18,56(sp)
   30c2c:	dc400d17 	ldw	r17,52(sp)
   30c30:	dd401904 	addi	r21,sp,100
   30c34:	9c3fed16 	blt	r19,r16,30bec <___vfprintf_internal_r+0x554>
   30c38:	9425883a 	add	r18,r18,r16
   30c3c:	8c400044 	addi	r17,r17,1
   30c40:	008001c4 	movi	r2,7
   30c44:	af000015 	stw	fp,0(r21)
   30c48:	ac000115 	stw	r16,4(r21)
   30c4c:	dc800e15 	stw	r18,56(sp)
   30c50:	dc400d15 	stw	r17,52(sp)
   30c54:	14418216 	blt	r2,r17,31260 <___vfprintf_internal_r+0xbc8>
   30c58:	ad400204 	addi	r21,r21,8
   30c5c:	d9014c17 	ldw	r4,1328(sp)
   30c60:	2080400c 	andi	r2,r4,256
   30c64:	10004a1e 	bne	r2,zero,30d90 <___vfprintf_internal_r+0x6f8>
   30c68:	d9414117 	ldw	r5,1284(sp)
   30c6c:	91e5883a 	add	r18,r18,r7
   30c70:	8c400044 	addi	r17,r17,1
   30c74:	008001c4 	movi	r2,7
   30c78:	a9400015 	stw	r5,0(r21)
   30c7c:	a9c00115 	stw	r7,4(r21)
   30c80:	dc800e15 	stw	r18,56(sp)
   30c84:	dc400d15 	stw	r17,52(sp)
   30c88:	14416716 	blt	r2,r17,31228 <___vfprintf_internal_r+0xb90>
   30c8c:	a8c00204 	addi	r3,r21,8
   30c90:	d9814c17 	ldw	r6,1328(sp)
   30c94:	3080010c 	andi	r2,r6,4
   30c98:	10002826 	beq	r2,zero,30d3c <___vfprintf_internal_r+0x6a4>
   30c9c:	d8814a17 	ldw	r2,1320(sp)
   30ca0:	d9014517 	ldw	r4,1300(sp)
   30ca4:	1121c83a 	sub	r16,r2,r4
   30ca8:	0400240e 	bge	zero,r16,30d3c <___vfprintf_internal_r+0x6a4>
   30cac:	00800404 	movi	r2,16
   30cb0:	1404550e 	bge	r2,r16,31e08 <___vfprintf_internal_r+0x1770>
   30cb4:	dc400d17 	ldw	r17,52(sp)
   30cb8:	1027883a 	mov	r19,r2
   30cbc:	07000174 	movhi	fp,5
   30cc0:	e7202d84 	addi	fp,fp,-32586
   30cc4:	050001c4 	movi	r20,7
   30cc8:	00000306 	br	30cd8 <___vfprintf_internal_r+0x640>
   30ccc:	843ffc04 	addi	r16,r16,-16
   30cd0:	18c00204 	addi	r3,r3,8
   30cd4:	9c00110e 	bge	r19,r16,30d1c <___vfprintf_internal_r+0x684>
   30cd8:	94800404 	addi	r18,r18,16
   30cdc:	8c400044 	addi	r17,r17,1
   30ce0:	1f000015 	stw	fp,0(r3)
   30ce4:	1cc00115 	stw	r19,4(r3)
   30ce8:	dc800e15 	stw	r18,56(sp)
   30cec:	dc400d15 	stw	r17,52(sp)
   30cf0:	a47ff60e 	bge	r20,r17,30ccc <___vfprintf_internal_r+0x634>
   30cf4:	d9014f17 	ldw	r4,1340(sp)
   30cf8:	b00b883a 	mov	r5,r22
   30cfc:	d9800c04 	addi	r6,sp,48
   30d00:	00306400 	call	30640 <__sprint_r>
   30d04:	10001c1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   30d08:	843ffc04 	addi	r16,r16,-16
   30d0c:	dc800e17 	ldw	r18,56(sp)
   30d10:	dc400d17 	ldw	r17,52(sp)
   30d14:	d8c01904 	addi	r3,sp,100
   30d18:	9c3fef16 	blt	r19,r16,30cd8 <___vfprintf_internal_r+0x640>
   30d1c:	9425883a 	add	r18,r18,r16
   30d20:	8c400044 	addi	r17,r17,1
   30d24:	008001c4 	movi	r2,7
   30d28:	1f000015 	stw	fp,0(r3)
   30d2c:	1c000115 	stw	r16,4(r3)
   30d30:	dc800e15 	stw	r18,56(sp)
   30d34:	dc400d15 	stw	r17,52(sp)
   30d38:	1440cb16 	blt	r2,r17,31068 <___vfprintf_internal_r+0x9d0>
   30d3c:	d8814a17 	ldw	r2,1320(sp)
   30d40:	d9414517 	ldw	r5,1300(sp)
   30d44:	1140010e 	bge	r2,r5,30d4c <___vfprintf_internal_r+0x6b4>
   30d48:	2805883a 	mov	r2,r5
   30d4c:	d9814b17 	ldw	r6,1324(sp)
   30d50:	308d883a 	add	r6,r6,r2
   30d54:	d9814b15 	stw	r6,1324(sp)
   30d58:	90013b1e 	bne	r18,zero,31248 <___vfprintf_internal_r+0xbb0>
   30d5c:	d9c14017 	ldw	r7,1280(sp)
   30d60:	dd401904 	addi	r21,sp,100
   30d64:	d8000d15 	stw	zero,52(sp)
   30d68:	003ea706 	br	30808 <___vfprintf_internal_r+0x170>
   30d6c:	d8800e17 	ldw	r2,56(sp)
   30d70:	1005451e 	bne	r2,zero,32288 <___vfprintf_internal_r+0x1bf0>
   30d74:	d8000d15 	stw	zero,52(sp)
   30d78:	b080030b 	ldhu	r2,12(r22)
   30d7c:	1080100c 	andi	r2,r2,64
   30d80:	103e8726 	beq	r2,zero,307a0 <___vfprintf_internal_r+0x108>
   30d84:	00bfffc4 	movi	r2,-1
   30d88:	d8814b15 	stw	r2,1324(sp)
   30d8c:	003e8406 	br	307a0 <___vfprintf_internal_r+0x108>
   30d90:	d9814d17 	ldw	r6,1332(sp)
   30d94:	00801944 	movi	r2,101
   30d98:	11806e16 	blt	r2,r6,30f54 <___vfprintf_internal_r+0x8bc>
   30d9c:	d9414717 	ldw	r5,1308(sp)
   30da0:	00c00044 	movi	r3,1
   30da4:	1943490e 	bge	r3,r5,31acc <___vfprintf_internal_r+0x1434>
   30da8:	d8814117 	ldw	r2,1284(sp)
   30dac:	94800044 	addi	r18,r18,1
   30db0:	8c400044 	addi	r17,r17,1
   30db4:	a8800015 	stw	r2,0(r21)
   30db8:	008001c4 	movi	r2,7
   30dbc:	a8c00115 	stw	r3,4(r21)
   30dc0:	dc800e15 	stw	r18,56(sp)
   30dc4:	dc400d15 	stw	r17,52(sp)
   30dc8:	1441ca16 	blt	r2,r17,314f4 <___vfprintf_internal_r+0xe5c>
   30dcc:	a8c00204 	addi	r3,r21,8
   30dd0:	d9014917 	ldw	r4,1316(sp)
   30dd4:	00800044 	movi	r2,1
   30dd8:	94800044 	addi	r18,r18,1
   30ddc:	8c400044 	addi	r17,r17,1
   30de0:	18800115 	stw	r2,4(r3)
   30de4:	008001c4 	movi	r2,7
   30de8:	19000015 	stw	r4,0(r3)
   30dec:	dc800e15 	stw	r18,56(sp)
   30df0:	dc400d15 	stw	r17,52(sp)
   30df4:	1441b616 	blt	r2,r17,314d0 <___vfprintf_internal_r+0xe38>
   30df8:	1cc00204 	addi	r19,r3,8
   30dfc:	d9014217 	ldw	r4,1288(sp)
   30e00:	d9414317 	ldw	r5,1292(sp)
   30e04:	000d883a 	mov	r6,zero
   30e08:	000f883a 	mov	r7,zero
   30e0c:	003914c0 	call	3914c <__nedf2>
   30e10:	10017426 	beq	r2,zero,313e4 <___vfprintf_internal_r+0xd4c>
   30e14:	d9414717 	ldw	r5,1308(sp)
   30e18:	d9814117 	ldw	r6,1284(sp)
   30e1c:	8c400044 	addi	r17,r17,1
   30e20:	2c85883a 	add	r2,r5,r18
   30e24:	14bfffc4 	addi	r18,r2,-1
   30e28:	28bfffc4 	addi	r2,r5,-1
   30e2c:	30c00044 	addi	r3,r6,1
   30e30:	98800115 	stw	r2,4(r19)
   30e34:	008001c4 	movi	r2,7
   30e38:	98c00015 	stw	r3,0(r19)
   30e3c:	dc800e15 	stw	r18,56(sp)
   30e40:	dc400d15 	stw	r17,52(sp)
   30e44:	14418e16 	blt	r2,r17,31480 <___vfprintf_internal_r+0xde8>
   30e48:	9cc00204 	addi	r19,r19,8
   30e4c:	d9414817 	ldw	r5,1312(sp)
   30e50:	d8800804 	addi	r2,sp,32
   30e54:	8c400044 	addi	r17,r17,1
   30e58:	9165883a 	add	r18,r18,r5
   30e5c:	98800015 	stw	r2,0(r19)
   30e60:	008001c4 	movi	r2,7
   30e64:	99400115 	stw	r5,4(r19)
   30e68:	dc800e15 	stw	r18,56(sp)
   30e6c:	dc400d15 	stw	r17,52(sp)
   30e70:	1440ed16 	blt	r2,r17,31228 <___vfprintf_internal_r+0xb90>
   30e74:	98c00204 	addi	r3,r19,8
   30e78:	003f8506 	br	30c90 <___vfprintf_internal_r+0x5f8>
   30e7c:	d9814a17 	ldw	r6,1320(sp)
   30e80:	d8814517 	ldw	r2,1300(sp)
   30e84:	30a1c83a 	sub	r16,r6,r2
   30e88:	043f4b0e 	bge	zero,r16,30bb8 <___vfprintf_internal_r+0x520>
   30e8c:	00800404 	movi	r2,16
   30e90:	14043a0e 	bge	r2,r16,31f7c <___vfprintf_internal_r+0x18e4>
   30e94:	1027883a 	mov	r19,r2
   30e98:	07000174 	movhi	fp,5
   30e9c:	e7202984 	addi	fp,fp,-32602
   30ea0:	050001c4 	movi	r20,7
   30ea4:	00000306 	br	30eb4 <___vfprintf_internal_r+0x81c>
   30ea8:	843ffc04 	addi	r16,r16,-16
   30eac:	ad400204 	addi	r21,r21,8
   30eb0:	9c00130e 	bge	r19,r16,30f00 <___vfprintf_internal_r+0x868>
   30eb4:	94800404 	addi	r18,r18,16
   30eb8:	8c400044 	addi	r17,r17,1
   30ebc:	af000015 	stw	fp,0(r21)
   30ec0:	acc00115 	stw	r19,4(r21)
   30ec4:	dc800e15 	stw	r18,56(sp)
   30ec8:	dc400d15 	stw	r17,52(sp)
   30ecc:	a47ff60e 	bge	r20,r17,30ea8 <___vfprintf_internal_r+0x810>
   30ed0:	d9014f17 	ldw	r4,1340(sp)
   30ed4:	b00b883a 	mov	r5,r22
   30ed8:	d9800c04 	addi	r6,sp,48
   30edc:	d9c15115 	stw	r7,1348(sp)
   30ee0:	00306400 	call	30640 <__sprint_r>
   30ee4:	d9c15117 	ldw	r7,1348(sp)
   30ee8:	103fa31e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   30eec:	843ffc04 	addi	r16,r16,-16
   30ef0:	dc800e17 	ldw	r18,56(sp)
   30ef4:	dc400d17 	ldw	r17,52(sp)
   30ef8:	dd401904 	addi	r21,sp,100
   30efc:	9c3fed16 	blt	r19,r16,30eb4 <___vfprintf_internal_r+0x81c>
   30f00:	9425883a 	add	r18,r18,r16
   30f04:	8c400044 	addi	r17,r17,1
   30f08:	008001c4 	movi	r2,7
   30f0c:	af000015 	stw	fp,0(r21)
   30f10:	ac000115 	stw	r16,4(r21)
   30f14:	dc800e15 	stw	r18,56(sp)
   30f18:	dc400d15 	stw	r17,52(sp)
   30f1c:	14416116 	blt	r2,r17,314a4 <___vfprintf_internal_r+0xe0c>
   30f20:	ad400204 	addi	r21,r21,8
   30f24:	003f2406 	br	30bb8 <___vfprintf_internal_r+0x520>
   30f28:	d9014f17 	ldw	r4,1340(sp)
   30f2c:	003414c0 	call	3414c <__sinit>
   30f30:	d9c15117 	ldw	r7,1348(sp)
   30f34:	003def06 	br	306f4 <___vfprintf_internal_r+0x5c>
   30f38:	d9014f17 	ldw	r4,1340(sp)
   30f3c:	b00b883a 	mov	r5,r22
   30f40:	d9c15115 	stw	r7,1348(sp)
   30f44:	00325800 	call	32580 <__swsetup_r>
   30f48:	d9c15117 	ldw	r7,1348(sp)
   30f4c:	103dee26 	beq	r2,zero,30708 <___vfprintf_internal_r+0x70>
   30f50:	003f8c06 	br	30d84 <___vfprintf_internal_r+0x6ec>
   30f54:	d9014217 	ldw	r4,1288(sp)
   30f58:	d9414317 	ldw	r5,1292(sp)
   30f5c:	000d883a 	mov	r6,zero
   30f60:	000f883a 	mov	r7,zero
   30f64:	00390c40 	call	390c4 <__eqdf2>
   30f68:	1000f21e 	bne	r2,zero,31334 <___vfprintf_internal_r+0xc9c>
   30f6c:	00800174 	movhi	r2,5
   30f70:	10a02904 	addi	r2,r2,-32604
   30f74:	94800044 	addi	r18,r18,1
   30f78:	8c400044 	addi	r17,r17,1
   30f7c:	a8800015 	stw	r2,0(r21)
   30f80:	00c00044 	movi	r3,1
   30f84:	008001c4 	movi	r2,7
   30f88:	a8c00115 	stw	r3,4(r21)
   30f8c:	dc800e15 	stw	r18,56(sp)
   30f90:	dc400d15 	stw	r17,52(sp)
   30f94:	14430016 	blt	r2,r17,31b98 <___vfprintf_internal_r+0x1500>
   30f98:	a8c00204 	addi	r3,r21,8
   30f9c:	d8800517 	ldw	r2,20(sp)
   30fa0:	d9014717 	ldw	r4,1308(sp)
   30fa4:	11015c0e 	bge	r2,r4,31518 <___vfprintf_internal_r+0xe80>
   30fa8:	dc400d17 	ldw	r17,52(sp)
   30fac:	d9814917 	ldw	r6,1316(sp)
   30fb0:	00800044 	movi	r2,1
   30fb4:	94800044 	addi	r18,r18,1
   30fb8:	8c400044 	addi	r17,r17,1
   30fbc:	18800115 	stw	r2,4(r3)
   30fc0:	008001c4 	movi	r2,7
   30fc4:	19800015 	stw	r6,0(r3)
   30fc8:	dc800e15 	stw	r18,56(sp)
   30fcc:	dc400d15 	stw	r17,52(sp)
   30fd0:	14431616 	blt	r2,r17,31c2c <___vfprintf_internal_r+0x1594>
   30fd4:	18c00204 	addi	r3,r3,8
   30fd8:	d8814717 	ldw	r2,1308(sp)
   30fdc:	143fffc4 	addi	r16,r2,-1
   30fe0:	043f2b0e 	bge	zero,r16,30c90 <___vfprintf_internal_r+0x5f8>
   30fe4:	00800404 	movi	r2,16
   30fe8:	1402a80e 	bge	r2,r16,31a8c <___vfprintf_internal_r+0x13f4>
   30fec:	dc400d17 	ldw	r17,52(sp)
   30ff0:	1027883a 	mov	r19,r2
   30ff4:	07000174 	movhi	fp,5
   30ff8:	e7202984 	addi	fp,fp,-32602
   30ffc:	050001c4 	movi	r20,7
   31000:	00000306 	br	31010 <___vfprintf_internal_r+0x978>
   31004:	18c00204 	addi	r3,r3,8
   31008:	843ffc04 	addi	r16,r16,-16
   3100c:	9c02a20e 	bge	r19,r16,31a98 <___vfprintf_internal_r+0x1400>
   31010:	94800404 	addi	r18,r18,16
   31014:	8c400044 	addi	r17,r17,1
   31018:	1f000015 	stw	fp,0(r3)
   3101c:	1cc00115 	stw	r19,4(r3)
   31020:	dc800e15 	stw	r18,56(sp)
   31024:	dc400d15 	stw	r17,52(sp)
   31028:	a47ff60e 	bge	r20,r17,31004 <___vfprintf_internal_r+0x96c>
   3102c:	d9014f17 	ldw	r4,1340(sp)
   31030:	b00b883a 	mov	r5,r22
   31034:	d9800c04 	addi	r6,sp,48
   31038:	00306400 	call	30640 <__sprint_r>
   3103c:	103f4e1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31040:	dc800e17 	ldw	r18,56(sp)
   31044:	dc400d17 	ldw	r17,52(sp)
   31048:	d8c01904 	addi	r3,sp,100
   3104c:	003fee06 	br	31008 <___vfprintf_internal_r+0x970>
   31050:	d8802c0b 	ldhu	r2,176(sp)
   31054:	00ffffc4 	movi	r3,-1
   31058:	d8c14b15 	stw	r3,1324(sp)
   3105c:	1080100c 	andi	r2,r2,64
   31060:	103dcc1e 	bne	r2,zero,30794 <___vfprintf_internal_r+0xfc>
   31064:	003dce06 	br	307a0 <___vfprintf_internal_r+0x108>
   31068:	d9014f17 	ldw	r4,1340(sp)
   3106c:	b00b883a 	mov	r5,r22
   31070:	d9800c04 	addi	r6,sp,48
   31074:	00306400 	call	30640 <__sprint_r>
   31078:	103f3f1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   3107c:	dc800e17 	ldw	r18,56(sp)
   31080:	003f2e06 	br	30d3c <___vfprintf_internal_r+0x6a4>
   31084:	d9414c17 	ldw	r5,1328(sp)
   31088:	29400414 	ori	r5,r5,16
   3108c:	d9414c15 	stw	r5,1328(sp)
   31090:	d9814c17 	ldw	r6,1328(sp)
   31094:	3080080c 	andi	r2,r6,32
   31098:	10014f1e 	bne	r2,zero,315d8 <___vfprintf_internal_r+0xf40>
   3109c:	d8c14c17 	ldw	r3,1328(sp)
   310a0:	1880040c 	andi	r2,r3,16
   310a4:	1002f01e 	bne	r2,zero,31c68 <___vfprintf_internal_r+0x15d0>
   310a8:	d9014c17 	ldw	r4,1328(sp)
   310ac:	2080100c 	andi	r2,r4,64
   310b0:	1002ed26 	beq	r2,zero,31c68 <___vfprintf_internal_r+0x15d0>
   310b4:	3880000f 	ldh	r2,0(r7)
   310b8:	39c00104 	addi	r7,r7,4
   310bc:	d9c14015 	stw	r7,1280(sp)
   310c0:	1023d7fa 	srai	r17,r2,31
   310c4:	1021883a 	mov	r16,r2
   310c8:	88037816 	blt	r17,zero,31eac <___vfprintf_internal_r+0x1814>
   310cc:	01000044 	movi	r4,1
   310d0:	98000416 	blt	r19,zero,310e4 <___vfprintf_internal_r+0xa4c>
   310d4:	d8c14c17 	ldw	r3,1328(sp)
   310d8:	00bfdfc4 	movi	r2,-129
   310dc:	1886703a 	and	r3,r3,r2
   310e0:	d8c14c15 	stw	r3,1328(sp)
   310e4:	8444b03a 	or	r2,r16,r17
   310e8:	10022c1e 	bne	r2,zero,3199c <___vfprintf_internal_r+0x1304>
   310ec:	98022b1e 	bne	r19,zero,3199c <___vfprintf_internal_r+0x1304>
   310f0:	20803fcc 	andi	r2,r4,255
   310f4:	1002a126 	beq	r2,zero,31b7c <___vfprintf_internal_r+0x14e4>
   310f8:	d8c01904 	addi	r3,sp,100
   310fc:	dd000f04 	addi	r20,sp,60
   31100:	d8c14115 	stw	r3,1284(sp)
   31104:	d8c14117 	ldw	r3,1284(sp)
   31108:	dcc14515 	stw	r19,1300(sp)
   3110c:	a0c5c83a 	sub	r2,r20,r3
   31110:	11c00a04 	addi	r7,r2,40
   31114:	99c0010e 	bge	r19,r7,3111c <___vfprintf_internal_r+0xa84>
   31118:	d9c14515 	stw	r7,1300(sp)
   3111c:	dcc14615 	stw	r19,1304(sp)
   31120:	d8800407 	ldb	r2,16(sp)
   31124:	103e4c26 	beq	r2,zero,30a58 <___vfprintf_internal_r+0x3c0>
   31128:	d8814517 	ldw	r2,1300(sp)
   3112c:	10800044 	addi	r2,r2,1
   31130:	d8814515 	stw	r2,1300(sp)
   31134:	003e4806 	br	30a58 <___vfprintf_internal_r+0x3c0>
   31138:	d9814c17 	ldw	r6,1328(sp)
   3113c:	31800414 	ori	r6,r6,16
   31140:	d9814c15 	stw	r6,1328(sp)
   31144:	d8c14c17 	ldw	r3,1328(sp)
   31148:	1880080c 	andi	r2,r3,32
   3114c:	1001271e 	bne	r2,zero,315ec <___vfprintf_internal_r+0xf54>
   31150:	d9414c17 	ldw	r5,1328(sp)
   31154:	2880040c 	andi	r2,r5,16
   31158:	1002bc1e 	bne	r2,zero,31c4c <___vfprintf_internal_r+0x15b4>
   3115c:	d9814c17 	ldw	r6,1328(sp)
   31160:	3080100c 	andi	r2,r6,64
   31164:	1002b926 	beq	r2,zero,31c4c <___vfprintf_internal_r+0x15b4>
   31168:	3c00000b 	ldhu	r16,0(r7)
   3116c:	0009883a 	mov	r4,zero
   31170:	39c00104 	addi	r7,r7,4
   31174:	0023883a 	mov	r17,zero
   31178:	d9c14015 	stw	r7,1280(sp)
   3117c:	d8000405 	stb	zero,16(sp)
   31180:	003fd306 	br	310d0 <___vfprintf_internal_r+0xa38>
   31184:	d9014c17 	ldw	r4,1328(sp)
   31188:	21000414 	ori	r4,r4,16
   3118c:	d9014c15 	stw	r4,1328(sp)
   31190:	d9414c17 	ldw	r5,1328(sp)
   31194:	2880080c 	andi	r2,r5,32
   31198:	1001081e 	bne	r2,zero,315bc <___vfprintf_internal_r+0xf24>
   3119c:	d8c14c17 	ldw	r3,1328(sp)
   311a0:	1880040c 	andi	r2,r3,16
   311a4:	1002b61e 	bne	r2,zero,31c80 <___vfprintf_internal_r+0x15e8>
   311a8:	d9014c17 	ldw	r4,1328(sp)
   311ac:	2080100c 	andi	r2,r4,64
   311b0:	1002b326 	beq	r2,zero,31c80 <___vfprintf_internal_r+0x15e8>
   311b4:	3c00000b 	ldhu	r16,0(r7)
   311b8:	01000044 	movi	r4,1
   311bc:	39c00104 	addi	r7,r7,4
   311c0:	0023883a 	mov	r17,zero
   311c4:	d9c14015 	stw	r7,1280(sp)
   311c8:	d8000405 	stb	zero,16(sp)
   311cc:	003fc006 	br	310d0 <___vfprintf_internal_r+0xa38>
   311d0:	d9014f17 	ldw	r4,1340(sp)
   311d4:	b00b883a 	mov	r5,r22
   311d8:	d9800c04 	addi	r6,sp,48
   311dc:	00306400 	call	30640 <__sprint_r>
   311e0:	103ee51e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   311e4:	dc800e17 	ldw	r18,56(sp)
   311e8:	d8c01904 	addi	r3,sp,100
   311ec:	d9814c17 	ldw	r6,1328(sp)
   311f0:	3080004c 	andi	r2,r6,1
   311f4:	1005003a 	cmpeq	r2,r2,zero
   311f8:	103ea51e 	bne	r2,zero,30c90 <___vfprintf_internal_r+0x5f8>
   311fc:	00800044 	movi	r2,1
   31200:	dc400d17 	ldw	r17,52(sp)
   31204:	18800115 	stw	r2,4(r3)
   31208:	d8814917 	ldw	r2,1316(sp)
   3120c:	94800044 	addi	r18,r18,1
   31210:	8c400044 	addi	r17,r17,1
   31214:	18800015 	stw	r2,0(r3)
   31218:	008001c4 	movi	r2,7
   3121c:	dc800e15 	stw	r18,56(sp)
   31220:	dc400d15 	stw	r17,52(sp)
   31224:	1442240e 	bge	r2,r17,31ab8 <___vfprintf_internal_r+0x1420>
   31228:	d9014f17 	ldw	r4,1340(sp)
   3122c:	b00b883a 	mov	r5,r22
   31230:	d9800c04 	addi	r6,sp,48
   31234:	00306400 	call	30640 <__sprint_r>
   31238:	103ecf1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   3123c:	dc800e17 	ldw	r18,56(sp)
   31240:	d8c01904 	addi	r3,sp,100
   31244:	003e9206 	br	30c90 <___vfprintf_internal_r+0x5f8>
   31248:	d9014f17 	ldw	r4,1340(sp)
   3124c:	b00b883a 	mov	r5,r22
   31250:	d9800c04 	addi	r6,sp,48
   31254:	00306400 	call	30640 <__sprint_r>
   31258:	103ec026 	beq	r2,zero,30d5c <___vfprintf_internal_r+0x6c4>
   3125c:	003ec606 	br	30d78 <___vfprintf_internal_r+0x6e0>
   31260:	d9014f17 	ldw	r4,1340(sp)
   31264:	b00b883a 	mov	r5,r22
   31268:	d9800c04 	addi	r6,sp,48
   3126c:	d9c15115 	stw	r7,1348(sp)
   31270:	00306400 	call	30640 <__sprint_r>
   31274:	d9c15117 	ldw	r7,1348(sp)
   31278:	103ebf1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   3127c:	dc800e17 	ldw	r18,56(sp)
   31280:	dc400d17 	ldw	r17,52(sp)
   31284:	dd401904 	addi	r21,sp,100
   31288:	003e7406 	br	30c5c <___vfprintf_internal_r+0x5c4>
   3128c:	d9014f17 	ldw	r4,1340(sp)
   31290:	b00b883a 	mov	r5,r22
   31294:	d9800c04 	addi	r6,sp,48
   31298:	d9c15115 	stw	r7,1348(sp)
   3129c:	00306400 	call	30640 <__sprint_r>
   312a0:	d9c15117 	ldw	r7,1348(sp)
   312a4:	103eb41e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   312a8:	dd401904 	addi	r21,sp,100
   312ac:	003d6d06 	br	30864 <___vfprintf_internal_r+0x1cc>
   312b0:	d9014f17 	ldw	r4,1340(sp)
   312b4:	b00b883a 	mov	r5,r22
   312b8:	d9800c04 	addi	r6,sp,48
   312bc:	d9c15115 	stw	r7,1348(sp)
   312c0:	00306400 	call	30640 <__sprint_r>
   312c4:	d9c15117 	ldw	r7,1348(sp)
   312c8:	103eab1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   312cc:	dc800e17 	ldw	r18,56(sp)
   312d0:	dc400d17 	ldw	r17,52(sp)
   312d4:	dd401904 	addi	r21,sp,100
   312d8:	003e3406 	br	30bac <___vfprintf_internal_r+0x514>
   312dc:	d9014f17 	ldw	r4,1340(sp)
   312e0:	b00b883a 	mov	r5,r22
   312e4:	d9800c04 	addi	r6,sp,48
   312e8:	d9c15115 	stw	r7,1348(sp)
   312ec:	00306400 	call	30640 <__sprint_r>
   312f0:	d9c15117 	ldw	r7,1348(sp)
   312f4:	103ea01e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   312f8:	dc800e17 	ldw	r18,56(sp)
   312fc:	dc400d17 	ldw	r17,52(sp)
   31300:	dd401904 	addi	r21,sp,100
   31304:	003e1c06 	br	30b78 <___vfprintf_internal_r+0x4e0>
   31308:	d9014f17 	ldw	r4,1340(sp)
   3130c:	b00b883a 	mov	r5,r22
   31310:	d9800c04 	addi	r6,sp,48
   31314:	d9c15115 	stw	r7,1348(sp)
   31318:	00306400 	call	30640 <__sprint_r>
   3131c:	d9c15117 	ldw	r7,1348(sp)
   31320:	103e951e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31324:	dc800e17 	ldw	r18,56(sp)
   31328:	dc400d17 	ldw	r17,52(sp)
   3132c:	dd401904 	addi	r21,sp,100
   31330:	003e0406 	br	30b44 <___vfprintf_internal_r+0x4ac>
   31334:	d9000517 	ldw	r4,20(sp)
   31338:	0102580e 	bge	zero,r4,31c9c <___vfprintf_internal_r+0x1604>
   3133c:	d9814717 	ldw	r6,1308(sp)
   31340:	21807a16 	blt	r4,r6,3152c <___vfprintf_internal_r+0xe94>
   31344:	d8814117 	ldw	r2,1284(sp)
   31348:	91a5883a 	add	r18,r18,r6
   3134c:	8c400044 	addi	r17,r17,1
   31350:	a8800015 	stw	r2,0(r21)
   31354:	008001c4 	movi	r2,7
   31358:	a9800115 	stw	r6,4(r21)
   3135c:	dc800e15 	stw	r18,56(sp)
   31360:	dc400d15 	stw	r17,52(sp)
   31364:	1442fc16 	blt	r2,r17,31f58 <___vfprintf_internal_r+0x18c0>
   31368:	a8c00204 	addi	r3,r21,8
   3136c:	d9414717 	ldw	r5,1308(sp)
   31370:	2161c83a 	sub	r16,r4,r5
   31374:	043f9d0e 	bge	zero,r16,311ec <___vfprintf_internal_r+0xb54>
   31378:	00800404 	movi	r2,16
   3137c:	1402190e 	bge	r2,r16,31be4 <___vfprintf_internal_r+0x154c>
   31380:	dc400d17 	ldw	r17,52(sp)
   31384:	1027883a 	mov	r19,r2
   31388:	07000174 	movhi	fp,5
   3138c:	e7202984 	addi	fp,fp,-32602
   31390:	050001c4 	movi	r20,7
   31394:	00000306 	br	313a4 <___vfprintf_internal_r+0xd0c>
   31398:	18c00204 	addi	r3,r3,8
   3139c:	843ffc04 	addi	r16,r16,-16
   313a0:	9c02130e 	bge	r19,r16,31bf0 <___vfprintf_internal_r+0x1558>
   313a4:	94800404 	addi	r18,r18,16
   313a8:	8c400044 	addi	r17,r17,1
   313ac:	1f000015 	stw	fp,0(r3)
   313b0:	1cc00115 	stw	r19,4(r3)
   313b4:	dc800e15 	stw	r18,56(sp)
   313b8:	dc400d15 	stw	r17,52(sp)
   313bc:	a47ff60e 	bge	r20,r17,31398 <___vfprintf_internal_r+0xd00>
   313c0:	d9014f17 	ldw	r4,1340(sp)
   313c4:	b00b883a 	mov	r5,r22
   313c8:	d9800c04 	addi	r6,sp,48
   313cc:	00306400 	call	30640 <__sprint_r>
   313d0:	103e691e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   313d4:	dc800e17 	ldw	r18,56(sp)
   313d8:	dc400d17 	ldw	r17,52(sp)
   313dc:	d8c01904 	addi	r3,sp,100
   313e0:	003fee06 	br	3139c <___vfprintf_internal_r+0xd04>
   313e4:	d8814717 	ldw	r2,1308(sp)
   313e8:	143fffc4 	addi	r16,r2,-1
   313ec:	043e970e 	bge	zero,r16,30e4c <___vfprintf_internal_r+0x7b4>
   313f0:	00800404 	movi	r2,16
   313f4:	1400180e 	bge	r2,r16,31458 <___vfprintf_internal_r+0xdc0>
   313f8:	1029883a 	mov	r20,r2
   313fc:	07000174 	movhi	fp,5
   31400:	e7202984 	addi	fp,fp,-32602
   31404:	054001c4 	movi	r21,7
   31408:	00000306 	br	31418 <___vfprintf_internal_r+0xd80>
   3140c:	9cc00204 	addi	r19,r19,8
   31410:	843ffc04 	addi	r16,r16,-16
   31414:	a400120e 	bge	r20,r16,31460 <___vfprintf_internal_r+0xdc8>
   31418:	94800404 	addi	r18,r18,16
   3141c:	8c400044 	addi	r17,r17,1
   31420:	9f000015 	stw	fp,0(r19)
   31424:	9d000115 	stw	r20,4(r19)
   31428:	dc800e15 	stw	r18,56(sp)
   3142c:	dc400d15 	stw	r17,52(sp)
   31430:	ac7ff60e 	bge	r21,r17,3140c <___vfprintf_internal_r+0xd74>
   31434:	d9014f17 	ldw	r4,1340(sp)
   31438:	b00b883a 	mov	r5,r22
   3143c:	d9800c04 	addi	r6,sp,48
   31440:	00306400 	call	30640 <__sprint_r>
   31444:	103e4c1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31448:	dc800e17 	ldw	r18,56(sp)
   3144c:	dc400d17 	ldw	r17,52(sp)
   31450:	dcc01904 	addi	r19,sp,100
   31454:	003fee06 	br	31410 <___vfprintf_internal_r+0xd78>
   31458:	07000174 	movhi	fp,5
   3145c:	e7202984 	addi	fp,fp,-32602
   31460:	9425883a 	add	r18,r18,r16
   31464:	8c400044 	addi	r17,r17,1
   31468:	008001c4 	movi	r2,7
   3146c:	9f000015 	stw	fp,0(r19)
   31470:	9c000115 	stw	r16,4(r19)
   31474:	dc800e15 	stw	r18,56(sp)
   31478:	dc400d15 	stw	r17,52(sp)
   3147c:	147e720e 	bge	r2,r17,30e48 <___vfprintf_internal_r+0x7b0>
   31480:	d9014f17 	ldw	r4,1340(sp)
   31484:	b00b883a 	mov	r5,r22
   31488:	d9800c04 	addi	r6,sp,48
   3148c:	00306400 	call	30640 <__sprint_r>
   31490:	103e391e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31494:	dc800e17 	ldw	r18,56(sp)
   31498:	dc400d17 	ldw	r17,52(sp)
   3149c:	dcc01904 	addi	r19,sp,100
   314a0:	003e6a06 	br	30e4c <___vfprintf_internal_r+0x7b4>
   314a4:	d9014f17 	ldw	r4,1340(sp)
   314a8:	b00b883a 	mov	r5,r22
   314ac:	d9800c04 	addi	r6,sp,48
   314b0:	d9c15115 	stw	r7,1348(sp)
   314b4:	00306400 	call	30640 <__sprint_r>
   314b8:	d9c15117 	ldw	r7,1348(sp)
   314bc:	103e2e1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   314c0:	dc800e17 	ldw	r18,56(sp)
   314c4:	dc400d17 	ldw	r17,52(sp)
   314c8:	dd401904 	addi	r21,sp,100
   314cc:	003dba06 	br	30bb8 <___vfprintf_internal_r+0x520>
   314d0:	d9014f17 	ldw	r4,1340(sp)
   314d4:	b00b883a 	mov	r5,r22
   314d8:	d9800c04 	addi	r6,sp,48
   314dc:	00306400 	call	30640 <__sprint_r>
   314e0:	103e251e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   314e4:	dc800e17 	ldw	r18,56(sp)
   314e8:	dc400d17 	ldw	r17,52(sp)
   314ec:	dcc01904 	addi	r19,sp,100
   314f0:	003e4206 	br	30dfc <___vfprintf_internal_r+0x764>
   314f4:	d9014f17 	ldw	r4,1340(sp)
   314f8:	b00b883a 	mov	r5,r22
   314fc:	d9800c04 	addi	r6,sp,48
   31500:	00306400 	call	30640 <__sprint_r>
   31504:	103e1c1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31508:	dc800e17 	ldw	r18,56(sp)
   3150c:	dc400d17 	ldw	r17,52(sp)
   31510:	d8c01904 	addi	r3,sp,100
   31514:	003e2e06 	br	30dd0 <___vfprintf_internal_r+0x738>
   31518:	d9414c17 	ldw	r5,1328(sp)
   3151c:	2880004c 	andi	r2,r5,1
   31520:	1005003a 	cmpeq	r2,r2,zero
   31524:	103dda1e 	bne	r2,zero,30c90 <___vfprintf_internal_r+0x5f8>
   31528:	003e9f06 	br	30fa8 <___vfprintf_internal_r+0x910>
   3152c:	d8c14117 	ldw	r3,1284(sp)
   31530:	9125883a 	add	r18,r18,r4
   31534:	8c400044 	addi	r17,r17,1
   31538:	008001c4 	movi	r2,7
   3153c:	a8c00015 	stw	r3,0(r21)
   31540:	a9000115 	stw	r4,4(r21)
   31544:	dc800e15 	stw	r18,56(sp)
   31548:	dc400d15 	stw	r17,52(sp)
   3154c:	14426c16 	blt	r2,r17,31f00 <___vfprintf_internal_r+0x1868>
   31550:	a8c00204 	addi	r3,r21,8
   31554:	d9414917 	ldw	r5,1316(sp)
   31558:	00800044 	movi	r2,1
   3155c:	94800044 	addi	r18,r18,1
   31560:	8c400044 	addi	r17,r17,1
   31564:	18800115 	stw	r2,4(r3)
   31568:	008001c4 	movi	r2,7
   3156c:	19400015 	stw	r5,0(r3)
   31570:	dc800e15 	stw	r18,56(sp)
   31574:	dc400d15 	stw	r17,52(sp)
   31578:	2021883a 	mov	r16,r4
   3157c:	14425616 	blt	r2,r17,31ed8 <___vfprintf_internal_r+0x1840>
   31580:	19400204 	addi	r5,r3,8
   31584:	d9814717 	ldw	r6,1308(sp)
   31588:	8c400044 	addi	r17,r17,1
   3158c:	dc400d15 	stw	r17,52(sp)
   31590:	3107c83a 	sub	r3,r6,r4
   31594:	d9014117 	ldw	r4,1284(sp)
   31598:	90e5883a 	add	r18,r18,r3
   3159c:	28c00115 	stw	r3,4(r5)
   315a0:	8105883a 	add	r2,r16,r4
   315a4:	28800015 	stw	r2,0(r5)
   315a8:	008001c4 	movi	r2,7
   315ac:	dc800e15 	stw	r18,56(sp)
   315b0:	147f1d16 	blt	r2,r17,31228 <___vfprintf_internal_r+0xb90>
   315b4:	28c00204 	addi	r3,r5,8
   315b8:	003db506 	br	30c90 <___vfprintf_internal_r+0x5f8>
   315bc:	3c000017 	ldw	r16,0(r7)
   315c0:	3c400117 	ldw	r17,4(r7)
   315c4:	39800204 	addi	r6,r7,8
   315c8:	01000044 	movi	r4,1
   315cc:	d9814015 	stw	r6,1280(sp)
   315d0:	d8000405 	stb	zero,16(sp)
   315d4:	003ebe06 	br	310d0 <___vfprintf_internal_r+0xa38>
   315d8:	3c000017 	ldw	r16,0(r7)
   315dc:	3c400117 	ldw	r17,4(r7)
   315e0:	38800204 	addi	r2,r7,8
   315e4:	d8814015 	stw	r2,1280(sp)
   315e8:	003eb706 	br	310c8 <___vfprintf_internal_r+0xa30>
   315ec:	3c000017 	ldw	r16,0(r7)
   315f0:	3c400117 	ldw	r17,4(r7)
   315f4:	39000204 	addi	r4,r7,8
   315f8:	d9014015 	stw	r4,1280(sp)
   315fc:	0009883a 	mov	r4,zero
   31600:	d8000405 	stb	zero,16(sp)
   31604:	003eb206 	br	310d0 <___vfprintf_internal_r+0xa38>
   31608:	38c00017 	ldw	r3,0(r7)
   3160c:	39c00104 	addi	r7,r7,4
   31610:	d8c14a15 	stw	r3,1320(sp)
   31614:	1800d70e 	bge	r3,zero,31974 <___vfprintf_internal_r+0x12dc>
   31618:	00c7c83a 	sub	r3,zero,r3
   3161c:	d8c14a15 	stw	r3,1320(sp)
   31620:	d9014c17 	ldw	r4,1328(sp)
   31624:	b8c00007 	ldb	r3,0(r23)
   31628:	21000114 	ori	r4,r4,4
   3162c:	d9014c15 	stw	r4,1328(sp)
   31630:	003c9806 	br	30894 <___vfprintf_internal_r+0x1fc>
   31634:	d9814c17 	ldw	r6,1328(sp)
   31638:	3080080c 	andi	r2,r6,32
   3163c:	1001f626 	beq	r2,zero,31e18 <___vfprintf_internal_r+0x1780>
   31640:	d9014b17 	ldw	r4,1324(sp)
   31644:	38800017 	ldw	r2,0(r7)
   31648:	39c00104 	addi	r7,r7,4
   3164c:	d9c14015 	stw	r7,1280(sp)
   31650:	2007d7fa 	srai	r3,r4,31
   31654:	d9c14017 	ldw	r7,1280(sp)
   31658:	11000015 	stw	r4,0(r2)
   3165c:	10c00115 	stw	r3,4(r2)
   31660:	003c6906 	br	30808 <___vfprintf_internal_r+0x170>
   31664:	b8c00007 	ldb	r3,0(r23)
   31668:	00801b04 	movi	r2,108
   3166c:	18825526 	beq	r3,r2,31fc4 <___vfprintf_internal_r+0x192c>
   31670:	d9414c17 	ldw	r5,1328(sp)
   31674:	29400414 	ori	r5,r5,16
   31678:	d9414c15 	stw	r5,1328(sp)
   3167c:	003c8506 	br	30894 <___vfprintf_internal_r+0x1fc>
   31680:	d9814c17 	ldw	r6,1328(sp)
   31684:	b8c00007 	ldb	r3,0(r23)
   31688:	31800814 	ori	r6,r6,32
   3168c:	d9814c15 	stw	r6,1328(sp)
   31690:	003c8006 	br	30894 <___vfprintf_internal_r+0x1fc>
   31694:	d8814c17 	ldw	r2,1328(sp)
   31698:	3c000017 	ldw	r16,0(r7)
   3169c:	00c01e04 	movi	r3,120
   316a0:	10800094 	ori	r2,r2,2
   316a4:	d8814c15 	stw	r2,1328(sp)
   316a8:	39c00104 	addi	r7,r7,4
   316ac:	01400174 	movhi	r5,5
   316b0:	29601204 	addi	r5,r5,-32696
   316b4:	00800c04 	movi	r2,48
   316b8:	0023883a 	mov	r17,zero
   316bc:	01000084 	movi	r4,2
   316c0:	d9c14015 	stw	r7,1280(sp)
   316c4:	d8c14d15 	stw	r3,1332(sp)
   316c8:	d9414415 	stw	r5,1296(sp)
   316cc:	d8800445 	stb	r2,17(sp)
   316d0:	d8c00485 	stb	r3,18(sp)
   316d4:	d8000405 	stb	zero,16(sp)
   316d8:	003e7d06 	br	310d0 <___vfprintf_internal_r+0xa38>
   316dc:	d8814c17 	ldw	r2,1328(sp)
   316e0:	b8c00007 	ldb	r3,0(r23)
   316e4:	10801014 	ori	r2,r2,64
   316e8:	d8814c15 	stw	r2,1328(sp)
   316ec:	003c6906 	br	30894 <___vfprintf_internal_r+0x1fc>
   316f0:	d9414c17 	ldw	r5,1328(sp)
   316f4:	2880020c 	andi	r2,r5,8
   316f8:	1001e526 	beq	r2,zero,31e90 <___vfprintf_internal_r+0x17f8>
   316fc:	39800017 	ldw	r6,0(r7)
   31700:	38800204 	addi	r2,r7,8
   31704:	d8814015 	stw	r2,1280(sp)
   31708:	d9814215 	stw	r6,1288(sp)
   3170c:	39c00117 	ldw	r7,4(r7)
   31710:	d9c14315 	stw	r7,1292(sp)
   31714:	d9014217 	ldw	r4,1288(sp)
   31718:	d9414317 	ldw	r5,1292(sp)
   3171c:	00371480 	call	37148 <__isinfd>
   31720:	10021d26 	beq	r2,zero,31f98 <___vfprintf_internal_r+0x1900>
   31724:	d9014217 	ldw	r4,1288(sp)
   31728:	d9414317 	ldw	r5,1292(sp)
   3172c:	000d883a 	mov	r6,zero
   31730:	000f883a 	mov	r7,zero
   31734:	00392e40 	call	392e4 <__ltdf2>
   31738:	1002d016 	blt	r2,zero,3227c <___vfprintf_internal_r+0x1be4>
   3173c:	d9414d17 	ldw	r5,1332(sp)
   31740:	008011c4 	movi	r2,71
   31744:	11421016 	blt	r2,r5,31f88 <___vfprintf_internal_r+0x18f0>
   31748:	01800174 	movhi	r6,5
   3174c:	31a01704 	addi	r6,r6,-32676
   31750:	d9814115 	stw	r6,1284(sp)
   31754:	d9014c17 	ldw	r4,1328(sp)
   31758:	00c000c4 	movi	r3,3
   3175c:	00bfdfc4 	movi	r2,-129
   31760:	2088703a 	and	r4,r4,r2
   31764:	180f883a 	mov	r7,r3
   31768:	d8c14515 	stw	r3,1300(sp)
   3176c:	d9014c15 	stw	r4,1328(sp)
   31770:	d8014615 	stw	zero,1304(sp)
   31774:	003e6a06 	br	31120 <___vfprintf_internal_r+0xa88>
   31778:	38800017 	ldw	r2,0(r7)
   3177c:	00c00044 	movi	r3,1
   31780:	39c00104 	addi	r7,r7,4
   31784:	d9c14015 	stw	r7,1280(sp)
   31788:	d9000f04 	addi	r4,sp,60
   3178c:	180f883a 	mov	r7,r3
   31790:	d8c14515 	stw	r3,1300(sp)
   31794:	d9014115 	stw	r4,1284(sp)
   31798:	d8800f05 	stb	r2,60(sp)
   3179c:	d8000405 	stb	zero,16(sp)
   317a0:	003cac06 	br	30a54 <___vfprintf_internal_r+0x3bc>
   317a4:	01400174 	movhi	r5,5
   317a8:	29601d04 	addi	r5,r5,-32652
   317ac:	d9414415 	stw	r5,1296(sp)
   317b0:	d9814c17 	ldw	r6,1328(sp)
   317b4:	3080080c 	andi	r2,r6,32
   317b8:	1000ff26 	beq	r2,zero,31bb8 <___vfprintf_internal_r+0x1520>
   317bc:	3c000017 	ldw	r16,0(r7)
   317c0:	3c400117 	ldw	r17,4(r7)
   317c4:	38800204 	addi	r2,r7,8
   317c8:	d8814015 	stw	r2,1280(sp)
   317cc:	d9414c17 	ldw	r5,1328(sp)
   317d0:	2880004c 	andi	r2,r5,1
   317d4:	1005003a 	cmpeq	r2,r2,zero
   317d8:	1000b91e 	bne	r2,zero,31ac0 <___vfprintf_internal_r+0x1428>
   317dc:	8444b03a 	or	r2,r16,r17
   317e0:	1000b726 	beq	r2,zero,31ac0 <___vfprintf_internal_r+0x1428>
   317e4:	d9814d17 	ldw	r6,1332(sp)
   317e8:	29400094 	ori	r5,r5,2
   317ec:	00800c04 	movi	r2,48
   317f0:	01000084 	movi	r4,2
   317f4:	d9414c15 	stw	r5,1328(sp)
   317f8:	d8800445 	stb	r2,17(sp)
   317fc:	d9800485 	stb	r6,18(sp)
   31800:	d8000405 	stb	zero,16(sp)
   31804:	003e3206 	br	310d0 <___vfprintf_internal_r+0xa38>
   31808:	01800174 	movhi	r6,5
   3180c:	31a01204 	addi	r6,r6,-32696
   31810:	d9814415 	stw	r6,1296(sp)
   31814:	003fe606 	br	317b0 <___vfprintf_internal_r+0x1118>
   31818:	00800ac4 	movi	r2,43
   3181c:	d8800405 	stb	r2,16(sp)
   31820:	b8c00007 	ldb	r3,0(r23)
   31824:	003c1b06 	br	30894 <___vfprintf_internal_r+0x1fc>
   31828:	d8814c17 	ldw	r2,1328(sp)
   3182c:	b8c00007 	ldb	r3,0(r23)
   31830:	10800054 	ori	r2,r2,1
   31834:	d8814c15 	stw	r2,1328(sp)
   31838:	003c1606 	br	30894 <___vfprintf_internal_r+0x1fc>
   3183c:	d8800407 	ldb	r2,16(sp)
   31840:	10004c1e 	bne	r2,zero,31974 <___vfprintf_internal_r+0x12dc>
   31844:	00800804 	movi	r2,32
   31848:	d8800405 	stb	r2,16(sp)
   3184c:	b8c00007 	ldb	r3,0(r23)
   31850:	003c1006 	br	30894 <___vfprintf_internal_r+0x1fc>
   31854:	d9814c17 	ldw	r6,1328(sp)
   31858:	b8c00007 	ldb	r3,0(r23)
   3185c:	31800214 	ori	r6,r6,8
   31860:	d9814c15 	stw	r6,1328(sp)
   31864:	003c0b06 	br	30894 <___vfprintf_internal_r+0x1fc>
   31868:	0009883a 	mov	r4,zero
   3186c:	04000244 	movi	r16,9
   31870:	01400284 	movi	r5,10
   31874:	d9c15115 	stw	r7,1348(sp)
   31878:	003981c0 	call	3981c <__mulsi3>
   3187c:	b9000007 	ldb	r4,0(r23)
   31880:	d8c14d17 	ldw	r3,1332(sp)
   31884:	bdc00044 	addi	r23,r23,1
   31888:	d9014d15 	stw	r4,1332(sp)
   3188c:	d9414d17 	ldw	r5,1332(sp)
   31890:	1885883a 	add	r2,r3,r2
   31894:	113ff404 	addi	r4,r2,-48
   31898:	28bff404 	addi	r2,r5,-48
   3189c:	d9c15117 	ldw	r7,1348(sp)
   318a0:	80bff32e 	bgeu	r16,r2,31870 <___vfprintf_internal_r+0x11d8>
   318a4:	d9014a15 	stw	r4,1320(sp)
   318a8:	003bfc06 	br	3089c <___vfprintf_internal_r+0x204>
   318ac:	d8814c17 	ldw	r2,1328(sp)
   318b0:	b8c00007 	ldb	r3,0(r23)
   318b4:	10802014 	ori	r2,r2,128
   318b8:	d8814c15 	stw	r2,1328(sp)
   318bc:	003bf506 	br	30894 <___vfprintf_internal_r+0x1fc>
   318c0:	b8c00007 	ldb	r3,0(r23)
   318c4:	00800a84 	movi	r2,42
   318c8:	bdc00044 	addi	r23,r23,1
   318cc:	18831826 	beq	r3,r2,32530 <___vfprintf_internal_r+0x1e98>
   318d0:	d8c14d15 	stw	r3,1332(sp)
   318d4:	18bff404 	addi	r2,r3,-48
   318d8:	00c00244 	movi	r3,9
   318dc:	18827b36 	bltu	r3,r2,322cc <___vfprintf_internal_r+0x1c34>
   318e0:	1821883a 	mov	r16,r3
   318e4:	0009883a 	mov	r4,zero
   318e8:	01400284 	movi	r5,10
   318ec:	d9c15115 	stw	r7,1348(sp)
   318f0:	003981c0 	call	3981c <__mulsi3>
   318f4:	d9414d17 	ldw	r5,1332(sp)
   318f8:	b9800007 	ldb	r6,0(r23)
   318fc:	d9c15117 	ldw	r7,1348(sp)
   31900:	1145883a 	add	r2,r2,r5
   31904:	113ff404 	addi	r4,r2,-48
   31908:	30bff404 	addi	r2,r6,-48
   3190c:	d9814d15 	stw	r6,1332(sp)
   31910:	bdc00044 	addi	r23,r23,1
   31914:	80bff42e 	bgeu	r16,r2,318e8 <___vfprintf_internal_r+0x1250>
   31918:	2027883a 	mov	r19,r4
   3191c:	203bdf0e 	bge	r4,zero,3089c <___vfprintf_internal_r+0x204>
   31920:	04ffffc4 	movi	r19,-1
   31924:	003bdd06 	br	3089c <___vfprintf_internal_r+0x204>
   31928:	d8000405 	stb	zero,16(sp)
   3192c:	39800017 	ldw	r6,0(r7)
   31930:	39c00104 	addi	r7,r7,4
   31934:	d9c14015 	stw	r7,1280(sp)
   31938:	d9814115 	stw	r6,1284(sp)
   3193c:	3001c926 	beq	r6,zero,32064 <___vfprintf_internal_r+0x19cc>
   31940:	98000e16 	blt	r19,zero,3197c <___vfprintf_internal_r+0x12e4>
   31944:	d9014117 	ldw	r4,1284(sp)
   31948:	000b883a 	mov	r5,zero
   3194c:	980d883a 	mov	r6,r19
   31950:	00357cc0 	call	357cc <memchr>
   31954:	10025926 	beq	r2,zero,322bc <___vfprintf_internal_r+0x1c24>
   31958:	d8c14117 	ldw	r3,1284(sp)
   3195c:	10cfc83a 	sub	r7,r2,r3
   31960:	99c19e16 	blt	r19,r7,31fdc <___vfprintf_internal_r+0x1944>
   31964:	d9c14515 	stw	r7,1300(sp)
   31968:	38000916 	blt	r7,zero,31990 <___vfprintf_internal_r+0x12f8>
   3196c:	d8014615 	stw	zero,1304(sp)
   31970:	003deb06 	br	31120 <___vfprintf_internal_r+0xa88>
   31974:	b8c00007 	ldb	r3,0(r23)
   31978:	003bc606 	br	30894 <___vfprintf_internal_r+0x1fc>
   3197c:	d9014117 	ldw	r4,1284(sp)
   31980:	00305cc0 	call	305cc <strlen>
   31984:	d8814515 	stw	r2,1300(sp)
   31988:	100f883a 	mov	r7,r2
   3198c:	103ff70e 	bge	r2,zero,3196c <___vfprintf_internal_r+0x12d4>
   31990:	d8014515 	stw	zero,1300(sp)
   31994:	d8014615 	stw	zero,1304(sp)
   31998:	003de106 	br	31120 <___vfprintf_internal_r+0xa88>
   3199c:	20c03fcc 	andi	r3,r4,255
   319a0:	00800044 	movi	r2,1
   319a4:	18802d26 	beq	r3,r2,31a5c <___vfprintf_internal_r+0x13c4>
   319a8:	18800e36 	bltu	r3,r2,319e4 <___vfprintf_internal_r+0x134c>
   319ac:	00800084 	movi	r2,2
   319b0:	1880fa26 	beq	r3,r2,31d9c <___vfprintf_internal_r+0x1704>
   319b4:	01000174 	movhi	r4,5
   319b8:	21202204 	addi	r4,r4,-32632
   319bc:	00305cc0 	call	305cc <strlen>
   319c0:	100f883a 	mov	r7,r2
   319c4:	dcc14515 	stw	r19,1300(sp)
   319c8:	9880010e 	bge	r19,r2,319d0 <___vfprintf_internal_r+0x1338>
   319cc:	d8814515 	stw	r2,1300(sp)
   319d0:	00800174 	movhi	r2,5
   319d4:	10a02204 	addi	r2,r2,-32632
   319d8:	dcc14615 	stw	r19,1304(sp)
   319dc:	d8814115 	stw	r2,1284(sp)
   319e0:	003dcf06 	br	31120 <___vfprintf_internal_r+0xa88>
   319e4:	d9401904 	addi	r5,sp,100
   319e8:	dd000f04 	addi	r20,sp,60
   319ec:	d9414115 	stw	r5,1284(sp)
   319f0:	880a977a 	slli	r5,r17,29
   319f4:	d9814117 	ldw	r6,1284(sp)
   319f8:	8004d0fa 	srli	r2,r16,3
   319fc:	8806d0fa 	srli	r3,r17,3
   31a00:	810001cc 	andi	r4,r16,7
   31a04:	2884b03a 	or	r2,r5,r2
   31a08:	31bfffc4 	addi	r6,r6,-1
   31a0c:	21000c04 	addi	r4,r4,48
   31a10:	d9814115 	stw	r6,1284(sp)
   31a14:	10cab03a 	or	r5,r2,r3
   31a18:	31000005 	stb	r4,0(r6)
   31a1c:	1021883a 	mov	r16,r2
   31a20:	1823883a 	mov	r17,r3
   31a24:	283ff21e 	bne	r5,zero,319f0 <___vfprintf_internal_r+0x1358>
   31a28:	d8c14c17 	ldw	r3,1328(sp)
   31a2c:	1880004c 	andi	r2,r3,1
   31a30:	1005003a 	cmpeq	r2,r2,zero
   31a34:	103db31e 	bne	r2,zero,31104 <___vfprintf_internal_r+0xa6c>
   31a38:	20803fcc 	andi	r2,r4,255
   31a3c:	1080201c 	xori	r2,r2,128
   31a40:	10bfe004 	addi	r2,r2,-128
   31a44:	00c00c04 	movi	r3,48
   31a48:	10fdae26 	beq	r2,r3,31104 <___vfprintf_internal_r+0xa6c>
   31a4c:	31bfffc4 	addi	r6,r6,-1
   31a50:	d9814115 	stw	r6,1284(sp)
   31a54:	30c00005 	stb	r3,0(r6)
   31a58:	003daa06 	br	31104 <___vfprintf_internal_r+0xa6c>
   31a5c:	88800068 	cmpgeui	r2,r17,1
   31a60:	10002c1e 	bne	r2,zero,31b14 <___vfprintf_internal_r+0x147c>
   31a64:	8800021e 	bne	r17,zero,31a70 <___vfprintf_internal_r+0x13d8>
   31a68:	00800244 	movi	r2,9
   31a6c:	14002936 	bltu	r2,r16,31b14 <___vfprintf_internal_r+0x147c>
   31a70:	d90018c4 	addi	r4,sp,99
   31a74:	dd000f04 	addi	r20,sp,60
   31a78:	d9014115 	stw	r4,1284(sp)
   31a7c:	d9014117 	ldw	r4,1284(sp)
   31a80:	80800c04 	addi	r2,r16,48
   31a84:	20800005 	stb	r2,0(r4)
   31a88:	003d9e06 	br	31104 <___vfprintf_internal_r+0xa6c>
   31a8c:	dc400d17 	ldw	r17,52(sp)
   31a90:	07000174 	movhi	fp,5
   31a94:	e7202984 	addi	fp,fp,-32602
   31a98:	9425883a 	add	r18,r18,r16
   31a9c:	8c400044 	addi	r17,r17,1
   31aa0:	008001c4 	movi	r2,7
   31aa4:	1f000015 	stw	fp,0(r3)
   31aa8:	1c000115 	stw	r16,4(r3)
   31aac:	dc800e15 	stw	r18,56(sp)
   31ab0:	dc400d15 	stw	r17,52(sp)
   31ab4:	147ddc16 	blt	r2,r17,31228 <___vfprintf_internal_r+0xb90>
   31ab8:	18c00204 	addi	r3,r3,8
   31abc:	003c7406 	br	30c90 <___vfprintf_internal_r+0x5f8>
   31ac0:	01000084 	movi	r4,2
   31ac4:	d8000405 	stb	zero,16(sp)
   31ac8:	003d8106 	br	310d0 <___vfprintf_internal_r+0xa38>
   31acc:	d9814c17 	ldw	r6,1328(sp)
   31ad0:	30c4703a 	and	r2,r6,r3
   31ad4:	1005003a 	cmpeq	r2,r2,zero
   31ad8:	103cb326 	beq	r2,zero,30da8 <___vfprintf_internal_r+0x710>
   31adc:	d9014117 	ldw	r4,1284(sp)
   31ae0:	94800044 	addi	r18,r18,1
   31ae4:	8c400044 	addi	r17,r17,1
   31ae8:	008001c4 	movi	r2,7
   31aec:	a9000015 	stw	r4,0(r21)
   31af0:	a8c00115 	stw	r3,4(r21)
   31af4:	dc800e15 	stw	r18,56(sp)
   31af8:	dc400d15 	stw	r17,52(sp)
   31afc:	147e6016 	blt	r2,r17,31480 <___vfprintf_internal_r+0xde8>
   31b00:	acc00204 	addi	r19,r21,8
   31b04:	003cd106 	br	30e4c <___vfprintf_internal_r+0x7b4>
   31b08:	07000174 	movhi	fp,5
   31b0c:	e7202984 	addi	fp,fp,-32602
   31b10:	003c4906 	br	30c38 <___vfprintf_internal_r+0x5a0>
   31b14:	dd000f04 	addi	r20,sp,60
   31b18:	dc801904 	addi	r18,sp,100
   31b1c:	8009883a 	mov	r4,r16
   31b20:	880b883a 	mov	r5,r17
   31b24:	01800284 	movi	r6,10
   31b28:	000f883a 	mov	r7,zero
   31b2c:	0037f440 	call	37f44 <__umoddi3>
   31b30:	12000c04 	addi	r8,r2,48
   31b34:	94bfffc4 	addi	r18,r18,-1
   31b38:	8009883a 	mov	r4,r16
   31b3c:	880b883a 	mov	r5,r17
   31b40:	01800284 	movi	r6,10
   31b44:	000f883a 	mov	r7,zero
   31b48:	92000005 	stb	r8,0(r18)
   31b4c:	00378d80 	call	378d8 <__udivdi3>
   31b50:	1009883a 	mov	r4,r2
   31b54:	1021883a 	mov	r16,r2
   31b58:	18800068 	cmpgeui	r2,r3,1
   31b5c:	1823883a 	mov	r17,r3
   31b60:	103fee1e 	bne	r2,zero,31b1c <___vfprintf_internal_r+0x1484>
   31b64:	1800021e 	bne	r3,zero,31b70 <___vfprintf_internal_r+0x14d8>
   31b68:	00800244 	movi	r2,9
   31b6c:	113feb36 	bltu	r2,r4,31b1c <___vfprintf_internal_r+0x1484>
   31b70:	94bfffc4 	addi	r18,r18,-1
   31b74:	dc814115 	stw	r18,1284(sp)
   31b78:	003fc006 	br	31a7c <___vfprintf_internal_r+0x13e4>
   31b7c:	d9014c17 	ldw	r4,1328(sp)
   31b80:	2080004c 	andi	r2,r4,1
   31b84:	10009a1e 	bne	r2,zero,31df0 <___vfprintf_internal_r+0x1758>
   31b88:	d9401904 	addi	r5,sp,100
   31b8c:	dd000f04 	addi	r20,sp,60
   31b90:	d9414115 	stw	r5,1284(sp)
   31b94:	003d5b06 	br	31104 <___vfprintf_internal_r+0xa6c>
   31b98:	d9014f17 	ldw	r4,1340(sp)
   31b9c:	b00b883a 	mov	r5,r22
   31ba0:	d9800c04 	addi	r6,sp,48
   31ba4:	00306400 	call	30640 <__sprint_r>
   31ba8:	103c731e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31bac:	dc800e17 	ldw	r18,56(sp)
   31bb0:	d8c01904 	addi	r3,sp,100
   31bb4:	003cf906 	br	30f9c <___vfprintf_internal_r+0x904>
   31bb8:	d8c14c17 	ldw	r3,1328(sp)
   31bbc:	1880040c 	andi	r2,r3,16
   31bc0:	1000711e 	bne	r2,zero,31d88 <___vfprintf_internal_r+0x16f0>
   31bc4:	d9014c17 	ldw	r4,1328(sp)
   31bc8:	2080100c 	andi	r2,r4,64
   31bcc:	10006e26 	beq	r2,zero,31d88 <___vfprintf_internal_r+0x16f0>
   31bd0:	3c00000b 	ldhu	r16,0(r7)
   31bd4:	0023883a 	mov	r17,zero
   31bd8:	39c00104 	addi	r7,r7,4
   31bdc:	d9c14015 	stw	r7,1280(sp)
   31be0:	003efa06 	br	317cc <___vfprintf_internal_r+0x1134>
   31be4:	dc400d17 	ldw	r17,52(sp)
   31be8:	07000174 	movhi	fp,5
   31bec:	e7202984 	addi	fp,fp,-32602
   31bf0:	9425883a 	add	r18,r18,r16
   31bf4:	8c400044 	addi	r17,r17,1
   31bf8:	008001c4 	movi	r2,7
   31bfc:	1f000015 	stw	fp,0(r3)
   31c00:	1c000115 	stw	r16,4(r3)
   31c04:	dc800e15 	stw	r18,56(sp)
   31c08:	dc400d15 	stw	r17,52(sp)
   31c0c:	147d7016 	blt	r2,r17,311d0 <___vfprintf_internal_r+0xb38>
   31c10:	18c00204 	addi	r3,r3,8
   31c14:	003d7506 	br	311ec <___vfprintf_internal_r+0xb54>
   31c18:	dc800e17 	ldw	r18,56(sp)
   31c1c:	dc400d17 	ldw	r17,52(sp)
   31c20:	07000174 	movhi	fp,5
   31c24:	e7202d84 	addi	fp,fp,-32586
   31c28:	003bba06 	br	30b14 <___vfprintf_internal_r+0x47c>
   31c2c:	d9014f17 	ldw	r4,1340(sp)
   31c30:	b00b883a 	mov	r5,r22
   31c34:	d9800c04 	addi	r6,sp,48
   31c38:	00306400 	call	30640 <__sprint_r>
   31c3c:	103c4e1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31c40:	dc800e17 	ldw	r18,56(sp)
   31c44:	d8c01904 	addi	r3,sp,100
   31c48:	003ce306 	br	30fd8 <___vfprintf_internal_r+0x940>
   31c4c:	3c000017 	ldw	r16,0(r7)
   31c50:	0009883a 	mov	r4,zero
   31c54:	39c00104 	addi	r7,r7,4
   31c58:	0023883a 	mov	r17,zero
   31c5c:	d9c14015 	stw	r7,1280(sp)
   31c60:	d8000405 	stb	zero,16(sp)
   31c64:	003d1a06 	br	310d0 <___vfprintf_internal_r+0xa38>
   31c68:	38800017 	ldw	r2,0(r7)
   31c6c:	39c00104 	addi	r7,r7,4
   31c70:	d9c14015 	stw	r7,1280(sp)
   31c74:	1023d7fa 	srai	r17,r2,31
   31c78:	1021883a 	mov	r16,r2
   31c7c:	003d1206 	br	310c8 <___vfprintf_internal_r+0xa30>
   31c80:	3c000017 	ldw	r16,0(r7)
   31c84:	01000044 	movi	r4,1
   31c88:	39c00104 	addi	r7,r7,4
   31c8c:	0023883a 	mov	r17,zero
   31c90:	d9c14015 	stw	r7,1280(sp)
   31c94:	d8000405 	stb	zero,16(sp)
   31c98:	003d0d06 	br	310d0 <___vfprintf_internal_r+0xa38>
   31c9c:	00800174 	movhi	r2,5
   31ca0:	10a02904 	addi	r2,r2,-32604
   31ca4:	94800044 	addi	r18,r18,1
   31ca8:	8c400044 	addi	r17,r17,1
   31cac:	a8800015 	stw	r2,0(r21)
   31cb0:	00c00044 	movi	r3,1
   31cb4:	008001c4 	movi	r2,7
   31cb8:	a8c00115 	stw	r3,4(r21)
   31cbc:	dc800e15 	stw	r18,56(sp)
   31cc0:	dc400d15 	stw	r17,52(sp)
   31cc4:	1440ca16 	blt	r2,r17,31ff0 <___vfprintf_internal_r+0x1958>
   31cc8:	a8c00204 	addi	r3,r21,8
   31ccc:	2000061e 	bne	r4,zero,31ce8 <___vfprintf_internal_r+0x1650>
   31cd0:	d9414717 	ldw	r5,1308(sp)
   31cd4:	2800041e 	bne	r5,zero,31ce8 <___vfprintf_internal_r+0x1650>
   31cd8:	d9814c17 	ldw	r6,1328(sp)
   31cdc:	3080004c 	andi	r2,r6,1
   31ce0:	1005003a 	cmpeq	r2,r2,zero
   31ce4:	103bea1e 	bne	r2,zero,30c90 <___vfprintf_internal_r+0x5f8>
   31ce8:	00800044 	movi	r2,1
   31cec:	dc400d17 	ldw	r17,52(sp)
   31cf0:	18800115 	stw	r2,4(r3)
   31cf4:	d8814917 	ldw	r2,1316(sp)
   31cf8:	94800044 	addi	r18,r18,1
   31cfc:	8c400044 	addi	r17,r17,1
   31d00:	18800015 	stw	r2,0(r3)
   31d04:	008001c4 	movi	r2,7
   31d08:	dc800e15 	stw	r18,56(sp)
   31d0c:	dc400d15 	stw	r17,52(sp)
   31d10:	1440ca16 	blt	r2,r17,3203c <___vfprintf_internal_r+0x19a4>
   31d14:	18c00204 	addi	r3,r3,8
   31d18:	0121c83a 	sub	r16,zero,r4
   31d1c:	0400500e 	bge	zero,r16,31e60 <___vfprintf_internal_r+0x17c8>
   31d20:	00800404 	movi	r2,16
   31d24:	1400800e 	bge	r2,r16,31f28 <___vfprintf_internal_r+0x1890>
   31d28:	1027883a 	mov	r19,r2
   31d2c:	07000174 	movhi	fp,5
   31d30:	e7202984 	addi	fp,fp,-32602
   31d34:	050001c4 	movi	r20,7
   31d38:	00000306 	br	31d48 <___vfprintf_internal_r+0x16b0>
   31d3c:	18c00204 	addi	r3,r3,8
   31d40:	843ffc04 	addi	r16,r16,-16
   31d44:	9c007a0e 	bge	r19,r16,31f30 <___vfprintf_internal_r+0x1898>
   31d48:	94800404 	addi	r18,r18,16
   31d4c:	8c400044 	addi	r17,r17,1
   31d50:	1f000015 	stw	fp,0(r3)
   31d54:	1cc00115 	stw	r19,4(r3)
   31d58:	dc800e15 	stw	r18,56(sp)
   31d5c:	dc400d15 	stw	r17,52(sp)
   31d60:	a47ff60e 	bge	r20,r17,31d3c <___vfprintf_internal_r+0x16a4>
   31d64:	d9014f17 	ldw	r4,1340(sp)
   31d68:	b00b883a 	mov	r5,r22
   31d6c:	d9800c04 	addi	r6,sp,48
   31d70:	00306400 	call	30640 <__sprint_r>
   31d74:	103c001e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31d78:	dc800e17 	ldw	r18,56(sp)
   31d7c:	dc400d17 	ldw	r17,52(sp)
   31d80:	d8c01904 	addi	r3,sp,100
   31d84:	003fee06 	br	31d40 <___vfprintf_internal_r+0x16a8>
   31d88:	3c000017 	ldw	r16,0(r7)
   31d8c:	0023883a 	mov	r17,zero
   31d90:	39c00104 	addi	r7,r7,4
   31d94:	d9c14015 	stw	r7,1280(sp)
   31d98:	003e8c06 	br	317cc <___vfprintf_internal_r+0x1134>
   31d9c:	d9401904 	addi	r5,sp,100
   31da0:	dd000f04 	addi	r20,sp,60
   31da4:	d9414115 	stw	r5,1284(sp)
   31da8:	d9814417 	ldw	r6,1296(sp)
   31dac:	880a973a 	slli	r5,r17,28
   31db0:	8004d13a 	srli	r2,r16,4
   31db4:	810003cc 	andi	r4,r16,15
   31db8:	3109883a 	add	r4,r6,r4
   31dbc:	2884b03a 	or	r2,r5,r2
   31dc0:	21400003 	ldbu	r5,0(r4)
   31dc4:	d9014117 	ldw	r4,1284(sp)
   31dc8:	8806d13a 	srli	r3,r17,4
   31dcc:	1021883a 	mov	r16,r2
   31dd0:	213fffc4 	addi	r4,r4,-1
   31dd4:	d9014115 	stw	r4,1284(sp)
   31dd8:	d9814117 	ldw	r6,1284(sp)
   31ddc:	10c8b03a 	or	r4,r2,r3
   31de0:	1823883a 	mov	r17,r3
   31de4:	31400005 	stb	r5,0(r6)
   31de8:	203fef1e 	bne	r4,zero,31da8 <___vfprintf_internal_r+0x1710>
   31dec:	003cc506 	br	31104 <___vfprintf_internal_r+0xa6c>
   31df0:	00800c04 	movi	r2,48
   31df4:	d98018c4 	addi	r6,sp,99
   31df8:	dd000f04 	addi	r20,sp,60
   31dfc:	d88018c5 	stb	r2,99(sp)
   31e00:	d9814115 	stw	r6,1284(sp)
   31e04:	003cbf06 	br	31104 <___vfprintf_internal_r+0xa6c>
   31e08:	dc400d17 	ldw	r17,52(sp)
   31e0c:	07000174 	movhi	fp,5
   31e10:	e7202d84 	addi	fp,fp,-32586
   31e14:	003bc106 	br	30d1c <___vfprintf_internal_r+0x684>
   31e18:	d9414c17 	ldw	r5,1328(sp)
   31e1c:	2880040c 	andi	r2,r5,16
   31e20:	10007c26 	beq	r2,zero,32014 <___vfprintf_internal_r+0x197c>
   31e24:	38800017 	ldw	r2,0(r7)
   31e28:	39c00104 	addi	r7,r7,4
   31e2c:	d9c14015 	stw	r7,1280(sp)
   31e30:	d9814b17 	ldw	r6,1324(sp)
   31e34:	d9c14017 	ldw	r7,1280(sp)
   31e38:	11800015 	stw	r6,0(r2)
   31e3c:	003a7206 	br	30808 <___vfprintf_internal_r+0x170>
   31e40:	d9014f17 	ldw	r4,1340(sp)
   31e44:	b00b883a 	mov	r5,r22
   31e48:	d9800c04 	addi	r6,sp,48
   31e4c:	00306400 	call	30640 <__sprint_r>
   31e50:	103bc91e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31e54:	dc800e17 	ldw	r18,56(sp)
   31e58:	dc400d17 	ldw	r17,52(sp)
   31e5c:	d8c01904 	addi	r3,sp,100
   31e60:	d9014717 	ldw	r4,1308(sp)
   31e64:	d9414117 	ldw	r5,1284(sp)
   31e68:	8c400044 	addi	r17,r17,1
   31e6c:	9125883a 	add	r18,r18,r4
   31e70:	008001c4 	movi	r2,7
   31e74:	19400015 	stw	r5,0(r3)
   31e78:	19000115 	stw	r4,4(r3)
   31e7c:	dc800e15 	stw	r18,56(sp)
   31e80:	dc400d15 	stw	r17,52(sp)
   31e84:	147ce816 	blt	r2,r17,31228 <___vfprintf_internal_r+0xb90>
   31e88:	18c00204 	addi	r3,r3,8
   31e8c:	003b8006 	br	30c90 <___vfprintf_internal_r+0x5f8>
   31e90:	38c00017 	ldw	r3,0(r7)
   31e94:	39000204 	addi	r4,r7,8
   31e98:	d9014015 	stw	r4,1280(sp)
   31e9c:	d8c14215 	stw	r3,1288(sp)
   31ea0:	39c00117 	ldw	r7,4(r7)
   31ea4:	d9c14315 	stw	r7,1292(sp)
   31ea8:	003e1a06 	br	31714 <___vfprintf_internal_r+0x107c>
   31eac:	0005883a 	mov	r2,zero
   31eb0:	1409c83a 	sub	r4,r2,r16
   31eb4:	1105803a 	cmpltu	r2,r2,r4
   31eb8:	044bc83a 	sub	r5,zero,r17
   31ebc:	2885c83a 	sub	r2,r5,r2
   31ec0:	2021883a 	mov	r16,r4
   31ec4:	1023883a 	mov	r17,r2
   31ec8:	01000044 	movi	r4,1
   31ecc:	00800b44 	movi	r2,45
   31ed0:	d8800405 	stb	r2,16(sp)
   31ed4:	003c7e06 	br	310d0 <___vfprintf_internal_r+0xa38>
   31ed8:	d9014f17 	ldw	r4,1340(sp)
   31edc:	b00b883a 	mov	r5,r22
   31ee0:	d9800c04 	addi	r6,sp,48
   31ee4:	00306400 	call	30640 <__sprint_r>
   31ee8:	103ba31e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31eec:	dc800e17 	ldw	r18,56(sp)
   31ef0:	dc400d17 	ldw	r17,52(sp)
   31ef4:	d9000517 	ldw	r4,20(sp)
   31ef8:	d9401904 	addi	r5,sp,100
   31efc:	003da106 	br	31584 <___vfprintf_internal_r+0xeec>
   31f00:	d9014f17 	ldw	r4,1340(sp)
   31f04:	b00b883a 	mov	r5,r22
   31f08:	d9800c04 	addi	r6,sp,48
   31f0c:	00306400 	call	30640 <__sprint_r>
   31f10:	103b991e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31f14:	dc800e17 	ldw	r18,56(sp)
   31f18:	dc400d17 	ldw	r17,52(sp)
   31f1c:	d9000517 	ldw	r4,20(sp)
   31f20:	d8c01904 	addi	r3,sp,100
   31f24:	003d8b06 	br	31554 <___vfprintf_internal_r+0xebc>
   31f28:	07000174 	movhi	fp,5
   31f2c:	e7202984 	addi	fp,fp,-32602
   31f30:	9425883a 	add	r18,r18,r16
   31f34:	8c400044 	addi	r17,r17,1
   31f38:	008001c4 	movi	r2,7
   31f3c:	1f000015 	stw	fp,0(r3)
   31f40:	1c000115 	stw	r16,4(r3)
   31f44:	dc800e15 	stw	r18,56(sp)
   31f48:	dc400d15 	stw	r17,52(sp)
   31f4c:	147fbc16 	blt	r2,r17,31e40 <___vfprintf_internal_r+0x17a8>
   31f50:	18c00204 	addi	r3,r3,8
   31f54:	003fc206 	br	31e60 <___vfprintf_internal_r+0x17c8>
   31f58:	d9014f17 	ldw	r4,1340(sp)
   31f5c:	b00b883a 	mov	r5,r22
   31f60:	d9800c04 	addi	r6,sp,48
   31f64:	00306400 	call	30640 <__sprint_r>
   31f68:	103b831e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   31f6c:	dc800e17 	ldw	r18,56(sp)
   31f70:	d9000517 	ldw	r4,20(sp)
   31f74:	d8c01904 	addi	r3,sp,100
   31f78:	003cfc06 	br	3136c <___vfprintf_internal_r+0xcd4>
   31f7c:	07000174 	movhi	fp,5
   31f80:	e7202984 	addi	fp,fp,-32602
   31f84:	003bde06 	br	30f00 <___vfprintf_internal_r+0x868>
   31f88:	00800174 	movhi	r2,5
   31f8c:	10a01804 	addi	r2,r2,-32672
   31f90:	d8814115 	stw	r2,1284(sp)
   31f94:	003def06 	br	31754 <___vfprintf_internal_r+0x10bc>
   31f98:	d9014217 	ldw	r4,1288(sp)
   31f9c:	d9414317 	ldw	r5,1292(sp)
   31fa0:	00371880 	call	37188 <__isnand>
   31fa4:	10003926 	beq	r2,zero,3208c <___vfprintf_internal_r+0x19f4>
   31fa8:	d9414d17 	ldw	r5,1332(sp)
   31fac:	008011c4 	movi	r2,71
   31fb0:	1140ce16 	blt	r2,r5,322ec <___vfprintf_internal_r+0x1c54>
   31fb4:	01800174 	movhi	r6,5
   31fb8:	31a01904 	addi	r6,r6,-32668
   31fbc:	d9814115 	stw	r6,1284(sp)
   31fc0:	003de406 	br	31754 <___vfprintf_internal_r+0x10bc>
   31fc4:	d9014c17 	ldw	r4,1328(sp)
   31fc8:	bdc00044 	addi	r23,r23,1
   31fcc:	b8c00007 	ldb	r3,0(r23)
   31fd0:	21000814 	ori	r4,r4,32
   31fd4:	d9014c15 	stw	r4,1328(sp)
   31fd8:	003a2e06 	br	30894 <___vfprintf_internal_r+0x1fc>
   31fdc:	dcc14515 	stw	r19,1300(sp)
   31fe0:	98011016 	blt	r19,zero,32424 <___vfprintf_internal_r+0x1d8c>
   31fe4:	980f883a 	mov	r7,r19
   31fe8:	d8014615 	stw	zero,1304(sp)
   31fec:	003c4c06 	br	31120 <___vfprintf_internal_r+0xa88>
   31ff0:	d9014f17 	ldw	r4,1340(sp)
   31ff4:	b00b883a 	mov	r5,r22
   31ff8:	d9800c04 	addi	r6,sp,48
   31ffc:	00306400 	call	30640 <__sprint_r>
   32000:	103b5d1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   32004:	dc800e17 	ldw	r18,56(sp)
   32008:	d9000517 	ldw	r4,20(sp)
   3200c:	d8c01904 	addi	r3,sp,100
   32010:	003f2e06 	br	31ccc <___vfprintf_internal_r+0x1634>
   32014:	d8c14c17 	ldw	r3,1328(sp)
   32018:	1880100c 	andi	r2,r3,64
   3201c:	1000a026 	beq	r2,zero,322a0 <___vfprintf_internal_r+0x1c08>
   32020:	38800017 	ldw	r2,0(r7)
   32024:	39c00104 	addi	r7,r7,4
   32028:	d9c14015 	stw	r7,1280(sp)
   3202c:	d9014b17 	ldw	r4,1324(sp)
   32030:	d9c14017 	ldw	r7,1280(sp)
   32034:	1100000d 	sth	r4,0(r2)
   32038:	0039f306 	br	30808 <___vfprintf_internal_r+0x170>
   3203c:	d9014f17 	ldw	r4,1340(sp)
   32040:	b00b883a 	mov	r5,r22
   32044:	d9800c04 	addi	r6,sp,48
   32048:	00306400 	call	30640 <__sprint_r>
   3204c:	103b4a1e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   32050:	dc800e17 	ldw	r18,56(sp)
   32054:	dc400d17 	ldw	r17,52(sp)
   32058:	d9000517 	ldw	r4,20(sp)
   3205c:	d8c01904 	addi	r3,sp,100
   32060:	003f2d06 	br	31d18 <___vfprintf_internal_r+0x1680>
   32064:	00800184 	movi	r2,6
   32068:	14c09a36 	bltu	r2,r19,322d4 <___vfprintf_internal_r+0x1c3c>
   3206c:	dcc14515 	stw	r19,1300(sp)
   32070:	9800010e 	bge	r19,zero,32078 <___vfprintf_internal_r+0x19e0>
   32074:	d8014515 	stw	zero,1300(sp)
   32078:	00800174 	movhi	r2,5
   3207c:	10a01b04 	addi	r2,r2,-32660
   32080:	980f883a 	mov	r7,r19
   32084:	d8814115 	stw	r2,1284(sp)
   32088:	003a7206 	br	30a54 <___vfprintf_internal_r+0x3bc>
   3208c:	00bfffc4 	movi	r2,-1
   32090:	9880e226 	beq	r19,r2,3241c <___vfprintf_internal_r+0x1d84>
   32094:	d9414d17 	ldw	r5,1332(sp)
   32098:	008019c4 	movi	r2,103
   3209c:	2880dc26 	beq	r5,r2,32410 <___vfprintf_internal_r+0x1d78>
   320a0:	008011c4 	movi	r2,71
   320a4:	2880da26 	beq	r5,r2,32410 <___vfprintf_internal_r+0x1d78>
   320a8:	d9414c17 	ldw	r5,1328(sp)
   320ac:	d9014317 	ldw	r4,1292(sp)
   320b0:	d9814217 	ldw	r6,1288(sp)
   320b4:	29404014 	ori	r5,r5,256
   320b8:	d9414c15 	stw	r5,1328(sp)
   320bc:	2000cc16 	blt	r4,zero,323f0 <___vfprintf_internal_r+0x1d58>
   320c0:	3021883a 	mov	r16,r6
   320c4:	2023883a 	mov	r17,r4
   320c8:	0039883a 	mov	fp,zero
   320cc:	d9414d17 	ldw	r5,1332(sp)
   320d0:	00801984 	movi	r2,102
   320d4:	2880b726 	beq	r5,r2,323b4 <___vfprintf_internal_r+0x1d1c>
   320d8:	00801184 	movi	r2,70
   320dc:	2880b526 	beq	r5,r2,323b4 <___vfprintf_internal_r+0x1d1c>
   320e0:	00801944 	movi	r2,101
   320e4:	2880c826 	beq	r5,r2,32408 <___vfprintf_internal_r+0x1d70>
   320e8:	00801144 	movi	r2,69
   320ec:	2880c626 	beq	r5,r2,32408 <___vfprintf_internal_r+0x1d70>
   320f0:	9829883a 	mov	r20,r19
   320f4:	d9014f17 	ldw	r4,1340(sp)
   320f8:	d8800504 	addi	r2,sp,20
   320fc:	880d883a 	mov	r6,r17
   32100:	d8800115 	stw	r2,4(sp)
   32104:	d8c00604 	addi	r3,sp,24
   32108:	d8800704 	addi	r2,sp,28
   3210c:	800b883a 	mov	r5,r16
   32110:	01c00084 	movi	r7,2
   32114:	d8c00215 	stw	r3,8(sp)
   32118:	d8800315 	stw	r2,12(sp)
   3211c:	dd000015 	stw	r20,0(sp)
   32120:	00329000 	call	32900 <_dtoa_r>
   32124:	d9814d17 	ldw	r6,1332(sp)
   32128:	d8814115 	stw	r2,1284(sp)
   3212c:	008019c4 	movi	r2,103
   32130:	30809526 	beq	r6,r2,32388 <___vfprintf_internal_r+0x1cf0>
   32134:	d8c14d17 	ldw	r3,1332(sp)
   32138:	008011c4 	movi	r2,71
   3213c:	18809226 	beq	r3,r2,32388 <___vfprintf_internal_r+0x1cf0>
   32140:	d9414117 	ldw	r5,1284(sp)
   32144:	d9814d17 	ldw	r6,1332(sp)
   32148:	00801984 	movi	r2,102
   3214c:	2d25883a 	add	r18,r5,r20
   32150:	30808626 	beq	r6,r2,3236c <___vfprintf_internal_r+0x1cd4>
   32154:	00801184 	movi	r2,70
   32158:	30808426 	beq	r6,r2,3236c <___vfprintf_internal_r+0x1cd4>
   3215c:	000d883a 	mov	r6,zero
   32160:	000f883a 	mov	r7,zero
   32164:	880b883a 	mov	r5,r17
   32168:	8009883a 	mov	r4,r16
   3216c:	00390c40 	call	390c4 <__eqdf2>
   32170:	1000751e 	bne	r2,zero,32348 <___vfprintf_internal_r+0x1cb0>
   32174:	9005883a 	mov	r2,r18
   32178:	dc800715 	stw	r18,28(sp)
   3217c:	d9014117 	ldw	r4,1284(sp)
   32180:	d9414d17 	ldw	r5,1332(sp)
   32184:	00c019c4 	movi	r3,103
   32188:	1125c83a 	sub	r18,r2,r4
   3218c:	28c06826 	beq	r5,r3,32330 <___vfprintf_internal_r+0x1c98>
   32190:	008011c4 	movi	r2,71
   32194:	28806626 	beq	r5,r2,32330 <___vfprintf_internal_r+0x1c98>
   32198:	d9000517 	ldw	r4,20(sp)
   3219c:	d8c14d17 	ldw	r3,1332(sp)
   321a0:	00801944 	movi	r2,101
   321a4:	10c05516 	blt	r2,r3,322fc <___vfprintf_internal_r+0x1c64>
   321a8:	213fffc4 	addi	r4,r4,-1
   321ac:	d9000515 	stw	r4,20(sp)
   321b0:	d8c00805 	stb	r3,32(sp)
   321b4:	2021883a 	mov	r16,r4
   321b8:	2000c116 	blt	r4,zero,324c0 <___vfprintf_internal_r+0x1e28>
   321bc:	00800ac4 	movi	r2,43
   321c0:	d8800845 	stb	r2,33(sp)
   321c4:	00800244 	movi	r2,9
   321c8:	1400af0e 	bge	r2,r16,32488 <___vfprintf_internal_r+0x1df0>
   321cc:	1027883a 	mov	r19,r2
   321d0:	dc400b84 	addi	r17,sp,46
   321d4:	8009883a 	mov	r4,r16
   321d8:	01400284 	movi	r5,10
   321dc:	00397ac0 	call	397ac <__modsi3>
   321e0:	10800c04 	addi	r2,r2,48
   321e4:	8c7fffc4 	addi	r17,r17,-1
   321e8:	8009883a 	mov	r4,r16
   321ec:	01400284 	movi	r5,10
   321f0:	88800005 	stb	r2,0(r17)
   321f4:	003974c0 	call	3974c <__divsi3>
   321f8:	1021883a 	mov	r16,r2
   321fc:	98bff516 	blt	r19,r2,321d4 <___vfprintf_internal_r+0x1b3c>
   32200:	10c00c04 	addi	r3,r2,48
   32204:	d88009c4 	addi	r2,sp,39
   32208:	108001c4 	addi	r2,r2,7
   3220c:	897fffc4 	addi	r5,r17,-1
   32210:	88ffffc5 	stb	r3,-1(r17)
   32214:	2880a72e 	bgeu	r5,r2,324b4 <___vfprintf_internal_r+0x1e1c>
   32218:	1009883a 	mov	r4,r2
   3221c:	d9800804 	addi	r6,sp,32
   32220:	d8c00884 	addi	r3,sp,34
   32224:	28800003 	ldbu	r2,0(r5)
   32228:	29400044 	addi	r5,r5,1
   3222c:	18800005 	stb	r2,0(r3)
   32230:	18c00044 	addi	r3,r3,1
   32234:	293ffb36 	bltu	r5,r4,32224 <___vfprintf_internal_r+0x1b8c>
   32238:	1987c83a 	sub	r3,r3,r6
   3223c:	00800044 	movi	r2,1
   32240:	d8c14815 	stw	r3,1312(sp)
   32244:	90cf883a 	add	r7,r18,r3
   32248:	1480960e 	bge	r2,r18,324a4 <___vfprintf_internal_r+0x1e0c>
   3224c:	39c00044 	addi	r7,r7,1
   32250:	d9c14515 	stw	r7,1300(sp)
   32254:	38003416 	blt	r7,zero,32328 <___vfprintf_internal_r+0x1c90>
   32258:	e0803fcc 	andi	r2,fp,255
   3225c:	1080201c 	xori	r2,r2,128
   32260:	10bfe004 	addi	r2,r2,-128
   32264:	10004e26 	beq	r2,zero,323a0 <___vfprintf_internal_r+0x1d08>
   32268:	00800b44 	movi	r2,45
   3226c:	dc814715 	stw	r18,1308(sp)
   32270:	d8014615 	stw	zero,1304(sp)
   32274:	d8800405 	stb	r2,16(sp)
   32278:	003bab06 	br	31128 <___vfprintf_internal_r+0xa90>
   3227c:	00800b44 	movi	r2,45
   32280:	d8800405 	stb	r2,16(sp)
   32284:	003d2d06 	br	3173c <___vfprintf_internal_r+0x10a4>
   32288:	d9014f17 	ldw	r4,1340(sp)
   3228c:	b00b883a 	mov	r5,r22
   32290:	d9800c04 	addi	r6,sp,48
   32294:	00306400 	call	30640 <__sprint_r>
   32298:	103ab71e 	bne	r2,zero,30d78 <___vfprintf_internal_r+0x6e0>
   3229c:	003ab506 	br	30d74 <___vfprintf_internal_r+0x6dc>
   322a0:	38800017 	ldw	r2,0(r7)
   322a4:	39c00104 	addi	r7,r7,4
   322a8:	d9c14015 	stw	r7,1280(sp)
   322ac:	d9414b17 	ldw	r5,1324(sp)
   322b0:	d9c14017 	ldw	r7,1280(sp)
   322b4:	11400015 	stw	r5,0(r2)
   322b8:	00395306 	br	30808 <___vfprintf_internal_r+0x170>
   322bc:	980f883a 	mov	r7,r19
   322c0:	dcc14515 	stw	r19,1300(sp)
   322c4:	d8014615 	stw	zero,1304(sp)
   322c8:	003b9506 	br	31120 <___vfprintf_internal_r+0xa88>
   322cc:	0027883a 	mov	r19,zero
   322d0:	00397206 	br	3089c <___vfprintf_internal_r+0x204>
   322d4:	00c00174 	movhi	r3,5
   322d8:	18e01b04 	addi	r3,r3,-32660
   322dc:	100f883a 	mov	r7,r2
   322e0:	d8814515 	stw	r2,1300(sp)
   322e4:	d8c14115 	stw	r3,1284(sp)
   322e8:	0039da06 	br	30a54 <___vfprintf_internal_r+0x3bc>
   322ec:	00800174 	movhi	r2,5
   322f0:	10a01a04 	addi	r2,r2,-32664
   322f4:	d8814115 	stw	r2,1284(sp)
   322f8:	003d1606 	br	31754 <___vfprintf_internal_r+0x10bc>
   322fc:	d9414d17 	ldw	r5,1332(sp)
   32300:	00801984 	movi	r2,102
   32304:	28804926 	beq	r5,r2,3242c <___vfprintf_internal_r+0x1d94>
   32308:	200f883a 	mov	r7,r4
   3230c:	24805716 	blt	r4,r18,3246c <___vfprintf_internal_r+0x1dd4>
   32310:	d9414c17 	ldw	r5,1328(sp)
   32314:	2880004c 	andi	r2,r5,1
   32318:	10000126 	beq	r2,zero,32320 <___vfprintf_internal_r+0x1c88>
   3231c:	21c00044 	addi	r7,r4,1
   32320:	d9c14515 	stw	r7,1300(sp)
   32324:	383fcc0e 	bge	r7,zero,32258 <___vfprintf_internal_r+0x1bc0>
   32328:	d8014515 	stw	zero,1300(sp)
   3232c:	003fca06 	br	32258 <___vfprintf_internal_r+0x1bc0>
   32330:	d9000517 	ldw	r4,20(sp)
   32334:	00bfff04 	movi	r2,-4
   32338:	1100480e 	bge	r2,r4,3245c <___vfprintf_internal_r+0x1dc4>
   3233c:	99004716 	blt	r19,r4,3245c <___vfprintf_internal_r+0x1dc4>
   32340:	d8c14d15 	stw	r3,1332(sp)
   32344:	003ff006 	br	32308 <___vfprintf_internal_r+0x1c70>
   32348:	d8800717 	ldw	r2,28(sp)
   3234c:	14bf8b2e 	bgeu	r2,r18,3217c <___vfprintf_internal_r+0x1ae4>
   32350:	9007883a 	mov	r3,r18
   32354:	01000c04 	movi	r4,48
   32358:	11000005 	stb	r4,0(r2)
   3235c:	10800044 	addi	r2,r2,1
   32360:	d8800715 	stw	r2,28(sp)
   32364:	18bffc1e 	bne	r3,r2,32358 <___vfprintf_internal_r+0x1cc0>
   32368:	003f8406 	br	3217c <___vfprintf_internal_r+0x1ae4>
   3236c:	d8814117 	ldw	r2,1284(sp)
   32370:	10c00007 	ldb	r3,0(r2)
   32374:	00800c04 	movi	r2,48
   32378:	18805b26 	beq	r3,r2,324e8 <___vfprintf_internal_r+0x1e50>
   3237c:	d9000517 	ldw	r4,20(sp)
   32380:	9125883a 	add	r18,r18,r4
   32384:	003f7506 	br	3215c <___vfprintf_internal_r+0x1ac4>
   32388:	d9014c17 	ldw	r4,1328(sp)
   3238c:	2080004c 	andi	r2,r4,1
   32390:	1005003a 	cmpeq	r2,r2,zero
   32394:	103f6a26 	beq	r2,zero,32140 <___vfprintf_internal_r+0x1aa8>
   32398:	d8800717 	ldw	r2,28(sp)
   3239c:	003f7706 	br	3217c <___vfprintf_internal_r+0x1ae4>
   323a0:	d9c14515 	stw	r7,1300(sp)
   323a4:	38004d16 	blt	r7,zero,324dc <___vfprintf_internal_r+0x1e44>
   323a8:	dc814715 	stw	r18,1308(sp)
   323ac:	d8014615 	stw	zero,1304(sp)
   323b0:	003b5b06 	br	31120 <___vfprintf_internal_r+0xa88>
   323b4:	d9014f17 	ldw	r4,1340(sp)
   323b8:	d8800504 	addi	r2,sp,20
   323bc:	d8800115 	stw	r2,4(sp)
   323c0:	d8c00604 	addi	r3,sp,24
   323c4:	d8800704 	addi	r2,sp,28
   323c8:	800b883a 	mov	r5,r16
   323cc:	880d883a 	mov	r6,r17
   323d0:	01c000c4 	movi	r7,3
   323d4:	d8c00215 	stw	r3,8(sp)
   323d8:	d8800315 	stw	r2,12(sp)
   323dc:	dcc00015 	stw	r19,0(sp)
   323e0:	9829883a 	mov	r20,r19
   323e4:	00329000 	call	32900 <_dtoa_r>
   323e8:	d8814115 	stw	r2,1284(sp)
   323ec:	003f5106 	br	32134 <___vfprintf_internal_r+0x1a9c>
   323f0:	d8c14217 	ldw	r3,1288(sp)
   323f4:	d9014317 	ldw	r4,1292(sp)
   323f8:	07000b44 	movi	fp,45
   323fc:	1821883a 	mov	r16,r3
   32400:	2460003c 	xorhi	r17,r4,32768
   32404:	003f3106 	br	320cc <___vfprintf_internal_r+0x1a34>
   32408:	9d000044 	addi	r20,r19,1
   3240c:	003f3906 	br	320f4 <___vfprintf_internal_r+0x1a5c>
   32410:	983f251e 	bne	r19,zero,320a8 <___vfprintf_internal_r+0x1a10>
   32414:	04c00044 	movi	r19,1
   32418:	003f2306 	br	320a8 <___vfprintf_internal_r+0x1a10>
   3241c:	04c00184 	movi	r19,6
   32420:	003f2106 	br	320a8 <___vfprintf_internal_r+0x1a10>
   32424:	d8014515 	stw	zero,1300(sp)
   32428:	003eee06 	br	31fe4 <___vfprintf_internal_r+0x194c>
   3242c:	200f883a 	mov	r7,r4
   32430:	0100370e 	bge	zero,r4,32510 <___vfprintf_internal_r+0x1e78>
   32434:	9800031e 	bne	r19,zero,32444 <___vfprintf_internal_r+0x1dac>
   32438:	d9814c17 	ldw	r6,1328(sp)
   3243c:	3080004c 	andi	r2,r6,1
   32440:	103fb726 	beq	r2,zero,32320 <___vfprintf_internal_r+0x1c88>
   32444:	20800044 	addi	r2,r4,1
   32448:	98a7883a 	add	r19,r19,r2
   3244c:	dcc14515 	stw	r19,1300(sp)
   32450:	980f883a 	mov	r7,r19
   32454:	983f800e 	bge	r19,zero,32258 <___vfprintf_internal_r+0x1bc0>
   32458:	003fb306 	br	32328 <___vfprintf_internal_r+0x1c90>
   3245c:	d9814d17 	ldw	r6,1332(sp)
   32460:	31bfff84 	addi	r6,r6,-2
   32464:	d9814d15 	stw	r6,1332(sp)
   32468:	003f4c06 	br	3219c <___vfprintf_internal_r+0x1b04>
   3246c:	0100180e 	bge	zero,r4,324d0 <___vfprintf_internal_r+0x1e38>
   32470:	00800044 	movi	r2,1
   32474:	1485883a 	add	r2,r2,r18
   32478:	d8814515 	stw	r2,1300(sp)
   3247c:	100f883a 	mov	r7,r2
   32480:	103f750e 	bge	r2,zero,32258 <___vfprintf_internal_r+0x1bc0>
   32484:	003fa806 	br	32328 <___vfprintf_internal_r+0x1c90>
   32488:	80c00c04 	addi	r3,r16,48
   3248c:	00800c04 	movi	r2,48
   32490:	d8c008c5 	stb	r3,35(sp)
   32494:	d9800804 	addi	r6,sp,32
   32498:	d8c00904 	addi	r3,sp,36
   3249c:	d8800885 	stb	r2,34(sp)
   324a0:	003f6506 	br	32238 <___vfprintf_internal_r+0x1ba0>
   324a4:	d9014c17 	ldw	r4,1328(sp)
   324a8:	2084703a 	and	r2,r4,r2
   324ac:	103f9c26 	beq	r2,zero,32320 <___vfprintf_internal_r+0x1c88>
   324b0:	003f6606 	br	3224c <___vfprintf_internal_r+0x1bb4>
   324b4:	d9800804 	addi	r6,sp,32
   324b8:	d8c00884 	addi	r3,sp,34
   324bc:	003f5e06 	br	32238 <___vfprintf_internal_r+0x1ba0>
   324c0:	00800b44 	movi	r2,45
   324c4:	0121c83a 	sub	r16,zero,r4
   324c8:	d8800845 	stb	r2,33(sp)
   324cc:	003f3d06 	br	321c4 <___vfprintf_internal_r+0x1b2c>
   324d0:	00800084 	movi	r2,2
   324d4:	1105c83a 	sub	r2,r2,r4
   324d8:	003fe606 	br	32474 <___vfprintf_internal_r+0x1ddc>
   324dc:	d8014515 	stw	zero,1300(sp)
   324e0:	dc814715 	stw	r18,1308(sp)
   324e4:	003fb106 	br	323ac <___vfprintf_internal_r+0x1d14>
   324e8:	000d883a 	mov	r6,zero
   324ec:	000f883a 	mov	r7,zero
   324f0:	8009883a 	mov	r4,r16
   324f4:	880b883a 	mov	r5,r17
   324f8:	003914c0 	call	3914c <__nedf2>
   324fc:	103f9f26 	beq	r2,zero,3237c <___vfprintf_internal_r+0x1ce4>
   32500:	00800044 	movi	r2,1
   32504:	1509c83a 	sub	r4,r2,r20
   32508:	d9000515 	stw	r4,20(sp)
   3250c:	003f9b06 	br	3237c <___vfprintf_internal_r+0x1ce4>
   32510:	98000d1e 	bne	r19,zero,32548 <___vfprintf_internal_r+0x1eb0>
   32514:	d8c14c17 	ldw	r3,1328(sp)
   32518:	1880004c 	andi	r2,r3,1
   3251c:	10000a1e 	bne	r2,zero,32548 <___vfprintf_internal_r+0x1eb0>
   32520:	01000044 	movi	r4,1
   32524:	200f883a 	mov	r7,r4
   32528:	d9014515 	stw	r4,1300(sp)
   3252c:	003f4a06 	br	32258 <___vfprintf_internal_r+0x1bc0>
   32530:	3cc00017 	ldw	r19,0(r7)
   32534:	39c00104 	addi	r7,r7,4
   32538:	983d0e0e 	bge	r19,zero,31974 <___vfprintf_internal_r+0x12dc>
   3253c:	b8c00007 	ldb	r3,0(r23)
   32540:	04ffffc4 	movi	r19,-1
   32544:	0038d306 	br	30894 <___vfprintf_internal_r+0x1fc>
   32548:	9cc00084 	addi	r19,r19,2
   3254c:	dcc14515 	stw	r19,1300(sp)
   32550:	980f883a 	mov	r7,r19
   32554:	983f400e 	bge	r19,zero,32258 <___vfprintf_internal_r+0x1bc0>
   32558:	003f7306 	br	32328 <___vfprintf_internal_r+0x1c90>

0003255c <__vfprintf_internal>:
   3255c:	00800174 	movhi	r2,5
   32560:	10a76704 	addi	r2,r2,-25188
   32564:	2013883a 	mov	r9,r4
   32568:	11000017 	ldw	r4,0(r2)
   3256c:	2805883a 	mov	r2,r5
   32570:	300f883a 	mov	r7,r6
   32574:	480b883a 	mov	r5,r9
   32578:	100d883a 	mov	r6,r2
   3257c:	00306981 	jmpi	30698 <___vfprintf_internal_r>

00032580 <__swsetup_r>:
   32580:	00800174 	movhi	r2,5
   32584:	10a76704 	addi	r2,r2,-25188
   32588:	10c00017 	ldw	r3,0(r2)
   3258c:	defffd04 	addi	sp,sp,-12
   32590:	dc400115 	stw	r17,4(sp)
   32594:	dc000015 	stw	r16,0(sp)
   32598:	dfc00215 	stw	ra,8(sp)
   3259c:	2023883a 	mov	r17,r4
   325a0:	2821883a 	mov	r16,r5
   325a4:	18000226 	beq	r3,zero,325b0 <__swsetup_r+0x30>
   325a8:	18800e17 	ldw	r2,56(r3)
   325ac:	10001f26 	beq	r2,zero,3262c <__swsetup_r+0xac>
   325b0:	8100030b 	ldhu	r4,12(r16)
   325b4:	2080020c 	andi	r2,r4,8
   325b8:	10002826 	beq	r2,zero,3265c <__swsetup_r+0xdc>
   325bc:	81400417 	ldw	r5,16(r16)
   325c0:	28001d26 	beq	r5,zero,32638 <__swsetup_r+0xb8>
   325c4:	2080004c 	andi	r2,r4,1
   325c8:	1005003a 	cmpeq	r2,r2,zero
   325cc:	10000b26 	beq	r2,zero,325fc <__swsetup_r+0x7c>
   325d0:	2080008c 	andi	r2,r4,2
   325d4:	10001226 	beq	r2,zero,32620 <__swsetup_r+0xa0>
   325d8:	0005883a 	mov	r2,zero
   325dc:	80800215 	stw	r2,8(r16)
   325e0:	28000b26 	beq	r5,zero,32610 <__swsetup_r+0x90>
   325e4:	0005883a 	mov	r2,zero
   325e8:	dfc00217 	ldw	ra,8(sp)
   325ec:	dc400117 	ldw	r17,4(sp)
   325f0:	dc000017 	ldw	r16,0(sp)
   325f4:	dec00304 	addi	sp,sp,12
   325f8:	f800283a 	ret
   325fc:	80800517 	ldw	r2,20(r16)
   32600:	80000215 	stw	zero,8(r16)
   32604:	0085c83a 	sub	r2,zero,r2
   32608:	80800615 	stw	r2,24(r16)
   3260c:	283ff51e 	bne	r5,zero,325e4 <__swsetup_r+0x64>
   32610:	2080200c 	andi	r2,r4,128
   32614:	103ff326 	beq	r2,zero,325e4 <__swsetup_r+0x64>
   32618:	00bfffc4 	movi	r2,-1
   3261c:	003ff206 	br	325e8 <__swsetup_r+0x68>
   32620:	80800517 	ldw	r2,20(r16)
   32624:	80800215 	stw	r2,8(r16)
   32628:	003fed06 	br	325e0 <__swsetup_r+0x60>
   3262c:	1809883a 	mov	r4,r3
   32630:	003414c0 	call	3414c <__sinit>
   32634:	003fde06 	br	325b0 <__swsetup_r+0x30>
   32638:	20c0a00c 	andi	r3,r4,640
   3263c:	00808004 	movi	r2,512
   32640:	18bfe026 	beq	r3,r2,325c4 <__swsetup_r+0x44>
   32644:	8809883a 	mov	r4,r17
   32648:	800b883a 	mov	r5,r16
   3264c:	0034ef80 	call	34ef8 <__smakebuf_r>
   32650:	8100030b 	ldhu	r4,12(r16)
   32654:	81400417 	ldw	r5,16(r16)
   32658:	003fda06 	br	325c4 <__swsetup_r+0x44>
   3265c:	2080040c 	andi	r2,r4,16
   32660:	103fed26 	beq	r2,zero,32618 <__swsetup_r+0x98>
   32664:	2080010c 	andi	r2,r4,4
   32668:	10001226 	beq	r2,zero,326b4 <__swsetup_r+0x134>
   3266c:	81400c17 	ldw	r5,48(r16)
   32670:	28000526 	beq	r5,zero,32688 <__swsetup_r+0x108>
   32674:	80801004 	addi	r2,r16,64
   32678:	28800226 	beq	r5,r2,32684 <__swsetup_r+0x104>
   3267c:	8809883a 	mov	r4,r17
   32680:	00345040 	call	34504 <_free_r>
   32684:	80000c15 	stw	zero,48(r16)
   32688:	8080030b 	ldhu	r2,12(r16)
   3268c:	81400417 	ldw	r5,16(r16)
   32690:	80000115 	stw	zero,4(r16)
   32694:	10bff6cc 	andi	r2,r2,65499
   32698:	8080030d 	sth	r2,12(r16)
   3269c:	81400015 	stw	r5,0(r16)
   326a0:	8080030b 	ldhu	r2,12(r16)
   326a4:	10800214 	ori	r2,r2,8
   326a8:	113fffcc 	andi	r4,r2,65535
   326ac:	8080030d 	sth	r2,12(r16)
   326b0:	003fc306 	br	325c0 <__swsetup_r+0x40>
   326b4:	81400417 	ldw	r5,16(r16)
   326b8:	003ff906 	br	326a0 <__swsetup_r+0x120>

000326bc <quorem>:
   326bc:	28c00417 	ldw	r3,16(r5)
   326c0:	20800417 	ldw	r2,16(r4)
   326c4:	defff104 	addi	sp,sp,-60
   326c8:	dfc00e15 	stw	ra,56(sp)
   326cc:	df000d15 	stw	fp,52(sp)
   326d0:	ddc00c15 	stw	r23,48(sp)
   326d4:	dd800b15 	stw	r22,44(sp)
   326d8:	dd400a15 	stw	r21,40(sp)
   326dc:	dd000915 	stw	r20,36(sp)
   326e0:	dcc00815 	stw	r19,32(sp)
   326e4:	dc800715 	stw	r18,28(sp)
   326e8:	dc400615 	stw	r17,24(sp)
   326ec:	dc000515 	stw	r16,20(sp)
   326f0:	d9000315 	stw	r4,12(sp)
   326f4:	d9400415 	stw	r5,16(sp)
   326f8:	10c07f16 	blt	r2,r3,328f8 <quorem+0x23c>
   326fc:	1d3fffc4 	addi	r20,r3,-1
   32700:	d8c00417 	ldw	r3,16(sp)
   32704:	d9000317 	ldw	r4,12(sp)
   32708:	a505883a 	add	r2,r20,r20
   3270c:	1085883a 	add	r2,r2,r2
   32710:	1cc00504 	addi	r19,r3,20
   32714:	25c00504 	addi	r23,r4,20
   32718:	98ad883a 	add	r22,r19,r2
   3271c:	15c7883a 	add	r3,r2,r23
   32720:	b1400017 	ldw	r5,0(r22)
   32724:	19000017 	ldw	r4,0(r3)
   32728:	d8c00015 	stw	r3,0(sp)
   3272c:	29400044 	addi	r5,r5,1
   32730:	d9000215 	stw	r4,8(sp)
   32734:	003980c0 	call	3980c <__udivsi3>
   32738:	1039883a 	mov	fp,r2
   3273c:	10003d1e 	bne	r2,zero,32834 <quorem+0x178>
   32740:	d9400417 	ldw	r5,16(sp)
   32744:	d9000317 	ldw	r4,12(sp)
   32748:	0035c240 	call	35c24 <__mcmp>
   3274c:	10002c16 	blt	r2,zero,32800 <quorem+0x144>
   32750:	e7000044 	addi	fp,fp,1
   32754:	b80f883a 	mov	r7,r23
   32758:	0011883a 	mov	r8,zero
   3275c:	0009883a 	mov	r4,zero
   32760:	99400017 	ldw	r5,0(r19)
   32764:	38c00017 	ldw	r3,0(r7)
   32768:	9cc00104 	addi	r19,r19,4
   3276c:	28bfffcc 	andi	r2,r5,65535
   32770:	2085883a 	add	r2,r4,r2
   32774:	11bfffcc 	andi	r6,r2,65535
   32778:	193fffcc 	andi	r4,r3,65535
   3277c:	1004d43a 	srli	r2,r2,16
   32780:	280ad43a 	srli	r5,r5,16
   32784:	2189c83a 	sub	r4,r4,r6
   32788:	2209883a 	add	r4,r4,r8
   3278c:	1806d43a 	srli	r3,r3,16
   32790:	288b883a 	add	r5,r5,r2
   32794:	200dd43a 	srai	r6,r4,16
   32798:	28bfffcc 	andi	r2,r5,65535
   3279c:	1887c83a 	sub	r3,r3,r2
   327a0:	1987883a 	add	r3,r3,r6
   327a4:	3900000d 	sth	r4,0(r7)
   327a8:	38c0008d 	sth	r3,2(r7)
   327ac:	2808d43a 	srli	r4,r5,16
   327b0:	39c00104 	addi	r7,r7,4
   327b4:	1811d43a 	srai	r8,r3,16
   327b8:	b4ffe92e 	bgeu	r22,r19,32760 <quorem+0xa4>
   327bc:	a505883a 	add	r2,r20,r20
   327c0:	1085883a 	add	r2,r2,r2
   327c4:	b885883a 	add	r2,r23,r2
   327c8:	10c00017 	ldw	r3,0(r2)
   327cc:	18000c1e 	bne	r3,zero,32800 <quorem+0x144>
   327d0:	113fff04 	addi	r4,r2,-4
   327d4:	b900082e 	bgeu	r23,r4,327f8 <quorem+0x13c>
   327d8:	10bfff17 	ldw	r2,-4(r2)
   327dc:	10000326 	beq	r2,zero,327ec <quorem+0x130>
   327e0:	00000506 	br	327f8 <quorem+0x13c>
   327e4:	20800017 	ldw	r2,0(r4)
   327e8:	1000031e 	bne	r2,zero,327f8 <quorem+0x13c>
   327ec:	213fff04 	addi	r4,r4,-4
   327f0:	a53fffc4 	addi	r20,r20,-1
   327f4:	b93ffb36 	bltu	r23,r4,327e4 <quorem+0x128>
   327f8:	d9000317 	ldw	r4,12(sp)
   327fc:	25000415 	stw	r20,16(r4)
   32800:	e005883a 	mov	r2,fp
   32804:	dfc00e17 	ldw	ra,56(sp)
   32808:	df000d17 	ldw	fp,52(sp)
   3280c:	ddc00c17 	ldw	r23,48(sp)
   32810:	dd800b17 	ldw	r22,44(sp)
   32814:	dd400a17 	ldw	r21,40(sp)
   32818:	dd000917 	ldw	r20,36(sp)
   3281c:	dcc00817 	ldw	r19,32(sp)
   32820:	dc800717 	ldw	r18,28(sp)
   32824:	dc400617 	ldw	r17,24(sp)
   32828:	dc000517 	ldw	r16,20(sp)
   3282c:	dec00f04 	addi	sp,sp,60
   32830:	f800283a 	ret
   32834:	b823883a 	mov	r17,r23
   32838:	9825883a 	mov	r18,r19
   3283c:	d8000115 	stw	zero,4(sp)
   32840:	002b883a 	mov	r21,zero
   32844:	94000017 	ldw	r16,0(r18)
   32848:	e009883a 	mov	r4,fp
   3284c:	94800104 	addi	r18,r18,4
   32850:	817fffcc 	andi	r5,r16,65535
   32854:	003981c0 	call	3981c <__mulsi3>
   32858:	800ad43a 	srli	r5,r16,16
   3285c:	e009883a 	mov	r4,fp
   32860:	a8a1883a 	add	r16,r21,r2
   32864:	003981c0 	call	3981c <__mulsi3>
   32868:	89000017 	ldw	r4,0(r17)
   3286c:	80ffffcc 	andi	r3,r16,65535
   32870:	8020d43a 	srli	r16,r16,16
   32874:	217fffcc 	andi	r5,r4,65535
   32878:	28cbc83a 	sub	r5,r5,r3
   3287c:	d8c00117 	ldw	r3,4(sp)
   32880:	2008d43a 	srli	r4,r4,16
   32884:	1405883a 	add	r2,r2,r16
   32888:	28cb883a 	add	r5,r5,r3
   3288c:	280dd43a 	srai	r6,r5,16
   32890:	10ffffcc 	andi	r3,r2,65535
   32894:	20c9c83a 	sub	r4,r4,r3
   32898:	2189883a 	add	r4,r4,r6
   3289c:	8900008d 	sth	r4,2(r17)
   328a0:	2009d43a 	srai	r4,r4,16
   328a4:	8940000d 	sth	r5,0(r17)
   328a8:	102ad43a 	srli	r21,r2,16
   328ac:	8c400104 	addi	r17,r17,4
   328b0:	d9000115 	stw	r4,4(sp)
   328b4:	b4bfe32e 	bgeu	r22,r18,32844 <quorem+0x188>
   328b8:	d9000217 	ldw	r4,8(sp)
   328bc:	203fa01e 	bne	r4,zero,32740 <quorem+0x84>
   328c0:	d8800017 	ldw	r2,0(sp)
   328c4:	10ffff04 	addi	r3,r2,-4
   328c8:	b8c0082e 	bgeu	r23,r3,328ec <quorem+0x230>
   328cc:	10bfff17 	ldw	r2,-4(r2)
   328d0:	10000326 	beq	r2,zero,328e0 <quorem+0x224>
   328d4:	00000506 	br	328ec <quorem+0x230>
   328d8:	18800017 	ldw	r2,0(r3)
   328dc:	1000031e 	bne	r2,zero,328ec <quorem+0x230>
   328e0:	18ffff04 	addi	r3,r3,-4
   328e4:	a53fffc4 	addi	r20,r20,-1
   328e8:	b8fffb36 	bltu	r23,r3,328d8 <quorem+0x21c>
   328ec:	d8c00317 	ldw	r3,12(sp)
   328f0:	1d000415 	stw	r20,16(r3)
   328f4:	003f9206 	br	32740 <quorem+0x84>
   328f8:	0005883a 	mov	r2,zero
   328fc:	003fc106 	br	32804 <quorem+0x148>

00032900 <_dtoa_r>:
   32900:	22001017 	ldw	r8,64(r4)
   32904:	deffda04 	addi	sp,sp,-152
   32908:	dd402115 	stw	r21,132(sp)
   3290c:	dd002015 	stw	r20,128(sp)
   32910:	dc801e15 	stw	r18,120(sp)
   32914:	dc401d15 	stw	r17,116(sp)
   32918:	dfc02515 	stw	ra,148(sp)
   3291c:	df002415 	stw	fp,144(sp)
   32920:	ddc02315 	stw	r23,140(sp)
   32924:	dd802215 	stw	r22,136(sp)
   32928:	dcc01f15 	stw	r19,124(sp)
   3292c:	dc001c15 	stw	r16,112(sp)
   32930:	d9001615 	stw	r4,88(sp)
   32934:	3023883a 	mov	r17,r6
   32938:	2829883a 	mov	r20,r5
   3293c:	d9c01715 	stw	r7,92(sp)
   32940:	dc802817 	ldw	r18,160(sp)
   32944:	302b883a 	mov	r21,r6
   32948:	40000a26 	beq	r8,zero,32974 <_dtoa_r+0x74>
   3294c:	20801117 	ldw	r2,68(r4)
   32950:	400b883a 	mov	r5,r8
   32954:	40800115 	stw	r2,4(r8)
   32958:	20c01117 	ldw	r3,68(r4)
   3295c:	00800044 	movi	r2,1
   32960:	10c4983a 	sll	r2,r2,r3
   32964:	40800215 	stw	r2,8(r8)
   32968:	0035ac80 	call	35ac8 <_Bfree>
   3296c:	d8c01617 	ldw	r3,88(sp)
   32970:	18001015 	stw	zero,64(r3)
   32974:	8800a316 	blt	r17,zero,32c04 <_dtoa_r+0x304>
   32978:	90000015 	stw	zero,0(r18)
   3297c:	a8dffc2c 	andhi	r3,r21,32752
   32980:	009ffc34 	movhi	r2,32752
   32984:	18809126 	beq	r3,r2,32bcc <_dtoa_r+0x2cc>
   32988:	000d883a 	mov	r6,zero
   3298c:	000f883a 	mov	r7,zero
   32990:	a009883a 	mov	r4,r20
   32994:	a80b883a 	mov	r5,r21
   32998:	dd001215 	stw	r20,72(sp)
   3299c:	dd401315 	stw	r21,76(sp)
   329a0:	003914c0 	call	3914c <__nedf2>
   329a4:	1000171e 	bne	r2,zero,32a04 <_dtoa_r+0x104>
   329a8:	d9802717 	ldw	r6,156(sp)
   329ac:	00800044 	movi	r2,1
   329b0:	30800015 	stw	r2,0(r6)
   329b4:	d8802917 	ldw	r2,164(sp)
   329b8:	10029b26 	beq	r2,zero,33428 <_dtoa_r+0xb28>
   329bc:	d9002917 	ldw	r4,164(sp)
   329c0:	00800174 	movhi	r2,5
   329c4:	10a02944 	addi	r2,r2,-32603
   329c8:	10ffffc4 	addi	r3,r2,-1
   329cc:	20800015 	stw	r2,0(r4)
   329d0:	1805883a 	mov	r2,r3
   329d4:	dfc02517 	ldw	ra,148(sp)
   329d8:	df002417 	ldw	fp,144(sp)
   329dc:	ddc02317 	ldw	r23,140(sp)
   329e0:	dd802217 	ldw	r22,136(sp)
   329e4:	dd402117 	ldw	r21,132(sp)
   329e8:	dd002017 	ldw	r20,128(sp)
   329ec:	dcc01f17 	ldw	r19,124(sp)
   329f0:	dc801e17 	ldw	r18,120(sp)
   329f4:	dc401d17 	ldw	r17,116(sp)
   329f8:	dc001c17 	ldw	r16,112(sp)
   329fc:	dec02604 	addi	sp,sp,152
   32a00:	f800283a 	ret
   32a04:	d9001617 	ldw	r4,88(sp)
   32a08:	d9401217 	ldw	r5,72(sp)
   32a0c:	d8800104 	addi	r2,sp,4
   32a10:	a80d883a 	mov	r6,r21
   32a14:	d9c00204 	addi	r7,sp,8
   32a18:	d8800015 	stw	r2,0(sp)
   32a1c:	00361040 	call	36104 <__d2b>
   32a20:	d8800715 	stw	r2,28(sp)
   32a24:	a804d53a 	srli	r2,r21,20
   32a28:	1101ffcc 	andi	r4,r2,2047
   32a2c:	20008626 	beq	r4,zero,32c48 <_dtoa_r+0x348>
   32a30:	d8c01217 	ldw	r3,72(sp)
   32a34:	00800434 	movhi	r2,16
   32a38:	10bfffc4 	addi	r2,r2,-1
   32a3c:	ddc00117 	ldw	r23,4(sp)
   32a40:	a884703a 	and	r2,r21,r2
   32a44:	1811883a 	mov	r8,r3
   32a48:	124ffc34 	orhi	r9,r2,16368
   32a4c:	25bf0044 	addi	r22,r4,-1023
   32a50:	d8000815 	stw	zero,32(sp)
   32a54:	0005883a 	mov	r2,zero
   32a58:	00cffe34 	movhi	r3,16376
   32a5c:	480b883a 	mov	r5,r9
   32a60:	4009883a 	mov	r4,r8
   32a64:	180f883a 	mov	r7,r3
   32a68:	100d883a 	mov	r6,r2
   32a6c:	00389b40 	call	389b4 <__subdf3>
   32a70:	0218dbf4 	movhi	r8,25455
   32a74:	4210d844 	addi	r8,r8,17249
   32a78:	024ff4f4 	movhi	r9,16339
   32a7c:	4a61e9c4 	addi	r9,r9,-30809
   32a80:	480f883a 	mov	r7,r9
   32a84:	400d883a 	mov	r6,r8
   32a88:	180b883a 	mov	r5,r3
   32a8c:	1009883a 	mov	r4,r2
   32a90:	0038aa80 	call	38aa8 <__muldf3>
   32a94:	0222d874 	movhi	r8,35681
   32a98:	42322cc4 	addi	r8,r8,-14157
   32a9c:	024ff1f4 	movhi	r9,16327
   32aa0:	4a628a04 	addi	r9,r9,-30168
   32aa4:	480f883a 	mov	r7,r9
   32aa8:	400d883a 	mov	r6,r8
   32aac:	180b883a 	mov	r5,r3
   32ab0:	1009883a 	mov	r4,r2
   32ab4:	0038a340 	call	38a34 <__adddf3>
   32ab8:	b009883a 	mov	r4,r22
   32abc:	1021883a 	mov	r16,r2
   32ac0:	1823883a 	mov	r17,r3
   32ac4:	003936c0 	call	3936c <__floatsidf>
   32ac8:	021427f4 	movhi	r8,20639
   32acc:	421e7ec4 	addi	r8,r8,31227
   32ad0:	024ff4f4 	movhi	r9,16339
   32ad4:	4a5104c4 	addi	r9,r9,17427
   32ad8:	480f883a 	mov	r7,r9
   32adc:	400d883a 	mov	r6,r8
   32ae0:	180b883a 	mov	r5,r3
   32ae4:	1009883a 	mov	r4,r2
   32ae8:	0038aa80 	call	38aa8 <__muldf3>
   32aec:	180f883a 	mov	r7,r3
   32af0:	880b883a 	mov	r5,r17
   32af4:	100d883a 	mov	r6,r2
   32af8:	8009883a 	mov	r4,r16
   32afc:	0038a340 	call	38a34 <__adddf3>
   32b00:	1009883a 	mov	r4,r2
   32b04:	180b883a 	mov	r5,r3
   32b08:	1021883a 	mov	r16,r2
   32b0c:	1823883a 	mov	r17,r3
   32b10:	00394640 	call	39464 <__fixdfsi>
   32b14:	000d883a 	mov	r6,zero
   32b18:	000f883a 	mov	r7,zero
   32b1c:	8009883a 	mov	r4,r16
   32b20:	880b883a 	mov	r5,r17
   32b24:	d8800d15 	stw	r2,52(sp)
   32b28:	00392e40 	call	392e4 <__ltdf2>
   32b2c:	10031716 	blt	r2,zero,3378c <_dtoa_r+0xe8c>
   32b30:	d8c00d17 	ldw	r3,52(sp)
   32b34:	00800584 	movi	r2,22
   32b38:	10c1482e 	bgeu	r2,r3,3305c <_dtoa_r+0x75c>
   32b3c:	01000044 	movi	r4,1
   32b40:	d9000c15 	stw	r4,48(sp)
   32b44:	bd85c83a 	sub	r2,r23,r22
   32b48:	11bfffc4 	addi	r6,r2,-1
   32b4c:	30030b16 	blt	r6,zero,3377c <_dtoa_r+0xe7c>
   32b50:	d9800a15 	stw	r6,40(sp)
   32b54:	d8001115 	stw	zero,68(sp)
   32b58:	d8c00d17 	ldw	r3,52(sp)
   32b5c:	1802ff16 	blt	r3,zero,3375c <_dtoa_r+0xe5c>
   32b60:	d9000a17 	ldw	r4,40(sp)
   32b64:	d8c00915 	stw	r3,36(sp)
   32b68:	d8001015 	stw	zero,64(sp)
   32b6c:	20c9883a 	add	r4,r4,r3
   32b70:	d9000a15 	stw	r4,40(sp)
   32b74:	d9001717 	ldw	r4,92(sp)
   32b78:	00800244 	movi	r2,9
   32b7c:	11004636 	bltu	r2,r4,32c98 <_dtoa_r+0x398>
   32b80:	00800144 	movi	r2,5
   32b84:	11020416 	blt	r2,r4,33398 <_dtoa_r+0xa98>
   32b88:	04400044 	movi	r17,1
   32b8c:	d8c01717 	ldw	r3,92(sp)
   32b90:	00800144 	movi	r2,5
   32b94:	10c1ed36 	bltu	r2,r3,3334c <_dtoa_r+0xa4c>
   32b98:	18c5883a 	add	r2,r3,r3
   32b9c:	1085883a 	add	r2,r2,r2
   32ba0:	00c000f4 	movhi	r3,3
   32ba4:	18caed04 	addi	r3,r3,11188
   32ba8:	10c5883a 	add	r2,r2,r3
   32bac:	11000017 	ldw	r4,0(r2)
   32bb0:	2000683a 	jmp	r4
   32bb4:	00032ca0 	cmpeqi	zero,zero,3250
   32bb8:	00032ca0 	cmpeqi	zero,zero,3250
   32bbc:	000336a0 	cmpeqi	zero,zero,3290
   32bc0:	00033678 	rdprs	zero,zero,3289
   32bc4:	000336bc 	xorhi	zero,zero,3290
   32bc8:	000336c8 	cmpgei	zero,zero,3291
   32bcc:	d9002717 	ldw	r4,156(sp)
   32bd0:	0089c3c4 	movi	r2,9999
   32bd4:	20800015 	stw	r2,0(r4)
   32bd8:	a0001026 	beq	r20,zero,32c1c <_dtoa_r+0x31c>
   32bdc:	00c00174 	movhi	r3,5
   32be0:	18e03504 	addi	r3,r3,-32556
   32be4:	d9802917 	ldw	r6,164(sp)
   32be8:	303f7926 	beq	r6,zero,329d0 <_dtoa_r+0xd0>
   32bec:	188000c7 	ldb	r2,3(r3)
   32bf0:	190000c4 	addi	r4,r3,3
   32bf4:	1000101e 	bne	r2,zero,32c38 <_dtoa_r+0x338>
   32bf8:	d8802917 	ldw	r2,164(sp)
   32bfc:	11000015 	stw	r4,0(r2)
   32c00:	003f7306 	br	329d0 <_dtoa_r+0xd0>
   32c04:	00a00034 	movhi	r2,32768
   32c08:	10bfffc4 	addi	r2,r2,-1
   32c0c:	00c00044 	movi	r3,1
   32c10:	88aa703a 	and	r21,r17,r2
   32c14:	90c00015 	stw	r3,0(r18)
   32c18:	003f5806 	br	3297c <_dtoa_r+0x7c>
   32c1c:	00800434 	movhi	r2,16
   32c20:	10bfffc4 	addi	r2,r2,-1
   32c24:	a884703a 	and	r2,r21,r2
   32c28:	103fec1e 	bne	r2,zero,32bdc <_dtoa_r+0x2dc>
   32c2c:	00c00174 	movhi	r3,5
   32c30:	18e03204 	addi	r3,r3,-32568
   32c34:	003feb06 	br	32be4 <_dtoa_r+0x2e4>
   32c38:	d8802917 	ldw	r2,164(sp)
   32c3c:	19000204 	addi	r4,r3,8
   32c40:	11000015 	stw	r4,0(r2)
   32c44:	003f6206 	br	329d0 <_dtoa_r+0xd0>
   32c48:	ddc00117 	ldw	r23,4(sp)
   32c4c:	d8800217 	ldw	r2,8(sp)
   32c50:	01000804 	movi	r4,32
   32c54:	b8c10c84 	addi	r3,r23,1074
   32c58:	18a3883a 	add	r17,r3,r2
   32c5c:	2441b80e 	bge	r4,r17,33340 <_dtoa_r+0xa40>
   32c60:	00c01004 	movi	r3,64
   32c64:	1c47c83a 	sub	r3,r3,r17
   32c68:	88bff804 	addi	r2,r17,-32
   32c6c:	a8c6983a 	sll	r3,r21,r3
   32c70:	a084d83a 	srl	r2,r20,r2
   32c74:	1888b03a 	or	r4,r3,r2
   32c78:	003953c0 	call	3953c <__floatunsidf>
   32c7c:	1011883a 	mov	r8,r2
   32c80:	00bf8434 	movhi	r2,65040
   32c84:	01000044 	movi	r4,1
   32c88:	10d3883a 	add	r9,r2,r3
   32c8c:	8dbef344 	addi	r22,r17,-1075
   32c90:	d9000815 	stw	r4,32(sp)
   32c94:	003f6f06 	br	32a54 <_dtoa_r+0x154>
   32c98:	d8001715 	stw	zero,92(sp)
   32c9c:	04400044 	movi	r17,1
   32ca0:	00bfffc4 	movi	r2,-1
   32ca4:	00c00044 	movi	r3,1
   32ca8:	d8800e15 	stw	r2,56(sp)
   32cac:	d8002615 	stw	zero,152(sp)
   32cb0:	d8800f15 	stw	r2,60(sp)
   32cb4:	d8c00b15 	stw	r3,44(sp)
   32cb8:	1021883a 	mov	r16,r2
   32cbc:	d8801617 	ldw	r2,88(sp)
   32cc0:	10001115 	stw	zero,68(r2)
   32cc4:	d8801617 	ldw	r2,88(sp)
   32cc8:	11401117 	ldw	r5,68(r2)
   32ccc:	1009883a 	mov	r4,r2
   32cd0:	00360480 	call	36048 <_Balloc>
   32cd4:	d8c01617 	ldw	r3,88(sp)
   32cd8:	d8800515 	stw	r2,20(sp)
   32cdc:	18801015 	stw	r2,64(r3)
   32ce0:	00800384 	movi	r2,14
   32ce4:	14006836 	bltu	r2,r16,32e88 <_dtoa_r+0x588>
   32ce8:	8805003a 	cmpeq	r2,r17,zero
   32cec:	1000661e 	bne	r2,zero,32e88 <_dtoa_r+0x588>
   32cf0:	d9000d17 	ldw	r4,52(sp)
   32cf4:	0102300e 	bge	zero,r4,335b8 <_dtoa_r+0xcb8>
   32cf8:	208003cc 	andi	r2,r4,15
   32cfc:	100490fa 	slli	r2,r2,3
   32d00:	2025d13a 	srai	r18,r4,4
   32d04:	00c00174 	movhi	r3,5
   32d08:	18e04704 	addi	r3,r3,-32484
   32d0c:	10c5883a 	add	r2,r2,r3
   32d10:	90c0040c 	andi	r3,r18,16
   32d14:	14000017 	ldw	r16,0(r2)
   32d18:	14400117 	ldw	r17,4(r2)
   32d1c:	18036a1e 	bne	r3,zero,33ac8 <_dtoa_r+0x11c8>
   32d20:	05800084 	movi	r22,2
   32d24:	90001026 	beq	r18,zero,32d68 <_dtoa_r+0x468>
   32d28:	04c00174 	movhi	r19,5
   32d2c:	9ce07904 	addi	r19,r19,-32284
   32d30:	9080004c 	andi	r2,r18,1
   32d34:	1005003a 	cmpeq	r2,r2,zero
   32d38:	1000081e 	bne	r2,zero,32d5c <_dtoa_r+0x45c>
   32d3c:	99800017 	ldw	r6,0(r19)
   32d40:	99c00117 	ldw	r7,4(r19)
   32d44:	880b883a 	mov	r5,r17
   32d48:	8009883a 	mov	r4,r16
   32d4c:	0038aa80 	call	38aa8 <__muldf3>
   32d50:	1021883a 	mov	r16,r2
   32d54:	b5800044 	addi	r22,r22,1
   32d58:	1823883a 	mov	r17,r3
   32d5c:	9025d07a 	srai	r18,r18,1
   32d60:	9cc00204 	addi	r19,r19,8
   32d64:	903ff21e 	bne	r18,zero,32d30 <_dtoa_r+0x430>
   32d68:	a80b883a 	mov	r5,r21
   32d6c:	a009883a 	mov	r4,r20
   32d70:	880f883a 	mov	r7,r17
   32d74:	800d883a 	mov	r6,r16
   32d78:	0038e6c0 	call	38e6c <__divdf3>
   32d7c:	1029883a 	mov	r20,r2
   32d80:	182b883a 	mov	r21,r3
   32d84:	d8c00c17 	ldw	r3,48(sp)
   32d88:	1805003a 	cmpeq	r2,r3,zero
   32d8c:	1000081e 	bne	r2,zero,32db0 <_dtoa_r+0x4b0>
   32d90:	0005883a 	mov	r2,zero
   32d94:	00cffc34 	movhi	r3,16368
   32d98:	180f883a 	mov	r7,r3
   32d9c:	a009883a 	mov	r4,r20
   32da0:	a80b883a 	mov	r5,r21
   32da4:	100d883a 	mov	r6,r2
   32da8:	00392e40 	call	392e4 <__ltdf2>
   32dac:	1003fe16 	blt	r2,zero,33da8 <_dtoa_r+0x14a8>
   32db0:	b009883a 	mov	r4,r22
   32db4:	003936c0 	call	3936c <__floatsidf>
   32db8:	180b883a 	mov	r5,r3
   32dbc:	1009883a 	mov	r4,r2
   32dc0:	a00d883a 	mov	r6,r20
   32dc4:	a80f883a 	mov	r7,r21
   32dc8:	0038aa80 	call	38aa8 <__muldf3>
   32dcc:	0011883a 	mov	r8,zero
   32dd0:	02500734 	movhi	r9,16412
   32dd4:	1009883a 	mov	r4,r2
   32dd8:	180b883a 	mov	r5,r3
   32ddc:	480f883a 	mov	r7,r9
   32de0:	400d883a 	mov	r6,r8
   32de4:	0038a340 	call	38a34 <__adddf3>
   32de8:	d9000f17 	ldw	r4,60(sp)
   32dec:	102d883a 	mov	r22,r2
   32df0:	00bf3034 	movhi	r2,64704
   32df4:	18b9883a 	add	fp,r3,r2
   32df8:	e02f883a 	mov	r23,fp
   32dfc:	20028f1e 	bne	r4,zero,3383c <_dtoa_r+0xf3c>
   32e00:	0005883a 	mov	r2,zero
   32e04:	00d00534 	movhi	r3,16404
   32e08:	a009883a 	mov	r4,r20
   32e0c:	a80b883a 	mov	r5,r21
   32e10:	180f883a 	mov	r7,r3
   32e14:	100d883a 	mov	r6,r2
   32e18:	00389b40 	call	389b4 <__subdf3>
   32e1c:	1009883a 	mov	r4,r2
   32e20:	e00f883a 	mov	r7,fp
   32e24:	180b883a 	mov	r5,r3
   32e28:	b00d883a 	mov	r6,r22
   32e2c:	1025883a 	mov	r18,r2
   32e30:	1827883a 	mov	r19,r3
   32e34:	00391d40 	call	391d4 <__gtdf2>
   32e38:	00834f16 	blt	zero,r2,33b78 <_dtoa_r+0x1278>
   32e3c:	e0e0003c 	xorhi	r3,fp,32768
   32e40:	9009883a 	mov	r4,r18
   32e44:	980b883a 	mov	r5,r19
   32e48:	180f883a 	mov	r7,r3
   32e4c:	b00d883a 	mov	r6,r22
   32e50:	00392e40 	call	392e4 <__ltdf2>
   32e54:	1000080e 	bge	r2,zero,32e78 <_dtoa_r+0x578>
   32e58:	0027883a 	mov	r19,zero
   32e5c:	0025883a 	mov	r18,zero
   32e60:	d8802617 	ldw	r2,152(sp)
   32e64:	df000517 	ldw	fp,20(sp)
   32e68:	d8000615 	stw	zero,24(sp)
   32e6c:	0084303a 	nor	r2,zero,r2
   32e70:	d8800d15 	stw	r2,52(sp)
   32e74:	00019b06 	br	334e4 <_dtoa_r+0xbe4>
   32e78:	d9801217 	ldw	r6,72(sp)
   32e7c:	d8801317 	ldw	r2,76(sp)
   32e80:	3029883a 	mov	r20,r6
   32e84:	102b883a 	mov	r21,r2
   32e88:	d8c00217 	ldw	r3,8(sp)
   32e8c:	18008516 	blt	r3,zero,330a4 <_dtoa_r+0x7a4>
   32e90:	d9000d17 	ldw	r4,52(sp)
   32e94:	00800384 	movi	r2,14
   32e98:	11008216 	blt	r2,r4,330a4 <_dtoa_r+0x7a4>
   32e9c:	200490fa 	slli	r2,r4,3
   32ea0:	d9802617 	ldw	r6,152(sp)
   32ea4:	00c00174 	movhi	r3,5
   32ea8:	18e04704 	addi	r3,r3,-32484
   32eac:	10c5883a 	add	r2,r2,r3
   32eb0:	14800017 	ldw	r18,0(r2)
   32eb4:	14c00117 	ldw	r19,4(r2)
   32eb8:	30031e16 	blt	r6,zero,33b34 <_dtoa_r+0x1234>
   32ebc:	d9000517 	ldw	r4,20(sp)
   32ec0:	d8c00f17 	ldw	r3,60(sp)
   32ec4:	a823883a 	mov	r17,r21
   32ec8:	a021883a 	mov	r16,r20
   32ecc:	192b883a 	add	r21,r3,r4
   32ed0:	2039883a 	mov	fp,r4
   32ed4:	00000f06 	br	32f14 <_dtoa_r+0x614>
   32ed8:	0005883a 	mov	r2,zero
   32edc:	00d00934 	movhi	r3,16420
   32ee0:	5009883a 	mov	r4,r10
   32ee4:	580b883a 	mov	r5,r11
   32ee8:	180f883a 	mov	r7,r3
   32eec:	100d883a 	mov	r6,r2
   32ef0:	0038aa80 	call	38aa8 <__muldf3>
   32ef4:	180b883a 	mov	r5,r3
   32ef8:	000d883a 	mov	r6,zero
   32efc:	000f883a 	mov	r7,zero
   32f00:	1009883a 	mov	r4,r2
   32f04:	1021883a 	mov	r16,r2
   32f08:	1823883a 	mov	r17,r3
   32f0c:	003914c0 	call	3914c <__nedf2>
   32f10:	10004526 	beq	r2,zero,33028 <_dtoa_r+0x728>
   32f14:	900d883a 	mov	r6,r18
   32f18:	980f883a 	mov	r7,r19
   32f1c:	8009883a 	mov	r4,r16
   32f20:	880b883a 	mov	r5,r17
   32f24:	0038e6c0 	call	38e6c <__divdf3>
   32f28:	180b883a 	mov	r5,r3
   32f2c:	1009883a 	mov	r4,r2
   32f30:	00394640 	call	39464 <__fixdfsi>
   32f34:	1009883a 	mov	r4,r2
   32f38:	1029883a 	mov	r20,r2
   32f3c:	003936c0 	call	3936c <__floatsidf>
   32f40:	180f883a 	mov	r7,r3
   32f44:	9009883a 	mov	r4,r18
   32f48:	980b883a 	mov	r5,r19
   32f4c:	100d883a 	mov	r6,r2
   32f50:	0038aa80 	call	38aa8 <__muldf3>
   32f54:	180f883a 	mov	r7,r3
   32f58:	880b883a 	mov	r5,r17
   32f5c:	8009883a 	mov	r4,r16
   32f60:	100d883a 	mov	r6,r2
   32f64:	00389b40 	call	389b4 <__subdf3>
   32f68:	1015883a 	mov	r10,r2
   32f6c:	a0800c04 	addi	r2,r20,48
   32f70:	e0800005 	stb	r2,0(fp)
   32f74:	e7000044 	addi	fp,fp,1
   32f78:	1817883a 	mov	r11,r3
   32f7c:	e57fd61e 	bne	fp,r21,32ed8 <_dtoa_r+0x5d8>
   32f80:	500d883a 	mov	r6,r10
   32f84:	180f883a 	mov	r7,r3
   32f88:	5009883a 	mov	r4,r10
   32f8c:	180b883a 	mov	r5,r3
   32f90:	0038a340 	call	38a34 <__adddf3>
   32f94:	100d883a 	mov	r6,r2
   32f98:	9009883a 	mov	r4,r18
   32f9c:	980b883a 	mov	r5,r19
   32fa0:	180f883a 	mov	r7,r3
   32fa4:	1021883a 	mov	r16,r2
   32fa8:	1823883a 	mov	r17,r3
   32fac:	00392e40 	call	392e4 <__ltdf2>
   32fb0:	10000816 	blt	r2,zero,32fd4 <_dtoa_r+0x6d4>
   32fb4:	980b883a 	mov	r5,r19
   32fb8:	800d883a 	mov	r6,r16
   32fbc:	880f883a 	mov	r7,r17
   32fc0:	9009883a 	mov	r4,r18
   32fc4:	00390c40 	call	390c4 <__eqdf2>
   32fc8:	1000171e 	bne	r2,zero,33028 <_dtoa_r+0x728>
   32fcc:	a080004c 	andi	r2,r20,1
   32fd0:	10001526 	beq	r2,zero,33028 <_dtoa_r+0x728>
   32fd4:	d8800d17 	ldw	r2,52(sp)
   32fd8:	d8800415 	stw	r2,16(sp)
   32fdc:	e009883a 	mov	r4,fp
   32fe0:	213fffc4 	addi	r4,r4,-1
   32fe4:	20c00007 	ldb	r3,0(r4)
   32fe8:	00800e44 	movi	r2,57
   32fec:	1880081e 	bne	r3,r2,33010 <_dtoa_r+0x710>
   32ff0:	d8800517 	ldw	r2,20(sp)
   32ff4:	113ffa1e 	bne	r2,r4,32fe0 <_dtoa_r+0x6e0>
   32ff8:	d8c00417 	ldw	r3,16(sp)
   32ffc:	d9800517 	ldw	r6,20(sp)
   33000:	00800c04 	movi	r2,48
   33004:	18c00044 	addi	r3,r3,1
   33008:	d8c00415 	stw	r3,16(sp)
   3300c:	30800005 	stb	r2,0(r6)
   33010:	20800003 	ldbu	r2,0(r4)
   33014:	d8c00417 	ldw	r3,16(sp)
   33018:	27000044 	addi	fp,r4,1
   3301c:	10800044 	addi	r2,r2,1
   33020:	d8c00d15 	stw	r3,52(sp)
   33024:	20800005 	stb	r2,0(r4)
   33028:	d9001617 	ldw	r4,88(sp)
   3302c:	d9400717 	ldw	r5,28(sp)
   33030:	0035ac80 	call	35ac8 <_Bfree>
   33034:	e0000005 	stb	zero,0(fp)
   33038:	d9800d17 	ldw	r6,52(sp)
   3303c:	d8c02717 	ldw	r3,156(sp)
   33040:	d9002917 	ldw	r4,164(sp)
   33044:	30800044 	addi	r2,r6,1
   33048:	18800015 	stw	r2,0(r3)
   3304c:	20029c26 	beq	r4,zero,33ac0 <_dtoa_r+0x11c0>
   33050:	d8c00517 	ldw	r3,20(sp)
   33054:	27000015 	stw	fp,0(r4)
   33058:	003e5d06 	br	329d0 <_dtoa_r+0xd0>
   3305c:	d9800d17 	ldw	r6,52(sp)
   33060:	00c00174 	movhi	r3,5
   33064:	18e04704 	addi	r3,r3,-32484
   33068:	d9001217 	ldw	r4,72(sp)
   3306c:	300490fa 	slli	r2,r6,3
   33070:	d9401317 	ldw	r5,76(sp)
   33074:	10c5883a 	add	r2,r2,r3
   33078:	12000017 	ldw	r8,0(r2)
   3307c:	12400117 	ldw	r9,4(r2)
   33080:	400d883a 	mov	r6,r8
   33084:	480f883a 	mov	r7,r9
   33088:	00392e40 	call	392e4 <__ltdf2>
   3308c:	1000030e 	bge	r2,zero,3309c <_dtoa_r+0x79c>
   33090:	d8800d17 	ldw	r2,52(sp)
   33094:	10bfffc4 	addi	r2,r2,-1
   33098:	d8800d15 	stw	r2,52(sp)
   3309c:	d8000c15 	stw	zero,48(sp)
   330a0:	003ea806 	br	32b44 <_dtoa_r+0x244>
   330a4:	d9000b17 	ldw	r4,44(sp)
   330a8:	202cc03a 	cmpne	r22,r4,zero
   330ac:	b000c71e 	bne	r22,zero,333cc <_dtoa_r+0xacc>
   330b0:	dc001117 	ldw	r16,68(sp)
   330b4:	dc801017 	ldw	r18,64(sp)
   330b8:	0027883a 	mov	r19,zero
   330bc:	04000b0e 	bge	zero,r16,330ec <_dtoa_r+0x7ec>
   330c0:	d8c00a17 	ldw	r3,40(sp)
   330c4:	00c0090e 	bge	zero,r3,330ec <_dtoa_r+0x7ec>
   330c8:	8005883a 	mov	r2,r16
   330cc:	1c011316 	blt	r3,r16,3351c <_dtoa_r+0xc1c>
   330d0:	d9000a17 	ldw	r4,40(sp)
   330d4:	d9801117 	ldw	r6,68(sp)
   330d8:	80a1c83a 	sub	r16,r16,r2
   330dc:	2089c83a 	sub	r4,r4,r2
   330e0:	308dc83a 	sub	r6,r6,r2
   330e4:	d9000a15 	stw	r4,40(sp)
   330e8:	d9801115 	stw	r6,68(sp)
   330ec:	d8801017 	ldw	r2,64(sp)
   330f0:	0080150e 	bge	zero,r2,33148 <_dtoa_r+0x848>
   330f4:	d8c00b17 	ldw	r3,44(sp)
   330f8:	1805003a 	cmpeq	r2,r3,zero
   330fc:	1001c91e 	bne	r2,zero,33824 <_dtoa_r+0xf24>
   33100:	04800e0e 	bge	zero,r18,3313c <_dtoa_r+0x83c>
   33104:	d9001617 	ldw	r4,88(sp)
   33108:	980b883a 	mov	r5,r19
   3310c:	900d883a 	mov	r6,r18
   33110:	00369140 	call	36914 <__pow5mult>
   33114:	d9001617 	ldw	r4,88(sp)
   33118:	d9800717 	ldw	r6,28(sp)
   3311c:	100b883a 	mov	r5,r2
   33120:	1027883a 	mov	r19,r2
   33124:	00365580 	call	36558 <__multiply>
   33128:	d9001617 	ldw	r4,88(sp)
   3312c:	d9400717 	ldw	r5,28(sp)
   33130:	1023883a 	mov	r17,r2
   33134:	0035ac80 	call	35ac8 <_Bfree>
   33138:	dc400715 	stw	r17,28(sp)
   3313c:	d9001017 	ldw	r4,64(sp)
   33140:	248dc83a 	sub	r6,r4,r18
   33144:	30010e1e 	bne	r6,zero,33580 <_dtoa_r+0xc80>
   33148:	d9001617 	ldw	r4,88(sp)
   3314c:	04400044 	movi	r17,1
   33150:	880b883a 	mov	r5,r17
   33154:	00367ac0 	call	367ac <__i2b>
   33158:	d9800917 	ldw	r6,36(sp)
   3315c:	1025883a 	mov	r18,r2
   33160:	0180040e 	bge	zero,r6,33174 <_dtoa_r+0x874>
   33164:	d9001617 	ldw	r4,88(sp)
   33168:	100b883a 	mov	r5,r2
   3316c:	00369140 	call	36914 <__pow5mult>
   33170:	1025883a 	mov	r18,r2
   33174:	d8801717 	ldw	r2,92(sp)
   33178:	8880f30e 	bge	r17,r2,33548 <_dtoa_r+0xc48>
   3317c:	0023883a 	mov	r17,zero
   33180:	d9800917 	ldw	r6,36(sp)
   33184:	30019e1e 	bne	r6,zero,33800 <_dtoa_r+0xf00>
   33188:	00c00044 	movi	r3,1
   3318c:	d9000a17 	ldw	r4,40(sp)
   33190:	20c5883a 	add	r2,r4,r3
   33194:	10c007cc 	andi	r3,r2,31
   33198:	1800841e 	bne	r3,zero,333ac <_dtoa_r+0xaac>
   3319c:	00800704 	movi	r2,28
   331a0:	d9000a17 	ldw	r4,40(sp)
   331a4:	d9801117 	ldw	r6,68(sp)
   331a8:	80a1883a 	add	r16,r16,r2
   331ac:	2089883a 	add	r4,r4,r2
   331b0:	308d883a 	add	r6,r6,r2
   331b4:	d9000a15 	stw	r4,40(sp)
   331b8:	d9801115 	stw	r6,68(sp)
   331bc:	d8801117 	ldw	r2,68(sp)
   331c0:	0080050e 	bge	zero,r2,331d8 <_dtoa_r+0x8d8>
   331c4:	d9400717 	ldw	r5,28(sp)
   331c8:	d9001617 	ldw	r4,88(sp)
   331cc:	100d883a 	mov	r6,r2
   331d0:	003640c0 	call	3640c <__lshift>
   331d4:	d8800715 	stw	r2,28(sp)
   331d8:	d8c00a17 	ldw	r3,40(sp)
   331dc:	00c0050e 	bge	zero,r3,331f4 <_dtoa_r+0x8f4>
   331e0:	d9001617 	ldw	r4,88(sp)
   331e4:	900b883a 	mov	r5,r18
   331e8:	180d883a 	mov	r6,r3
   331ec:	003640c0 	call	3640c <__lshift>
   331f0:	1025883a 	mov	r18,r2
   331f4:	d9000c17 	ldw	r4,48(sp)
   331f8:	2005003a 	cmpeq	r2,r4,zero
   331fc:	10016f26 	beq	r2,zero,337bc <_dtoa_r+0xebc>
   33200:	d9000f17 	ldw	r4,60(sp)
   33204:	0102170e 	bge	zero,r4,33a64 <_dtoa_r+0x1164>
   33208:	d9800b17 	ldw	r6,44(sp)
   3320c:	3005003a 	cmpeq	r2,r6,zero
   33210:	1000881e 	bne	r2,zero,33434 <_dtoa_r+0xb34>
   33214:	0400050e 	bge	zero,r16,3322c <_dtoa_r+0x92c>
   33218:	d9001617 	ldw	r4,88(sp)
   3321c:	980b883a 	mov	r5,r19
   33220:	800d883a 	mov	r6,r16
   33224:	003640c0 	call	3640c <__lshift>
   33228:	1027883a 	mov	r19,r2
   3322c:	8804c03a 	cmpne	r2,r17,zero
   33230:	1002541e 	bne	r2,zero,33b84 <_dtoa_r+0x1284>
   33234:	980b883a 	mov	r5,r19
   33238:	dd800517 	ldw	r22,20(sp)
   3323c:	dcc00615 	stw	r19,24(sp)
   33240:	a700004c 	andi	fp,r20,1
   33244:	2827883a 	mov	r19,r5
   33248:	d9000717 	ldw	r4,28(sp)
   3324c:	900b883a 	mov	r5,r18
   33250:	00326bc0 	call	326bc <quorem>
   33254:	d9000717 	ldw	r4,28(sp)
   33258:	d9400617 	ldw	r5,24(sp)
   3325c:	1023883a 	mov	r17,r2
   33260:	8dc00c04 	addi	r23,r17,48
   33264:	0035c240 	call	35c24 <__mcmp>
   33268:	d9001617 	ldw	r4,88(sp)
   3326c:	900b883a 	mov	r5,r18
   33270:	980d883a 	mov	r6,r19
   33274:	1029883a 	mov	r20,r2
   33278:	00362800 	call	36280 <__mdiff>
   3327c:	102b883a 	mov	r21,r2
   33280:	10800317 	ldw	r2,12(r2)
   33284:	1001281e 	bne	r2,zero,33728 <_dtoa_r+0xe28>
   33288:	d9000717 	ldw	r4,28(sp)
   3328c:	a80b883a 	mov	r5,r21
   33290:	0035c240 	call	35c24 <__mcmp>
   33294:	d9001617 	ldw	r4,88(sp)
   33298:	1021883a 	mov	r16,r2
   3329c:	a80b883a 	mov	r5,r21
   332a0:	0035ac80 	call	35ac8 <_Bfree>
   332a4:	8000041e 	bne	r16,zero,332b8 <_dtoa_r+0x9b8>
   332a8:	d8801717 	ldw	r2,92(sp)
   332ac:	1000021e 	bne	r2,zero,332b8 <_dtoa_r+0x9b8>
   332b0:	e004c03a 	cmpne	r2,fp,zero
   332b4:	10011726 	beq	r2,zero,33714 <_dtoa_r+0xe14>
   332b8:	a0010616 	blt	r20,zero,336d4 <_dtoa_r+0xdd4>
   332bc:	a000041e 	bne	r20,zero,332d0 <_dtoa_r+0x9d0>
   332c0:	d8c01717 	ldw	r3,92(sp)
   332c4:	1800021e 	bne	r3,zero,332d0 <_dtoa_r+0x9d0>
   332c8:	e004c03a 	cmpne	r2,fp,zero
   332cc:	10010126 	beq	r2,zero,336d4 <_dtoa_r+0xdd4>
   332d0:	04023d16 	blt	zero,r16,33bc8 <_dtoa_r+0x12c8>
   332d4:	b5c00005 	stb	r23,0(r22)
   332d8:	d9800517 	ldw	r6,20(sp)
   332dc:	d9000f17 	ldw	r4,60(sp)
   332e0:	b5800044 	addi	r22,r22,1
   332e4:	3105883a 	add	r2,r6,r4
   332e8:	b0806526 	beq	r22,r2,33480 <_dtoa_r+0xb80>
   332ec:	d9400717 	ldw	r5,28(sp)
   332f0:	d9001617 	ldw	r4,88(sp)
   332f4:	01800284 	movi	r6,10
   332f8:	000f883a 	mov	r7,zero
   332fc:	00367e80 	call	367e8 <__multadd>
   33300:	d8800715 	stw	r2,28(sp)
   33304:	d8800617 	ldw	r2,24(sp)
   33308:	14c10c26 	beq	r2,r19,3373c <_dtoa_r+0xe3c>
   3330c:	d9400617 	ldw	r5,24(sp)
   33310:	d9001617 	ldw	r4,88(sp)
   33314:	01800284 	movi	r6,10
   33318:	000f883a 	mov	r7,zero
   3331c:	00367e80 	call	367e8 <__multadd>
   33320:	d9001617 	ldw	r4,88(sp)
   33324:	980b883a 	mov	r5,r19
   33328:	01800284 	movi	r6,10
   3332c:	000f883a 	mov	r7,zero
   33330:	d8800615 	stw	r2,24(sp)
   33334:	00367e80 	call	367e8 <__multadd>
   33338:	1027883a 	mov	r19,r2
   3333c:	003fc206 	br	33248 <_dtoa_r+0x948>
   33340:	2445c83a 	sub	r2,r4,r17
   33344:	a088983a 	sll	r4,r20,r2
   33348:	003e4b06 	br	32c78 <_dtoa_r+0x378>
   3334c:	01bfffc4 	movi	r6,-1
   33350:	00800044 	movi	r2,1
   33354:	d9800e15 	stw	r6,56(sp)
   33358:	d9800f15 	stw	r6,60(sp)
   3335c:	d8800b15 	stw	r2,44(sp)
   33360:	d8c01617 	ldw	r3,88(sp)
   33364:	008005c4 	movi	r2,23
   33368:	18001115 	stw	zero,68(r3)
   3336c:	1580082e 	bgeu	r2,r22,33390 <_dtoa_r+0xa90>
   33370:	00c00104 	movi	r3,4
   33374:	0009883a 	mov	r4,zero
   33378:	18c7883a 	add	r3,r3,r3
   3337c:	18800504 	addi	r2,r3,20
   33380:	21000044 	addi	r4,r4,1
   33384:	b0bffc2e 	bgeu	r22,r2,33378 <_dtoa_r+0xa78>
   33388:	d9801617 	ldw	r6,88(sp)
   3338c:	31001115 	stw	r4,68(r6)
   33390:	dc000f17 	ldw	r16,60(sp)
   33394:	003e4b06 	br	32cc4 <_dtoa_r+0x3c4>
   33398:	d9801717 	ldw	r6,92(sp)
   3339c:	0023883a 	mov	r17,zero
   333a0:	31bfff04 	addi	r6,r6,-4
   333a4:	d9801715 	stw	r6,92(sp)
   333a8:	003df806 	br	32b8c <_dtoa_r+0x28c>
   333ac:	00800804 	movi	r2,32
   333b0:	10c9c83a 	sub	r4,r2,r3
   333b4:	00c00104 	movi	r3,4
   333b8:	19005a16 	blt	r3,r4,33524 <_dtoa_r+0xc24>
   333bc:	008000c4 	movi	r2,3
   333c0:	113f7e16 	blt	r2,r4,331bc <_dtoa_r+0x8bc>
   333c4:	20800704 	addi	r2,r4,28
   333c8:	003f7506 	br	331a0 <_dtoa_r+0x8a0>
   333cc:	d9801717 	ldw	r6,92(sp)
   333d0:	00800044 	movi	r2,1
   333d4:	1180a10e 	bge	r2,r6,3365c <_dtoa_r+0xd5c>
   333d8:	d9800f17 	ldw	r6,60(sp)
   333dc:	d8c01017 	ldw	r3,64(sp)
   333e0:	30bfffc4 	addi	r2,r6,-1
   333e4:	1881c616 	blt	r3,r2,33b00 <_dtoa_r+0x1200>
   333e8:	18a5c83a 	sub	r18,r3,r2
   333ec:	d8800f17 	ldw	r2,60(sp)
   333f0:	10026216 	blt	r2,zero,33d7c <_dtoa_r+0x147c>
   333f4:	dc001117 	ldw	r16,68(sp)
   333f8:	1007883a 	mov	r3,r2
   333fc:	d9800a17 	ldw	r6,40(sp)
   33400:	d8801117 	ldw	r2,68(sp)
   33404:	d9001617 	ldw	r4,88(sp)
   33408:	30cd883a 	add	r6,r6,r3
   3340c:	10c5883a 	add	r2,r2,r3
   33410:	01400044 	movi	r5,1
   33414:	d9800a15 	stw	r6,40(sp)
   33418:	d8801115 	stw	r2,68(sp)
   3341c:	00367ac0 	call	367ac <__i2b>
   33420:	1027883a 	mov	r19,r2
   33424:	003f2506 	br	330bc <_dtoa_r+0x7bc>
   33428:	00c00174 	movhi	r3,5
   3342c:	18e02904 	addi	r3,r3,-32604
   33430:	003d6706 	br	329d0 <_dtoa_r+0xd0>
   33434:	dd800517 	ldw	r22,20(sp)
   33438:	04000044 	movi	r16,1
   3343c:	00000706 	br	3345c <_dtoa_r+0xb5c>
   33440:	d9400717 	ldw	r5,28(sp)
   33444:	d9001617 	ldw	r4,88(sp)
   33448:	01800284 	movi	r6,10
   3344c:	000f883a 	mov	r7,zero
   33450:	00367e80 	call	367e8 <__multadd>
   33454:	d8800715 	stw	r2,28(sp)
   33458:	84000044 	addi	r16,r16,1
   3345c:	d9000717 	ldw	r4,28(sp)
   33460:	900b883a 	mov	r5,r18
   33464:	00326bc0 	call	326bc <quorem>
   33468:	15c00c04 	addi	r23,r2,48
   3346c:	b5c00005 	stb	r23,0(r22)
   33470:	d8c00f17 	ldw	r3,60(sp)
   33474:	b5800044 	addi	r22,r22,1
   33478:	80fff116 	blt	r16,r3,33440 <_dtoa_r+0xb40>
   3347c:	d8000615 	stw	zero,24(sp)
   33480:	d9400717 	ldw	r5,28(sp)
   33484:	d9001617 	ldw	r4,88(sp)
   33488:	01800044 	movi	r6,1
   3348c:	003640c0 	call	3640c <__lshift>
   33490:	1009883a 	mov	r4,r2
   33494:	900b883a 	mov	r5,r18
   33498:	d8800715 	stw	r2,28(sp)
   3349c:	0035c240 	call	35c24 <__mcmp>
   334a0:	00803c0e 	bge	zero,r2,33594 <_dtoa_r+0xc94>
   334a4:	b009883a 	mov	r4,r22
   334a8:	213fffc4 	addi	r4,r4,-1
   334ac:	21400003 	ldbu	r5,0(r4)
   334b0:	00800e44 	movi	r2,57
   334b4:	28c03fcc 	andi	r3,r5,255
   334b8:	18c0201c 	xori	r3,r3,128
   334bc:	18ffe004 	addi	r3,r3,-128
   334c0:	1881981e 	bne	r3,r2,33b24 <_dtoa_r+0x1224>
   334c4:	d9800517 	ldw	r6,20(sp)
   334c8:	21bff71e 	bne	r4,r6,334a8 <_dtoa_r+0xba8>
   334cc:	d8800d17 	ldw	r2,52(sp)
   334d0:	37000044 	addi	fp,r6,1
   334d4:	10800044 	addi	r2,r2,1
   334d8:	d8800d15 	stw	r2,52(sp)
   334dc:	00800c44 	movi	r2,49
   334e0:	30800005 	stb	r2,0(r6)
   334e4:	d9001617 	ldw	r4,88(sp)
   334e8:	900b883a 	mov	r5,r18
   334ec:	0035ac80 	call	35ac8 <_Bfree>
   334f0:	983ecd26 	beq	r19,zero,33028 <_dtoa_r+0x728>
   334f4:	d8c00617 	ldw	r3,24(sp)
   334f8:	18000426 	beq	r3,zero,3350c <_dtoa_r+0xc0c>
   334fc:	1cc00326 	beq	r3,r19,3350c <_dtoa_r+0xc0c>
   33500:	d9001617 	ldw	r4,88(sp)
   33504:	180b883a 	mov	r5,r3
   33508:	0035ac80 	call	35ac8 <_Bfree>
   3350c:	d9001617 	ldw	r4,88(sp)
   33510:	980b883a 	mov	r5,r19
   33514:	0035ac80 	call	35ac8 <_Bfree>
   33518:	003ec306 	br	33028 <_dtoa_r+0x728>
   3351c:	1805883a 	mov	r2,r3
   33520:	003eeb06 	br	330d0 <_dtoa_r+0x7d0>
   33524:	d9800a17 	ldw	r6,40(sp)
   33528:	d8c01117 	ldw	r3,68(sp)
   3352c:	20bfff04 	addi	r2,r4,-4
   33530:	308d883a 	add	r6,r6,r2
   33534:	1887883a 	add	r3,r3,r2
   33538:	80a1883a 	add	r16,r16,r2
   3353c:	d9800a15 	stw	r6,40(sp)
   33540:	d8c01115 	stw	r3,68(sp)
   33544:	003f1d06 	br	331bc <_dtoa_r+0x8bc>
   33548:	a03f0c1e 	bne	r20,zero,3317c <_dtoa_r+0x87c>
   3354c:	00800434 	movhi	r2,16
   33550:	10bfffc4 	addi	r2,r2,-1
   33554:	a884703a 	and	r2,r21,r2
   33558:	103f081e 	bne	r2,zero,3317c <_dtoa_r+0x87c>
   3355c:	a89ffc2c 	andhi	r2,r21,32752
   33560:	103f0626 	beq	r2,zero,3317c <_dtoa_r+0x87c>
   33564:	d8c01117 	ldw	r3,68(sp)
   33568:	d9000a17 	ldw	r4,40(sp)
   3356c:	18c00044 	addi	r3,r3,1
   33570:	21000044 	addi	r4,r4,1
   33574:	d8c01115 	stw	r3,68(sp)
   33578:	d9000a15 	stw	r4,40(sp)
   3357c:	003f0006 	br	33180 <_dtoa_r+0x880>
   33580:	d9400717 	ldw	r5,28(sp)
   33584:	d9001617 	ldw	r4,88(sp)
   33588:	00369140 	call	36914 <__pow5mult>
   3358c:	d8800715 	stw	r2,28(sp)
   33590:	003eed06 	br	33148 <_dtoa_r+0x848>
   33594:	1000021e 	bne	r2,zero,335a0 <_dtoa_r+0xca0>
   33598:	b880004c 	andi	r2,r23,1
   3359c:	103fc11e 	bne	r2,zero,334a4 <_dtoa_r+0xba4>
   335a0:	b5bfffc4 	addi	r22,r22,-1
   335a4:	b0c00007 	ldb	r3,0(r22)
   335a8:	00800c04 	movi	r2,48
   335ac:	18bffc26 	beq	r3,r2,335a0 <_dtoa_r+0xca0>
   335b0:	b7000044 	addi	fp,r22,1
   335b4:	003fcb06 	br	334e4 <_dtoa_r+0xbe4>
   335b8:	d9800d17 	ldw	r6,52(sp)
   335bc:	018fc83a 	sub	r7,zero,r6
   335c0:	3801f726 	beq	r7,zero,33da0 <_dtoa_r+0x14a0>
   335c4:	398003cc 	andi	r6,r7,15
   335c8:	300c90fa 	slli	r6,r6,3
   335cc:	01400174 	movhi	r5,5
   335d0:	29604704 	addi	r5,r5,-32484
   335d4:	d9001217 	ldw	r4,72(sp)
   335d8:	314d883a 	add	r6,r6,r5
   335dc:	30c00117 	ldw	r3,4(r6)
   335e0:	30800017 	ldw	r2,0(r6)
   335e4:	d9401317 	ldw	r5,76(sp)
   335e8:	3821d13a 	srai	r16,r7,4
   335ec:	100d883a 	mov	r6,r2
   335f0:	180f883a 	mov	r7,r3
   335f4:	0038aa80 	call	38aa8 <__muldf3>
   335f8:	1011883a 	mov	r8,r2
   335fc:	1813883a 	mov	r9,r3
   33600:	1029883a 	mov	r20,r2
   33604:	182b883a 	mov	r21,r3
   33608:	8001e526 	beq	r16,zero,33da0 <_dtoa_r+0x14a0>
   3360c:	05800084 	movi	r22,2
   33610:	04400174 	movhi	r17,5
   33614:	8c607904 	addi	r17,r17,-32284
   33618:	8080004c 	andi	r2,r16,1
   3361c:	1005003a 	cmpeq	r2,r2,zero
   33620:	1000081e 	bne	r2,zero,33644 <_dtoa_r+0xd44>
   33624:	89800017 	ldw	r6,0(r17)
   33628:	89c00117 	ldw	r7,4(r17)
   3362c:	480b883a 	mov	r5,r9
   33630:	4009883a 	mov	r4,r8
   33634:	0038aa80 	call	38aa8 <__muldf3>
   33638:	1011883a 	mov	r8,r2
   3363c:	b5800044 	addi	r22,r22,1
   33640:	1813883a 	mov	r9,r3
   33644:	8021d07a 	srai	r16,r16,1
   33648:	8c400204 	addi	r17,r17,8
   3364c:	803ff21e 	bne	r16,zero,33618 <_dtoa_r+0xd18>
   33650:	4029883a 	mov	r20,r8
   33654:	482b883a 	mov	r21,r9
   33658:	003dca06 	br	32d84 <_dtoa_r+0x484>
   3365c:	d9000817 	ldw	r4,32(sp)
   33660:	2005003a 	cmpeq	r2,r4,zero
   33664:	1001f61e 	bne	r2,zero,33e40 <_dtoa_r+0x1540>
   33668:	dc001117 	ldw	r16,68(sp)
   3366c:	dc801017 	ldw	r18,64(sp)
   33670:	18c10cc4 	addi	r3,r3,1075
   33674:	003f6106 	br	333fc <_dtoa_r+0xafc>
   33678:	d8000b15 	stw	zero,44(sp)
   3367c:	d9802617 	ldw	r6,152(sp)
   33680:	d8c00d17 	ldw	r3,52(sp)
   33684:	30800044 	addi	r2,r6,1
   33688:	18ad883a 	add	r22,r3,r2
   3368c:	b13fffc4 	addi	r4,r22,-1
   33690:	d9000e15 	stw	r4,56(sp)
   33694:	0581f60e 	bge	zero,r22,33e70 <_dtoa_r+0x1570>
   33698:	dd800f15 	stw	r22,60(sp)
   3369c:	003f3006 	br	33360 <_dtoa_r+0xa60>
   336a0:	d8000b15 	stw	zero,44(sp)
   336a4:	d9002617 	ldw	r4,152(sp)
   336a8:	0101eb0e 	bge	zero,r4,33e58 <_dtoa_r+0x1558>
   336ac:	202d883a 	mov	r22,r4
   336b0:	d9000e15 	stw	r4,56(sp)
   336b4:	d9000f15 	stw	r4,60(sp)
   336b8:	003f2906 	br	33360 <_dtoa_r+0xa60>
   336bc:	01800044 	movi	r6,1
   336c0:	d9800b15 	stw	r6,44(sp)
   336c4:	003ff706 	br	336a4 <_dtoa_r+0xda4>
   336c8:	01000044 	movi	r4,1
   336cc:	d9000b15 	stw	r4,44(sp)
   336d0:	003fea06 	br	3367c <_dtoa_r+0xd7c>
   336d4:	04000c0e 	bge	zero,r16,33708 <_dtoa_r+0xe08>
   336d8:	d9400717 	ldw	r5,28(sp)
   336dc:	d9001617 	ldw	r4,88(sp)
   336e0:	01800044 	movi	r6,1
   336e4:	003640c0 	call	3640c <__lshift>
   336e8:	1009883a 	mov	r4,r2
   336ec:	900b883a 	mov	r5,r18
   336f0:	d8800715 	stw	r2,28(sp)
   336f4:	0035c240 	call	35c24 <__mcmp>
   336f8:	0081e00e 	bge	zero,r2,33e7c <_dtoa_r+0x157c>
   336fc:	bdc00044 	addi	r23,r23,1
   33700:	00800e84 	movi	r2,58
   33704:	b881a226 	beq	r23,r2,33d90 <_dtoa_r+0x1490>
   33708:	b7000044 	addi	fp,r22,1
   3370c:	b5c00005 	stb	r23,0(r22)
   33710:	003f7406 	br	334e4 <_dtoa_r+0xbe4>
   33714:	00800e44 	movi	r2,57
   33718:	b8819d26 	beq	r23,r2,33d90 <_dtoa_r+0x1490>
   3371c:	053ffa0e 	bge	zero,r20,33708 <_dtoa_r+0xe08>
   33720:	8dc00c44 	addi	r23,r17,49
   33724:	003ff806 	br	33708 <_dtoa_r+0xe08>
   33728:	d9001617 	ldw	r4,88(sp)
   3372c:	a80b883a 	mov	r5,r21
   33730:	04000044 	movi	r16,1
   33734:	0035ac80 	call	35ac8 <_Bfree>
   33738:	003edf06 	br	332b8 <_dtoa_r+0x9b8>
   3373c:	d9001617 	ldw	r4,88(sp)
   33740:	980b883a 	mov	r5,r19
   33744:	01800284 	movi	r6,10
   33748:	000f883a 	mov	r7,zero
   3374c:	00367e80 	call	367e8 <__multadd>
   33750:	1027883a 	mov	r19,r2
   33754:	d8800615 	stw	r2,24(sp)
   33758:	003ebb06 	br	33248 <_dtoa_r+0x948>
   3375c:	d9801117 	ldw	r6,68(sp)
   33760:	d8800d17 	ldw	r2,52(sp)
   33764:	d8000915 	stw	zero,36(sp)
   33768:	308dc83a 	sub	r6,r6,r2
   3376c:	0087c83a 	sub	r3,zero,r2
   33770:	d9801115 	stw	r6,68(sp)
   33774:	d8c01015 	stw	r3,64(sp)
   33778:	003cfe06 	br	32b74 <_dtoa_r+0x274>
   3377c:	018dc83a 	sub	r6,zero,r6
   33780:	d9801115 	stw	r6,68(sp)
   33784:	d8000a15 	stw	zero,40(sp)
   33788:	003cf306 	br	32b58 <_dtoa_r+0x258>
   3378c:	d9000d17 	ldw	r4,52(sp)
   33790:	003936c0 	call	3936c <__floatsidf>
   33794:	880b883a 	mov	r5,r17
   33798:	8009883a 	mov	r4,r16
   3379c:	180f883a 	mov	r7,r3
   337a0:	100d883a 	mov	r6,r2
   337a4:	003914c0 	call	3914c <__nedf2>
   337a8:	103ce126 	beq	r2,zero,32b30 <_dtoa_r+0x230>
   337ac:	d9800d17 	ldw	r6,52(sp)
   337b0:	31bfffc4 	addi	r6,r6,-1
   337b4:	d9800d15 	stw	r6,52(sp)
   337b8:	003cdd06 	br	32b30 <_dtoa_r+0x230>
   337bc:	d9000717 	ldw	r4,28(sp)
   337c0:	900b883a 	mov	r5,r18
   337c4:	0035c240 	call	35c24 <__mcmp>
   337c8:	103e8d0e 	bge	r2,zero,33200 <_dtoa_r+0x900>
   337cc:	d9400717 	ldw	r5,28(sp)
   337d0:	d9001617 	ldw	r4,88(sp)
   337d4:	01800284 	movi	r6,10
   337d8:	000f883a 	mov	r7,zero
   337dc:	00367e80 	call	367e8 <__multadd>
   337e0:	d9800d17 	ldw	r6,52(sp)
   337e4:	d8800715 	stw	r2,28(sp)
   337e8:	31bfffc4 	addi	r6,r6,-1
   337ec:	d9800d15 	stw	r6,52(sp)
   337f0:	b001a71e 	bne	r22,zero,33e90 <_dtoa_r+0x1590>
   337f4:	d8800e17 	ldw	r2,56(sp)
   337f8:	d8800f15 	stw	r2,60(sp)
   337fc:	003e8006 	br	33200 <_dtoa_r+0x900>
   33800:	90800417 	ldw	r2,16(r18)
   33804:	1085883a 	add	r2,r2,r2
   33808:	1085883a 	add	r2,r2,r2
   3380c:	1485883a 	add	r2,r2,r18
   33810:	11000417 	ldw	r4,16(r2)
   33814:	0035af00 	call	35af0 <__hi0bits>
   33818:	00c00804 	movi	r3,32
   3381c:	1887c83a 	sub	r3,r3,r2
   33820:	003e5a06 	br	3318c <_dtoa_r+0x88c>
   33824:	d9400717 	ldw	r5,28(sp)
   33828:	d9801017 	ldw	r6,64(sp)
   3382c:	d9001617 	ldw	r4,88(sp)
   33830:	00369140 	call	36914 <__pow5mult>
   33834:	d8800715 	stw	r2,28(sp)
   33838:	003e4306 	br	33148 <_dtoa_r+0x848>
   3383c:	d9800f17 	ldw	r6,60(sp)
   33840:	d8800d17 	ldw	r2,52(sp)
   33844:	d9800315 	stw	r6,12(sp)
   33848:	d8800415 	stw	r2,16(sp)
   3384c:	d8c00b17 	ldw	r3,44(sp)
   33850:	1805003a 	cmpeq	r2,r3,zero
   33854:	1000e21e 	bne	r2,zero,33be0 <_dtoa_r+0x12e0>
   33858:	d9000317 	ldw	r4,12(sp)
   3385c:	0005883a 	mov	r2,zero
   33860:	00cff834 	movhi	r3,16352
   33864:	200c90fa 	slli	r6,r4,3
   33868:	01000174 	movhi	r4,5
   3386c:	21204704 	addi	r4,r4,-32484
   33870:	180b883a 	mov	r5,r3
   33874:	310d883a 	add	r6,r6,r4
   33878:	327fff17 	ldw	r9,-4(r6)
   3387c:	323ffe17 	ldw	r8,-8(r6)
   33880:	1009883a 	mov	r4,r2
   33884:	480f883a 	mov	r7,r9
   33888:	400d883a 	mov	r6,r8
   3388c:	0038e6c0 	call	38e6c <__divdf3>
   33890:	180b883a 	mov	r5,r3
   33894:	b00d883a 	mov	r6,r22
   33898:	b80f883a 	mov	r7,r23
   3389c:	1009883a 	mov	r4,r2
   338a0:	00389b40 	call	389b4 <__subdf3>
   338a4:	a80b883a 	mov	r5,r21
   338a8:	a009883a 	mov	r4,r20
   338ac:	d8c01915 	stw	r3,100(sp)
   338b0:	d8801815 	stw	r2,96(sp)
   338b4:	00394640 	call	39464 <__fixdfsi>
   338b8:	1009883a 	mov	r4,r2
   338bc:	1027883a 	mov	r19,r2
   338c0:	003936c0 	call	3936c <__floatsidf>
   338c4:	a80b883a 	mov	r5,r21
   338c8:	a009883a 	mov	r4,r20
   338cc:	180f883a 	mov	r7,r3
   338d0:	100d883a 	mov	r6,r2
   338d4:	00389b40 	call	389b4 <__subdf3>
   338d8:	d9801817 	ldw	r6,96(sp)
   338dc:	1823883a 	mov	r17,r3
   338e0:	d8801415 	stw	r2,80(sp)
   338e4:	302d883a 	mov	r22,r6
   338e8:	d9800517 	ldw	r6,20(sp)
   338ec:	9cc00c04 	addi	r19,r19,48
   338f0:	dc401515 	stw	r17,84(sp)
   338f4:	d8c01917 	ldw	r3,100(sp)
   338f8:	34c00005 	stb	r19,0(r6)
   338fc:	d8800517 	ldw	r2,20(sp)
   33900:	d9401917 	ldw	r5,100(sp)
   33904:	d9801417 	ldw	r6,80(sp)
   33908:	b009883a 	mov	r4,r22
   3390c:	880f883a 	mov	r7,r17
   33910:	182f883a 	mov	r23,r3
   33914:	17000044 	addi	fp,r2,1
   33918:	00391d40 	call	391d4 <__gtdf2>
   3391c:	00804e16 	blt	zero,r2,33a58 <_dtoa_r+0x1158>
   33920:	d9801417 	ldw	r6,80(sp)
   33924:	0005883a 	mov	r2,zero
   33928:	00cffc34 	movhi	r3,16368
   3392c:	180b883a 	mov	r5,r3
   33930:	880f883a 	mov	r7,r17
   33934:	1009883a 	mov	r4,r2
   33938:	00389b40 	call	389b4 <__subdf3>
   3393c:	d9401917 	ldw	r5,100(sp)
   33940:	180f883a 	mov	r7,r3
   33944:	b009883a 	mov	r4,r22
   33948:	100d883a 	mov	r6,r2
   3394c:	00391d40 	call	391d4 <__gtdf2>
   33950:	00bda216 	blt	zero,r2,32fdc <_dtoa_r+0x6dc>
   33954:	d8c00317 	ldw	r3,12(sp)
   33958:	00800044 	movi	r2,1
   3395c:	10c01216 	blt	r2,r3,339a8 <_dtoa_r+0x10a8>
   33960:	003d4506 	br	32e78 <_dtoa_r+0x578>
   33964:	d9801417 	ldw	r6,80(sp)
   33968:	0005883a 	mov	r2,zero
   3396c:	00cffc34 	movhi	r3,16368
   33970:	180b883a 	mov	r5,r3
   33974:	880f883a 	mov	r7,r17
   33978:	1009883a 	mov	r4,r2
   3397c:	00389b40 	call	389b4 <__subdf3>
   33980:	d9c01b17 	ldw	r7,108(sp)
   33984:	180b883a 	mov	r5,r3
   33988:	1009883a 	mov	r4,r2
   3398c:	b00d883a 	mov	r6,r22
   33990:	00392e40 	call	392e4 <__ltdf2>
   33994:	103d9116 	blt	r2,zero,32fdc <_dtoa_r+0x6dc>
   33998:	d9800517 	ldw	r6,20(sp)
   3399c:	d9000317 	ldw	r4,12(sp)
   339a0:	3105883a 	add	r2,r6,r4
   339a4:	e0bd3426 	beq	fp,r2,32e78 <_dtoa_r+0x578>
   339a8:	04500934 	movhi	r17,16420
   339ac:	0021883a 	mov	r16,zero
   339b0:	b80b883a 	mov	r5,r23
   339b4:	b009883a 	mov	r4,r22
   339b8:	800d883a 	mov	r6,r16
   339bc:	880f883a 	mov	r7,r17
   339c0:	0038aa80 	call	38aa8 <__muldf3>
   339c4:	d9401517 	ldw	r5,84(sp)
   339c8:	d9001417 	ldw	r4,80(sp)
   339cc:	880f883a 	mov	r7,r17
   339d0:	000d883a 	mov	r6,zero
   339d4:	d8801a15 	stw	r2,104(sp)
   339d8:	d8c01b15 	stw	r3,108(sp)
   339dc:	0038aa80 	call	38aa8 <__muldf3>
   339e0:	180b883a 	mov	r5,r3
   339e4:	1009883a 	mov	r4,r2
   339e8:	1823883a 	mov	r17,r3
   339ec:	1021883a 	mov	r16,r2
   339f0:	00394640 	call	39464 <__fixdfsi>
   339f4:	1009883a 	mov	r4,r2
   339f8:	102b883a 	mov	r21,r2
   339fc:	003936c0 	call	3936c <__floatsidf>
   33a00:	880b883a 	mov	r5,r17
   33a04:	8009883a 	mov	r4,r16
   33a08:	180f883a 	mov	r7,r3
   33a0c:	100d883a 	mov	r6,r2
   33a10:	00389b40 	call	389b4 <__subdf3>
   33a14:	1021883a 	mov	r16,r2
   33a18:	d9001b17 	ldw	r4,108(sp)
   33a1c:	1823883a 	mov	r17,r3
   33a20:	dc001415 	stw	r16,80(sp)
   33a24:	ad400c04 	addi	r21,r21,48
   33a28:	dc401515 	stw	r17,84(sp)
   33a2c:	d8801a17 	ldw	r2,104(sp)
   33a30:	e5400005 	stb	r21,0(fp)
   33a34:	202f883a 	mov	r23,r4
   33a38:	d9c01b17 	ldw	r7,108(sp)
   33a3c:	d9001417 	ldw	r4,80(sp)
   33a40:	880b883a 	mov	r5,r17
   33a44:	100d883a 	mov	r6,r2
   33a48:	102d883a 	mov	r22,r2
   33a4c:	e7000044 	addi	fp,fp,1
   33a50:	00392e40 	call	392e4 <__ltdf2>
   33a54:	103fc30e 	bge	r2,zero,33964 <_dtoa_r+0x1064>
   33a58:	d9000417 	ldw	r4,16(sp)
   33a5c:	d9000d15 	stw	r4,52(sp)
   33a60:	003d7106 	br	33028 <_dtoa_r+0x728>
   33a64:	d9801717 	ldw	r6,92(sp)
   33a68:	00800084 	movi	r2,2
   33a6c:	11bde60e 	bge	r2,r6,33208 <_dtoa_r+0x908>
   33a70:	203cfb1e 	bne	r4,zero,32e60 <_dtoa_r+0x560>
   33a74:	d9001617 	ldw	r4,88(sp)
   33a78:	900b883a 	mov	r5,r18
   33a7c:	01800144 	movi	r6,5
   33a80:	000f883a 	mov	r7,zero
   33a84:	00367e80 	call	367e8 <__multadd>
   33a88:	d9000717 	ldw	r4,28(sp)
   33a8c:	100b883a 	mov	r5,r2
   33a90:	1025883a 	mov	r18,r2
   33a94:	0035c240 	call	35c24 <__mcmp>
   33a98:	00bcf10e 	bge	zero,r2,32e60 <_dtoa_r+0x560>
   33a9c:	d8c00d17 	ldw	r3,52(sp)
   33aa0:	d9000517 	ldw	r4,20(sp)
   33aa4:	d8000615 	stw	zero,24(sp)
   33aa8:	18c00044 	addi	r3,r3,1
   33aac:	d8c00d15 	stw	r3,52(sp)
   33ab0:	00800c44 	movi	r2,49
   33ab4:	27000044 	addi	fp,r4,1
   33ab8:	20800005 	stb	r2,0(r4)
   33abc:	003e8906 	br	334e4 <_dtoa_r+0xbe4>
   33ac0:	d8c00517 	ldw	r3,20(sp)
   33ac4:	003bc206 	br	329d0 <_dtoa_r+0xd0>
   33ac8:	01800174 	movhi	r6,5
   33acc:	31a07904 	addi	r6,r6,-32284
   33ad0:	30c00917 	ldw	r3,36(r6)
   33ad4:	30800817 	ldw	r2,32(r6)
   33ad8:	d9001217 	ldw	r4,72(sp)
   33adc:	d9401317 	ldw	r5,76(sp)
   33ae0:	180f883a 	mov	r7,r3
   33ae4:	100d883a 	mov	r6,r2
   33ae8:	0038e6c0 	call	38e6c <__divdf3>
   33aec:	948003cc 	andi	r18,r18,15
   33af0:	058000c4 	movi	r22,3
   33af4:	1029883a 	mov	r20,r2
   33af8:	182b883a 	mov	r21,r3
   33afc:	003c8906 	br	32d24 <_dtoa_r+0x424>
   33b00:	d9001017 	ldw	r4,64(sp)
   33b04:	d9800917 	ldw	r6,36(sp)
   33b08:	0025883a 	mov	r18,zero
   33b0c:	1105c83a 	sub	r2,r2,r4
   33b10:	2089883a 	add	r4,r4,r2
   33b14:	308d883a 	add	r6,r6,r2
   33b18:	d9001015 	stw	r4,64(sp)
   33b1c:	d9800915 	stw	r6,36(sp)
   33b20:	003e3206 	br	333ec <_dtoa_r+0xaec>
   33b24:	28800044 	addi	r2,r5,1
   33b28:	27000044 	addi	fp,r4,1
   33b2c:	20800005 	stb	r2,0(r4)
   33b30:	003e6c06 	br	334e4 <_dtoa_r+0xbe4>
   33b34:	d8800f17 	ldw	r2,60(sp)
   33b38:	00bce016 	blt	zero,r2,32ebc <_dtoa_r+0x5bc>
   33b3c:	d9800f17 	ldw	r6,60(sp)
   33b40:	303cc51e 	bne	r6,zero,32e58 <_dtoa_r+0x558>
   33b44:	0005883a 	mov	r2,zero
   33b48:	00d00534 	movhi	r3,16404
   33b4c:	980b883a 	mov	r5,r19
   33b50:	180f883a 	mov	r7,r3
   33b54:	9009883a 	mov	r4,r18
   33b58:	100d883a 	mov	r6,r2
   33b5c:	0038aa80 	call	38aa8 <__muldf3>
   33b60:	180b883a 	mov	r5,r3
   33b64:	a80f883a 	mov	r7,r21
   33b68:	1009883a 	mov	r4,r2
   33b6c:	a00d883a 	mov	r6,r20
   33b70:	003925c0 	call	3925c <__gedf2>
   33b74:	103cb80e 	bge	r2,zero,32e58 <_dtoa_r+0x558>
   33b78:	0027883a 	mov	r19,zero
   33b7c:	0025883a 	mov	r18,zero
   33b80:	003fc606 	br	33a9c <_dtoa_r+0x119c>
   33b84:	99400117 	ldw	r5,4(r19)
   33b88:	d9001617 	ldw	r4,88(sp)
   33b8c:	00360480 	call	36048 <_Balloc>
   33b90:	99800417 	ldw	r6,16(r19)
   33b94:	11000304 	addi	r4,r2,12
   33b98:	99400304 	addi	r5,r19,12
   33b9c:	318d883a 	add	r6,r6,r6
   33ba0:	318d883a 	add	r6,r6,r6
   33ba4:	31800204 	addi	r6,r6,8
   33ba8:	1023883a 	mov	r17,r2
   33bac:	00358b00 	call	358b0 <memcpy>
   33bb0:	d9001617 	ldw	r4,88(sp)
   33bb4:	880b883a 	mov	r5,r17
   33bb8:	01800044 	movi	r6,1
   33bbc:	003640c0 	call	3640c <__lshift>
   33bc0:	100b883a 	mov	r5,r2
   33bc4:	003d9c06 	br	33238 <_dtoa_r+0x938>
   33bc8:	00800e44 	movi	r2,57
   33bcc:	b8807026 	beq	r23,r2,33d90 <_dtoa_r+0x1490>
   33bd0:	b8800044 	addi	r2,r23,1
   33bd4:	b7000044 	addi	fp,r22,1
   33bd8:	b0800005 	stb	r2,0(r22)
   33bdc:	003e4106 	br	334e4 <_dtoa_r+0xbe4>
   33be0:	d8800317 	ldw	r2,12(sp)
   33be4:	01800174 	movhi	r6,5
   33be8:	31a04704 	addi	r6,r6,-32484
   33bec:	b009883a 	mov	r4,r22
   33bf0:	100e90fa 	slli	r7,r2,3
   33bf4:	b80b883a 	mov	r5,r23
   33bf8:	398f883a 	add	r7,r7,r6
   33bfc:	38bffe17 	ldw	r2,-8(r7)
   33c00:	d9800517 	ldw	r6,20(sp)
   33c04:	38ffff17 	ldw	r3,-4(r7)
   33c08:	37000044 	addi	fp,r6,1
   33c0c:	180f883a 	mov	r7,r3
   33c10:	100d883a 	mov	r6,r2
   33c14:	0038aa80 	call	38aa8 <__muldf3>
   33c18:	a80b883a 	mov	r5,r21
   33c1c:	a009883a 	mov	r4,r20
   33c20:	182f883a 	mov	r23,r3
   33c24:	102d883a 	mov	r22,r2
   33c28:	00394640 	call	39464 <__fixdfsi>
   33c2c:	1009883a 	mov	r4,r2
   33c30:	1027883a 	mov	r19,r2
   33c34:	003936c0 	call	3936c <__floatsidf>
   33c38:	a80b883a 	mov	r5,r21
   33c3c:	a009883a 	mov	r4,r20
   33c40:	180f883a 	mov	r7,r3
   33c44:	100d883a 	mov	r6,r2
   33c48:	00389b40 	call	389b4 <__subdf3>
   33c4c:	180b883a 	mov	r5,r3
   33c50:	d8c00517 	ldw	r3,20(sp)
   33c54:	9cc00c04 	addi	r19,r19,48
   33c58:	1009883a 	mov	r4,r2
   33c5c:	1cc00005 	stb	r19,0(r3)
   33c60:	2021883a 	mov	r16,r4
   33c64:	d9000317 	ldw	r4,12(sp)
   33c68:	00800044 	movi	r2,1
   33c6c:	2823883a 	mov	r17,r5
   33c70:	20802226 	beq	r4,r2,33cfc <_dtoa_r+0x13fc>
   33c74:	1029883a 	mov	r20,r2
   33c78:	0005883a 	mov	r2,zero
   33c7c:	00d00934 	movhi	r3,16420
   33c80:	180f883a 	mov	r7,r3
   33c84:	100d883a 	mov	r6,r2
   33c88:	880b883a 	mov	r5,r17
   33c8c:	8009883a 	mov	r4,r16
   33c90:	0038aa80 	call	38aa8 <__muldf3>
   33c94:	180b883a 	mov	r5,r3
   33c98:	1009883a 	mov	r4,r2
   33c9c:	1823883a 	mov	r17,r3
   33ca0:	1021883a 	mov	r16,r2
   33ca4:	00394640 	call	39464 <__fixdfsi>
   33ca8:	1009883a 	mov	r4,r2
   33cac:	102b883a 	mov	r21,r2
   33cb0:	003936c0 	call	3936c <__floatsidf>
   33cb4:	880b883a 	mov	r5,r17
   33cb8:	8009883a 	mov	r4,r16
   33cbc:	180f883a 	mov	r7,r3
   33cc0:	100d883a 	mov	r6,r2
   33cc4:	00389b40 	call	389b4 <__subdf3>
   33cc8:	180b883a 	mov	r5,r3
   33ccc:	d8c00517 	ldw	r3,20(sp)
   33cd0:	1009883a 	mov	r4,r2
   33cd4:	ad400c04 	addi	r21,r21,48
   33cd8:	1d05883a 	add	r2,r3,r20
   33cdc:	15400005 	stb	r21,0(r2)
   33ce0:	2021883a 	mov	r16,r4
   33ce4:	d9000317 	ldw	r4,12(sp)
   33ce8:	a5000044 	addi	r20,r20,1
   33cec:	2823883a 	mov	r17,r5
   33cf0:	a13fe11e 	bne	r20,r4,33c78 <_dtoa_r+0x1378>
   33cf4:	e505883a 	add	r2,fp,r20
   33cf8:	173fffc4 	addi	fp,r2,-1
   33cfc:	0025883a 	mov	r18,zero
   33d00:	04cff834 	movhi	r19,16352
   33d04:	b009883a 	mov	r4,r22
   33d08:	b80b883a 	mov	r5,r23
   33d0c:	900d883a 	mov	r6,r18
   33d10:	980f883a 	mov	r7,r19
   33d14:	0038a340 	call	38a34 <__adddf3>
   33d18:	180b883a 	mov	r5,r3
   33d1c:	1009883a 	mov	r4,r2
   33d20:	800d883a 	mov	r6,r16
   33d24:	880f883a 	mov	r7,r17
   33d28:	00392e40 	call	392e4 <__ltdf2>
   33d2c:	103cab16 	blt	r2,zero,32fdc <_dtoa_r+0x6dc>
   33d30:	0009883a 	mov	r4,zero
   33d34:	980b883a 	mov	r5,r19
   33d38:	b80f883a 	mov	r7,r23
   33d3c:	b00d883a 	mov	r6,r22
   33d40:	00389b40 	call	389b4 <__subdf3>
   33d44:	180b883a 	mov	r5,r3
   33d48:	880f883a 	mov	r7,r17
   33d4c:	1009883a 	mov	r4,r2
   33d50:	800d883a 	mov	r6,r16
   33d54:	00391d40 	call	391d4 <__gtdf2>
   33d58:	00bc470e 	bge	zero,r2,32e78 <_dtoa_r+0x578>
   33d5c:	00c00c04 	movi	r3,48
   33d60:	e73fffc4 	addi	fp,fp,-1
   33d64:	e0800007 	ldb	r2,0(fp)
   33d68:	10fffd26 	beq	r2,r3,33d60 <_dtoa_r+0x1460>
   33d6c:	d9800417 	ldw	r6,16(sp)
   33d70:	e7000044 	addi	fp,fp,1
   33d74:	d9800d15 	stw	r6,52(sp)
   33d78:	003cab06 	br	33028 <_dtoa_r+0x728>
   33d7c:	d8c00f17 	ldw	r3,60(sp)
   33d80:	d9001117 	ldw	r4,68(sp)
   33d84:	20e1c83a 	sub	r16,r4,r3
   33d88:	0007883a 	mov	r3,zero
   33d8c:	003d9b06 	br	333fc <_dtoa_r+0xafc>
   33d90:	00800e44 	movi	r2,57
   33d94:	b0800005 	stb	r2,0(r22)
   33d98:	b5800044 	addi	r22,r22,1
   33d9c:	003dc106 	br	334a4 <_dtoa_r+0xba4>
   33da0:	05800084 	movi	r22,2
   33da4:	003bf706 	br	32d84 <_dtoa_r+0x484>
   33da8:	d9000f17 	ldw	r4,60(sp)
   33dac:	013c000e 	bge	zero,r4,32db0 <_dtoa_r+0x4b0>
   33db0:	d9800e17 	ldw	r6,56(sp)
   33db4:	01bc300e 	bge	zero,r6,32e78 <_dtoa_r+0x578>
   33db8:	0005883a 	mov	r2,zero
   33dbc:	00d00934 	movhi	r3,16420
   33dc0:	a80b883a 	mov	r5,r21
   33dc4:	180f883a 	mov	r7,r3
   33dc8:	a009883a 	mov	r4,r20
   33dcc:	100d883a 	mov	r6,r2
   33dd0:	0038aa80 	call	38aa8 <__muldf3>
   33dd4:	b1000044 	addi	r4,r22,1
   33dd8:	1021883a 	mov	r16,r2
   33ddc:	1823883a 	mov	r17,r3
   33de0:	003936c0 	call	3936c <__floatsidf>
   33de4:	880b883a 	mov	r5,r17
   33de8:	8009883a 	mov	r4,r16
   33dec:	180f883a 	mov	r7,r3
   33df0:	100d883a 	mov	r6,r2
   33df4:	0038aa80 	call	38aa8 <__muldf3>
   33df8:	0011883a 	mov	r8,zero
   33dfc:	02500734 	movhi	r9,16412
   33e00:	180b883a 	mov	r5,r3
   33e04:	480f883a 	mov	r7,r9
   33e08:	1009883a 	mov	r4,r2
   33e0c:	400d883a 	mov	r6,r8
   33e10:	0038a340 	call	38a34 <__adddf3>
   33e14:	102d883a 	mov	r22,r2
   33e18:	00bf3034 	movhi	r2,64704
   33e1c:	10ef883a 	add	r23,r2,r3
   33e20:	d8800d17 	ldw	r2,52(sp)
   33e24:	d8c00e17 	ldw	r3,56(sp)
   33e28:	8029883a 	mov	r20,r16
   33e2c:	10bfffc4 	addi	r2,r2,-1
   33e30:	882b883a 	mov	r21,r17
   33e34:	d8800415 	stw	r2,16(sp)
   33e38:	d8c00315 	stw	r3,12(sp)
   33e3c:	003e8306 	br	3384c <_dtoa_r+0xf4c>
   33e40:	d8800117 	ldw	r2,4(sp)
   33e44:	dc001117 	ldw	r16,68(sp)
   33e48:	dc801017 	ldw	r18,64(sp)
   33e4c:	00c00d84 	movi	r3,54
   33e50:	1887c83a 	sub	r3,r3,r2
   33e54:	003d6906 	br	333fc <_dtoa_r+0xafc>
   33e58:	01800044 	movi	r6,1
   33e5c:	3021883a 	mov	r16,r6
   33e60:	d9800f15 	stw	r6,60(sp)
   33e64:	d9802615 	stw	r6,152(sp)
   33e68:	d9800e15 	stw	r6,56(sp)
   33e6c:	003b9306 	br	32cbc <_dtoa_r+0x3bc>
   33e70:	b021883a 	mov	r16,r22
   33e74:	dd800f15 	stw	r22,60(sp)
   33e78:	003b9006 	br	32cbc <_dtoa_r+0x3bc>
   33e7c:	103e221e 	bne	r2,zero,33708 <_dtoa_r+0xe08>
   33e80:	b880004c 	andi	r2,r23,1
   33e84:	1005003a 	cmpeq	r2,r2,zero
   33e88:	103e1f1e 	bne	r2,zero,33708 <_dtoa_r+0xe08>
   33e8c:	003e1b06 	br	336fc <_dtoa_r+0xdfc>
   33e90:	d9001617 	ldw	r4,88(sp)
   33e94:	980b883a 	mov	r5,r19
   33e98:	01800284 	movi	r6,10
   33e9c:	000f883a 	mov	r7,zero
   33ea0:	00367e80 	call	367e8 <__multadd>
   33ea4:	d8c00e17 	ldw	r3,56(sp)
   33ea8:	1027883a 	mov	r19,r2
   33eac:	d8c00f15 	stw	r3,60(sp)
   33eb0:	003cd306 	br	33200 <_dtoa_r+0x900>

00033eb4 <_fflush_r>:
   33eb4:	defffb04 	addi	sp,sp,-20
   33eb8:	dcc00315 	stw	r19,12(sp)
   33ebc:	dc800215 	stw	r18,8(sp)
   33ec0:	dfc00415 	stw	ra,16(sp)
   33ec4:	dc400115 	stw	r17,4(sp)
   33ec8:	dc000015 	stw	r16,0(sp)
   33ecc:	2027883a 	mov	r19,r4
   33ed0:	2825883a 	mov	r18,r5
   33ed4:	20000226 	beq	r4,zero,33ee0 <_fflush_r+0x2c>
   33ed8:	20800e17 	ldw	r2,56(r4)
   33edc:	10005626 	beq	r2,zero,34038 <_fflush_r+0x184>
   33ee0:	9100030b 	ldhu	r4,12(r18)
   33ee4:	20ffffcc 	andi	r3,r4,65535
   33ee8:	18e0001c 	xori	r3,r3,32768
   33eec:	18e00004 	addi	r3,r3,-32768
   33ef0:	1880020c 	andi	r2,r3,8
   33ef4:	1000261e 	bne	r2,zero,33f90 <_fflush_r+0xdc>
   33ef8:	90c00117 	ldw	r3,4(r18)
   33efc:	20820014 	ori	r2,r4,2048
   33f00:	9080030d 	sth	r2,12(r18)
   33f04:	1009883a 	mov	r4,r2
   33f08:	00c0400e 	bge	zero,r3,3400c <_fflush_r+0x158>
   33f0c:	92000a17 	ldw	r8,40(r18)
   33f10:	40004026 	beq	r8,zero,34014 <_fflush_r+0x160>
   33f14:	2084000c 	andi	r2,r4,4096
   33f18:	10005326 	beq	r2,zero,34068 <_fflush_r+0x1b4>
   33f1c:	94001417 	ldw	r16,80(r18)
   33f20:	9080030b 	ldhu	r2,12(r18)
   33f24:	1080010c 	andi	r2,r2,4
   33f28:	1000481e 	bne	r2,zero,3404c <_fflush_r+0x198>
   33f2c:	91400717 	ldw	r5,28(r18)
   33f30:	9809883a 	mov	r4,r19
   33f34:	800d883a 	mov	r6,r16
   33f38:	000f883a 	mov	r7,zero
   33f3c:	403ee83a 	callr	r8
   33f40:	8080261e 	bne	r16,r2,33fdc <_fflush_r+0x128>
   33f44:	9080030b 	ldhu	r2,12(r18)
   33f48:	91000417 	ldw	r4,16(r18)
   33f4c:	90000115 	stw	zero,4(r18)
   33f50:	10bdffcc 	andi	r2,r2,63487
   33f54:	10ffffcc 	andi	r3,r2,65535
   33f58:	18c4000c 	andi	r3,r3,4096
   33f5c:	9080030d 	sth	r2,12(r18)
   33f60:	91000015 	stw	r4,0(r18)
   33f64:	18002b26 	beq	r3,zero,34014 <_fflush_r+0x160>
   33f68:	0007883a 	mov	r3,zero
   33f6c:	1805883a 	mov	r2,r3
   33f70:	94001415 	stw	r16,80(r18)
   33f74:	dfc00417 	ldw	ra,16(sp)
   33f78:	dcc00317 	ldw	r19,12(sp)
   33f7c:	dc800217 	ldw	r18,8(sp)
   33f80:	dc400117 	ldw	r17,4(sp)
   33f84:	dc000017 	ldw	r16,0(sp)
   33f88:	dec00504 	addi	sp,sp,20
   33f8c:	f800283a 	ret
   33f90:	94400417 	ldw	r17,16(r18)
   33f94:	88001f26 	beq	r17,zero,34014 <_fflush_r+0x160>
   33f98:	90800017 	ldw	r2,0(r18)
   33f9c:	18c000cc 	andi	r3,r3,3
   33fa0:	94400015 	stw	r17,0(r18)
   33fa4:	1461c83a 	sub	r16,r2,r17
   33fa8:	18002526 	beq	r3,zero,34040 <_fflush_r+0x18c>
   33fac:	0005883a 	mov	r2,zero
   33fb0:	90800215 	stw	r2,8(r18)
   33fb4:	0400170e 	bge	zero,r16,34014 <_fflush_r+0x160>
   33fb8:	90c00917 	ldw	r3,36(r18)
   33fbc:	91400717 	ldw	r5,28(r18)
   33fc0:	880d883a 	mov	r6,r17
   33fc4:	800f883a 	mov	r7,r16
   33fc8:	9809883a 	mov	r4,r19
   33fcc:	183ee83a 	callr	r3
   33fd0:	88a3883a 	add	r17,r17,r2
   33fd4:	80a1c83a 	sub	r16,r16,r2
   33fd8:	00bff616 	blt	zero,r2,33fb4 <_fflush_r+0x100>
   33fdc:	9080030b 	ldhu	r2,12(r18)
   33fe0:	00ffffc4 	movi	r3,-1
   33fe4:	10801014 	ori	r2,r2,64
   33fe8:	9080030d 	sth	r2,12(r18)
   33fec:	1805883a 	mov	r2,r3
   33ff0:	dfc00417 	ldw	ra,16(sp)
   33ff4:	dcc00317 	ldw	r19,12(sp)
   33ff8:	dc800217 	ldw	r18,8(sp)
   33ffc:	dc400117 	ldw	r17,4(sp)
   34000:	dc000017 	ldw	r16,0(sp)
   34004:	dec00504 	addi	sp,sp,20
   34008:	f800283a 	ret
   3400c:	90800f17 	ldw	r2,60(r18)
   34010:	00bfbe16 	blt	zero,r2,33f0c <_fflush_r+0x58>
   34014:	0007883a 	mov	r3,zero
   34018:	1805883a 	mov	r2,r3
   3401c:	dfc00417 	ldw	ra,16(sp)
   34020:	dcc00317 	ldw	r19,12(sp)
   34024:	dc800217 	ldw	r18,8(sp)
   34028:	dc400117 	ldw	r17,4(sp)
   3402c:	dc000017 	ldw	r16,0(sp)
   34030:	dec00504 	addi	sp,sp,20
   34034:	f800283a 	ret
   34038:	003414c0 	call	3414c <__sinit>
   3403c:	003fa806 	br	33ee0 <_fflush_r+0x2c>
   34040:	90800517 	ldw	r2,20(r18)
   34044:	90800215 	stw	r2,8(r18)
   34048:	003fda06 	br	33fb4 <_fflush_r+0x100>
   3404c:	90800117 	ldw	r2,4(r18)
   34050:	90c00c17 	ldw	r3,48(r18)
   34054:	80a1c83a 	sub	r16,r16,r2
   34058:	183fb426 	beq	r3,zero,33f2c <_fflush_r+0x78>
   3405c:	90800f17 	ldw	r2,60(r18)
   34060:	80a1c83a 	sub	r16,r16,r2
   34064:	003fb106 	br	33f2c <_fflush_r+0x78>
   34068:	91400717 	ldw	r5,28(r18)
   3406c:	9809883a 	mov	r4,r19
   34070:	000d883a 	mov	r6,zero
   34074:	01c00044 	movi	r7,1
   34078:	403ee83a 	callr	r8
   3407c:	1021883a 	mov	r16,r2
   34080:	00bfffc4 	movi	r2,-1
   34084:	80800226 	beq	r16,r2,34090 <_fflush_r+0x1dc>
   34088:	92000a17 	ldw	r8,40(r18)
   3408c:	003fa406 	br	33f20 <_fflush_r+0x6c>
   34090:	98c00017 	ldw	r3,0(r19)
   34094:	00800744 	movi	r2,29
   34098:	18bfde26 	beq	r3,r2,34014 <_fflush_r+0x160>
   3409c:	9080030b 	ldhu	r2,12(r18)
   340a0:	8007883a 	mov	r3,r16
   340a4:	10801014 	ori	r2,r2,64
   340a8:	9080030d 	sth	r2,12(r18)
   340ac:	003fcf06 	br	33fec <_fflush_r+0x138>

000340b0 <fflush>:
   340b0:	014000f4 	movhi	r5,3
   340b4:	294fad04 	addi	r5,r5,16052
   340b8:	2007883a 	mov	r3,r4
   340bc:	20000526 	beq	r4,zero,340d4 <fflush+0x24>
   340c0:	00800174 	movhi	r2,5
   340c4:	10a76704 	addi	r2,r2,-25188
   340c8:	11000017 	ldw	r4,0(r2)
   340cc:	180b883a 	mov	r5,r3
   340d0:	0033eb41 	jmpi	33eb4 <_fflush_r>
   340d4:	00800174 	movhi	r2,5
   340d8:	10a76804 	addi	r2,r2,-25184
   340dc:	11000017 	ldw	r4,0(r2)
   340e0:	0034cb41 	jmpi	34cb4 <_fwalk_reent>

000340e4 <std>:
   340e4:	008000f4 	movhi	r2,3
   340e8:	109c8a04 	addi	r2,r2,29224
   340ec:	20800b15 	stw	r2,44(r4)
   340f0:	008000f4 	movhi	r2,3
   340f4:	109cc504 	addi	r2,r2,29460
   340f8:	20800815 	stw	r2,32(r4)
   340fc:	00c000f4 	movhi	r3,3
   34100:	18dca604 	addi	r3,r3,29336
   34104:	008000f4 	movhi	r2,3
   34108:	109c8c04 	addi	r2,r2,29232
   3410c:	2140030d 	sth	r5,12(r4)
   34110:	2180038d 	sth	r6,14(r4)
   34114:	20c00915 	stw	r3,36(r4)
   34118:	20800a15 	stw	r2,40(r4)
   3411c:	20000015 	stw	zero,0(r4)
   34120:	20000115 	stw	zero,4(r4)
   34124:	20000215 	stw	zero,8(r4)
   34128:	20000415 	stw	zero,16(r4)
   3412c:	20000515 	stw	zero,20(r4)
   34130:	20000615 	stw	zero,24(r4)
   34134:	21000715 	stw	r4,28(r4)
   34138:	f800283a 	ret

0003413c <__sfp_lock_acquire>:
   3413c:	f800283a 	ret

00034140 <__sfp_lock_release>:
   34140:	f800283a 	ret

00034144 <__sinit_lock_acquire>:
   34144:	f800283a 	ret

00034148 <__sinit_lock_release>:
   34148:	f800283a 	ret

0003414c <__sinit>:
   3414c:	20800e17 	ldw	r2,56(r4)
   34150:	defffd04 	addi	sp,sp,-12
   34154:	dc400115 	stw	r17,4(sp)
   34158:	dc000015 	stw	r16,0(sp)
   3415c:	dfc00215 	stw	ra,8(sp)
   34160:	04400044 	movi	r17,1
   34164:	01400104 	movi	r5,4
   34168:	000d883a 	mov	r6,zero
   3416c:	2021883a 	mov	r16,r4
   34170:	2200bb04 	addi	r8,r4,748
   34174:	200f883a 	mov	r7,r4
   34178:	10000526 	beq	r2,zero,34190 <__sinit+0x44>
   3417c:	dfc00217 	ldw	ra,8(sp)
   34180:	dc400117 	ldw	r17,4(sp)
   34184:	dc000017 	ldw	r16,0(sp)
   34188:	dec00304 	addi	sp,sp,12
   3418c:	f800283a 	ret
   34190:	21000117 	ldw	r4,4(r4)
   34194:	008000f4 	movhi	r2,3
   34198:	10908c04 	addi	r2,r2,16944
   3419c:	00c000c4 	movi	r3,3
   341a0:	80800f15 	stw	r2,60(r16)
   341a4:	80c0b915 	stw	r3,740(r16)
   341a8:	8200ba15 	stw	r8,744(r16)
   341ac:	84400e15 	stw	r17,56(r16)
   341b0:	8000b815 	stw	zero,736(r16)
   341b4:	00340e40 	call	340e4 <std>
   341b8:	81000217 	ldw	r4,8(r16)
   341bc:	880d883a 	mov	r6,r17
   341c0:	800f883a 	mov	r7,r16
   341c4:	01400284 	movi	r5,10
   341c8:	00340e40 	call	340e4 <std>
   341cc:	81000317 	ldw	r4,12(r16)
   341d0:	800f883a 	mov	r7,r16
   341d4:	01400484 	movi	r5,18
   341d8:	01800084 	movi	r6,2
   341dc:	dfc00217 	ldw	ra,8(sp)
   341e0:	dc400117 	ldw	r17,4(sp)
   341e4:	dc000017 	ldw	r16,0(sp)
   341e8:	dec00304 	addi	sp,sp,12
   341ec:	00340e41 	jmpi	340e4 <std>

000341f0 <__fp_lock>:
   341f0:	0005883a 	mov	r2,zero
   341f4:	f800283a 	ret

000341f8 <__fp_unlock>:
   341f8:	0005883a 	mov	r2,zero
   341fc:	f800283a 	ret

00034200 <__fp_unlock_all>:
   34200:	00800174 	movhi	r2,5
   34204:	10a76704 	addi	r2,r2,-25188
   34208:	11000017 	ldw	r4,0(r2)
   3420c:	014000f4 	movhi	r5,3
   34210:	29507e04 	addi	r5,r5,16888
   34214:	0034d7c1 	jmpi	34d7c <_fwalk>

00034218 <__fp_lock_all>:
   34218:	00800174 	movhi	r2,5
   3421c:	10a76704 	addi	r2,r2,-25188
   34220:	11000017 	ldw	r4,0(r2)
   34224:	014000f4 	movhi	r5,3
   34228:	29507c04 	addi	r5,r5,16880
   3422c:	0034d7c1 	jmpi	34d7c <_fwalk>

00034230 <_cleanup_r>:
   34230:	014000f4 	movhi	r5,3
   34234:	295dbc04 	addi	r5,r5,30448
   34238:	0034d7c1 	jmpi	34d7c <_fwalk>

0003423c <_cleanup>:
   3423c:	00800174 	movhi	r2,5
   34240:	10a76804 	addi	r2,r2,-25184
   34244:	11000017 	ldw	r4,0(r2)
   34248:	00342301 	jmpi	34230 <_cleanup_r>

0003424c <__sfmoreglue>:
   3424c:	defffc04 	addi	sp,sp,-16
   34250:	dc000015 	stw	r16,0(sp)
   34254:	2821883a 	mov	r16,r5
   34258:	dc400115 	stw	r17,4(sp)
   3425c:	01401704 	movi	r5,92
   34260:	2023883a 	mov	r17,r4
   34264:	8009883a 	mov	r4,r16
   34268:	dfc00315 	stw	ra,12(sp)
   3426c:	dcc00215 	stw	r19,8(sp)
   34270:	003981c0 	call	3981c <__mulsi3>
   34274:	11400304 	addi	r5,r2,12
   34278:	8809883a 	mov	r4,r17
   3427c:	1027883a 	mov	r19,r2
   34280:	003508c0 	call	3508c <_malloc_r>
   34284:	10c00304 	addi	r3,r2,12
   34288:	1023883a 	mov	r17,r2
   3428c:	1809883a 	mov	r4,r3
   34290:	980d883a 	mov	r6,r19
   34294:	000b883a 	mov	r5,zero
   34298:	10000b26 	beq	r2,zero,342c8 <__sfmoreglue+0x7c>
   3429c:	14000115 	stw	r16,4(r2)
   342a0:	10c00215 	stw	r3,8(r2)
   342a4:	10000015 	stw	zero,0(r2)
   342a8:	0035a300 	call	35a30 <memset>
   342ac:	8805883a 	mov	r2,r17
   342b0:	dfc00317 	ldw	ra,12(sp)
   342b4:	dcc00217 	ldw	r19,8(sp)
   342b8:	dc400117 	ldw	r17,4(sp)
   342bc:	dc000017 	ldw	r16,0(sp)
   342c0:	dec00404 	addi	sp,sp,16
   342c4:	f800283a 	ret
   342c8:	0023883a 	mov	r17,zero
   342cc:	8805883a 	mov	r2,r17
   342d0:	dfc00317 	ldw	ra,12(sp)
   342d4:	dcc00217 	ldw	r19,8(sp)
   342d8:	dc400117 	ldw	r17,4(sp)
   342dc:	dc000017 	ldw	r16,0(sp)
   342e0:	dec00404 	addi	sp,sp,16
   342e4:	f800283a 	ret

000342e8 <__sfp>:
   342e8:	defffd04 	addi	sp,sp,-12
   342ec:	00800174 	movhi	r2,5
   342f0:	10a76804 	addi	r2,r2,-25184
   342f4:	dc000015 	stw	r16,0(sp)
   342f8:	14000017 	ldw	r16,0(r2)
   342fc:	dc400115 	stw	r17,4(sp)
   34300:	dfc00215 	stw	ra,8(sp)
   34304:	80800e17 	ldw	r2,56(r16)
   34308:	2023883a 	mov	r17,r4
   3430c:	10002626 	beq	r2,zero,343a8 <__sfp+0xc0>
   34310:	8400b804 	addi	r16,r16,736
   34314:	80800117 	ldw	r2,4(r16)
   34318:	81000217 	ldw	r4,8(r16)
   3431c:	10ffffc4 	addi	r3,r2,-1
   34320:	18000916 	blt	r3,zero,34348 <__sfp+0x60>
   34324:	2080030f 	ldh	r2,12(r4)
   34328:	10000b26 	beq	r2,zero,34358 <__sfp+0x70>
   3432c:	017fffc4 	movi	r5,-1
   34330:	00000206 	br	3433c <__sfp+0x54>
   34334:	2080030f 	ldh	r2,12(r4)
   34338:	10000726 	beq	r2,zero,34358 <__sfp+0x70>
   3433c:	18ffffc4 	addi	r3,r3,-1
   34340:	21001704 	addi	r4,r4,92
   34344:	197ffb1e 	bne	r3,r5,34334 <__sfp+0x4c>
   34348:	80800017 	ldw	r2,0(r16)
   3434c:	10001926 	beq	r2,zero,343b4 <__sfp+0xcc>
   34350:	1021883a 	mov	r16,r2
   34354:	003fef06 	br	34314 <__sfp+0x2c>
   34358:	00bfffc4 	movi	r2,-1
   3435c:	00c00044 	movi	r3,1
   34360:	2080038d 	sth	r2,14(r4)
   34364:	20c0030d 	sth	r3,12(r4)
   34368:	20000015 	stw	zero,0(r4)
   3436c:	20000215 	stw	zero,8(r4)
   34370:	20000115 	stw	zero,4(r4)
   34374:	20000415 	stw	zero,16(r4)
   34378:	20000515 	stw	zero,20(r4)
   3437c:	20000615 	stw	zero,24(r4)
   34380:	20000c15 	stw	zero,48(r4)
   34384:	20000d15 	stw	zero,52(r4)
   34388:	20001115 	stw	zero,68(r4)
   3438c:	20001215 	stw	zero,72(r4)
   34390:	2005883a 	mov	r2,r4
   34394:	dfc00217 	ldw	ra,8(sp)
   34398:	dc400117 	ldw	r17,4(sp)
   3439c:	dc000017 	ldw	r16,0(sp)
   343a0:	dec00304 	addi	sp,sp,12
   343a4:	f800283a 	ret
   343a8:	8009883a 	mov	r4,r16
   343ac:	003414c0 	call	3414c <__sinit>
   343b0:	003fd706 	br	34310 <__sfp+0x28>
   343b4:	8809883a 	mov	r4,r17
   343b8:	01400104 	movi	r5,4
   343bc:	003424c0 	call	3424c <__sfmoreglue>
   343c0:	80800015 	stw	r2,0(r16)
   343c4:	103fe21e 	bne	r2,zero,34350 <__sfp+0x68>
   343c8:	00800304 	movi	r2,12
   343cc:	0009883a 	mov	r4,zero
   343d0:	88800015 	stw	r2,0(r17)
   343d4:	003fee06 	br	34390 <__sfp+0xa8>

000343d8 <_malloc_trim_r>:
   343d8:	defffb04 	addi	sp,sp,-20
   343dc:	dcc00315 	stw	r19,12(sp)
   343e0:	04c00174 	movhi	r19,5
   343e4:	9ce1e304 	addi	r19,r19,-30836
   343e8:	dc800215 	stw	r18,8(sp)
   343ec:	dc400115 	stw	r17,4(sp)
   343f0:	dc000015 	stw	r16,0(sp)
   343f4:	2823883a 	mov	r17,r5
   343f8:	2025883a 	mov	r18,r4
   343fc:	dfc00415 	stw	ra,16(sp)
   34400:	003a5a00 	call	3a5a0 <__malloc_lock>
   34404:	98800217 	ldw	r2,8(r19)
   34408:	9009883a 	mov	r4,r18
   3440c:	000b883a 	mov	r5,zero
   34410:	10c00117 	ldw	r3,4(r2)
   34414:	00bfff04 	movi	r2,-4
   34418:	18a0703a 	and	r16,r3,r2
   3441c:	8463c83a 	sub	r17,r16,r17
   34420:	8c43fbc4 	addi	r17,r17,4079
   34424:	8822d33a 	srli	r17,r17,12
   34428:	0083ffc4 	movi	r2,4095
   3442c:	8c7fffc4 	addi	r17,r17,-1
   34430:	8822933a 	slli	r17,r17,12
   34434:	1440060e 	bge	r2,r17,34450 <_malloc_trim_r+0x78>
   34438:	00371b80 	call	371b8 <_sbrk_r>
   3443c:	98c00217 	ldw	r3,8(r19)
   34440:	9009883a 	mov	r4,r18
   34444:	044bc83a 	sub	r5,zero,r17
   34448:	80c7883a 	add	r3,r16,r3
   3444c:	10c00926 	beq	r2,r3,34474 <_malloc_trim_r+0x9c>
   34450:	003a5c00 	call	3a5c0 <__malloc_unlock>
   34454:	0005883a 	mov	r2,zero
   34458:	dfc00417 	ldw	ra,16(sp)
   3445c:	dcc00317 	ldw	r19,12(sp)
   34460:	dc800217 	ldw	r18,8(sp)
   34464:	dc400117 	ldw	r17,4(sp)
   34468:	dc000017 	ldw	r16,0(sp)
   3446c:	dec00504 	addi	sp,sp,20
   34470:	f800283a 	ret
   34474:	9009883a 	mov	r4,r18
   34478:	00371b80 	call	371b8 <_sbrk_r>
   3447c:	844dc83a 	sub	r6,r16,r17
   34480:	00ffffc4 	movi	r3,-1
   34484:	9009883a 	mov	r4,r18
   34488:	000b883a 	mov	r5,zero
   3448c:	01c00174 	movhi	r7,5
   34490:	39e78904 	addi	r7,r7,-25052
   34494:	31800054 	ori	r6,r6,1
   34498:	10c00926 	beq	r2,r3,344c0 <_malloc_trim_r+0xe8>
   3449c:	38800017 	ldw	r2,0(r7)
   344a0:	98c00217 	ldw	r3,8(r19)
   344a4:	9009883a 	mov	r4,r18
   344a8:	1445c83a 	sub	r2,r2,r17
   344ac:	38800015 	stw	r2,0(r7)
   344b0:	19800115 	stw	r6,4(r3)
   344b4:	003a5c00 	call	3a5c0 <__malloc_unlock>
   344b8:	00800044 	movi	r2,1
   344bc:	003fe606 	br	34458 <_malloc_trim_r+0x80>
   344c0:	00371b80 	call	371b8 <_sbrk_r>
   344c4:	99800217 	ldw	r6,8(r19)
   344c8:	100f883a 	mov	r7,r2
   344cc:	9009883a 	mov	r4,r18
   344d0:	1187c83a 	sub	r3,r2,r6
   344d4:	008003c4 	movi	r2,15
   344d8:	19400054 	ori	r5,r3,1
   344dc:	10ffdc0e 	bge	r2,r3,34450 <_malloc_trim_r+0x78>
   344e0:	00800174 	movhi	r2,5
   344e4:	10a76c04 	addi	r2,r2,-25168
   344e8:	10c00017 	ldw	r3,0(r2)
   344ec:	00800174 	movhi	r2,5
   344f0:	10a78904 	addi	r2,r2,-25052
   344f4:	31400115 	stw	r5,4(r6)
   344f8:	38c7c83a 	sub	r3,r7,r3
   344fc:	10c00015 	stw	r3,0(r2)
   34500:	003fd306 	br	34450 <_malloc_trim_r+0x78>

00034504 <_free_r>:
   34504:	defffd04 	addi	sp,sp,-12
   34508:	dc400115 	stw	r17,4(sp)
   3450c:	dc000015 	stw	r16,0(sp)
   34510:	dfc00215 	stw	ra,8(sp)
   34514:	2821883a 	mov	r16,r5
   34518:	2023883a 	mov	r17,r4
   3451c:	28005a26 	beq	r5,zero,34688 <_free_r+0x184>
   34520:	003a5a00 	call	3a5a0 <__malloc_lock>
   34524:	823ffe04 	addi	r8,r16,-8
   34528:	41400117 	ldw	r5,4(r8)
   3452c:	00bfff84 	movi	r2,-2
   34530:	02800174 	movhi	r10,5
   34534:	52a1e304 	addi	r10,r10,-30836
   34538:	288e703a 	and	r7,r5,r2
   3453c:	41cd883a 	add	r6,r8,r7
   34540:	30c00117 	ldw	r3,4(r6)
   34544:	51000217 	ldw	r4,8(r10)
   34548:	00bfff04 	movi	r2,-4
   3454c:	1892703a 	and	r9,r3,r2
   34550:	5017883a 	mov	r11,r10
   34554:	31006726 	beq	r6,r4,346f4 <_free_r+0x1f0>
   34558:	2880004c 	andi	r2,r5,1
   3455c:	1005003a 	cmpeq	r2,r2,zero
   34560:	32400115 	stw	r9,4(r6)
   34564:	10001a1e 	bne	r2,zero,345d0 <_free_r+0xcc>
   34568:	000b883a 	mov	r5,zero
   3456c:	3247883a 	add	r3,r6,r9
   34570:	18800117 	ldw	r2,4(r3)
   34574:	1080004c 	andi	r2,r2,1
   34578:	1000231e 	bne	r2,zero,34608 <_free_r+0x104>
   3457c:	280ac03a 	cmpne	r5,r5,zero
   34580:	3a4f883a 	add	r7,r7,r9
   34584:	2800451e 	bne	r5,zero,3469c <_free_r+0x198>
   34588:	31000217 	ldw	r4,8(r6)
   3458c:	00800174 	movhi	r2,5
   34590:	10a1e504 	addi	r2,r2,-30828
   34594:	20807b26 	beq	r4,r2,34784 <_free_r+0x280>
   34598:	30800317 	ldw	r2,12(r6)
   3459c:	3a07883a 	add	r3,r7,r8
   345a0:	19c00015 	stw	r7,0(r3)
   345a4:	11000215 	stw	r4,8(r2)
   345a8:	20800315 	stw	r2,12(r4)
   345ac:	38800054 	ori	r2,r7,1
   345b0:	40800115 	stw	r2,4(r8)
   345b4:	28001a26 	beq	r5,zero,34620 <_free_r+0x11c>
   345b8:	8809883a 	mov	r4,r17
   345bc:	dfc00217 	ldw	ra,8(sp)
   345c0:	dc400117 	ldw	r17,4(sp)
   345c4:	dc000017 	ldw	r16,0(sp)
   345c8:	dec00304 	addi	sp,sp,12
   345cc:	003a5c01 	jmpi	3a5c0 <__malloc_unlock>
   345d0:	80bffe17 	ldw	r2,-8(r16)
   345d4:	50c00204 	addi	r3,r10,8
   345d8:	4091c83a 	sub	r8,r8,r2
   345dc:	41000217 	ldw	r4,8(r8)
   345e0:	388f883a 	add	r7,r7,r2
   345e4:	20c06126 	beq	r4,r3,3476c <_free_r+0x268>
   345e8:	40800317 	ldw	r2,12(r8)
   345ec:	3247883a 	add	r3,r6,r9
   345f0:	000b883a 	mov	r5,zero
   345f4:	11000215 	stw	r4,8(r2)
   345f8:	20800315 	stw	r2,12(r4)
   345fc:	18800117 	ldw	r2,4(r3)
   34600:	1080004c 	andi	r2,r2,1
   34604:	103fdd26 	beq	r2,zero,3457c <_free_r+0x78>
   34608:	38800054 	ori	r2,r7,1
   3460c:	3a07883a 	add	r3,r7,r8
   34610:	280ac03a 	cmpne	r5,r5,zero
   34614:	40800115 	stw	r2,4(r8)
   34618:	19c00015 	stw	r7,0(r3)
   3461c:	283fe61e 	bne	r5,zero,345b8 <_free_r+0xb4>
   34620:	00807fc4 	movi	r2,511
   34624:	11c01f2e 	bgeu	r2,r7,346a4 <_free_r+0x1a0>
   34628:	3806d27a 	srli	r3,r7,9
   3462c:	1800481e 	bne	r3,zero,34750 <_free_r+0x24c>
   34630:	3804d0fa 	srli	r2,r7,3
   34634:	100690fa 	slli	r3,r2,3
   34638:	1acd883a 	add	r6,r3,r11
   3463c:	31400217 	ldw	r5,8(r6)
   34640:	31405926 	beq	r6,r5,347a8 <_free_r+0x2a4>
   34644:	28800117 	ldw	r2,4(r5)
   34648:	00ffff04 	movi	r3,-4
   3464c:	10c4703a 	and	r2,r2,r3
   34650:	3880022e 	bgeu	r7,r2,3465c <_free_r+0x158>
   34654:	29400217 	ldw	r5,8(r5)
   34658:	317ffa1e 	bne	r6,r5,34644 <_free_r+0x140>
   3465c:	29800317 	ldw	r6,12(r5)
   34660:	41800315 	stw	r6,12(r8)
   34664:	41400215 	stw	r5,8(r8)
   34668:	8809883a 	mov	r4,r17
   3466c:	2a000315 	stw	r8,12(r5)
   34670:	32000215 	stw	r8,8(r6)
   34674:	dfc00217 	ldw	ra,8(sp)
   34678:	dc400117 	ldw	r17,4(sp)
   3467c:	dc000017 	ldw	r16,0(sp)
   34680:	dec00304 	addi	sp,sp,12
   34684:	003a5c01 	jmpi	3a5c0 <__malloc_unlock>
   34688:	dfc00217 	ldw	ra,8(sp)
   3468c:	dc400117 	ldw	r17,4(sp)
   34690:	dc000017 	ldw	r16,0(sp)
   34694:	dec00304 	addi	sp,sp,12
   34698:	f800283a 	ret
   3469c:	31000217 	ldw	r4,8(r6)
   346a0:	003fbd06 	br	34598 <_free_r+0x94>
   346a4:	3806d0fa 	srli	r3,r7,3
   346a8:	00800044 	movi	r2,1
   346ac:	51400117 	ldw	r5,4(r10)
   346b0:	180890fa 	slli	r4,r3,3
   346b4:	1807d0ba 	srai	r3,r3,2
   346b8:	22c9883a 	add	r4,r4,r11
   346bc:	21800217 	ldw	r6,8(r4)
   346c0:	10c4983a 	sll	r2,r2,r3
   346c4:	41000315 	stw	r4,12(r8)
   346c8:	41800215 	stw	r6,8(r8)
   346cc:	288ab03a 	or	r5,r5,r2
   346d0:	22000215 	stw	r8,8(r4)
   346d4:	8809883a 	mov	r4,r17
   346d8:	51400115 	stw	r5,4(r10)
   346dc:	32000315 	stw	r8,12(r6)
   346e0:	dfc00217 	ldw	ra,8(sp)
   346e4:	dc400117 	ldw	r17,4(sp)
   346e8:	dc000017 	ldw	r16,0(sp)
   346ec:	dec00304 	addi	sp,sp,12
   346f0:	003a5c01 	jmpi	3a5c0 <__malloc_unlock>
   346f4:	2880004c 	andi	r2,r5,1
   346f8:	3a4d883a 	add	r6,r7,r9
   346fc:	1000071e 	bne	r2,zero,3471c <_free_r+0x218>
   34700:	80bffe17 	ldw	r2,-8(r16)
   34704:	4091c83a 	sub	r8,r8,r2
   34708:	41000317 	ldw	r4,12(r8)
   3470c:	40c00217 	ldw	r3,8(r8)
   34710:	308d883a 	add	r6,r6,r2
   34714:	20c00215 	stw	r3,8(r4)
   34718:	19000315 	stw	r4,12(r3)
   3471c:	00800174 	movhi	r2,5
   34720:	10a76b04 	addi	r2,r2,-25172
   34724:	11000017 	ldw	r4,0(r2)
   34728:	30c00054 	ori	r3,r6,1
   3472c:	52000215 	stw	r8,8(r10)
   34730:	40c00115 	stw	r3,4(r8)
   34734:	313fa036 	bltu	r6,r4,345b8 <_free_r+0xb4>
   34738:	00800174 	movhi	r2,5
   3473c:	10a77f04 	addi	r2,r2,-25092
   34740:	11400017 	ldw	r5,0(r2)
   34744:	8809883a 	mov	r4,r17
   34748:	00343d80 	call	343d8 <_malloc_trim_r>
   3474c:	003f9a06 	br	345b8 <_free_r+0xb4>
   34750:	00800104 	movi	r2,4
   34754:	10c0072e 	bgeu	r2,r3,34774 <_free_r+0x270>
   34758:	00800504 	movi	r2,20
   3475c:	10c01936 	bltu	r2,r3,347c4 <_free_r+0x2c0>
   34760:	188016c4 	addi	r2,r3,91
   34764:	100690fa 	slli	r3,r2,3
   34768:	003fb306 	br	34638 <_free_r+0x134>
   3476c:	01400044 	movi	r5,1
   34770:	003f7e06 	br	3456c <_free_r+0x68>
   34774:	3804d1ba 	srli	r2,r7,6
   34778:	10800e04 	addi	r2,r2,56
   3477c:	100690fa 	slli	r3,r2,3
   34780:	003fad06 	br	34638 <_free_r+0x134>
   34784:	22000315 	stw	r8,12(r4)
   34788:	22000215 	stw	r8,8(r4)
   3478c:	3a05883a 	add	r2,r7,r8
   34790:	38c00054 	ori	r3,r7,1
   34794:	11c00015 	stw	r7,0(r2)
   34798:	41000215 	stw	r4,8(r8)
   3479c:	40c00115 	stw	r3,4(r8)
   347a0:	41000315 	stw	r4,12(r8)
   347a4:	003f8406 	br	345b8 <_free_r+0xb4>
   347a8:	1005d0ba 	srai	r2,r2,2
   347ac:	00c00044 	movi	r3,1
   347b0:	51000117 	ldw	r4,4(r10)
   347b4:	1886983a 	sll	r3,r3,r2
   347b8:	20c8b03a 	or	r4,r4,r3
   347bc:	51000115 	stw	r4,4(r10)
   347c0:	003fa706 	br	34660 <_free_r+0x15c>
   347c4:	00801504 	movi	r2,84
   347c8:	10c00436 	bltu	r2,r3,347dc <_free_r+0x2d8>
   347cc:	3804d33a 	srli	r2,r7,12
   347d0:	10801b84 	addi	r2,r2,110
   347d4:	100690fa 	slli	r3,r2,3
   347d8:	003f9706 	br	34638 <_free_r+0x134>
   347dc:	00805504 	movi	r2,340
   347e0:	10c00436 	bltu	r2,r3,347f4 <_free_r+0x2f0>
   347e4:	3804d3fa 	srli	r2,r7,15
   347e8:	10801dc4 	addi	r2,r2,119
   347ec:	100690fa 	slli	r3,r2,3
   347f0:	003f9106 	br	34638 <_free_r+0x134>
   347f4:	00815504 	movi	r2,1364
   347f8:	10c0032e 	bgeu	r2,r3,34808 <_free_r+0x304>
   347fc:	00801f84 	movi	r2,126
   34800:	00c0fc04 	movi	r3,1008
   34804:	003f8c06 	br	34638 <_free_r+0x134>
   34808:	3804d4ba 	srli	r2,r7,18
   3480c:	10801f04 	addi	r2,r2,124
   34810:	100690fa 	slli	r3,r2,3
   34814:	003f8806 	br	34638 <_free_r+0x134>

00034818 <__sfvwrite_r>:
   34818:	30800217 	ldw	r2,8(r6)
   3481c:	defff504 	addi	sp,sp,-44
   34820:	df000915 	stw	fp,36(sp)
   34824:	dd800715 	stw	r22,28(sp)
   34828:	dc800315 	stw	r18,12(sp)
   3482c:	dfc00a15 	stw	ra,40(sp)
   34830:	ddc00815 	stw	r23,32(sp)
   34834:	dd400615 	stw	r21,24(sp)
   34838:	dd000515 	stw	r20,20(sp)
   3483c:	dcc00415 	stw	r19,16(sp)
   34840:	dc400215 	stw	r17,8(sp)
   34844:	dc000115 	stw	r16,4(sp)
   34848:	302d883a 	mov	r22,r6
   3484c:	2039883a 	mov	fp,r4
   34850:	2825883a 	mov	r18,r5
   34854:	10001c26 	beq	r2,zero,348c8 <__sfvwrite_r+0xb0>
   34858:	29c0030b 	ldhu	r7,12(r5)
   3485c:	3880020c 	andi	r2,r7,8
   34860:	10002726 	beq	r2,zero,34900 <__sfvwrite_r+0xe8>
   34864:	28800417 	ldw	r2,16(r5)
   34868:	10002526 	beq	r2,zero,34900 <__sfvwrite_r+0xe8>
   3486c:	3880008c 	andi	r2,r7,2
   34870:	b5400017 	ldw	r21,0(r22)
   34874:	10002826 	beq	r2,zero,34918 <__sfvwrite_r+0x100>
   34878:	0021883a 	mov	r16,zero
   3487c:	0023883a 	mov	r17,zero
   34880:	880d883a 	mov	r6,r17
   34884:	e009883a 	mov	r4,fp
   34888:	00810004 	movi	r2,1024
   3488c:	80006e26 	beq	r16,zero,34a48 <__sfvwrite_r+0x230>
   34890:	800f883a 	mov	r7,r16
   34894:	91400717 	ldw	r5,28(r18)
   34898:	1400012e 	bgeu	r2,r16,348a0 <__sfvwrite_r+0x88>
   3489c:	100f883a 	mov	r7,r2
   348a0:	90c00917 	ldw	r3,36(r18)
   348a4:	183ee83a 	callr	r3
   348a8:	1007883a 	mov	r3,r2
   348ac:	80a1c83a 	sub	r16,r16,r2
   348b0:	88a3883a 	add	r17,r17,r2
   348b4:	00806d0e 	bge	zero,r2,34a6c <__sfvwrite_r+0x254>
   348b8:	b0800217 	ldw	r2,8(r22)
   348bc:	10c5c83a 	sub	r2,r2,r3
   348c0:	b0800215 	stw	r2,8(r22)
   348c4:	103fee1e 	bne	r2,zero,34880 <__sfvwrite_r+0x68>
   348c8:	0009883a 	mov	r4,zero
   348cc:	2005883a 	mov	r2,r4
   348d0:	dfc00a17 	ldw	ra,40(sp)
   348d4:	df000917 	ldw	fp,36(sp)
   348d8:	ddc00817 	ldw	r23,32(sp)
   348dc:	dd800717 	ldw	r22,28(sp)
   348e0:	dd400617 	ldw	r21,24(sp)
   348e4:	dd000517 	ldw	r20,20(sp)
   348e8:	dcc00417 	ldw	r19,16(sp)
   348ec:	dc800317 	ldw	r18,12(sp)
   348f0:	dc400217 	ldw	r17,8(sp)
   348f4:	dc000117 	ldw	r16,4(sp)
   348f8:	dec00b04 	addi	sp,sp,44
   348fc:	f800283a 	ret
   34900:	00325800 	call	32580 <__swsetup_r>
   34904:	1000e41e 	bne	r2,zero,34c98 <__sfvwrite_r+0x480>
   34908:	91c0030b 	ldhu	r7,12(r18)
   3490c:	b5400017 	ldw	r21,0(r22)
   34910:	3880008c 	andi	r2,r7,2
   34914:	103fd81e 	bne	r2,zero,34878 <__sfvwrite_r+0x60>
   34918:	3880004c 	andi	r2,r7,1
   3491c:	1005003a 	cmpeq	r2,r2,zero
   34920:	10005726 	beq	r2,zero,34a80 <__sfvwrite_r+0x268>
   34924:	0029883a 	mov	r20,zero
   34928:	002f883a 	mov	r23,zero
   3492c:	a0004226 	beq	r20,zero,34a38 <__sfvwrite_r+0x220>
   34930:	3880800c 	andi	r2,r7,512
   34934:	94000217 	ldw	r16,8(r18)
   34938:	10008b26 	beq	r2,zero,34b68 <__sfvwrite_r+0x350>
   3493c:	800d883a 	mov	r6,r16
   34940:	a400a536 	bltu	r20,r16,34bd8 <__sfvwrite_r+0x3c0>
   34944:	3881200c 	andi	r2,r7,1152
   34948:	10002726 	beq	r2,zero,349e8 <__sfvwrite_r+0x1d0>
   3494c:	90800517 	ldw	r2,20(r18)
   34950:	92000417 	ldw	r8,16(r18)
   34954:	91400017 	ldw	r5,0(r18)
   34958:	1087883a 	add	r3,r2,r2
   3495c:	1887883a 	add	r3,r3,r2
   34960:	1808d7fa 	srli	r4,r3,31
   34964:	2a21c83a 	sub	r16,r5,r8
   34968:	80800044 	addi	r2,r16,1
   3496c:	20c9883a 	add	r4,r4,r3
   34970:	2027d07a 	srai	r19,r4,1
   34974:	a085883a 	add	r2,r20,r2
   34978:	980d883a 	mov	r6,r19
   3497c:	9880022e 	bgeu	r19,r2,34988 <__sfvwrite_r+0x170>
   34980:	1027883a 	mov	r19,r2
   34984:	100d883a 	mov	r6,r2
   34988:	3881000c 	andi	r2,r7,1024
   3498c:	1000b826 	beq	r2,zero,34c70 <__sfvwrite_r+0x458>
   34990:	300b883a 	mov	r5,r6
   34994:	e009883a 	mov	r4,fp
   34998:	003508c0 	call	3508c <_malloc_r>
   3499c:	10003126 	beq	r2,zero,34a64 <__sfvwrite_r+0x24c>
   349a0:	91400417 	ldw	r5,16(r18)
   349a4:	1009883a 	mov	r4,r2
   349a8:	800d883a 	mov	r6,r16
   349ac:	1023883a 	mov	r17,r2
   349b0:	00358b00 	call	358b0 <memcpy>
   349b4:	90c0030b 	ldhu	r3,12(r18)
   349b8:	00beffc4 	movi	r2,-1025
   349bc:	1886703a 	and	r3,r3,r2
   349c0:	18c02014 	ori	r3,r3,128
   349c4:	90c0030d 	sth	r3,12(r18)
   349c8:	9c07c83a 	sub	r3,r19,r16
   349cc:	8c05883a 	add	r2,r17,r16
   349d0:	a00d883a 	mov	r6,r20
   349d4:	a021883a 	mov	r16,r20
   349d8:	90800015 	stw	r2,0(r18)
   349dc:	90c00215 	stw	r3,8(r18)
   349e0:	94400415 	stw	r17,16(r18)
   349e4:	94c00515 	stw	r19,20(r18)
   349e8:	91000017 	ldw	r4,0(r18)
   349ec:	b80b883a 	mov	r5,r23
   349f0:	a023883a 	mov	r17,r20
   349f4:	00359500 	call	35950 <memmove>
   349f8:	90c00217 	ldw	r3,8(r18)
   349fc:	90800017 	ldw	r2,0(r18)
   34a00:	a027883a 	mov	r19,r20
   34a04:	1c07c83a 	sub	r3,r3,r16
   34a08:	1405883a 	add	r2,r2,r16
   34a0c:	90c00215 	stw	r3,8(r18)
   34a10:	a021883a 	mov	r16,r20
   34a14:	90800015 	stw	r2,0(r18)
   34a18:	b0800217 	ldw	r2,8(r22)
   34a1c:	1405c83a 	sub	r2,r2,r16
   34a20:	b0800215 	stw	r2,8(r22)
   34a24:	103fa826 	beq	r2,zero,348c8 <__sfvwrite_r+0xb0>
   34a28:	a469c83a 	sub	r20,r20,r17
   34a2c:	91c0030b 	ldhu	r7,12(r18)
   34a30:	bcef883a 	add	r23,r23,r19
   34a34:	a03fbe1e 	bne	r20,zero,34930 <__sfvwrite_r+0x118>
   34a38:	adc00017 	ldw	r23,0(r21)
   34a3c:	ad000117 	ldw	r20,4(r21)
   34a40:	ad400204 	addi	r21,r21,8
   34a44:	003fb906 	br	3492c <__sfvwrite_r+0x114>
   34a48:	ac400017 	ldw	r17,0(r21)
   34a4c:	ac000117 	ldw	r16,4(r21)
   34a50:	ad400204 	addi	r21,r21,8
   34a54:	003f8a06 	br	34880 <__sfvwrite_r+0x68>
   34a58:	91400417 	ldw	r5,16(r18)
   34a5c:	e009883a 	mov	r4,fp
   34a60:	00345040 	call	34504 <_free_r>
   34a64:	00800304 	movi	r2,12
   34a68:	e0800015 	stw	r2,0(fp)
   34a6c:	9080030b 	ldhu	r2,12(r18)
   34a70:	013fffc4 	movi	r4,-1
   34a74:	10801014 	ori	r2,r2,64
   34a78:	9080030d 	sth	r2,12(r18)
   34a7c:	003f9306 	br	348cc <__sfvwrite_r+0xb4>
   34a80:	0027883a 	mov	r19,zero
   34a84:	002f883a 	mov	r23,zero
   34a88:	d8000015 	stw	zero,0(sp)
   34a8c:	0029883a 	mov	r20,zero
   34a90:	98001e26 	beq	r19,zero,34b0c <__sfvwrite_r+0x2f4>
   34a94:	d8c00017 	ldw	r3,0(sp)
   34a98:	1804c03a 	cmpne	r2,r3,zero
   34a9c:	10005e26 	beq	r2,zero,34c18 <__sfvwrite_r+0x400>
   34aa0:	9821883a 	mov	r16,r19
   34aa4:	a4c0012e 	bgeu	r20,r19,34aac <__sfvwrite_r+0x294>
   34aa8:	a021883a 	mov	r16,r20
   34aac:	91000017 	ldw	r4,0(r18)
   34ab0:	90800417 	ldw	r2,16(r18)
   34ab4:	91800217 	ldw	r6,8(r18)
   34ab8:	91c00517 	ldw	r7,20(r18)
   34abc:	1100022e 	bgeu	r2,r4,34ac8 <__sfvwrite_r+0x2b0>
   34ac0:	31e3883a 	add	r17,r6,r7
   34ac4:	8c001616 	blt	r17,r16,34b20 <__sfvwrite_r+0x308>
   34ac8:	81c03816 	blt	r16,r7,34bac <__sfvwrite_r+0x394>
   34acc:	90c00917 	ldw	r3,36(r18)
   34ad0:	91400717 	ldw	r5,28(r18)
   34ad4:	e009883a 	mov	r4,fp
   34ad8:	b80d883a 	mov	r6,r23
   34adc:	183ee83a 	callr	r3
   34ae0:	1023883a 	mov	r17,r2
   34ae4:	00bfe10e 	bge	zero,r2,34a6c <__sfvwrite_r+0x254>
   34ae8:	a469c83a 	sub	r20,r20,r17
   34aec:	a0001826 	beq	r20,zero,34b50 <__sfvwrite_r+0x338>
   34af0:	b0800217 	ldw	r2,8(r22)
   34af4:	1445c83a 	sub	r2,r2,r17
   34af8:	b0800215 	stw	r2,8(r22)
   34afc:	103f7226 	beq	r2,zero,348c8 <__sfvwrite_r+0xb0>
   34b00:	9c67c83a 	sub	r19,r19,r17
   34b04:	bc6f883a 	add	r23,r23,r17
   34b08:	983fe21e 	bne	r19,zero,34a94 <__sfvwrite_r+0x27c>
   34b0c:	adc00017 	ldw	r23,0(r21)
   34b10:	acc00117 	ldw	r19,4(r21)
   34b14:	ad400204 	addi	r21,r21,8
   34b18:	d8000015 	stw	zero,0(sp)
   34b1c:	003fdc06 	br	34a90 <__sfvwrite_r+0x278>
   34b20:	b80b883a 	mov	r5,r23
   34b24:	880d883a 	mov	r6,r17
   34b28:	00359500 	call	35950 <memmove>
   34b2c:	90c00017 	ldw	r3,0(r18)
   34b30:	e009883a 	mov	r4,fp
   34b34:	900b883a 	mov	r5,r18
   34b38:	1c47883a 	add	r3,r3,r17
   34b3c:	90c00015 	stw	r3,0(r18)
   34b40:	0033eb40 	call	33eb4 <_fflush_r>
   34b44:	103fc91e 	bne	r2,zero,34a6c <__sfvwrite_r+0x254>
   34b48:	a469c83a 	sub	r20,r20,r17
   34b4c:	a03fe81e 	bne	r20,zero,34af0 <__sfvwrite_r+0x2d8>
   34b50:	e009883a 	mov	r4,fp
   34b54:	900b883a 	mov	r5,r18
   34b58:	0033eb40 	call	33eb4 <_fflush_r>
   34b5c:	103fc31e 	bne	r2,zero,34a6c <__sfvwrite_r+0x254>
   34b60:	d8000015 	stw	zero,0(sp)
   34b64:	003fe206 	br	34af0 <__sfvwrite_r+0x2d8>
   34b68:	91000017 	ldw	r4,0(r18)
   34b6c:	90800417 	ldw	r2,16(r18)
   34b70:	1100022e 	bgeu	r2,r4,34b7c <__sfvwrite_r+0x364>
   34b74:	8023883a 	mov	r17,r16
   34b78:	85003136 	bltu	r16,r20,34c40 <__sfvwrite_r+0x428>
   34b7c:	91c00517 	ldw	r7,20(r18)
   34b80:	a1c01836 	bltu	r20,r7,34be4 <__sfvwrite_r+0x3cc>
   34b84:	90c00917 	ldw	r3,36(r18)
   34b88:	91400717 	ldw	r5,28(r18)
   34b8c:	e009883a 	mov	r4,fp
   34b90:	b80d883a 	mov	r6,r23
   34b94:	183ee83a 	callr	r3
   34b98:	1021883a 	mov	r16,r2
   34b9c:	00bfb30e 	bge	zero,r2,34a6c <__sfvwrite_r+0x254>
   34ba0:	1023883a 	mov	r17,r2
   34ba4:	1027883a 	mov	r19,r2
   34ba8:	003f9b06 	br	34a18 <__sfvwrite_r+0x200>
   34bac:	b80b883a 	mov	r5,r23
   34bb0:	800d883a 	mov	r6,r16
   34bb4:	00359500 	call	35950 <memmove>
   34bb8:	90c00217 	ldw	r3,8(r18)
   34bbc:	90800017 	ldw	r2,0(r18)
   34bc0:	8023883a 	mov	r17,r16
   34bc4:	1c07c83a 	sub	r3,r3,r16
   34bc8:	1405883a 	add	r2,r2,r16
   34bcc:	90c00215 	stw	r3,8(r18)
   34bd0:	90800015 	stw	r2,0(r18)
   34bd4:	003fc406 	br	34ae8 <__sfvwrite_r+0x2d0>
   34bd8:	a00d883a 	mov	r6,r20
   34bdc:	a021883a 	mov	r16,r20
   34be0:	003f8106 	br	349e8 <__sfvwrite_r+0x1d0>
   34be4:	b80b883a 	mov	r5,r23
   34be8:	a00d883a 	mov	r6,r20
   34bec:	00359500 	call	35950 <memmove>
   34bf0:	90c00217 	ldw	r3,8(r18)
   34bf4:	90800017 	ldw	r2,0(r18)
   34bf8:	a021883a 	mov	r16,r20
   34bfc:	1d07c83a 	sub	r3,r3,r20
   34c00:	1505883a 	add	r2,r2,r20
   34c04:	a023883a 	mov	r17,r20
   34c08:	a027883a 	mov	r19,r20
   34c0c:	90c00215 	stw	r3,8(r18)
   34c10:	90800015 	stw	r2,0(r18)
   34c14:	003f8006 	br	34a18 <__sfvwrite_r+0x200>
   34c18:	b809883a 	mov	r4,r23
   34c1c:	01400284 	movi	r5,10
   34c20:	980d883a 	mov	r6,r19
   34c24:	00357cc0 	call	357cc <memchr>
   34c28:	10001726 	beq	r2,zero,34c88 <__sfvwrite_r+0x470>
   34c2c:	15c5c83a 	sub	r2,r2,r23
   34c30:	15000044 	addi	r20,r2,1
   34c34:	00800044 	movi	r2,1
   34c38:	d8800015 	stw	r2,0(sp)
   34c3c:	003f9806 	br	34aa0 <__sfvwrite_r+0x288>
   34c40:	b80b883a 	mov	r5,r23
   34c44:	800d883a 	mov	r6,r16
   34c48:	00359500 	call	35950 <memmove>
   34c4c:	90c00017 	ldw	r3,0(r18)
   34c50:	e009883a 	mov	r4,fp
   34c54:	900b883a 	mov	r5,r18
   34c58:	1c07883a 	add	r3,r3,r16
   34c5c:	90c00015 	stw	r3,0(r18)
   34c60:	8027883a 	mov	r19,r16
   34c64:	0033eb40 	call	33eb4 <_fflush_r>
   34c68:	103f6b26 	beq	r2,zero,34a18 <__sfvwrite_r+0x200>
   34c6c:	003f7f06 	br	34a6c <__sfvwrite_r+0x254>
   34c70:	400b883a 	mov	r5,r8
   34c74:	e009883a 	mov	r4,fp
   34c78:	0036b540 	call	36b54 <_realloc_r>
   34c7c:	103f7626 	beq	r2,zero,34a58 <__sfvwrite_r+0x240>
   34c80:	1023883a 	mov	r17,r2
   34c84:	003f5006 	br	349c8 <__sfvwrite_r+0x1b0>
   34c88:	00c00044 	movi	r3,1
   34c8c:	9d000044 	addi	r20,r19,1
   34c90:	d8c00015 	stw	r3,0(sp)
   34c94:	003f8206 	br	34aa0 <__sfvwrite_r+0x288>
   34c98:	9080030b 	ldhu	r2,12(r18)
   34c9c:	00c00244 	movi	r3,9
   34ca0:	013fffc4 	movi	r4,-1
   34ca4:	10801014 	ori	r2,r2,64
   34ca8:	9080030d 	sth	r2,12(r18)
   34cac:	e0c00015 	stw	r3,0(fp)
   34cb0:	003f0606 	br	348cc <__sfvwrite_r+0xb4>

00034cb4 <_fwalk_reent>:
   34cb4:	defff704 	addi	sp,sp,-36
   34cb8:	dcc00315 	stw	r19,12(sp)
   34cbc:	24c0b804 	addi	r19,r4,736
   34cc0:	dd800615 	stw	r22,24(sp)
   34cc4:	dd400515 	stw	r21,20(sp)
   34cc8:	dfc00815 	stw	ra,32(sp)
   34ccc:	ddc00715 	stw	r23,28(sp)
   34cd0:	dd000415 	stw	r20,16(sp)
   34cd4:	dc800215 	stw	r18,8(sp)
   34cd8:	dc400115 	stw	r17,4(sp)
   34cdc:	dc000015 	stw	r16,0(sp)
   34ce0:	202b883a 	mov	r21,r4
   34ce4:	282d883a 	mov	r22,r5
   34ce8:	003413c0 	call	3413c <__sfp_lock_acquire>
   34cec:	98002126 	beq	r19,zero,34d74 <_fwalk_reent+0xc0>
   34cf0:	002f883a 	mov	r23,zero
   34cf4:	9c800117 	ldw	r18,4(r19)
   34cf8:	9c000217 	ldw	r16,8(r19)
   34cfc:	90bfffc4 	addi	r2,r18,-1
   34d00:	10000d16 	blt	r2,zero,34d38 <_fwalk_reent+0x84>
   34d04:	0023883a 	mov	r17,zero
   34d08:	053fffc4 	movi	r20,-1
   34d0c:	8080030f 	ldh	r2,12(r16)
   34d10:	8c400044 	addi	r17,r17,1
   34d14:	10000626 	beq	r2,zero,34d30 <_fwalk_reent+0x7c>
   34d18:	8080038f 	ldh	r2,14(r16)
   34d1c:	800b883a 	mov	r5,r16
   34d20:	a809883a 	mov	r4,r21
   34d24:	15000226 	beq	r2,r20,34d30 <_fwalk_reent+0x7c>
   34d28:	b03ee83a 	callr	r22
   34d2c:	b8aeb03a 	or	r23,r23,r2
   34d30:	84001704 	addi	r16,r16,92
   34d34:	947ff51e 	bne	r18,r17,34d0c <_fwalk_reent+0x58>
   34d38:	9cc00017 	ldw	r19,0(r19)
   34d3c:	983fed1e 	bne	r19,zero,34cf4 <_fwalk_reent+0x40>
   34d40:	00341400 	call	34140 <__sfp_lock_release>
   34d44:	b805883a 	mov	r2,r23
   34d48:	dfc00817 	ldw	ra,32(sp)
   34d4c:	ddc00717 	ldw	r23,28(sp)
   34d50:	dd800617 	ldw	r22,24(sp)
   34d54:	dd400517 	ldw	r21,20(sp)
   34d58:	dd000417 	ldw	r20,16(sp)
   34d5c:	dcc00317 	ldw	r19,12(sp)
   34d60:	dc800217 	ldw	r18,8(sp)
   34d64:	dc400117 	ldw	r17,4(sp)
   34d68:	dc000017 	ldw	r16,0(sp)
   34d6c:	dec00904 	addi	sp,sp,36
   34d70:	f800283a 	ret
   34d74:	002f883a 	mov	r23,zero
   34d78:	003ff106 	br	34d40 <_fwalk_reent+0x8c>

00034d7c <_fwalk>:
   34d7c:	defff804 	addi	sp,sp,-32
   34d80:	dcc00315 	stw	r19,12(sp)
   34d84:	24c0b804 	addi	r19,r4,736
   34d88:	dd400515 	stw	r21,20(sp)
   34d8c:	dfc00715 	stw	ra,28(sp)
   34d90:	dd800615 	stw	r22,24(sp)
   34d94:	dd000415 	stw	r20,16(sp)
   34d98:	dc800215 	stw	r18,8(sp)
   34d9c:	dc400115 	stw	r17,4(sp)
   34da0:	dc000015 	stw	r16,0(sp)
   34da4:	282b883a 	mov	r21,r5
   34da8:	003413c0 	call	3413c <__sfp_lock_acquire>
   34dac:	98001f26 	beq	r19,zero,34e2c <_fwalk+0xb0>
   34db0:	002d883a 	mov	r22,zero
   34db4:	9c800117 	ldw	r18,4(r19)
   34db8:	9c000217 	ldw	r16,8(r19)
   34dbc:	90bfffc4 	addi	r2,r18,-1
   34dc0:	10000c16 	blt	r2,zero,34df4 <_fwalk+0x78>
   34dc4:	0023883a 	mov	r17,zero
   34dc8:	053fffc4 	movi	r20,-1
   34dcc:	8080030f 	ldh	r2,12(r16)
   34dd0:	8c400044 	addi	r17,r17,1
   34dd4:	10000526 	beq	r2,zero,34dec <_fwalk+0x70>
   34dd8:	8080038f 	ldh	r2,14(r16)
   34ddc:	8009883a 	mov	r4,r16
   34de0:	15000226 	beq	r2,r20,34dec <_fwalk+0x70>
   34de4:	a83ee83a 	callr	r21
   34de8:	b0acb03a 	or	r22,r22,r2
   34dec:	84001704 	addi	r16,r16,92
   34df0:	947ff61e 	bne	r18,r17,34dcc <_fwalk+0x50>
   34df4:	9cc00017 	ldw	r19,0(r19)
   34df8:	983fee1e 	bne	r19,zero,34db4 <_fwalk+0x38>
   34dfc:	00341400 	call	34140 <__sfp_lock_release>
   34e00:	b005883a 	mov	r2,r22
   34e04:	dfc00717 	ldw	ra,28(sp)
   34e08:	dd800617 	ldw	r22,24(sp)
   34e0c:	dd400517 	ldw	r21,20(sp)
   34e10:	dd000417 	ldw	r20,16(sp)
   34e14:	dcc00317 	ldw	r19,12(sp)
   34e18:	dc800217 	ldw	r18,8(sp)
   34e1c:	dc400117 	ldw	r17,4(sp)
   34e20:	dc000017 	ldw	r16,0(sp)
   34e24:	dec00804 	addi	sp,sp,32
   34e28:	f800283a 	ret
   34e2c:	002d883a 	mov	r22,zero
   34e30:	003ff206 	br	34dfc <_fwalk+0x80>

00034e34 <__locale_charset>:
   34e34:	d0a00317 	ldw	r2,-32756(gp)
   34e38:	f800283a 	ret

00034e3c <_localeconv_r>:
   34e3c:	00800174 	movhi	r2,5
   34e40:	10a03b04 	addi	r2,r2,-32532
   34e44:	f800283a 	ret

00034e48 <localeconv>:
   34e48:	00800174 	movhi	r2,5
   34e4c:	10a76704 	addi	r2,r2,-25188
   34e50:	11000017 	ldw	r4,0(r2)
   34e54:	0034e3c1 	jmpi	34e3c <_localeconv_r>

00034e58 <_setlocale_r>:
   34e58:	defffc04 	addi	sp,sp,-16
   34e5c:	00c00174 	movhi	r3,5
   34e60:	18e03604 	addi	r3,r3,-32552
   34e64:	dc800215 	stw	r18,8(sp)
   34e68:	dc400115 	stw	r17,4(sp)
   34e6c:	dc000015 	stw	r16,0(sp)
   34e70:	2023883a 	mov	r17,r4
   34e74:	2825883a 	mov	r18,r5
   34e78:	dfc00315 	stw	ra,12(sp)
   34e7c:	3021883a 	mov	r16,r6
   34e80:	3009883a 	mov	r4,r6
   34e84:	180b883a 	mov	r5,r3
   34e88:	30000926 	beq	r6,zero,34eb0 <_setlocale_r+0x58>
   34e8c:	00373740 	call	37374 <strcmp>
   34e90:	8009883a 	mov	r4,r16
   34e94:	01400174 	movhi	r5,5
   34e98:	29602104 	addi	r5,r5,-32636
   34e9c:	10000b1e 	bne	r2,zero,34ecc <_setlocale_r+0x74>
   34ea0:	8c000d15 	stw	r16,52(r17)
   34ea4:	8c800c15 	stw	r18,48(r17)
   34ea8:	00c00174 	movhi	r3,5
   34eac:	18e03604 	addi	r3,r3,-32552
   34eb0:	1805883a 	mov	r2,r3
   34eb4:	dfc00317 	ldw	ra,12(sp)
   34eb8:	dc800217 	ldw	r18,8(sp)
   34ebc:	dc400117 	ldw	r17,4(sp)
   34ec0:	dc000017 	ldw	r16,0(sp)
   34ec4:	dec00404 	addi	sp,sp,16
   34ec8:	f800283a 	ret
   34ecc:	00373740 	call	37374 <strcmp>
   34ed0:	0007883a 	mov	r3,zero
   34ed4:	103ff226 	beq	r2,zero,34ea0 <_setlocale_r+0x48>
   34ed8:	003ff506 	br	34eb0 <_setlocale_r+0x58>

00034edc <setlocale>:
   34edc:	01800174 	movhi	r6,5
   34ee0:	31a76704 	addi	r6,r6,-25188
   34ee4:	2007883a 	mov	r3,r4
   34ee8:	31000017 	ldw	r4,0(r6)
   34eec:	280d883a 	mov	r6,r5
   34ef0:	180b883a 	mov	r5,r3
   34ef4:	0034e581 	jmpi	34e58 <_setlocale_r>

00034ef8 <__smakebuf_r>:
   34ef8:	2880030b 	ldhu	r2,12(r5)
   34efc:	deffed04 	addi	sp,sp,-76
   34f00:	dc401015 	stw	r17,64(sp)
   34f04:	1080008c 	andi	r2,r2,2
   34f08:	dc000f15 	stw	r16,60(sp)
   34f0c:	dfc01215 	stw	ra,72(sp)
   34f10:	dc801115 	stw	r18,68(sp)
   34f14:	2821883a 	mov	r16,r5
   34f18:	2023883a 	mov	r17,r4
   34f1c:	10000b26 	beq	r2,zero,34f4c <__smakebuf_r+0x54>
   34f20:	28c010c4 	addi	r3,r5,67
   34f24:	00800044 	movi	r2,1
   34f28:	28800515 	stw	r2,20(r5)
   34f2c:	28c00415 	stw	r3,16(r5)
   34f30:	28c00015 	stw	r3,0(r5)
   34f34:	dfc01217 	ldw	ra,72(sp)
   34f38:	dc801117 	ldw	r18,68(sp)
   34f3c:	dc401017 	ldw	r17,64(sp)
   34f40:	dc000f17 	ldw	r16,60(sp)
   34f44:	dec01304 	addi	sp,sp,76
   34f48:	f800283a 	ret
   34f4c:	2940038f 	ldh	r5,14(r5)
   34f50:	28002116 	blt	r5,zero,34fd8 <__smakebuf_r+0xe0>
   34f54:	d80d883a 	mov	r6,sp
   34f58:	00377040 	call	37704 <_fstat_r>
   34f5c:	10001e16 	blt	r2,zero,34fd8 <__smakebuf_r+0xe0>
   34f60:	d8800117 	ldw	r2,4(sp)
   34f64:	00e00014 	movui	r3,32768
   34f68:	113c000c 	andi	r4,r2,61440
   34f6c:	20c03126 	beq	r4,r3,35034 <__smakebuf_r+0x13c>
   34f70:	8080030b 	ldhu	r2,12(r16)
   34f74:	00c80004 	movi	r3,8192
   34f78:	10820014 	ori	r2,r2,2048
   34f7c:	8080030d 	sth	r2,12(r16)
   34f80:	20c01e26 	beq	r4,r3,34ffc <__smakebuf_r+0x104>
   34f84:	04810004 	movi	r18,1024
   34f88:	8809883a 	mov	r4,r17
   34f8c:	900b883a 	mov	r5,r18
   34f90:	003508c0 	call	3508c <_malloc_r>
   34f94:	1009883a 	mov	r4,r2
   34f98:	10003126 	beq	r2,zero,35060 <__smakebuf_r+0x168>
   34f9c:	80c0030b 	ldhu	r3,12(r16)
   34fa0:	008000f4 	movhi	r2,3
   34fa4:	10908c04 	addi	r2,r2,16944
   34fa8:	88800f15 	stw	r2,60(r17)
   34fac:	18c02014 	ori	r3,r3,128
   34fb0:	84800515 	stw	r18,20(r16)
   34fb4:	80c0030d 	sth	r3,12(r16)
   34fb8:	81000415 	stw	r4,16(r16)
   34fbc:	81000015 	stw	r4,0(r16)
   34fc0:	dfc01217 	ldw	ra,72(sp)
   34fc4:	dc801117 	ldw	r18,68(sp)
   34fc8:	dc401017 	ldw	r17,64(sp)
   34fcc:	dc000f17 	ldw	r16,60(sp)
   34fd0:	dec01304 	addi	sp,sp,76
   34fd4:	f800283a 	ret
   34fd8:	80c0030b 	ldhu	r3,12(r16)
   34fdc:	1880200c 	andi	r2,r3,128
   34fe0:	10000426 	beq	r2,zero,34ff4 <__smakebuf_r+0xfc>
   34fe4:	04801004 	movi	r18,64
   34fe8:	18820014 	ori	r2,r3,2048
   34fec:	8080030d 	sth	r2,12(r16)
   34ff0:	003fe506 	br	34f88 <__smakebuf_r+0x90>
   34ff4:	04810004 	movi	r18,1024
   34ff8:	003ffb06 	br	34fe8 <__smakebuf_r+0xf0>
   34ffc:	8140038f 	ldh	r5,14(r16)
   35000:	8809883a 	mov	r4,r17
   35004:	00377780 	call	37778 <_isatty_r>
   35008:	103fde26 	beq	r2,zero,34f84 <__smakebuf_r+0x8c>
   3500c:	8080030b 	ldhu	r2,12(r16)
   35010:	80c010c4 	addi	r3,r16,67
   35014:	04810004 	movi	r18,1024
   35018:	10800054 	ori	r2,r2,1
   3501c:	8080030d 	sth	r2,12(r16)
   35020:	00800044 	movi	r2,1
   35024:	80c00415 	stw	r3,16(r16)
   35028:	80800515 	stw	r2,20(r16)
   3502c:	80c00015 	stw	r3,0(r16)
   35030:	003fd506 	br	34f88 <__smakebuf_r+0x90>
   35034:	80c00a17 	ldw	r3,40(r16)
   35038:	008000f4 	movhi	r2,3
   3503c:	109c8c04 	addi	r2,r2,29232
   35040:	18bfcb1e 	bne	r3,r2,34f70 <__smakebuf_r+0x78>
   35044:	8080030b 	ldhu	r2,12(r16)
   35048:	00c10004 	movi	r3,1024
   3504c:	1825883a 	mov	r18,r3
   35050:	10c4b03a 	or	r2,r2,r3
   35054:	8080030d 	sth	r2,12(r16)
   35058:	80c01315 	stw	r3,76(r16)
   3505c:	003fca06 	br	34f88 <__smakebuf_r+0x90>
   35060:	8100030b 	ldhu	r4,12(r16)
   35064:	2080800c 	andi	r2,r4,512
   35068:	103fb21e 	bne	r2,zero,34f34 <__smakebuf_r+0x3c>
   3506c:	80c010c4 	addi	r3,r16,67
   35070:	21000094 	ori	r4,r4,2
   35074:	00800044 	movi	r2,1
   35078:	80800515 	stw	r2,20(r16)
   3507c:	8100030d 	sth	r4,12(r16)
   35080:	80c00415 	stw	r3,16(r16)
   35084:	80c00015 	stw	r3,0(r16)
   35088:	003faa06 	br	34f34 <__smakebuf_r+0x3c>

0003508c <_malloc_r>:
   3508c:	defff604 	addi	sp,sp,-40
   35090:	28c002c4 	addi	r3,r5,11
   35094:	00800584 	movi	r2,22
   35098:	dc800215 	stw	r18,8(sp)
   3509c:	dfc00915 	stw	ra,36(sp)
   350a0:	df000815 	stw	fp,32(sp)
   350a4:	ddc00715 	stw	r23,28(sp)
   350a8:	dd800615 	stw	r22,24(sp)
   350ac:	dd400515 	stw	r21,20(sp)
   350b0:	dd000415 	stw	r20,16(sp)
   350b4:	dcc00315 	stw	r19,12(sp)
   350b8:	dc400115 	stw	r17,4(sp)
   350bc:	dc000015 	stw	r16,0(sp)
   350c0:	2025883a 	mov	r18,r4
   350c4:	10c01236 	bltu	r2,r3,35110 <_malloc_r+0x84>
   350c8:	04400404 	movi	r17,16
   350cc:	8940142e 	bgeu	r17,r5,35120 <_malloc_r+0x94>
   350d0:	00800304 	movi	r2,12
   350d4:	0007883a 	mov	r3,zero
   350d8:	90800015 	stw	r2,0(r18)
   350dc:	1805883a 	mov	r2,r3
   350e0:	dfc00917 	ldw	ra,36(sp)
   350e4:	df000817 	ldw	fp,32(sp)
   350e8:	ddc00717 	ldw	r23,28(sp)
   350ec:	dd800617 	ldw	r22,24(sp)
   350f0:	dd400517 	ldw	r21,20(sp)
   350f4:	dd000417 	ldw	r20,16(sp)
   350f8:	dcc00317 	ldw	r19,12(sp)
   350fc:	dc800217 	ldw	r18,8(sp)
   35100:	dc400117 	ldw	r17,4(sp)
   35104:	dc000017 	ldw	r16,0(sp)
   35108:	dec00a04 	addi	sp,sp,40
   3510c:	f800283a 	ret
   35110:	00bffe04 	movi	r2,-8
   35114:	18a2703a 	and	r17,r3,r2
   35118:	883fed16 	blt	r17,zero,350d0 <_malloc_r+0x44>
   3511c:	897fec36 	bltu	r17,r5,350d0 <_malloc_r+0x44>
   35120:	9009883a 	mov	r4,r18
   35124:	003a5a00 	call	3a5a0 <__malloc_lock>
   35128:	00807dc4 	movi	r2,503
   3512c:	14402b2e 	bgeu	r2,r17,351dc <_malloc_r+0x150>
   35130:	8806d27a 	srli	r3,r17,9
   35134:	18003f1e 	bne	r3,zero,35234 <_malloc_r+0x1a8>
   35138:	880cd0fa 	srli	r6,r17,3
   3513c:	300490fa 	slli	r2,r6,3
   35140:	02c00174 	movhi	r11,5
   35144:	5ae1e304 	addi	r11,r11,-30836
   35148:	12cb883a 	add	r5,r2,r11
   3514c:	2c000317 	ldw	r16,12(r5)
   35150:	580f883a 	mov	r7,r11
   35154:	2c00041e 	bne	r5,r16,35168 <_malloc_r+0xdc>
   35158:	00000a06 	br	35184 <_malloc_r+0xf8>
   3515c:	1800860e 	bge	r3,zero,35378 <_malloc_r+0x2ec>
   35160:	84000317 	ldw	r16,12(r16)
   35164:	2c000726 	beq	r5,r16,35184 <_malloc_r+0xf8>
   35168:	80800117 	ldw	r2,4(r16)
   3516c:	00ffff04 	movi	r3,-4
   35170:	10c8703a 	and	r4,r2,r3
   35174:	2447c83a 	sub	r3,r4,r17
   35178:	008003c4 	movi	r2,15
   3517c:	10fff70e 	bge	r2,r3,3515c <_malloc_r+0xd0>
   35180:	31bfffc4 	addi	r6,r6,-1
   35184:	32400044 	addi	r9,r6,1
   35188:	02800174 	movhi	r10,5
   3518c:	52a1e504 	addi	r10,r10,-30828
   35190:	54000217 	ldw	r16,8(r10)
   35194:	8280a026 	beq	r16,r10,35418 <_malloc_r+0x38c>
   35198:	80800117 	ldw	r2,4(r16)
   3519c:	00ffff04 	movi	r3,-4
   351a0:	10ca703a 	and	r5,r2,r3
   351a4:	2c4dc83a 	sub	r6,r5,r17
   351a8:	008003c4 	movi	r2,15
   351ac:	11808316 	blt	r2,r6,353bc <_malloc_r+0x330>
   351b0:	52800315 	stw	r10,12(r10)
   351b4:	52800215 	stw	r10,8(r10)
   351b8:	30002916 	blt	r6,zero,35260 <_malloc_r+0x1d4>
   351bc:	8147883a 	add	r3,r16,r5
   351c0:	18800117 	ldw	r2,4(r3)
   351c4:	9009883a 	mov	r4,r18
   351c8:	10800054 	ori	r2,r2,1
   351cc:	18800115 	stw	r2,4(r3)
   351d0:	003a5c00 	call	3a5c0 <__malloc_unlock>
   351d4:	80c00204 	addi	r3,r16,8
   351d8:	003fc006 	br	350dc <_malloc_r+0x50>
   351dc:	02c00174 	movhi	r11,5
   351e0:	5ae1e304 	addi	r11,r11,-30836
   351e4:	8ac5883a 	add	r2,r17,r11
   351e8:	14000317 	ldw	r16,12(r2)
   351ec:	580f883a 	mov	r7,r11
   351f0:	8806d0fa 	srli	r3,r17,3
   351f4:	14006c26 	beq	r2,r16,353a8 <_malloc_r+0x31c>
   351f8:	80c00117 	ldw	r3,4(r16)
   351fc:	00bfff04 	movi	r2,-4
   35200:	81800317 	ldw	r6,12(r16)
   35204:	1886703a 	and	r3,r3,r2
   35208:	80c7883a 	add	r3,r16,r3
   3520c:	18800117 	ldw	r2,4(r3)
   35210:	81400217 	ldw	r5,8(r16)
   35214:	9009883a 	mov	r4,r18
   35218:	10800054 	ori	r2,r2,1
   3521c:	18800115 	stw	r2,4(r3)
   35220:	31400215 	stw	r5,8(r6)
   35224:	29800315 	stw	r6,12(r5)
   35228:	003a5c00 	call	3a5c0 <__malloc_unlock>
   3522c:	80c00204 	addi	r3,r16,8
   35230:	003faa06 	br	350dc <_malloc_r+0x50>
   35234:	00800104 	movi	r2,4
   35238:	10c0052e 	bgeu	r2,r3,35250 <_malloc_r+0x1c4>
   3523c:	00800504 	movi	r2,20
   35240:	10c07836 	bltu	r2,r3,35424 <_malloc_r+0x398>
   35244:	198016c4 	addi	r6,r3,91
   35248:	300490fa 	slli	r2,r6,3
   3524c:	003fbc06 	br	35140 <_malloc_r+0xb4>
   35250:	8804d1ba 	srli	r2,r17,6
   35254:	11800e04 	addi	r6,r2,56
   35258:	300490fa 	slli	r2,r6,3
   3525c:	003fb806 	br	35140 <_malloc_r+0xb4>
   35260:	00807fc4 	movi	r2,511
   35264:	1140bb36 	bltu	r2,r5,35554 <_malloc_r+0x4c8>
   35268:	2806d0fa 	srli	r3,r5,3
   3526c:	573ffe04 	addi	fp,r10,-8
   35270:	00800044 	movi	r2,1
   35274:	180890fa 	slli	r4,r3,3
   35278:	1807d0ba 	srai	r3,r3,2
   3527c:	e1c00117 	ldw	r7,4(fp)
   35280:	5909883a 	add	r4,r11,r4
   35284:	21400217 	ldw	r5,8(r4)
   35288:	10c4983a 	sll	r2,r2,r3
   3528c:	81000315 	stw	r4,12(r16)
   35290:	81400215 	stw	r5,8(r16)
   35294:	388eb03a 	or	r7,r7,r2
   35298:	2c000315 	stw	r16,12(r5)
   3529c:	24000215 	stw	r16,8(r4)
   352a0:	e1c00115 	stw	r7,4(fp)
   352a4:	4807883a 	mov	r3,r9
   352a8:	4800cd16 	blt	r9,zero,355e0 <_malloc_r+0x554>
   352ac:	1807d0ba 	srai	r3,r3,2
   352b0:	00800044 	movi	r2,1
   352b4:	10c8983a 	sll	r4,r2,r3
   352b8:	39004436 	bltu	r7,r4,353cc <_malloc_r+0x340>
   352bc:	21c4703a 	and	r2,r4,r7
   352c0:	10000a1e 	bne	r2,zero,352ec <_malloc_r+0x260>
   352c4:	2109883a 	add	r4,r4,r4
   352c8:	00bfff04 	movi	r2,-4
   352cc:	4884703a 	and	r2,r9,r2
   352d0:	3906703a 	and	r3,r7,r4
   352d4:	12400104 	addi	r9,r2,4
   352d8:	1800041e 	bne	r3,zero,352ec <_malloc_r+0x260>
   352dc:	2109883a 	add	r4,r4,r4
   352e0:	3904703a 	and	r2,r7,r4
   352e4:	4a400104 	addi	r9,r9,4
   352e8:	103ffc26 	beq	r2,zero,352dc <_malloc_r+0x250>
   352ec:	480490fa 	slli	r2,r9,3
   352f0:	4819883a 	mov	r12,r9
   352f4:	023fff04 	movi	r8,-4
   352f8:	589b883a 	add	r13,r11,r2
   352fc:	6807883a 	mov	r3,r13
   35300:	014003c4 	movi	r5,15
   35304:	1c000317 	ldw	r16,12(r3)
   35308:	1c00041e 	bne	r3,r16,3531c <_malloc_r+0x290>
   3530c:	0000a706 	br	355ac <_malloc_r+0x520>
   35310:	3000ab0e 	bge	r6,zero,355c0 <_malloc_r+0x534>
   35314:	84000317 	ldw	r16,12(r16)
   35318:	1c00a426 	beq	r3,r16,355ac <_malloc_r+0x520>
   3531c:	80800117 	ldw	r2,4(r16)
   35320:	1204703a 	and	r2,r2,r8
   35324:	144dc83a 	sub	r6,r2,r17
   35328:	29bff90e 	bge	r5,r6,35310 <_malloc_r+0x284>
   3532c:	81000317 	ldw	r4,12(r16)
   35330:	80c00217 	ldw	r3,8(r16)
   35334:	89400054 	ori	r5,r17,1
   35338:	8445883a 	add	r2,r16,r17
   3533c:	20c00215 	stw	r3,8(r4)
   35340:	19000315 	stw	r4,12(r3)
   35344:	81400115 	stw	r5,4(r16)
   35348:	1187883a 	add	r3,r2,r6
   3534c:	31000054 	ori	r4,r6,1
   35350:	50800315 	stw	r2,12(r10)
   35354:	50800215 	stw	r2,8(r10)
   35358:	19800015 	stw	r6,0(r3)
   3535c:	11000115 	stw	r4,4(r2)
   35360:	12800215 	stw	r10,8(r2)
   35364:	12800315 	stw	r10,12(r2)
   35368:	9009883a 	mov	r4,r18
   3536c:	003a5c00 	call	3a5c0 <__malloc_unlock>
   35370:	80c00204 	addi	r3,r16,8
   35374:	003f5906 	br	350dc <_malloc_r+0x50>
   35378:	8109883a 	add	r4,r16,r4
   3537c:	20800117 	ldw	r2,4(r4)
   35380:	80c00217 	ldw	r3,8(r16)
   35384:	81400317 	ldw	r5,12(r16)
   35388:	10800054 	ori	r2,r2,1
   3538c:	20800115 	stw	r2,4(r4)
   35390:	28c00215 	stw	r3,8(r5)
   35394:	19400315 	stw	r5,12(r3)
   35398:	9009883a 	mov	r4,r18
   3539c:	003a5c00 	call	3a5c0 <__malloc_unlock>
   353a0:	80c00204 	addi	r3,r16,8
   353a4:	003f4d06 	br	350dc <_malloc_r+0x50>
   353a8:	80800204 	addi	r2,r16,8
   353ac:	14000317 	ldw	r16,12(r2)
   353b0:	143f911e 	bne	r2,r16,351f8 <_malloc_r+0x16c>
   353b4:	1a400084 	addi	r9,r3,2
   353b8:	003f7306 	br	35188 <_malloc_r+0xfc>
   353bc:	88c00054 	ori	r3,r17,1
   353c0:	8445883a 	add	r2,r16,r17
   353c4:	80c00115 	stw	r3,4(r16)
   353c8:	003fdf06 	br	35348 <_malloc_r+0x2bc>
   353cc:	e4000217 	ldw	r16,8(fp)
   353d0:	00bfff04 	movi	r2,-4
   353d4:	80c00117 	ldw	r3,4(r16)
   353d8:	802d883a 	mov	r22,r16
   353dc:	18aa703a 	and	r21,r3,r2
   353e0:	ac401636 	bltu	r21,r17,3543c <_malloc_r+0x3b0>
   353e4:	ac49c83a 	sub	r4,r21,r17
   353e8:	008003c4 	movi	r2,15
   353ec:	1100130e 	bge	r2,r4,3543c <_malloc_r+0x3b0>
   353f0:	88800054 	ori	r2,r17,1
   353f4:	8447883a 	add	r3,r16,r17
   353f8:	80800115 	stw	r2,4(r16)
   353fc:	20800054 	ori	r2,r4,1
   35400:	18800115 	stw	r2,4(r3)
   35404:	e0c00215 	stw	r3,8(fp)
   35408:	9009883a 	mov	r4,r18
   3540c:	003a5c00 	call	3a5c0 <__malloc_unlock>
   35410:	80c00204 	addi	r3,r16,8
   35414:	003f3106 	br	350dc <_malloc_r+0x50>
   35418:	39c00117 	ldw	r7,4(r7)
   3541c:	573ffe04 	addi	fp,r10,-8
   35420:	003fa006 	br	352a4 <_malloc_r+0x218>
   35424:	00801504 	movi	r2,84
   35428:	10c06736 	bltu	r2,r3,355c8 <_malloc_r+0x53c>
   3542c:	8804d33a 	srli	r2,r17,12
   35430:	11801b84 	addi	r6,r2,110
   35434:	300490fa 	slli	r2,r6,3
   35438:	003f4106 	br	35140 <_malloc_r+0xb4>
   3543c:	d0a01817 	ldw	r2,-32672(gp)
   35440:	d0e00517 	ldw	r3,-32748(gp)
   35444:	053fffc4 	movi	r20,-1
   35448:	10800404 	addi	r2,r2,16
   3544c:	88a7883a 	add	r19,r17,r2
   35450:	1d000326 	beq	r3,r20,35460 <_malloc_r+0x3d4>
   35454:	98c3ffc4 	addi	r3,r19,4095
   35458:	00bc0004 	movi	r2,-4096
   3545c:	18a6703a 	and	r19,r3,r2
   35460:	9009883a 	mov	r4,r18
   35464:	980b883a 	mov	r5,r19
   35468:	00371b80 	call	371b8 <_sbrk_r>
   3546c:	1009883a 	mov	r4,r2
   35470:	15000426 	beq	r2,r20,35484 <_malloc_r+0x3f8>
   35474:	854b883a 	add	r5,r16,r21
   35478:	1029883a 	mov	r20,r2
   3547c:	11405a2e 	bgeu	r2,r5,355e8 <_malloc_r+0x55c>
   35480:	87000c26 	beq	r16,fp,354b4 <_malloc_r+0x428>
   35484:	e4000217 	ldw	r16,8(fp)
   35488:	80c00117 	ldw	r3,4(r16)
   3548c:	00bfff04 	movi	r2,-4
   35490:	1884703a 	and	r2,r3,r2
   35494:	14400336 	bltu	r2,r17,354a4 <_malloc_r+0x418>
   35498:	1449c83a 	sub	r4,r2,r17
   3549c:	008003c4 	movi	r2,15
   354a0:	113fd316 	blt	r2,r4,353f0 <_malloc_r+0x364>
   354a4:	9009883a 	mov	r4,r18
   354a8:	003a5c00 	call	3a5c0 <__malloc_unlock>
   354ac:	0007883a 	mov	r3,zero
   354b0:	003f0a06 	br	350dc <_malloc_r+0x50>
   354b4:	05c00174 	movhi	r23,5
   354b8:	bde78904 	addi	r23,r23,-25052
   354bc:	b8800017 	ldw	r2,0(r23)
   354c0:	988d883a 	add	r6,r19,r2
   354c4:	b9800015 	stw	r6,0(r23)
   354c8:	d0e00517 	ldw	r3,-32748(gp)
   354cc:	00bfffc4 	movi	r2,-1
   354d0:	18808e26 	beq	r3,r2,3570c <_malloc_r+0x680>
   354d4:	2145c83a 	sub	r2,r4,r5
   354d8:	3085883a 	add	r2,r6,r2
   354dc:	b8800015 	stw	r2,0(r23)
   354e0:	20c001cc 	andi	r3,r4,7
   354e4:	18005f1e 	bne	r3,zero,35664 <_malloc_r+0x5d8>
   354e8:	000b883a 	mov	r5,zero
   354ec:	a4c5883a 	add	r2,r20,r19
   354f0:	1083ffcc 	andi	r2,r2,4095
   354f4:	00c40004 	movi	r3,4096
   354f8:	1887c83a 	sub	r3,r3,r2
   354fc:	28e7883a 	add	r19,r5,r3
   35500:	9009883a 	mov	r4,r18
   35504:	980b883a 	mov	r5,r19
   35508:	00371b80 	call	371b8 <_sbrk_r>
   3550c:	1007883a 	mov	r3,r2
   35510:	00bfffc4 	movi	r2,-1
   35514:	18807a26 	beq	r3,r2,35700 <_malloc_r+0x674>
   35518:	1d05c83a 	sub	r2,r3,r20
   3551c:	9885883a 	add	r2,r19,r2
   35520:	10c00054 	ori	r3,r2,1
   35524:	b8800017 	ldw	r2,0(r23)
   35528:	a021883a 	mov	r16,r20
   3552c:	a0c00115 	stw	r3,4(r20)
   35530:	9885883a 	add	r2,r19,r2
   35534:	b8800015 	stw	r2,0(r23)
   35538:	e5000215 	stw	r20,8(fp)
   3553c:	b7003626 	beq	r22,fp,35618 <_malloc_r+0x58c>
   35540:	018003c4 	movi	r6,15
   35544:	35404b36 	bltu	r6,r21,35674 <_malloc_r+0x5e8>
   35548:	00800044 	movi	r2,1
   3554c:	a0800115 	stw	r2,4(r20)
   35550:	003fcd06 	br	35488 <_malloc_r+0x3fc>
   35554:	2808d27a 	srli	r4,r5,9
   35558:	2000371e 	bne	r4,zero,35638 <_malloc_r+0x5ac>
   3555c:	2808d0fa 	srli	r4,r5,3
   35560:	200690fa 	slli	r3,r4,3
   35564:	1ad1883a 	add	r8,r3,r11
   35568:	41800217 	ldw	r6,8(r8)
   3556c:	41805b26 	beq	r8,r6,356dc <_malloc_r+0x650>
   35570:	30800117 	ldw	r2,4(r6)
   35574:	00ffff04 	movi	r3,-4
   35578:	10c4703a 	and	r2,r2,r3
   3557c:	2880022e 	bgeu	r5,r2,35588 <_malloc_r+0x4fc>
   35580:	31800217 	ldw	r6,8(r6)
   35584:	41bffa1e 	bne	r8,r6,35570 <_malloc_r+0x4e4>
   35588:	32000317 	ldw	r8,12(r6)
   3558c:	39c00117 	ldw	r7,4(r7)
   35590:	82000315 	stw	r8,12(r16)
   35594:	81800215 	stw	r6,8(r16)
   35598:	07000174 	movhi	fp,5
   3559c:	e721e304 	addi	fp,fp,-30836
   355a0:	34000315 	stw	r16,12(r6)
   355a4:	44000215 	stw	r16,8(r8)
   355a8:	003f3e06 	br	352a4 <_malloc_r+0x218>
   355ac:	63000044 	addi	r12,r12,1
   355b0:	608000cc 	andi	r2,r12,3
   355b4:	10005d26 	beq	r2,zero,3572c <_malloc_r+0x6a0>
   355b8:	18c00204 	addi	r3,r3,8
   355bc:	003f5106 	br	35304 <_malloc_r+0x278>
   355c0:	8089883a 	add	r4,r16,r2
   355c4:	003f6d06 	br	3537c <_malloc_r+0x2f0>
   355c8:	00805504 	movi	r2,340
   355cc:	10c02036 	bltu	r2,r3,35650 <_malloc_r+0x5c4>
   355d0:	8804d3fa 	srli	r2,r17,15
   355d4:	11801dc4 	addi	r6,r2,119
   355d8:	300490fa 	slli	r2,r6,3
   355dc:	003ed806 	br	35140 <_malloc_r+0xb4>
   355e0:	48c000c4 	addi	r3,r9,3
   355e4:	003f3106 	br	352ac <_malloc_r+0x220>
   355e8:	05c00174 	movhi	r23,5
   355ec:	bde78904 	addi	r23,r23,-25052
   355f0:	b8800017 	ldw	r2,0(r23)
   355f4:	988d883a 	add	r6,r19,r2
   355f8:	b9800015 	stw	r6,0(r23)
   355fc:	293fb21e 	bne	r5,r4,354c8 <_malloc_r+0x43c>
   35600:	2083ffcc 	andi	r2,r4,4095
   35604:	103fb01e 	bne	r2,zero,354c8 <_malloc_r+0x43c>
   35608:	e4000217 	ldw	r16,8(fp)
   3560c:	9d45883a 	add	r2,r19,r21
   35610:	10800054 	ori	r2,r2,1
   35614:	80800115 	stw	r2,4(r16)
   35618:	b8c00017 	ldw	r3,0(r23)
   3561c:	d0a01917 	ldw	r2,-32668(gp)
   35620:	10c0012e 	bgeu	r2,r3,35628 <_malloc_r+0x59c>
   35624:	d0e01915 	stw	r3,-32668(gp)
   35628:	d0a01a17 	ldw	r2,-32664(gp)
   3562c:	10ff962e 	bgeu	r2,r3,35488 <_malloc_r+0x3fc>
   35630:	d0e01a15 	stw	r3,-32664(gp)
   35634:	003f9406 	br	35488 <_malloc_r+0x3fc>
   35638:	00800104 	movi	r2,4
   3563c:	11001e36 	bltu	r2,r4,356b8 <_malloc_r+0x62c>
   35640:	2804d1ba 	srli	r2,r5,6
   35644:	11000e04 	addi	r4,r2,56
   35648:	200690fa 	slli	r3,r4,3
   3564c:	003fc506 	br	35564 <_malloc_r+0x4d8>
   35650:	00815504 	movi	r2,1364
   35654:	10c01d2e 	bgeu	r2,r3,356cc <_malloc_r+0x640>
   35658:	01801f84 	movi	r6,126
   3565c:	0080fc04 	movi	r2,1008
   35660:	003eb706 	br	35140 <_malloc_r+0xb4>
   35664:	00800204 	movi	r2,8
   35668:	10cbc83a 	sub	r5,r2,r3
   3566c:	2169883a 	add	r20,r4,r5
   35670:	003f9e06 	br	354ec <_malloc_r+0x460>
   35674:	00bffe04 	movi	r2,-8
   35678:	a93ffd04 	addi	r4,r21,-12
   3567c:	2088703a 	and	r4,r4,r2
   35680:	b10b883a 	add	r5,r22,r4
   35684:	00c00144 	movi	r3,5
   35688:	28c00215 	stw	r3,8(r5)
   3568c:	28c00115 	stw	r3,4(r5)
   35690:	b0800117 	ldw	r2,4(r22)
   35694:	1080004c 	andi	r2,r2,1
   35698:	2084b03a 	or	r2,r4,r2
   3569c:	b0800115 	stw	r2,4(r22)
   356a0:	313fdd2e 	bgeu	r6,r4,35618 <_malloc_r+0x58c>
   356a4:	b1400204 	addi	r5,r22,8
   356a8:	9009883a 	mov	r4,r18
   356ac:	00345040 	call	34504 <_free_r>
   356b0:	e4000217 	ldw	r16,8(fp)
   356b4:	003fd806 	br	35618 <_malloc_r+0x58c>
   356b8:	00800504 	movi	r2,20
   356bc:	11001536 	bltu	r2,r4,35714 <_malloc_r+0x688>
   356c0:	210016c4 	addi	r4,r4,91
   356c4:	200690fa 	slli	r3,r4,3
   356c8:	003fa606 	br	35564 <_malloc_r+0x4d8>
   356cc:	8804d4ba 	srli	r2,r17,18
   356d0:	11801f04 	addi	r6,r2,124
   356d4:	300490fa 	slli	r2,r6,3
   356d8:	003e9906 	br	35140 <_malloc_r+0xb4>
   356dc:	2009d0ba 	srai	r4,r4,2
   356e0:	01400174 	movhi	r5,5
   356e4:	2961e304 	addi	r5,r5,-30836
   356e8:	00c00044 	movi	r3,1
   356ec:	28800117 	ldw	r2,4(r5)
   356f0:	1906983a 	sll	r3,r3,r4
   356f4:	10c4b03a 	or	r2,r2,r3
   356f8:	28800115 	stw	r2,4(r5)
   356fc:	003fa306 	br	3558c <_malloc_r+0x500>
   35700:	0027883a 	mov	r19,zero
   35704:	00c00044 	movi	r3,1
   35708:	003f8606 	br	35524 <_malloc_r+0x498>
   3570c:	d1200515 	stw	r4,-32748(gp)
   35710:	003f7306 	br	354e0 <_malloc_r+0x454>
   35714:	00801504 	movi	r2,84
   35718:	11001936 	bltu	r2,r4,35780 <_malloc_r+0x6f4>
   3571c:	2804d33a 	srli	r2,r5,12
   35720:	11001b84 	addi	r4,r2,110
   35724:	200690fa 	slli	r3,r4,3
   35728:	003f8e06 	br	35564 <_malloc_r+0x4d8>
   3572c:	480b883a 	mov	r5,r9
   35730:	6807883a 	mov	r3,r13
   35734:	288000cc 	andi	r2,r5,3
   35738:	18fffe04 	addi	r3,r3,-8
   3573c:	297fffc4 	addi	r5,r5,-1
   35740:	10001526 	beq	r2,zero,35798 <_malloc_r+0x70c>
   35744:	18800217 	ldw	r2,8(r3)
   35748:	10fffa26 	beq	r2,r3,35734 <_malloc_r+0x6a8>
   3574c:	2109883a 	add	r4,r4,r4
   35750:	393f1e36 	bltu	r7,r4,353cc <_malloc_r+0x340>
   35754:	203f1d26 	beq	r4,zero,353cc <_malloc_r+0x340>
   35758:	21c4703a 	and	r2,r4,r7
   3575c:	10000226 	beq	r2,zero,35768 <_malloc_r+0x6dc>
   35760:	6013883a 	mov	r9,r12
   35764:	003ee106 	br	352ec <_malloc_r+0x260>
   35768:	2109883a 	add	r4,r4,r4
   3576c:	3904703a 	and	r2,r7,r4
   35770:	63000104 	addi	r12,r12,4
   35774:	103ffc26 	beq	r2,zero,35768 <_malloc_r+0x6dc>
   35778:	6013883a 	mov	r9,r12
   3577c:	003edb06 	br	352ec <_malloc_r+0x260>
   35780:	00805504 	movi	r2,340
   35784:	11000836 	bltu	r2,r4,357a8 <_malloc_r+0x71c>
   35788:	2804d3fa 	srli	r2,r5,15
   3578c:	11001dc4 	addi	r4,r2,119
   35790:	200690fa 	slli	r3,r4,3
   35794:	003f7306 	br	35564 <_malloc_r+0x4d8>
   35798:	0104303a 	nor	r2,zero,r4
   3579c:	388e703a 	and	r7,r7,r2
   357a0:	e1c00115 	stw	r7,4(fp)
   357a4:	003fe906 	br	3574c <_malloc_r+0x6c0>
   357a8:	00815504 	movi	r2,1364
   357ac:	1100032e 	bgeu	r2,r4,357bc <_malloc_r+0x730>
   357b0:	01001f84 	movi	r4,126
   357b4:	00c0fc04 	movi	r3,1008
   357b8:	003f6a06 	br	35564 <_malloc_r+0x4d8>
   357bc:	2804d4ba 	srli	r2,r5,18
   357c0:	11001f04 	addi	r4,r2,124
   357c4:	200690fa 	slli	r3,r4,3
   357c8:	003f6606 	br	35564 <_malloc_r+0x4d8>

000357cc <memchr>:
   357cc:	008000c4 	movi	r2,3
   357d0:	29403fcc 	andi	r5,r5,255
   357d4:	2007883a 	mov	r3,r4
   357d8:	1180022e 	bgeu	r2,r6,357e4 <memchr+0x18>
   357dc:	2084703a 	and	r2,r4,r2
   357e0:	10000b26 	beq	r2,zero,35810 <memchr+0x44>
   357e4:	313fffc4 	addi	r4,r6,-1
   357e8:	3000051e 	bne	r6,zero,35800 <memchr+0x34>
   357ec:	00002c06 	br	358a0 <memchr+0xd4>
   357f0:	213fffc4 	addi	r4,r4,-1
   357f4:	00bfffc4 	movi	r2,-1
   357f8:	18c00044 	addi	r3,r3,1
   357fc:	20802826 	beq	r4,r2,358a0 <memchr+0xd4>
   35800:	18800003 	ldbu	r2,0(r3)
   35804:	28bffa1e 	bne	r5,r2,357f0 <memchr+0x24>
   35808:	1805883a 	mov	r2,r3
   3580c:	f800283a 	ret
   35810:	0011883a 	mov	r8,zero
   35814:	0007883a 	mov	r3,zero
   35818:	01c00104 	movi	r7,4
   3581c:	4004923a 	slli	r2,r8,8
   35820:	18c00044 	addi	r3,r3,1
   35824:	1151883a 	add	r8,r2,r5
   35828:	19fffc1e 	bne	r3,r7,3581c <memchr+0x50>
   3582c:	02bfbff4 	movhi	r10,65279
   35830:	52bfbfc4 	addi	r10,r10,-257
   35834:	02602074 	movhi	r9,32897
   35838:	4a602004 	addi	r9,r9,-32640
   3583c:	02c000c4 	movi	r11,3
   35840:	20800017 	ldw	r2,0(r4)
   35844:	31bfff04 	addi	r6,r6,-4
   35848:	200f883a 	mov	r7,r4
   3584c:	1204f03a 	xor	r2,r2,r8
   35850:	1287883a 	add	r3,r2,r10
   35854:	1a46703a 	and	r3,r3,r9
   35858:	0084303a 	nor	r2,zero,r2
   3585c:	10c4703a 	and	r2,r2,r3
   35860:	10000b26 	beq	r2,zero,35890 <memchr+0xc4>
   35864:	20800003 	ldbu	r2,0(r4)
   35868:	28800f26 	beq	r5,r2,358a8 <memchr+0xdc>
   3586c:	20800043 	ldbu	r2,1(r4)
   35870:	21c00044 	addi	r7,r4,1
   35874:	28800c26 	beq	r5,r2,358a8 <memchr+0xdc>
   35878:	20800083 	ldbu	r2,2(r4)
   3587c:	21c00084 	addi	r7,r4,2
   35880:	28800926 	beq	r5,r2,358a8 <memchr+0xdc>
   35884:	208000c3 	ldbu	r2,3(r4)
   35888:	21c000c4 	addi	r7,r4,3
   3588c:	28800626 	beq	r5,r2,358a8 <memchr+0xdc>
   35890:	21000104 	addi	r4,r4,4
   35894:	59bfea36 	bltu	r11,r6,35840 <memchr+0x74>
   35898:	2007883a 	mov	r3,r4
   3589c:	003fd106 	br	357e4 <memchr+0x18>
   358a0:	0005883a 	mov	r2,zero
   358a4:	f800283a 	ret
   358a8:	3805883a 	mov	r2,r7
   358ac:	f800283a 	ret

000358b0 <memcpy>:
   358b0:	01c003c4 	movi	r7,15
   358b4:	2007883a 	mov	r3,r4
   358b8:	3980032e 	bgeu	r7,r6,358c8 <memcpy+0x18>
   358bc:	2904b03a 	or	r2,r5,r4
   358c0:	108000cc 	andi	r2,r2,3
   358c4:	10000926 	beq	r2,zero,358ec <memcpy+0x3c>
   358c8:	30000626 	beq	r6,zero,358e4 <memcpy+0x34>
   358cc:	30cd883a 	add	r6,r6,r3
   358d0:	28800003 	ldbu	r2,0(r5)
   358d4:	29400044 	addi	r5,r5,1
   358d8:	18800005 	stb	r2,0(r3)
   358dc:	18c00044 	addi	r3,r3,1
   358e0:	30fffb1e 	bne	r6,r3,358d0 <memcpy+0x20>
   358e4:	2005883a 	mov	r2,r4
   358e8:	f800283a 	ret
   358ec:	3811883a 	mov	r8,r7
   358f0:	200f883a 	mov	r7,r4
   358f4:	28c00017 	ldw	r3,0(r5)
   358f8:	31bffc04 	addi	r6,r6,-16
   358fc:	38c00015 	stw	r3,0(r7)
   35900:	28800117 	ldw	r2,4(r5)
   35904:	38800115 	stw	r2,4(r7)
   35908:	28c00217 	ldw	r3,8(r5)
   3590c:	38c00215 	stw	r3,8(r7)
   35910:	28800317 	ldw	r2,12(r5)
   35914:	29400404 	addi	r5,r5,16
   35918:	38800315 	stw	r2,12(r7)
   3591c:	39c00404 	addi	r7,r7,16
   35920:	41bff436 	bltu	r8,r6,358f4 <memcpy+0x44>
   35924:	008000c4 	movi	r2,3
   35928:	1180072e 	bgeu	r2,r6,35948 <memcpy+0x98>
   3592c:	1007883a 	mov	r3,r2
   35930:	28800017 	ldw	r2,0(r5)
   35934:	31bfff04 	addi	r6,r6,-4
   35938:	29400104 	addi	r5,r5,4
   3593c:	38800015 	stw	r2,0(r7)
   35940:	39c00104 	addi	r7,r7,4
   35944:	19bffa36 	bltu	r3,r6,35930 <memcpy+0x80>
   35948:	3807883a 	mov	r3,r7
   3594c:	003fde06 	br	358c8 <memcpy+0x18>

00035950 <memmove>:
   35950:	2807883a 	mov	r3,r5
   35954:	2011883a 	mov	r8,r4
   35958:	29000c2e 	bgeu	r5,r4,3598c <memmove+0x3c>
   3595c:	298f883a 	add	r7,r5,r6
   35960:	21c00a2e 	bgeu	r4,r7,3598c <memmove+0x3c>
   35964:	30000726 	beq	r6,zero,35984 <memmove+0x34>
   35968:	2187883a 	add	r3,r4,r6
   3596c:	198dc83a 	sub	r6,r3,r6
   35970:	39ffffc4 	addi	r7,r7,-1
   35974:	38800003 	ldbu	r2,0(r7)
   35978:	18ffffc4 	addi	r3,r3,-1
   3597c:	18800005 	stb	r2,0(r3)
   35980:	19bffb1e 	bne	r3,r6,35970 <memmove+0x20>
   35984:	2005883a 	mov	r2,r4
   35988:	f800283a 	ret
   3598c:	01c003c4 	movi	r7,15
   35990:	39800a36 	bltu	r7,r6,359bc <memmove+0x6c>
   35994:	303ffb26 	beq	r6,zero,35984 <memmove+0x34>
   35998:	400f883a 	mov	r7,r8
   3599c:	320d883a 	add	r6,r6,r8
   359a0:	28800003 	ldbu	r2,0(r5)
   359a4:	29400044 	addi	r5,r5,1
   359a8:	38800005 	stb	r2,0(r7)
   359ac:	39c00044 	addi	r7,r7,1
   359b0:	39bffb1e 	bne	r7,r6,359a0 <memmove+0x50>
   359b4:	2005883a 	mov	r2,r4
   359b8:	f800283a 	ret
   359bc:	1904b03a 	or	r2,r3,r4
   359c0:	108000cc 	andi	r2,r2,3
   359c4:	103ff31e 	bne	r2,zero,35994 <memmove+0x44>
   359c8:	3811883a 	mov	r8,r7
   359cc:	180b883a 	mov	r5,r3
   359d0:	200f883a 	mov	r7,r4
   359d4:	28c00017 	ldw	r3,0(r5)
   359d8:	31bffc04 	addi	r6,r6,-16
   359dc:	38c00015 	stw	r3,0(r7)
   359e0:	28800117 	ldw	r2,4(r5)
   359e4:	38800115 	stw	r2,4(r7)
   359e8:	28c00217 	ldw	r3,8(r5)
   359ec:	38c00215 	stw	r3,8(r7)
   359f0:	28800317 	ldw	r2,12(r5)
   359f4:	29400404 	addi	r5,r5,16
   359f8:	38800315 	stw	r2,12(r7)
   359fc:	39c00404 	addi	r7,r7,16
   35a00:	41bff436 	bltu	r8,r6,359d4 <memmove+0x84>
   35a04:	008000c4 	movi	r2,3
   35a08:	1180072e 	bgeu	r2,r6,35a28 <memmove+0xd8>
   35a0c:	1007883a 	mov	r3,r2
   35a10:	28800017 	ldw	r2,0(r5)
   35a14:	31bfff04 	addi	r6,r6,-4
   35a18:	29400104 	addi	r5,r5,4
   35a1c:	38800015 	stw	r2,0(r7)
   35a20:	39c00104 	addi	r7,r7,4
   35a24:	19bffa36 	bltu	r3,r6,35a10 <memmove+0xc0>
   35a28:	3811883a 	mov	r8,r7
   35a2c:	003fd906 	br	35994 <memmove+0x44>

00035a30 <memset>:
   35a30:	008000c4 	movi	r2,3
   35a34:	29403fcc 	andi	r5,r5,255
   35a38:	2007883a 	mov	r3,r4
   35a3c:	1180022e 	bgeu	r2,r6,35a48 <memset+0x18>
   35a40:	2084703a 	and	r2,r4,r2
   35a44:	10000826 	beq	r2,zero,35a68 <memset+0x38>
   35a48:	30000526 	beq	r6,zero,35a60 <memset+0x30>
   35a4c:	2805883a 	mov	r2,r5
   35a50:	30cd883a 	add	r6,r6,r3
   35a54:	18800005 	stb	r2,0(r3)
   35a58:	18c00044 	addi	r3,r3,1
   35a5c:	19bffd1e 	bne	r3,r6,35a54 <memset+0x24>
   35a60:	2005883a 	mov	r2,r4
   35a64:	f800283a 	ret
   35a68:	2804923a 	slli	r2,r5,8
   35a6c:	020003c4 	movi	r8,15
   35a70:	200f883a 	mov	r7,r4
   35a74:	2884b03a 	or	r2,r5,r2
   35a78:	1006943a 	slli	r3,r2,16
   35a7c:	10c6b03a 	or	r3,r2,r3
   35a80:	41800a2e 	bgeu	r8,r6,35aac <memset+0x7c>
   35a84:	4005883a 	mov	r2,r8
   35a88:	31bffc04 	addi	r6,r6,-16
   35a8c:	38c00015 	stw	r3,0(r7)
   35a90:	38c00115 	stw	r3,4(r7)
   35a94:	38c00215 	stw	r3,8(r7)
   35a98:	38c00315 	stw	r3,12(r7)
   35a9c:	39c00404 	addi	r7,r7,16
   35aa0:	11bff936 	bltu	r2,r6,35a88 <memset+0x58>
   35aa4:	008000c4 	movi	r2,3
   35aa8:	1180052e 	bgeu	r2,r6,35ac0 <memset+0x90>
   35aac:	31bfff04 	addi	r6,r6,-4
   35ab0:	008000c4 	movi	r2,3
   35ab4:	38c00015 	stw	r3,0(r7)
   35ab8:	39c00104 	addi	r7,r7,4
   35abc:	11bffb36 	bltu	r2,r6,35aac <memset+0x7c>
   35ac0:	3807883a 	mov	r3,r7
   35ac4:	003fe006 	br	35a48 <memset+0x18>

00035ac8 <_Bfree>:
   35ac8:	28000826 	beq	r5,zero,35aec <_Bfree+0x24>
   35acc:	28800117 	ldw	r2,4(r5)
   35ad0:	21001317 	ldw	r4,76(r4)
   35ad4:	1085883a 	add	r2,r2,r2
   35ad8:	1085883a 	add	r2,r2,r2
   35adc:	1105883a 	add	r2,r2,r4
   35ae0:	10c00017 	ldw	r3,0(r2)
   35ae4:	28c00015 	stw	r3,0(r5)
   35ae8:	11400015 	stw	r5,0(r2)
   35aec:	f800283a 	ret

00035af0 <__hi0bits>:
   35af0:	20bfffec 	andhi	r2,r4,65535
   35af4:	10001426 	beq	r2,zero,35b48 <__hi0bits+0x58>
   35af8:	0007883a 	mov	r3,zero
   35afc:	20bfc02c 	andhi	r2,r4,65280
   35b00:	1000021e 	bne	r2,zero,35b0c <__hi0bits+0x1c>
   35b04:	2008923a 	slli	r4,r4,8
   35b08:	18c00204 	addi	r3,r3,8
   35b0c:	20bc002c 	andhi	r2,r4,61440
   35b10:	1000021e 	bne	r2,zero,35b1c <__hi0bits+0x2c>
   35b14:	2008913a 	slli	r4,r4,4
   35b18:	18c00104 	addi	r3,r3,4
   35b1c:	20b0002c 	andhi	r2,r4,49152
   35b20:	1000031e 	bne	r2,zero,35b30 <__hi0bits+0x40>
   35b24:	2105883a 	add	r2,r4,r4
   35b28:	18c00084 	addi	r3,r3,2
   35b2c:	1089883a 	add	r4,r2,r2
   35b30:	20000316 	blt	r4,zero,35b40 <__hi0bits+0x50>
   35b34:	2090002c 	andhi	r2,r4,16384
   35b38:	10000626 	beq	r2,zero,35b54 <__hi0bits+0x64>
   35b3c:	18c00044 	addi	r3,r3,1
   35b40:	1805883a 	mov	r2,r3
   35b44:	f800283a 	ret
   35b48:	2008943a 	slli	r4,r4,16
   35b4c:	00c00404 	movi	r3,16
   35b50:	003fea06 	br	35afc <__hi0bits+0xc>
   35b54:	00c00804 	movi	r3,32
   35b58:	1805883a 	mov	r2,r3
   35b5c:	f800283a 	ret

00035b60 <__lo0bits>:
   35b60:	20c00017 	ldw	r3,0(r4)
   35b64:	188001cc 	andi	r2,r3,7
   35b68:	10000a26 	beq	r2,zero,35b94 <__lo0bits+0x34>
   35b6c:	1880004c 	andi	r2,r3,1
   35b70:	1005003a 	cmpeq	r2,r2,zero
   35b74:	10002126 	beq	r2,zero,35bfc <__lo0bits+0x9c>
   35b78:	1880008c 	andi	r2,r3,2
   35b7c:	1000251e 	bne	r2,zero,35c14 <__lo0bits+0xb4>
   35b80:	1804d0ba 	srli	r2,r3,2
   35b84:	01400084 	movi	r5,2
   35b88:	20800015 	stw	r2,0(r4)
   35b8c:	2805883a 	mov	r2,r5
   35b90:	f800283a 	ret
   35b94:	18bfffcc 	andi	r2,r3,65535
   35b98:	10001526 	beq	r2,zero,35bf0 <__lo0bits+0x90>
   35b9c:	000b883a 	mov	r5,zero
   35ba0:	18803fcc 	andi	r2,r3,255
   35ba4:	1000021e 	bne	r2,zero,35bb0 <__lo0bits+0x50>
   35ba8:	1806d23a 	srli	r3,r3,8
   35bac:	29400204 	addi	r5,r5,8
   35bb0:	188003cc 	andi	r2,r3,15
   35bb4:	1000021e 	bne	r2,zero,35bc0 <__lo0bits+0x60>
   35bb8:	1806d13a 	srli	r3,r3,4
   35bbc:	29400104 	addi	r5,r5,4
   35bc0:	188000cc 	andi	r2,r3,3
   35bc4:	1000021e 	bne	r2,zero,35bd0 <__lo0bits+0x70>
   35bc8:	1806d0ba 	srli	r3,r3,2
   35bcc:	29400084 	addi	r5,r5,2
   35bd0:	1880004c 	andi	r2,r3,1
   35bd4:	1000031e 	bne	r2,zero,35be4 <__lo0bits+0x84>
   35bd8:	1806d07a 	srli	r3,r3,1
   35bdc:	18000a26 	beq	r3,zero,35c08 <__lo0bits+0xa8>
   35be0:	29400044 	addi	r5,r5,1
   35be4:	2805883a 	mov	r2,r5
   35be8:	20c00015 	stw	r3,0(r4)
   35bec:	f800283a 	ret
   35bf0:	1806d43a 	srli	r3,r3,16
   35bf4:	01400404 	movi	r5,16
   35bf8:	003fe906 	br	35ba0 <__lo0bits+0x40>
   35bfc:	000b883a 	mov	r5,zero
   35c00:	2805883a 	mov	r2,r5
   35c04:	f800283a 	ret
   35c08:	01400804 	movi	r5,32
   35c0c:	2805883a 	mov	r2,r5
   35c10:	f800283a 	ret
   35c14:	1804d07a 	srli	r2,r3,1
   35c18:	01400044 	movi	r5,1
   35c1c:	20800015 	stw	r2,0(r4)
   35c20:	003fda06 	br	35b8c <__lo0bits+0x2c>

00035c24 <__mcmp>:
   35c24:	20800417 	ldw	r2,16(r4)
   35c28:	28c00417 	ldw	r3,16(r5)
   35c2c:	10cfc83a 	sub	r7,r2,r3
   35c30:	38000c1e 	bne	r7,zero,35c64 <__mcmp+0x40>
   35c34:	18c5883a 	add	r2,r3,r3
   35c38:	1085883a 	add	r2,r2,r2
   35c3c:	10c00504 	addi	r3,r2,20
   35c40:	21000504 	addi	r4,r4,20
   35c44:	28cb883a 	add	r5,r5,r3
   35c48:	2085883a 	add	r2,r4,r2
   35c4c:	10bfff04 	addi	r2,r2,-4
   35c50:	297fff04 	addi	r5,r5,-4
   35c54:	11800017 	ldw	r6,0(r2)
   35c58:	28c00017 	ldw	r3,0(r5)
   35c5c:	30c0031e 	bne	r6,r3,35c6c <__mcmp+0x48>
   35c60:	20bffa36 	bltu	r4,r2,35c4c <__mcmp+0x28>
   35c64:	3805883a 	mov	r2,r7
   35c68:	f800283a 	ret
   35c6c:	30c00336 	bltu	r6,r3,35c7c <__mcmp+0x58>
   35c70:	01c00044 	movi	r7,1
   35c74:	3805883a 	mov	r2,r7
   35c78:	f800283a 	ret
   35c7c:	01ffffc4 	movi	r7,-1
   35c80:	003ff806 	br	35c64 <__mcmp+0x40>

00035c84 <__ulp>:
   35c84:	295ffc2c 	andhi	r5,r5,32752
   35c88:	013f3034 	movhi	r4,64704
   35c8c:	290b883a 	add	r5,r5,r4
   35c90:	0145c83a 	sub	r2,zero,r5
   35c94:	1007d53a 	srai	r3,r2,20
   35c98:	000d883a 	mov	r6,zero
   35c9c:	0140040e 	bge	zero,r5,35cb0 <__ulp+0x2c>
   35ca0:	280f883a 	mov	r7,r5
   35ca4:	3807883a 	mov	r3,r7
   35ca8:	3005883a 	mov	r2,r6
   35cac:	f800283a 	ret
   35cb0:	008004c4 	movi	r2,19
   35cb4:	193ffb04 	addi	r4,r3,-20
   35cb8:	10c00c0e 	bge	r2,r3,35cec <__ulp+0x68>
   35cbc:	008007c4 	movi	r2,31
   35cc0:	1107c83a 	sub	r3,r2,r4
   35cc4:	00800784 	movi	r2,30
   35cc8:	01400044 	movi	r5,1
   35ccc:	11000216 	blt	r2,r4,35cd8 <__ulp+0x54>
   35cd0:	00800044 	movi	r2,1
   35cd4:	10ca983a 	sll	r5,r2,r3
   35cd8:	000f883a 	mov	r7,zero
   35cdc:	280d883a 	mov	r6,r5
   35ce0:	3807883a 	mov	r3,r7
   35ce4:	3005883a 	mov	r2,r6
   35ce8:	f800283a 	ret
   35cec:	00800234 	movhi	r2,8
   35cf0:	10cfd83a 	sra	r7,r2,r3
   35cf4:	000d883a 	mov	r6,zero
   35cf8:	3005883a 	mov	r2,r6
   35cfc:	3807883a 	mov	r3,r7
   35d00:	f800283a 	ret

00035d04 <__b2d>:
   35d04:	20800417 	ldw	r2,16(r4)
   35d08:	defff904 	addi	sp,sp,-28
   35d0c:	dd000415 	stw	r20,16(sp)
   35d10:	1085883a 	add	r2,r2,r2
   35d14:	25000504 	addi	r20,r4,20
   35d18:	1085883a 	add	r2,r2,r2
   35d1c:	dc000015 	stw	r16,0(sp)
   35d20:	a0a1883a 	add	r16,r20,r2
   35d24:	dd400515 	stw	r21,20(sp)
   35d28:	857fff17 	ldw	r21,-4(r16)
   35d2c:	dc400115 	stw	r17,4(sp)
   35d30:	dfc00615 	stw	ra,24(sp)
   35d34:	a809883a 	mov	r4,r21
   35d38:	2823883a 	mov	r17,r5
   35d3c:	dcc00315 	stw	r19,12(sp)
   35d40:	dc800215 	stw	r18,8(sp)
   35d44:	0035af00 	call	35af0 <__hi0bits>
   35d48:	100b883a 	mov	r5,r2
   35d4c:	00800804 	movi	r2,32
   35d50:	1145c83a 	sub	r2,r2,r5
   35d54:	88800015 	stw	r2,0(r17)
   35d58:	00800284 	movi	r2,10
   35d5c:	80ffff04 	addi	r3,r16,-4
   35d60:	11401416 	blt	r2,r5,35db4 <__b2d+0xb0>
   35d64:	008002c4 	movi	r2,11
   35d68:	1149c83a 	sub	r4,r2,r5
   35d6c:	a0c02736 	bltu	r20,r3,35e0c <__b2d+0x108>
   35d70:	000d883a 	mov	r6,zero
   35d74:	28800544 	addi	r2,r5,21
   35d78:	a906d83a 	srl	r3,r21,r4
   35d7c:	a884983a 	sll	r2,r21,r2
   35d80:	1ccffc34 	orhi	r19,r3,16368
   35d84:	11a4b03a 	or	r18,r2,r6
   35d88:	9005883a 	mov	r2,r18
   35d8c:	9807883a 	mov	r3,r19
   35d90:	dfc00617 	ldw	ra,24(sp)
   35d94:	dd400517 	ldw	r21,20(sp)
   35d98:	dd000417 	ldw	r20,16(sp)
   35d9c:	dcc00317 	ldw	r19,12(sp)
   35da0:	dc800217 	ldw	r18,8(sp)
   35da4:	dc400117 	ldw	r17,4(sp)
   35da8:	dc000017 	ldw	r16,0(sp)
   35dac:	dec00704 	addi	sp,sp,28
   35db0:	f800283a 	ret
   35db4:	a0c00e36 	bltu	r20,r3,35df0 <__b2d+0xec>
   35db8:	293ffd44 	addi	r4,r5,-11
   35dbc:	000d883a 	mov	r6,zero
   35dc0:	20000f26 	beq	r4,zero,35e00 <__b2d+0xfc>
   35dc4:	00800804 	movi	r2,32
   35dc8:	110bc83a 	sub	r5,r2,r4
   35dcc:	a0c01236 	bltu	r20,r3,35e18 <__b2d+0x114>
   35dd0:	000f883a 	mov	r7,zero
   35dd4:	a904983a 	sll	r2,r21,r4
   35dd8:	3146d83a 	srl	r3,r6,r5
   35ddc:	3108983a 	sll	r4,r6,r4
   35de0:	108ffc34 	orhi	r2,r2,16368
   35de4:	18a6b03a 	or	r19,r3,r2
   35de8:	3924b03a 	or	r18,r7,r4
   35dec:	003fe606 	br	35d88 <__b2d+0x84>
   35df0:	293ffd44 	addi	r4,r5,-11
   35df4:	81bffe17 	ldw	r6,-8(r16)
   35df8:	80fffe04 	addi	r3,r16,-8
   35dfc:	203ff11e 	bne	r4,zero,35dc4 <__b2d+0xc0>
   35e00:	accffc34 	orhi	r19,r21,16368
   35e04:	3025883a 	mov	r18,r6
   35e08:	003fdf06 	br	35d88 <__b2d+0x84>
   35e0c:	18bfff17 	ldw	r2,-4(r3)
   35e10:	110cd83a 	srl	r6,r2,r4
   35e14:	003fd706 	br	35d74 <__b2d+0x70>
   35e18:	18bfff17 	ldw	r2,-4(r3)
   35e1c:	114ed83a 	srl	r7,r2,r5
   35e20:	003fec06 	br	35dd4 <__b2d+0xd0>

00035e24 <__ratio>:
   35e24:	defff904 	addi	sp,sp,-28
   35e28:	dc400215 	stw	r17,8(sp)
   35e2c:	2823883a 	mov	r17,r5
   35e30:	d80b883a 	mov	r5,sp
   35e34:	dfc00615 	stw	ra,24(sp)
   35e38:	dd000515 	stw	r20,20(sp)
   35e3c:	dcc00415 	stw	r19,16(sp)
   35e40:	dc800315 	stw	r18,12(sp)
   35e44:	2025883a 	mov	r18,r4
   35e48:	0035d040 	call	35d04 <__b2d>
   35e4c:	8809883a 	mov	r4,r17
   35e50:	d9400104 	addi	r5,sp,4
   35e54:	1027883a 	mov	r19,r2
   35e58:	1829883a 	mov	r20,r3
   35e5c:	0035d040 	call	35d04 <__b2d>
   35e60:	89000417 	ldw	r4,16(r17)
   35e64:	91c00417 	ldw	r7,16(r18)
   35e68:	d9800117 	ldw	r6,4(sp)
   35e6c:	180b883a 	mov	r5,r3
   35e70:	390fc83a 	sub	r7,r7,r4
   35e74:	1009883a 	mov	r4,r2
   35e78:	d8800017 	ldw	r2,0(sp)
   35e7c:	380e917a 	slli	r7,r7,5
   35e80:	2011883a 	mov	r8,r4
   35e84:	1185c83a 	sub	r2,r2,r6
   35e88:	11c5883a 	add	r2,r2,r7
   35e8c:	1006953a 	slli	r3,r2,20
   35e90:	2813883a 	mov	r9,r5
   35e94:	00800d0e 	bge	zero,r2,35ecc <__ratio+0xa8>
   35e98:	1d29883a 	add	r20,r3,r20
   35e9c:	a00b883a 	mov	r5,r20
   35ea0:	480f883a 	mov	r7,r9
   35ea4:	9809883a 	mov	r4,r19
   35ea8:	400d883a 	mov	r6,r8
   35eac:	0038e6c0 	call	38e6c <__divdf3>
   35eb0:	dfc00617 	ldw	ra,24(sp)
   35eb4:	dd000517 	ldw	r20,20(sp)
   35eb8:	dcc00417 	ldw	r19,16(sp)
   35ebc:	dc800317 	ldw	r18,12(sp)
   35ec0:	dc400217 	ldw	r17,8(sp)
   35ec4:	dec00704 	addi	sp,sp,28
   35ec8:	f800283a 	ret
   35ecc:	28d3c83a 	sub	r9,r5,r3
   35ed0:	003ff206 	br	35e9c <__ratio+0x78>

00035ed4 <_mprec_log10>:
   35ed4:	defffe04 	addi	sp,sp,-8
   35ed8:	008005c4 	movi	r2,23
   35edc:	dc000015 	stw	r16,0(sp)
   35ee0:	dfc00115 	stw	ra,4(sp)
   35ee4:	2021883a 	mov	r16,r4
   35ee8:	11000c16 	blt	r2,r4,35f1c <_mprec_log10+0x48>
   35eec:	200490fa 	slli	r2,r4,3
   35ef0:	00c00174 	movhi	r3,5
   35ef4:	18e04704 	addi	r3,r3,-32484
   35ef8:	10c5883a 	add	r2,r2,r3
   35efc:	12400117 	ldw	r9,4(r2)
   35f00:	12000017 	ldw	r8,0(r2)
   35f04:	4807883a 	mov	r3,r9
   35f08:	4005883a 	mov	r2,r8
   35f0c:	dfc00117 	ldw	ra,4(sp)
   35f10:	dc000017 	ldw	r16,0(sp)
   35f14:	dec00204 	addi	sp,sp,8
   35f18:	f800283a 	ret
   35f1c:	0011883a 	mov	r8,zero
   35f20:	024ffc34 	movhi	r9,16368
   35f24:	0005883a 	mov	r2,zero
   35f28:	00d00934 	movhi	r3,16420
   35f2c:	480b883a 	mov	r5,r9
   35f30:	4009883a 	mov	r4,r8
   35f34:	180f883a 	mov	r7,r3
   35f38:	100d883a 	mov	r6,r2
   35f3c:	0038aa80 	call	38aa8 <__muldf3>
   35f40:	843fffc4 	addi	r16,r16,-1
   35f44:	1011883a 	mov	r8,r2
   35f48:	1813883a 	mov	r9,r3
   35f4c:	803ff51e 	bne	r16,zero,35f24 <_mprec_log10+0x50>
   35f50:	4005883a 	mov	r2,r8
   35f54:	4807883a 	mov	r3,r9
   35f58:	dfc00117 	ldw	ra,4(sp)
   35f5c:	dc000017 	ldw	r16,0(sp)
   35f60:	dec00204 	addi	sp,sp,8
   35f64:	f800283a 	ret

00035f68 <__copybits>:
   35f68:	297fffc4 	addi	r5,r5,-1
   35f6c:	30800417 	ldw	r2,16(r6)
   35f70:	280bd17a 	srai	r5,r5,5
   35f74:	31800504 	addi	r6,r6,20
   35f78:	1085883a 	add	r2,r2,r2
   35f7c:	294b883a 	add	r5,r5,r5
   35f80:	294b883a 	add	r5,r5,r5
   35f84:	1085883a 	add	r2,r2,r2
   35f88:	290b883a 	add	r5,r5,r4
   35f8c:	3087883a 	add	r3,r6,r2
   35f90:	29400104 	addi	r5,r5,4
   35f94:	30c0052e 	bgeu	r6,r3,35fac <__copybits+0x44>
   35f98:	30800017 	ldw	r2,0(r6)
   35f9c:	31800104 	addi	r6,r6,4
   35fa0:	20800015 	stw	r2,0(r4)
   35fa4:	21000104 	addi	r4,r4,4
   35fa8:	30fffb36 	bltu	r6,r3,35f98 <__copybits+0x30>
   35fac:	2140032e 	bgeu	r4,r5,35fbc <__copybits+0x54>
   35fb0:	20000015 	stw	zero,0(r4)
   35fb4:	21000104 	addi	r4,r4,4
   35fb8:	217ffd36 	bltu	r4,r5,35fb0 <__copybits+0x48>
   35fbc:	f800283a 	ret

00035fc0 <__any_on>:
   35fc0:	20800417 	ldw	r2,16(r4)
   35fc4:	2807d17a 	srai	r3,r5,5
   35fc8:	21000504 	addi	r4,r4,20
   35fcc:	10c00d0e 	bge	r2,r3,36004 <__any_on+0x44>
   35fd0:	1085883a 	add	r2,r2,r2
   35fd4:	1085883a 	add	r2,r2,r2
   35fd8:	208d883a 	add	r6,r4,r2
   35fdc:	2180182e 	bgeu	r4,r6,36040 <__any_on+0x80>
   35fe0:	30bfff17 	ldw	r2,-4(r6)
   35fe4:	30ffff04 	addi	r3,r6,-4
   35fe8:	1000041e 	bne	r2,zero,35ffc <__any_on+0x3c>
   35fec:	20c0142e 	bgeu	r4,r3,36040 <__any_on+0x80>
   35ff0:	18ffff04 	addi	r3,r3,-4
   35ff4:	18800017 	ldw	r2,0(r3)
   35ff8:	103ffc26 	beq	r2,zero,35fec <__any_on+0x2c>
   35ffc:	00800044 	movi	r2,1
   36000:	f800283a 	ret
   36004:	18800a0e 	bge	r3,r2,36030 <__any_on+0x70>
   36008:	294007cc 	andi	r5,r5,31
   3600c:	28000826 	beq	r5,zero,36030 <__any_on+0x70>
   36010:	18c5883a 	add	r2,r3,r3
   36014:	1085883a 	add	r2,r2,r2
   36018:	208d883a 	add	r6,r4,r2
   3601c:	30c00017 	ldw	r3,0(r6)
   36020:	1944d83a 	srl	r2,r3,r5
   36024:	1144983a 	sll	r2,r2,r5
   36028:	18bff41e 	bne	r3,r2,35ffc <__any_on+0x3c>
   3602c:	003feb06 	br	35fdc <__any_on+0x1c>
   36030:	18c5883a 	add	r2,r3,r3
   36034:	1085883a 	add	r2,r2,r2
   36038:	208d883a 	add	r6,r4,r2
   3603c:	003fe706 	br	35fdc <__any_on+0x1c>
   36040:	0005883a 	mov	r2,zero
   36044:	f800283a 	ret

00036048 <_Balloc>:
   36048:	20c01317 	ldw	r3,76(r4)
   3604c:	defffb04 	addi	sp,sp,-20
   36050:	dcc00315 	stw	r19,12(sp)
   36054:	dc800215 	stw	r18,8(sp)
   36058:	dfc00415 	stw	ra,16(sp)
   3605c:	2825883a 	mov	r18,r5
   36060:	dc400115 	stw	r17,4(sp)
   36064:	dc000015 	stw	r16,0(sp)
   36068:	2027883a 	mov	r19,r4
   3606c:	01800404 	movi	r6,16
   36070:	01400104 	movi	r5,4
   36074:	18001726 	beq	r3,zero,360d4 <_Balloc+0x8c>
   36078:	01400044 	movi	r5,1
   3607c:	9485883a 	add	r2,r18,r18
   36080:	2ca2983a 	sll	r17,r5,r18
   36084:	1085883a 	add	r2,r2,r2
   36088:	10c7883a 	add	r3,r2,r3
   3608c:	1c000017 	ldw	r16,0(r3)
   36090:	8c4d883a 	add	r6,r17,r17
   36094:	318d883a 	add	r6,r6,r6
   36098:	9809883a 	mov	r4,r19
   3609c:	31800504 	addi	r6,r6,20
   360a0:	80001226 	beq	r16,zero,360ec <_Balloc+0xa4>
   360a4:	80800017 	ldw	r2,0(r16)
   360a8:	18800015 	stw	r2,0(r3)
   360ac:	80000415 	stw	zero,16(r16)
   360b0:	80000315 	stw	zero,12(r16)
   360b4:	8005883a 	mov	r2,r16
   360b8:	dfc00417 	ldw	ra,16(sp)
   360bc:	dcc00317 	ldw	r19,12(sp)
   360c0:	dc800217 	ldw	r18,8(sp)
   360c4:	dc400117 	ldw	r17,4(sp)
   360c8:	dc000017 	ldw	r16,0(sp)
   360cc:	dec00504 	addi	sp,sp,20
   360d0:	f800283a 	ret
   360d4:	00374a80 	call	374a8 <_calloc_r>
   360d8:	1007883a 	mov	r3,r2
   360dc:	0021883a 	mov	r16,zero
   360e0:	98801315 	stw	r2,76(r19)
   360e4:	103fe41e 	bne	r2,zero,36078 <_Balloc+0x30>
   360e8:	003ff206 	br	360b4 <_Balloc+0x6c>
   360ec:	00374a80 	call	374a8 <_calloc_r>
   360f0:	103ff026 	beq	r2,zero,360b4 <_Balloc+0x6c>
   360f4:	1021883a 	mov	r16,r2
   360f8:	14800115 	stw	r18,4(r2)
   360fc:	14400215 	stw	r17,8(r2)
   36100:	003fea06 	br	360ac <_Balloc+0x64>

00036104 <__d2b>:
   36104:	defff504 	addi	sp,sp,-44
   36108:	dcc00515 	stw	r19,20(sp)
   3610c:	04c00044 	movi	r19,1
   36110:	dc000215 	stw	r16,8(sp)
   36114:	2821883a 	mov	r16,r5
   36118:	980b883a 	mov	r5,r19
   3611c:	ddc00915 	stw	r23,36(sp)
   36120:	dd800815 	stw	r22,32(sp)
   36124:	dd400715 	stw	r21,28(sp)
   36128:	dd000615 	stw	r20,24(sp)
   3612c:	dc800415 	stw	r18,16(sp)
   36130:	dc400315 	stw	r17,12(sp)
   36134:	dfc00a15 	stw	ra,40(sp)
   36138:	3023883a 	mov	r17,r6
   3613c:	382d883a 	mov	r22,r7
   36140:	ddc00b17 	ldw	r23,44(sp)
   36144:	00360480 	call	36048 <_Balloc>
   36148:	1025883a 	mov	r18,r2
   3614c:	00a00034 	movhi	r2,32768
   36150:	10bfffc4 	addi	r2,r2,-1
   36154:	8888703a 	and	r4,r17,r2
   36158:	202ad53a 	srli	r21,r4,20
   3615c:	00800434 	movhi	r2,16
   36160:	10bfffc4 	addi	r2,r2,-1
   36164:	8886703a 	and	r3,r17,r2
   36168:	a829003a 	cmpeq	r20,r21,zero
   3616c:	800b883a 	mov	r5,r16
   36170:	d8c00115 	stw	r3,4(sp)
   36174:	94000504 	addi	r16,r18,20
   36178:	a000021e 	bne	r20,zero,36184 <__d2b+0x80>
   3617c:	18c00434 	orhi	r3,r3,16
   36180:	d8c00115 	stw	r3,4(sp)
   36184:	28002726 	beq	r5,zero,36224 <__d2b+0x120>
   36188:	d809883a 	mov	r4,sp
   3618c:	d9400015 	stw	r5,0(sp)
   36190:	0035b600 	call	35b60 <__lo0bits>
   36194:	100d883a 	mov	r6,r2
   36198:	10003526 	beq	r2,zero,36270 <__d2b+0x16c>
   3619c:	d8c00117 	ldw	r3,4(sp)
   361a0:	00800804 	movi	r2,32
   361a4:	1185c83a 	sub	r2,r2,r6
   361a8:	d9000017 	ldw	r4,0(sp)
   361ac:	1886983a 	sll	r3,r3,r2
   361b0:	1906b03a 	or	r3,r3,r4
   361b4:	90c00515 	stw	r3,20(r18)
   361b8:	d8c00117 	ldw	r3,4(sp)
   361bc:	1986d83a 	srl	r3,r3,r6
   361c0:	d8c00115 	stw	r3,4(sp)
   361c4:	180b003a 	cmpeq	r5,r3,zero
   361c8:	00800084 	movi	r2,2
   361cc:	114bc83a 	sub	r5,r2,r5
   361d0:	80c00115 	stw	r3,4(r16)
   361d4:	91400415 	stw	r5,16(r18)
   361d8:	a0001a1e 	bne	r20,zero,36244 <__d2b+0x140>
   361dc:	3545883a 	add	r2,r6,r21
   361e0:	10bef344 	addi	r2,r2,-1075
   361e4:	00c00d44 	movi	r3,53
   361e8:	b0800015 	stw	r2,0(r22)
   361ec:	1987c83a 	sub	r3,r3,r6
   361f0:	b8c00015 	stw	r3,0(r23)
   361f4:	9005883a 	mov	r2,r18
   361f8:	dfc00a17 	ldw	ra,40(sp)
   361fc:	ddc00917 	ldw	r23,36(sp)
   36200:	dd800817 	ldw	r22,32(sp)
   36204:	dd400717 	ldw	r21,28(sp)
   36208:	dd000617 	ldw	r20,24(sp)
   3620c:	dcc00517 	ldw	r19,20(sp)
   36210:	dc800417 	ldw	r18,16(sp)
   36214:	dc400317 	ldw	r17,12(sp)
   36218:	dc000217 	ldw	r16,8(sp)
   3621c:	dec00b04 	addi	sp,sp,44
   36220:	f800283a 	ret
   36224:	d9000104 	addi	r4,sp,4
   36228:	0035b600 	call	35b60 <__lo0bits>
   3622c:	11800804 	addi	r6,r2,32
   36230:	d8800117 	ldw	r2,4(sp)
   36234:	94c00415 	stw	r19,16(r18)
   36238:	980b883a 	mov	r5,r19
   3623c:	90800515 	stw	r2,20(r18)
   36240:	a03fe626 	beq	r20,zero,361dc <__d2b+0xd8>
   36244:	2945883a 	add	r2,r5,r5
   36248:	1085883a 	add	r2,r2,r2
   3624c:	1405883a 	add	r2,r2,r16
   36250:	113fff17 	ldw	r4,-4(r2)
   36254:	30fef384 	addi	r3,r6,-1074
   36258:	2820917a 	slli	r16,r5,5
   3625c:	b0c00015 	stw	r3,0(r22)
   36260:	0035af00 	call	35af0 <__hi0bits>
   36264:	80a1c83a 	sub	r16,r16,r2
   36268:	bc000015 	stw	r16,0(r23)
   3626c:	003fe106 	br	361f4 <__d2b+0xf0>
   36270:	d8800017 	ldw	r2,0(sp)
   36274:	90800515 	stw	r2,20(r18)
   36278:	d8c00117 	ldw	r3,4(sp)
   3627c:	003fd106 	br	361c4 <__d2b+0xc0>

00036280 <__mdiff>:
   36280:	defffb04 	addi	sp,sp,-20
   36284:	dc000015 	stw	r16,0(sp)
   36288:	2821883a 	mov	r16,r5
   3628c:	dc800215 	stw	r18,8(sp)
   36290:	300b883a 	mov	r5,r6
   36294:	2025883a 	mov	r18,r4
   36298:	8009883a 	mov	r4,r16
   3629c:	dc400115 	stw	r17,4(sp)
   362a0:	dfc00415 	stw	ra,16(sp)
   362a4:	dcc00315 	stw	r19,12(sp)
   362a8:	3023883a 	mov	r17,r6
   362ac:	0035c240 	call	35c24 <__mcmp>
   362b0:	10004226 	beq	r2,zero,363bc <__mdiff+0x13c>
   362b4:	10005016 	blt	r2,zero,363f8 <__mdiff+0x178>
   362b8:	0027883a 	mov	r19,zero
   362bc:	81400117 	ldw	r5,4(r16)
   362c0:	9009883a 	mov	r4,r18
   362c4:	00360480 	call	36048 <_Balloc>
   362c8:	1019883a 	mov	r12,r2
   362cc:	82800417 	ldw	r10,16(r16)
   362d0:	88800417 	ldw	r2,16(r17)
   362d4:	81800504 	addi	r6,r16,20
   362d8:	5287883a 	add	r3,r10,r10
   362dc:	1085883a 	add	r2,r2,r2
   362e0:	18c7883a 	add	r3,r3,r3
   362e4:	1085883a 	add	r2,r2,r2
   362e8:	8a000504 	addi	r8,r17,20
   362ec:	64c00315 	stw	r19,12(r12)
   362f0:	30db883a 	add	r13,r6,r3
   362f4:	4097883a 	add	r11,r8,r2
   362f8:	61c00504 	addi	r7,r12,20
   362fc:	0013883a 	mov	r9,zero
   36300:	31000017 	ldw	r4,0(r6)
   36304:	41400017 	ldw	r5,0(r8)
   36308:	42000104 	addi	r8,r8,4
   3630c:	20bfffcc 	andi	r2,r4,65535
   36310:	28ffffcc 	andi	r3,r5,65535
   36314:	10c5c83a 	sub	r2,r2,r3
   36318:	1245883a 	add	r2,r2,r9
   3631c:	2008d43a 	srli	r4,r4,16
   36320:	280ad43a 	srli	r5,r5,16
   36324:	1007d43a 	srai	r3,r2,16
   36328:	3880000d 	sth	r2,0(r7)
   3632c:	2149c83a 	sub	r4,r4,r5
   36330:	20c9883a 	add	r4,r4,r3
   36334:	3900008d 	sth	r4,2(r7)
   36338:	31800104 	addi	r6,r6,4
   3633c:	39c00104 	addi	r7,r7,4
   36340:	2013d43a 	srai	r9,r4,16
   36344:	42ffee36 	bltu	r8,r11,36300 <__mdiff+0x80>
   36348:	33400c2e 	bgeu	r6,r13,3637c <__mdiff+0xfc>
   3634c:	30800017 	ldw	r2,0(r6)
   36350:	31800104 	addi	r6,r6,4
   36354:	10ffffcc 	andi	r3,r2,65535
   36358:	1a47883a 	add	r3,r3,r9
   3635c:	1004d43a 	srli	r2,r2,16
   36360:	1809d43a 	srai	r4,r3,16
   36364:	38c0000d 	sth	r3,0(r7)
   36368:	1105883a 	add	r2,r2,r4
   3636c:	3880008d 	sth	r2,2(r7)
   36370:	1013d43a 	srai	r9,r2,16
   36374:	39c00104 	addi	r7,r7,4
   36378:	337ff436 	bltu	r6,r13,3634c <__mdiff+0xcc>
   3637c:	38bfff17 	ldw	r2,-4(r7)
   36380:	38ffff04 	addi	r3,r7,-4
   36384:	1000041e 	bne	r2,zero,36398 <__mdiff+0x118>
   36388:	18ffff04 	addi	r3,r3,-4
   3638c:	18800017 	ldw	r2,0(r3)
   36390:	52bfffc4 	addi	r10,r10,-1
   36394:	103ffc26 	beq	r2,zero,36388 <__mdiff+0x108>
   36398:	6005883a 	mov	r2,r12
   3639c:	62800415 	stw	r10,16(r12)
   363a0:	dfc00417 	ldw	ra,16(sp)
   363a4:	dcc00317 	ldw	r19,12(sp)
   363a8:	dc800217 	ldw	r18,8(sp)
   363ac:	dc400117 	ldw	r17,4(sp)
   363b0:	dc000017 	ldw	r16,0(sp)
   363b4:	dec00504 	addi	sp,sp,20
   363b8:	f800283a 	ret
   363bc:	9009883a 	mov	r4,r18
   363c0:	000b883a 	mov	r5,zero
   363c4:	00360480 	call	36048 <_Balloc>
   363c8:	1019883a 	mov	r12,r2
   363cc:	00800044 	movi	r2,1
   363d0:	60800415 	stw	r2,16(r12)
   363d4:	6005883a 	mov	r2,r12
   363d8:	60000515 	stw	zero,20(r12)
   363dc:	dfc00417 	ldw	ra,16(sp)
   363e0:	dcc00317 	ldw	r19,12(sp)
   363e4:	dc800217 	ldw	r18,8(sp)
   363e8:	dc400117 	ldw	r17,4(sp)
   363ec:	dc000017 	ldw	r16,0(sp)
   363f0:	dec00504 	addi	sp,sp,20
   363f4:	f800283a 	ret
   363f8:	880d883a 	mov	r6,r17
   363fc:	04c00044 	movi	r19,1
   36400:	8023883a 	mov	r17,r16
   36404:	3021883a 	mov	r16,r6
   36408:	003fac06 	br	362bc <__mdiff+0x3c>

0003640c <__lshift>:
   3640c:	defff904 	addi	sp,sp,-28
   36410:	28800417 	ldw	r2,16(r5)
   36414:	dc000015 	stw	r16,0(sp)
   36418:	3021d17a 	srai	r16,r6,5
   3641c:	28c00217 	ldw	r3,8(r5)
   36420:	10800044 	addi	r2,r2,1
   36424:	dc400115 	stw	r17,4(sp)
   36428:	80a3883a 	add	r17,r16,r2
   3642c:	dd400515 	stw	r21,20(sp)
   36430:	dd000415 	stw	r20,16(sp)
   36434:	dc800215 	stw	r18,8(sp)
   36438:	dfc00615 	stw	ra,24(sp)
   3643c:	2825883a 	mov	r18,r5
   36440:	dcc00315 	stw	r19,12(sp)
   36444:	3029883a 	mov	r20,r6
   36448:	202b883a 	mov	r21,r4
   3644c:	29400117 	ldw	r5,4(r5)
   36450:	1c40030e 	bge	r3,r17,36460 <__lshift+0x54>
   36454:	18c7883a 	add	r3,r3,r3
   36458:	29400044 	addi	r5,r5,1
   3645c:	1c7ffd16 	blt	r3,r17,36454 <__lshift+0x48>
   36460:	a809883a 	mov	r4,r21
   36464:	00360480 	call	36048 <_Balloc>
   36468:	1027883a 	mov	r19,r2
   3646c:	11400504 	addi	r5,r2,20
   36470:	0400090e 	bge	zero,r16,36498 <__lshift+0x8c>
   36474:	2805883a 	mov	r2,r5
   36478:	0007883a 	mov	r3,zero
   3647c:	18c00044 	addi	r3,r3,1
   36480:	10000015 	stw	zero,0(r2)
   36484:	10800104 	addi	r2,r2,4
   36488:	80fffc1e 	bne	r16,r3,3647c <__lshift+0x70>
   3648c:	8405883a 	add	r2,r16,r16
   36490:	1085883a 	add	r2,r2,r2
   36494:	288b883a 	add	r5,r5,r2
   36498:	90800417 	ldw	r2,16(r18)
   3649c:	91000504 	addi	r4,r18,20
   364a0:	a18007cc 	andi	r6,r20,31
   364a4:	1085883a 	add	r2,r2,r2
   364a8:	1085883a 	add	r2,r2,r2
   364ac:	208f883a 	add	r7,r4,r2
   364b0:	30001e26 	beq	r6,zero,3652c <__lshift+0x120>
   364b4:	00800804 	movi	r2,32
   364b8:	1191c83a 	sub	r8,r2,r6
   364bc:	0007883a 	mov	r3,zero
   364c0:	20800017 	ldw	r2,0(r4)
   364c4:	1184983a 	sll	r2,r2,r6
   364c8:	1884b03a 	or	r2,r3,r2
   364cc:	28800015 	stw	r2,0(r5)
   364d0:	20c00017 	ldw	r3,0(r4)
   364d4:	21000104 	addi	r4,r4,4
   364d8:	29400104 	addi	r5,r5,4
   364dc:	1a06d83a 	srl	r3,r3,r8
   364e0:	21fff736 	bltu	r4,r7,364c0 <__lshift+0xb4>
   364e4:	28c00015 	stw	r3,0(r5)
   364e8:	18000126 	beq	r3,zero,364f0 <__lshift+0xe4>
   364ec:	8c400044 	addi	r17,r17,1
   364f0:	88bfffc4 	addi	r2,r17,-1
   364f4:	98800415 	stw	r2,16(r19)
   364f8:	a809883a 	mov	r4,r21
   364fc:	900b883a 	mov	r5,r18
   36500:	0035ac80 	call	35ac8 <_Bfree>
   36504:	9805883a 	mov	r2,r19
   36508:	dfc00617 	ldw	ra,24(sp)
   3650c:	dd400517 	ldw	r21,20(sp)
   36510:	dd000417 	ldw	r20,16(sp)
   36514:	dcc00317 	ldw	r19,12(sp)
   36518:	dc800217 	ldw	r18,8(sp)
   3651c:	dc400117 	ldw	r17,4(sp)
   36520:	dc000017 	ldw	r16,0(sp)
   36524:	dec00704 	addi	sp,sp,28
   36528:	f800283a 	ret
   3652c:	20800017 	ldw	r2,0(r4)
   36530:	21000104 	addi	r4,r4,4
   36534:	28800015 	stw	r2,0(r5)
   36538:	29400104 	addi	r5,r5,4
   3653c:	21ffec2e 	bgeu	r4,r7,364f0 <__lshift+0xe4>
   36540:	20800017 	ldw	r2,0(r4)
   36544:	21000104 	addi	r4,r4,4
   36548:	28800015 	stw	r2,0(r5)
   3654c:	29400104 	addi	r5,r5,4
   36550:	21fff636 	bltu	r4,r7,3652c <__lshift+0x120>
   36554:	003fe606 	br	364f0 <__lshift+0xe4>

00036558 <__multiply>:
   36558:	defff004 	addi	sp,sp,-64
   3655c:	dc800815 	stw	r18,32(sp)
   36560:	dc400715 	stw	r17,28(sp)
   36564:	2c800417 	ldw	r18,16(r5)
   36568:	34400417 	ldw	r17,16(r6)
   3656c:	dcc00915 	stw	r19,36(sp)
   36570:	dc000615 	stw	r16,24(sp)
   36574:	dfc00f15 	stw	ra,60(sp)
   36578:	df000e15 	stw	fp,56(sp)
   3657c:	ddc00d15 	stw	r23,52(sp)
   36580:	dd800c15 	stw	r22,48(sp)
   36584:	dd400b15 	stw	r21,44(sp)
   36588:	dd000a15 	stw	r20,40(sp)
   3658c:	2821883a 	mov	r16,r5
   36590:	3027883a 	mov	r19,r6
   36594:	9440040e 	bge	r18,r17,365a8 <__multiply+0x50>
   36598:	8825883a 	mov	r18,r17
   3659c:	2c400417 	ldw	r17,16(r5)
   365a0:	2827883a 	mov	r19,r5
   365a4:	3021883a 	mov	r16,r6
   365a8:	80800217 	ldw	r2,8(r16)
   365ac:	9447883a 	add	r3,r18,r17
   365b0:	d8c00415 	stw	r3,16(sp)
   365b4:	81400117 	ldw	r5,4(r16)
   365b8:	10c0010e 	bge	r2,r3,365c0 <__multiply+0x68>
   365bc:	29400044 	addi	r5,r5,1
   365c0:	00360480 	call	36048 <_Balloc>
   365c4:	d8800515 	stw	r2,20(sp)
   365c8:	d9000417 	ldw	r4,16(sp)
   365cc:	d8c00517 	ldw	r3,20(sp)
   365d0:	2105883a 	add	r2,r4,r4
   365d4:	1085883a 	add	r2,r2,r2
   365d8:	19000504 	addi	r4,r3,20
   365dc:	2085883a 	add	r2,r4,r2
   365e0:	d8800315 	stw	r2,12(sp)
   365e4:	2080052e 	bgeu	r4,r2,365fc <__multiply+0xa4>
   365e8:	2005883a 	mov	r2,r4
   365ec:	d8c00317 	ldw	r3,12(sp)
   365f0:	10000015 	stw	zero,0(r2)
   365f4:	10800104 	addi	r2,r2,4
   365f8:	10fffc36 	bltu	r2,r3,365ec <__multiply+0x94>
   365fc:	8c45883a 	add	r2,r17,r17
   36600:	9487883a 	add	r3,r18,r18
   36604:	9dc00504 	addi	r23,r19,20
   36608:	1085883a 	add	r2,r2,r2
   3660c:	84000504 	addi	r16,r16,20
   36610:	18c7883a 	add	r3,r3,r3
   36614:	b885883a 	add	r2,r23,r2
   36618:	dc000015 	stw	r16,0(sp)
   3661c:	d8800215 	stw	r2,8(sp)
   36620:	80f9883a 	add	fp,r16,r3
   36624:	b880432e 	bgeu	r23,r2,36734 <__multiply+0x1dc>
   36628:	d9000115 	stw	r4,4(sp)
   3662c:	b9000017 	ldw	r4,0(r23)
   36630:	253fffcc 	andi	r20,r4,65535
   36634:	a0001a26 	beq	r20,zero,366a0 <__multiply+0x148>
   36638:	dcc00017 	ldw	r19,0(sp)
   3663c:	dc800117 	ldw	r18,4(sp)
   36640:	002b883a 	mov	r21,zero
   36644:	9c400017 	ldw	r17,0(r19)
   36648:	94000017 	ldw	r16,0(r18)
   3664c:	a009883a 	mov	r4,r20
   36650:	897fffcc 	andi	r5,r17,65535
   36654:	003981c0 	call	3981c <__mulsi3>
   36658:	880ad43a 	srli	r5,r17,16
   3665c:	80ffffcc 	andi	r3,r16,65535
   36660:	a8c7883a 	add	r3,r21,r3
   36664:	a009883a 	mov	r4,r20
   36668:	10e3883a 	add	r17,r2,r3
   3666c:	8020d43a 	srli	r16,r16,16
   36670:	003981c0 	call	3981c <__mulsi3>
   36674:	8806d43a 	srli	r3,r17,16
   36678:	1405883a 	add	r2,r2,r16
   3667c:	9cc00104 	addi	r19,r19,4
   36680:	1887883a 	add	r3,r3,r2
   36684:	90c0008d 	sth	r3,2(r18)
   36688:	9440000d 	sth	r17,0(r18)
   3668c:	182ad43a 	srli	r21,r3,16
   36690:	94800104 	addi	r18,r18,4
   36694:	9f3feb36 	bltu	r19,fp,36644 <__multiply+0xec>
   36698:	95400015 	stw	r21,0(r18)
   3669c:	b9000017 	ldw	r4,0(r23)
   366a0:	202ad43a 	srli	r21,r4,16
   366a4:	a8001c26 	beq	r21,zero,36718 <__multiply+0x1c0>
   366a8:	d9000117 	ldw	r4,4(sp)
   366ac:	dd000017 	ldw	r20,0(sp)
   366b0:	002d883a 	mov	r22,zero
   366b4:	24c00017 	ldw	r19,0(r4)
   366b8:	2025883a 	mov	r18,r4
   366bc:	9823883a 	mov	r17,r19
   366c0:	a4000017 	ldw	r16,0(r20)
   366c4:	a809883a 	mov	r4,r21
   366c8:	a5000104 	addi	r20,r20,4
   366cc:	817fffcc 	andi	r5,r16,65535
   366d0:	003981c0 	call	3981c <__mulsi3>
   366d4:	8806d43a 	srli	r3,r17,16
   366d8:	800ad43a 	srli	r5,r16,16
   366dc:	94c0000d 	sth	r19,0(r18)
   366e0:	b0c7883a 	add	r3,r22,r3
   366e4:	10e1883a 	add	r16,r2,r3
   366e8:	9400008d 	sth	r16,2(r18)
   366ec:	a809883a 	mov	r4,r21
   366f0:	94800104 	addi	r18,r18,4
   366f4:	003981c0 	call	3981c <__mulsi3>
   366f8:	94400017 	ldw	r17,0(r18)
   366fc:	8020d43a 	srli	r16,r16,16
   36700:	88ffffcc 	andi	r3,r17,65535
   36704:	10c5883a 	add	r2,r2,r3
   36708:	80a7883a 	add	r19,r16,r2
   3670c:	982cd43a 	srli	r22,r19,16
   36710:	a73feb36 	bltu	r20,fp,366c0 <__multiply+0x168>
   36714:	94c00015 	stw	r19,0(r18)
   36718:	d8800217 	ldw	r2,8(sp)
   3671c:	bdc00104 	addi	r23,r23,4
   36720:	b880042e 	bgeu	r23,r2,36734 <__multiply+0x1dc>
   36724:	d8c00117 	ldw	r3,4(sp)
   36728:	18c00104 	addi	r3,r3,4
   3672c:	d8c00115 	stw	r3,4(sp)
   36730:	003fbe06 	br	3662c <__multiply+0xd4>
   36734:	d9000417 	ldw	r4,16(sp)
   36738:	01000c0e 	bge	zero,r4,3676c <__multiply+0x214>
   3673c:	d8c00317 	ldw	r3,12(sp)
   36740:	18bfff17 	ldw	r2,-4(r3)
   36744:	18ffff04 	addi	r3,r3,-4
   36748:	10000326 	beq	r2,zero,36758 <__multiply+0x200>
   3674c:	00000706 	br	3676c <__multiply+0x214>
   36750:	18800017 	ldw	r2,0(r3)
   36754:	1000051e 	bne	r2,zero,3676c <__multiply+0x214>
   36758:	d9000417 	ldw	r4,16(sp)
   3675c:	18ffff04 	addi	r3,r3,-4
   36760:	213fffc4 	addi	r4,r4,-1
   36764:	d9000415 	stw	r4,16(sp)
   36768:	203ff91e 	bne	r4,zero,36750 <__multiply+0x1f8>
   3676c:	d8800417 	ldw	r2,16(sp)
   36770:	d8c00517 	ldw	r3,20(sp)
   36774:	18800415 	stw	r2,16(r3)
   36778:	1805883a 	mov	r2,r3
   3677c:	dfc00f17 	ldw	ra,60(sp)
   36780:	df000e17 	ldw	fp,56(sp)
   36784:	ddc00d17 	ldw	r23,52(sp)
   36788:	dd800c17 	ldw	r22,48(sp)
   3678c:	dd400b17 	ldw	r21,44(sp)
   36790:	dd000a17 	ldw	r20,40(sp)
   36794:	dcc00917 	ldw	r19,36(sp)
   36798:	dc800817 	ldw	r18,32(sp)
   3679c:	dc400717 	ldw	r17,28(sp)
   367a0:	dc000617 	ldw	r16,24(sp)
   367a4:	dec01004 	addi	sp,sp,64
   367a8:	f800283a 	ret

000367ac <__i2b>:
   367ac:	defffd04 	addi	sp,sp,-12
   367b0:	dc000015 	stw	r16,0(sp)
   367b4:	04000044 	movi	r16,1
   367b8:	dc800115 	stw	r18,4(sp)
   367bc:	2825883a 	mov	r18,r5
   367c0:	800b883a 	mov	r5,r16
   367c4:	dfc00215 	stw	ra,8(sp)
   367c8:	00360480 	call	36048 <_Balloc>
   367cc:	14000415 	stw	r16,16(r2)
   367d0:	14800515 	stw	r18,20(r2)
   367d4:	dfc00217 	ldw	ra,8(sp)
   367d8:	dc800117 	ldw	r18,4(sp)
   367dc:	dc000017 	ldw	r16,0(sp)
   367e0:	dec00304 	addi	sp,sp,12
   367e4:	f800283a 	ret

000367e8 <__multadd>:
   367e8:	defff604 	addi	sp,sp,-40
   367ec:	dd800615 	stw	r22,24(sp)
   367f0:	2d800417 	ldw	r22,16(r5)
   367f4:	df000815 	stw	fp,32(sp)
   367f8:	ddc00715 	stw	r23,28(sp)
   367fc:	dd400515 	stw	r21,20(sp)
   36800:	dd000415 	stw	r20,16(sp)
   36804:	dcc00315 	stw	r19,12(sp)
   36808:	dc800215 	stw	r18,8(sp)
   3680c:	dfc00915 	stw	ra,36(sp)
   36810:	dc400115 	stw	r17,4(sp)
   36814:	dc000015 	stw	r16,0(sp)
   36818:	282f883a 	mov	r23,r5
   3681c:	2039883a 	mov	fp,r4
   36820:	302b883a 	mov	r21,r6
   36824:	3829883a 	mov	r20,r7
   36828:	2c800504 	addi	r18,r5,20
   3682c:	0027883a 	mov	r19,zero
   36830:	94400017 	ldw	r17,0(r18)
   36834:	a80b883a 	mov	r5,r21
   36838:	9cc00044 	addi	r19,r19,1
   3683c:	893fffcc 	andi	r4,r17,65535
   36840:	003981c0 	call	3981c <__mulsi3>
   36844:	8808d43a 	srli	r4,r17,16
   36848:	1521883a 	add	r16,r2,r20
   3684c:	a80b883a 	mov	r5,r21
   36850:	003981c0 	call	3981c <__mulsi3>
   36854:	8008d43a 	srli	r4,r16,16
   36858:	843fffcc 	andi	r16,r16,65535
   3685c:	1105883a 	add	r2,r2,r4
   36860:	1006943a 	slli	r3,r2,16
   36864:	1028d43a 	srli	r20,r2,16
   36868:	1c07883a 	add	r3,r3,r16
   3686c:	90c00015 	stw	r3,0(r18)
   36870:	94800104 	addi	r18,r18,4
   36874:	9dbfee16 	blt	r19,r22,36830 <__multadd+0x48>
   36878:	a0000826 	beq	r20,zero,3689c <__multadd+0xb4>
   3687c:	b8800217 	ldw	r2,8(r23)
   36880:	b080130e 	bge	r22,r2,368d0 <__multadd+0xe8>
   36884:	b585883a 	add	r2,r22,r22
   36888:	1085883a 	add	r2,r2,r2
   3688c:	15c5883a 	add	r2,r2,r23
   36890:	b0c00044 	addi	r3,r22,1
   36894:	15000515 	stw	r20,20(r2)
   36898:	b8c00415 	stw	r3,16(r23)
   3689c:	b805883a 	mov	r2,r23
   368a0:	dfc00917 	ldw	ra,36(sp)
   368a4:	df000817 	ldw	fp,32(sp)
   368a8:	ddc00717 	ldw	r23,28(sp)
   368ac:	dd800617 	ldw	r22,24(sp)
   368b0:	dd400517 	ldw	r21,20(sp)
   368b4:	dd000417 	ldw	r20,16(sp)
   368b8:	dcc00317 	ldw	r19,12(sp)
   368bc:	dc800217 	ldw	r18,8(sp)
   368c0:	dc400117 	ldw	r17,4(sp)
   368c4:	dc000017 	ldw	r16,0(sp)
   368c8:	dec00a04 	addi	sp,sp,40
   368cc:	f800283a 	ret
   368d0:	b9400117 	ldw	r5,4(r23)
   368d4:	e009883a 	mov	r4,fp
   368d8:	29400044 	addi	r5,r5,1
   368dc:	00360480 	call	36048 <_Balloc>
   368e0:	b9800417 	ldw	r6,16(r23)
   368e4:	b9400304 	addi	r5,r23,12
   368e8:	11000304 	addi	r4,r2,12
   368ec:	318d883a 	add	r6,r6,r6
   368f0:	318d883a 	add	r6,r6,r6
   368f4:	31800204 	addi	r6,r6,8
   368f8:	1023883a 	mov	r17,r2
   368fc:	00358b00 	call	358b0 <memcpy>
   36900:	b80b883a 	mov	r5,r23
   36904:	e009883a 	mov	r4,fp
   36908:	0035ac80 	call	35ac8 <_Bfree>
   3690c:	882f883a 	mov	r23,r17
   36910:	003fdc06 	br	36884 <__multadd+0x9c>

00036914 <__pow5mult>:
   36914:	defffa04 	addi	sp,sp,-24
   36918:	308000cc 	andi	r2,r6,3
   3691c:	dd000415 	stw	r20,16(sp)
   36920:	dcc00315 	stw	r19,12(sp)
   36924:	dc000015 	stw	r16,0(sp)
   36928:	dfc00515 	stw	ra,20(sp)
   3692c:	dc800215 	stw	r18,8(sp)
   36930:	dc400115 	stw	r17,4(sp)
   36934:	3021883a 	mov	r16,r6
   36938:	2027883a 	mov	r19,r4
   3693c:	2829883a 	mov	r20,r5
   36940:	10002b1e 	bne	r2,zero,369f0 <__pow5mult+0xdc>
   36944:	8025d0ba 	srai	r18,r16,2
   36948:	90001b26 	beq	r18,zero,369b8 <__pow5mult+0xa4>
   3694c:	9c001217 	ldw	r16,72(r19)
   36950:	8000081e 	bne	r16,zero,36974 <__pow5mult+0x60>
   36954:	00003006 	br	36a18 <__pow5mult+0x104>
   36958:	800b883a 	mov	r5,r16
   3695c:	800d883a 	mov	r6,r16
   36960:	9809883a 	mov	r4,r19
   36964:	90001426 	beq	r18,zero,369b8 <__pow5mult+0xa4>
   36968:	80800017 	ldw	r2,0(r16)
   3696c:	10001b26 	beq	r2,zero,369dc <__pow5mult+0xc8>
   36970:	1021883a 	mov	r16,r2
   36974:	9080004c 	andi	r2,r18,1
   36978:	1005003a 	cmpeq	r2,r2,zero
   3697c:	9025d07a 	srai	r18,r18,1
   36980:	800d883a 	mov	r6,r16
   36984:	9809883a 	mov	r4,r19
   36988:	a00b883a 	mov	r5,r20
   3698c:	103ff21e 	bne	r2,zero,36958 <__pow5mult+0x44>
   36990:	00365580 	call	36558 <__multiply>
   36994:	a00b883a 	mov	r5,r20
   36998:	9809883a 	mov	r4,r19
   3699c:	1023883a 	mov	r17,r2
   369a0:	0035ac80 	call	35ac8 <_Bfree>
   369a4:	8829883a 	mov	r20,r17
   369a8:	800b883a 	mov	r5,r16
   369ac:	800d883a 	mov	r6,r16
   369b0:	9809883a 	mov	r4,r19
   369b4:	903fec1e 	bne	r18,zero,36968 <__pow5mult+0x54>
   369b8:	a005883a 	mov	r2,r20
   369bc:	dfc00517 	ldw	ra,20(sp)
   369c0:	dd000417 	ldw	r20,16(sp)
   369c4:	dcc00317 	ldw	r19,12(sp)
   369c8:	dc800217 	ldw	r18,8(sp)
   369cc:	dc400117 	ldw	r17,4(sp)
   369d0:	dc000017 	ldw	r16,0(sp)
   369d4:	dec00604 	addi	sp,sp,24
   369d8:	f800283a 	ret
   369dc:	00365580 	call	36558 <__multiply>
   369e0:	80800015 	stw	r2,0(r16)
   369e4:	1021883a 	mov	r16,r2
   369e8:	10000015 	stw	zero,0(r2)
   369ec:	003fe106 	br	36974 <__pow5mult+0x60>
   369f0:	1085883a 	add	r2,r2,r2
   369f4:	00c00174 	movhi	r3,5
   369f8:	18e08d04 	addi	r3,r3,-32204
   369fc:	1085883a 	add	r2,r2,r2
   36a00:	10c5883a 	add	r2,r2,r3
   36a04:	11bfff17 	ldw	r6,-4(r2)
   36a08:	000f883a 	mov	r7,zero
   36a0c:	00367e80 	call	367e8 <__multadd>
   36a10:	1029883a 	mov	r20,r2
   36a14:	003fcb06 	br	36944 <__pow5mult+0x30>
   36a18:	9809883a 	mov	r4,r19
   36a1c:	01409c44 	movi	r5,625
   36a20:	00367ac0 	call	367ac <__i2b>
   36a24:	98801215 	stw	r2,72(r19)
   36a28:	1021883a 	mov	r16,r2
   36a2c:	10000015 	stw	zero,0(r2)
   36a30:	003fd006 	br	36974 <__pow5mult+0x60>

00036a34 <__s2b>:
   36a34:	defff904 	addi	sp,sp,-28
   36a38:	dcc00315 	stw	r19,12(sp)
   36a3c:	dc800215 	stw	r18,8(sp)
   36a40:	2827883a 	mov	r19,r5
   36a44:	2025883a 	mov	r18,r4
   36a48:	01400244 	movi	r5,9
   36a4c:	39000204 	addi	r4,r7,8
   36a50:	dd000415 	stw	r20,16(sp)
   36a54:	dc400115 	stw	r17,4(sp)
   36a58:	dfc00615 	stw	ra,24(sp)
   36a5c:	dd400515 	stw	r21,20(sp)
   36a60:	dc000015 	stw	r16,0(sp)
   36a64:	3829883a 	mov	r20,r7
   36a68:	3023883a 	mov	r17,r6
   36a6c:	003974c0 	call	3974c <__divsi3>
   36a70:	00c00044 	movi	r3,1
   36a74:	1880350e 	bge	r3,r2,36b4c <__s2b+0x118>
   36a78:	000b883a 	mov	r5,zero
   36a7c:	18c7883a 	add	r3,r3,r3
   36a80:	29400044 	addi	r5,r5,1
   36a84:	18bffd16 	blt	r3,r2,36a7c <__s2b+0x48>
   36a88:	9009883a 	mov	r4,r18
   36a8c:	00360480 	call	36048 <_Balloc>
   36a90:	1011883a 	mov	r8,r2
   36a94:	d8800717 	ldw	r2,28(sp)
   36a98:	00c00044 	movi	r3,1
   36a9c:	01800244 	movi	r6,9
   36aa0:	40800515 	stw	r2,20(r8)
   36aa4:	40c00415 	stw	r3,16(r8)
   36aa8:	3440260e 	bge	r6,r17,36b44 <__s2b+0x110>
   36aac:	3021883a 	mov	r16,r6
   36ab0:	99ab883a 	add	r21,r19,r6
   36ab4:	9c05883a 	add	r2,r19,r16
   36ab8:	11c00007 	ldb	r7,0(r2)
   36abc:	400b883a 	mov	r5,r8
   36ac0:	9009883a 	mov	r4,r18
   36ac4:	39fff404 	addi	r7,r7,-48
   36ac8:	01800284 	movi	r6,10
   36acc:	00367e80 	call	367e8 <__multadd>
   36ad0:	84000044 	addi	r16,r16,1
   36ad4:	1011883a 	mov	r8,r2
   36ad8:	8c3ff61e 	bne	r17,r16,36ab4 <__s2b+0x80>
   36adc:	ac45883a 	add	r2,r21,r17
   36ae0:	117ffe04 	addi	r5,r2,-8
   36ae4:	880d883a 	mov	r6,r17
   36ae8:	35000c0e 	bge	r6,r20,36b1c <__s2b+0xe8>
   36aec:	a185c83a 	sub	r2,r20,r6
   36af0:	2821883a 	mov	r16,r5
   36af4:	28a3883a 	add	r17,r5,r2
   36af8:	81c00007 	ldb	r7,0(r16)
   36afc:	400b883a 	mov	r5,r8
   36b00:	9009883a 	mov	r4,r18
   36b04:	39fff404 	addi	r7,r7,-48
   36b08:	01800284 	movi	r6,10
   36b0c:	00367e80 	call	367e8 <__multadd>
   36b10:	84000044 	addi	r16,r16,1
   36b14:	1011883a 	mov	r8,r2
   36b18:	847ff71e 	bne	r16,r17,36af8 <__s2b+0xc4>
   36b1c:	4005883a 	mov	r2,r8
   36b20:	dfc00617 	ldw	ra,24(sp)
   36b24:	dd400517 	ldw	r21,20(sp)
   36b28:	dd000417 	ldw	r20,16(sp)
   36b2c:	dcc00317 	ldw	r19,12(sp)
   36b30:	dc800217 	ldw	r18,8(sp)
   36b34:	dc400117 	ldw	r17,4(sp)
   36b38:	dc000017 	ldw	r16,0(sp)
   36b3c:	dec00704 	addi	sp,sp,28
   36b40:	f800283a 	ret
   36b44:	99400284 	addi	r5,r19,10
   36b48:	003fe706 	br	36ae8 <__s2b+0xb4>
   36b4c:	000b883a 	mov	r5,zero
   36b50:	003fcd06 	br	36a88 <__s2b+0x54>

00036b54 <_realloc_r>:
   36b54:	defff404 	addi	sp,sp,-48
   36b58:	dd800815 	stw	r22,32(sp)
   36b5c:	dc800415 	stw	r18,16(sp)
   36b60:	dc400315 	stw	r17,12(sp)
   36b64:	dfc00b15 	stw	ra,44(sp)
   36b68:	df000a15 	stw	fp,40(sp)
   36b6c:	ddc00915 	stw	r23,36(sp)
   36b70:	dd400715 	stw	r21,28(sp)
   36b74:	dd000615 	stw	r20,24(sp)
   36b78:	dcc00515 	stw	r19,20(sp)
   36b7c:	dc000215 	stw	r16,8(sp)
   36b80:	2825883a 	mov	r18,r5
   36b84:	3023883a 	mov	r17,r6
   36b88:	202d883a 	mov	r22,r4
   36b8c:	2800c926 	beq	r5,zero,36eb4 <_realloc_r+0x360>
   36b90:	003a5a00 	call	3a5a0 <__malloc_lock>
   36b94:	943ffe04 	addi	r16,r18,-8
   36b98:	88c002c4 	addi	r3,r17,11
   36b9c:	00800584 	movi	r2,22
   36ba0:	82000117 	ldw	r8,4(r16)
   36ba4:	10c01b2e 	bgeu	r2,r3,36c14 <_realloc_r+0xc0>
   36ba8:	00bffe04 	movi	r2,-8
   36bac:	188e703a 	and	r7,r3,r2
   36bb0:	3839883a 	mov	fp,r7
   36bb4:	38001a16 	blt	r7,zero,36c20 <_realloc_r+0xcc>
   36bb8:	e4401936 	bltu	fp,r17,36c20 <_realloc_r+0xcc>
   36bbc:	013fff04 	movi	r4,-4
   36bc0:	4126703a 	and	r19,r8,r4
   36bc4:	99c02616 	blt	r19,r7,36c60 <_realloc_r+0x10c>
   36bc8:	802b883a 	mov	r21,r16
   36bcc:	9829883a 	mov	r20,r19
   36bd0:	84000204 	addi	r16,r16,8
   36bd4:	a80f883a 	mov	r7,r21
   36bd8:	a70dc83a 	sub	r6,r20,fp
   36bdc:	008003c4 	movi	r2,15
   36be0:	1180c136 	bltu	r2,r6,36ee8 <_realloc_r+0x394>
   36be4:	38800117 	ldw	r2,4(r7)
   36be8:	a549883a 	add	r4,r20,r21
   36bec:	1080004c 	andi	r2,r2,1
   36bf0:	a084b03a 	or	r2,r20,r2
   36bf4:	38800115 	stw	r2,4(r7)
   36bf8:	20c00117 	ldw	r3,4(r4)
   36bfc:	18c00054 	ori	r3,r3,1
   36c00:	20c00115 	stw	r3,4(r4)
   36c04:	b009883a 	mov	r4,r22
   36c08:	003a5c00 	call	3a5c0 <__malloc_unlock>
   36c0c:	8023883a 	mov	r17,r16
   36c10:	00000606 	br	36c2c <_realloc_r+0xd8>
   36c14:	01c00404 	movi	r7,16
   36c18:	3839883a 	mov	fp,r7
   36c1c:	e47fe72e 	bgeu	fp,r17,36bbc <_realloc_r+0x68>
   36c20:	00800304 	movi	r2,12
   36c24:	0023883a 	mov	r17,zero
   36c28:	b0800015 	stw	r2,0(r22)
   36c2c:	8805883a 	mov	r2,r17
   36c30:	dfc00b17 	ldw	ra,44(sp)
   36c34:	df000a17 	ldw	fp,40(sp)
   36c38:	ddc00917 	ldw	r23,36(sp)
   36c3c:	dd800817 	ldw	r22,32(sp)
   36c40:	dd400717 	ldw	r21,28(sp)
   36c44:	dd000617 	ldw	r20,24(sp)
   36c48:	dcc00517 	ldw	r19,20(sp)
   36c4c:	dc800417 	ldw	r18,16(sp)
   36c50:	dc400317 	ldw	r17,12(sp)
   36c54:	dc000217 	ldw	r16,8(sp)
   36c58:	dec00c04 	addi	sp,sp,48
   36c5c:	f800283a 	ret
   36c60:	00800174 	movhi	r2,5
   36c64:	10a1e304 	addi	r2,r2,-30836
   36c68:	12400217 	ldw	r9,8(r2)
   36c6c:	84cd883a 	add	r6,r16,r19
   36c70:	802b883a 	mov	r21,r16
   36c74:	3240b926 	beq	r6,r9,36f5c <_realloc_r+0x408>
   36c78:	31400117 	ldw	r5,4(r6)
   36c7c:	00bfff84 	movi	r2,-2
   36c80:	2884703a 	and	r2,r5,r2
   36c84:	1185883a 	add	r2,r2,r6
   36c88:	10c00117 	ldw	r3,4(r2)
   36c8c:	18c0004c 	andi	r3,r3,1
   36c90:	1807003a 	cmpeq	r3,r3,zero
   36c94:	1800a326 	beq	r3,zero,36f24 <_realloc_r+0x3d0>
   36c98:	2908703a 	and	r4,r5,r4
   36c9c:	9929883a 	add	r20,r19,r4
   36ca0:	a1c0a30e 	bge	r20,r7,36f30 <_realloc_r+0x3dc>
   36ca4:	4080004c 	andi	r2,r8,1
   36ca8:	1000551e 	bne	r2,zero,36e00 <_realloc_r+0x2ac>
   36cac:	80800017 	ldw	r2,0(r16)
   36cb0:	80afc83a 	sub	r23,r16,r2
   36cb4:	b8c00117 	ldw	r3,4(r23)
   36cb8:	00bfff04 	movi	r2,-4
   36cbc:	1884703a 	and	r2,r3,r2
   36cc0:	30002e26 	beq	r6,zero,36d7c <_realloc_r+0x228>
   36cc4:	3240b926 	beq	r6,r9,36fac <_realloc_r+0x458>
   36cc8:	98a9883a 	add	r20,r19,r2
   36ccc:	2509883a 	add	r4,r4,r20
   36cd0:	d9000015 	stw	r4,0(sp)
   36cd4:	21c02a16 	blt	r4,r7,36d80 <_realloc_r+0x22c>
   36cd8:	30800317 	ldw	r2,12(r6)
   36cdc:	30c00217 	ldw	r3,8(r6)
   36ce0:	01400904 	movi	r5,36
   36ce4:	99bfff04 	addi	r6,r19,-4
   36ce8:	18800315 	stw	r2,12(r3)
   36cec:	10c00215 	stw	r3,8(r2)
   36cf0:	b9000317 	ldw	r4,12(r23)
   36cf4:	b8800217 	ldw	r2,8(r23)
   36cf8:	b82b883a 	mov	r21,r23
   36cfc:	bc000204 	addi	r16,r23,8
   36d00:	20800215 	stw	r2,8(r4)
   36d04:	11000315 	stw	r4,12(r2)
   36d08:	2980e436 	bltu	r5,r6,3709c <_realloc_r+0x548>
   36d0c:	008004c4 	movi	r2,19
   36d10:	9009883a 	mov	r4,r18
   36d14:	8011883a 	mov	r8,r16
   36d18:	11800f2e 	bgeu	r2,r6,36d58 <_realloc_r+0x204>
   36d1c:	90800017 	ldw	r2,0(r18)
   36d20:	ba000404 	addi	r8,r23,16
   36d24:	91000204 	addi	r4,r18,8
   36d28:	b8800215 	stw	r2,8(r23)
   36d2c:	90c00117 	ldw	r3,4(r18)
   36d30:	008006c4 	movi	r2,27
   36d34:	b8c00315 	stw	r3,12(r23)
   36d38:	1180072e 	bgeu	r2,r6,36d58 <_realloc_r+0x204>
   36d3c:	90c00217 	ldw	r3,8(r18)
   36d40:	ba000604 	addi	r8,r23,24
   36d44:	91000404 	addi	r4,r18,16
   36d48:	b8c00415 	stw	r3,16(r23)
   36d4c:	90800317 	ldw	r2,12(r18)
   36d50:	b8800515 	stw	r2,20(r23)
   36d54:	3140e726 	beq	r6,r5,370f4 <_realloc_r+0x5a0>
   36d58:	20800017 	ldw	r2,0(r4)
   36d5c:	dd000017 	ldw	r20,0(sp)
   36d60:	b80f883a 	mov	r7,r23
   36d64:	40800015 	stw	r2,0(r8)
   36d68:	20c00117 	ldw	r3,4(r4)
   36d6c:	40c00115 	stw	r3,4(r8)
   36d70:	20800217 	ldw	r2,8(r4)
   36d74:	40800215 	stw	r2,8(r8)
   36d78:	003f9706 	br	36bd8 <_realloc_r+0x84>
   36d7c:	98a9883a 	add	r20,r19,r2
   36d80:	a1c01f16 	blt	r20,r7,36e00 <_realloc_r+0x2ac>
   36d84:	b8c00317 	ldw	r3,12(r23)
   36d88:	b8800217 	ldw	r2,8(r23)
   36d8c:	99bfff04 	addi	r6,r19,-4
   36d90:	01400904 	movi	r5,36
   36d94:	b82b883a 	mov	r21,r23
   36d98:	18800215 	stw	r2,8(r3)
   36d9c:	10c00315 	stw	r3,12(r2)
   36da0:	bc000204 	addi	r16,r23,8
   36da4:	2980c336 	bltu	r5,r6,370b4 <_realloc_r+0x560>
   36da8:	008004c4 	movi	r2,19
   36dac:	9009883a 	mov	r4,r18
   36db0:	8011883a 	mov	r8,r16
   36db4:	11800f2e 	bgeu	r2,r6,36df4 <_realloc_r+0x2a0>
   36db8:	90800017 	ldw	r2,0(r18)
   36dbc:	ba000404 	addi	r8,r23,16
   36dc0:	91000204 	addi	r4,r18,8
   36dc4:	b8800215 	stw	r2,8(r23)
   36dc8:	90c00117 	ldw	r3,4(r18)
   36dcc:	008006c4 	movi	r2,27
   36dd0:	b8c00315 	stw	r3,12(r23)
   36dd4:	1180072e 	bgeu	r2,r6,36df4 <_realloc_r+0x2a0>
   36dd8:	90c00217 	ldw	r3,8(r18)
   36ddc:	ba000604 	addi	r8,r23,24
   36de0:	91000404 	addi	r4,r18,16
   36de4:	b8c00415 	stw	r3,16(r23)
   36de8:	90800317 	ldw	r2,12(r18)
   36dec:	b8800515 	stw	r2,20(r23)
   36df0:	3140c726 	beq	r6,r5,37110 <_realloc_r+0x5bc>
   36df4:	20800017 	ldw	r2,0(r4)
   36df8:	b80f883a 	mov	r7,r23
   36dfc:	003fd906 	br	36d64 <_realloc_r+0x210>
   36e00:	880b883a 	mov	r5,r17
   36e04:	b009883a 	mov	r4,r22
   36e08:	003508c0 	call	3508c <_malloc_r>
   36e0c:	1023883a 	mov	r17,r2
   36e10:	10002526 	beq	r2,zero,36ea8 <_realloc_r+0x354>
   36e14:	80800117 	ldw	r2,4(r16)
   36e18:	00ffff84 	movi	r3,-2
   36e1c:	893ffe04 	addi	r4,r17,-8
   36e20:	10c4703a 	and	r2,r2,r3
   36e24:	8085883a 	add	r2,r16,r2
   36e28:	20809526 	beq	r4,r2,37080 <_realloc_r+0x52c>
   36e2c:	99bfff04 	addi	r6,r19,-4
   36e30:	01c00904 	movi	r7,36
   36e34:	39804536 	bltu	r7,r6,36f4c <_realloc_r+0x3f8>
   36e38:	008004c4 	movi	r2,19
   36e3c:	9009883a 	mov	r4,r18
   36e40:	880b883a 	mov	r5,r17
   36e44:	11800f2e 	bgeu	r2,r6,36e84 <_realloc_r+0x330>
   36e48:	90800017 	ldw	r2,0(r18)
   36e4c:	89400204 	addi	r5,r17,8
   36e50:	91000204 	addi	r4,r18,8
   36e54:	88800015 	stw	r2,0(r17)
   36e58:	90c00117 	ldw	r3,4(r18)
   36e5c:	008006c4 	movi	r2,27
   36e60:	88c00115 	stw	r3,4(r17)
   36e64:	1180072e 	bgeu	r2,r6,36e84 <_realloc_r+0x330>
   36e68:	90c00217 	ldw	r3,8(r18)
   36e6c:	89400404 	addi	r5,r17,16
   36e70:	91000404 	addi	r4,r18,16
   36e74:	88c00215 	stw	r3,8(r17)
   36e78:	90800317 	ldw	r2,12(r18)
   36e7c:	88800315 	stw	r2,12(r17)
   36e80:	31c09126 	beq	r6,r7,370c8 <_realloc_r+0x574>
   36e84:	20800017 	ldw	r2,0(r4)
   36e88:	28800015 	stw	r2,0(r5)
   36e8c:	20c00117 	ldw	r3,4(r4)
   36e90:	28c00115 	stw	r3,4(r5)
   36e94:	20800217 	ldw	r2,8(r4)
   36e98:	28800215 	stw	r2,8(r5)
   36e9c:	900b883a 	mov	r5,r18
   36ea0:	b009883a 	mov	r4,r22
   36ea4:	00345040 	call	34504 <_free_r>
   36ea8:	b009883a 	mov	r4,r22
   36eac:	003a5c00 	call	3a5c0 <__malloc_unlock>
   36eb0:	003f5e06 	br	36c2c <_realloc_r+0xd8>
   36eb4:	300b883a 	mov	r5,r6
   36eb8:	dfc00b17 	ldw	ra,44(sp)
   36ebc:	df000a17 	ldw	fp,40(sp)
   36ec0:	ddc00917 	ldw	r23,36(sp)
   36ec4:	dd800817 	ldw	r22,32(sp)
   36ec8:	dd400717 	ldw	r21,28(sp)
   36ecc:	dd000617 	ldw	r20,24(sp)
   36ed0:	dcc00517 	ldw	r19,20(sp)
   36ed4:	dc800417 	ldw	r18,16(sp)
   36ed8:	dc400317 	ldw	r17,12(sp)
   36edc:	dc000217 	ldw	r16,8(sp)
   36ee0:	dec00c04 	addi	sp,sp,48
   36ee4:	003508c1 	jmpi	3508c <_malloc_r>
   36ee8:	38800117 	ldw	r2,4(r7)
   36eec:	e54b883a 	add	r5,fp,r21
   36ef0:	31000054 	ori	r4,r6,1
   36ef4:	1080004c 	andi	r2,r2,1
   36ef8:	1704b03a 	or	r2,r2,fp
   36efc:	38800115 	stw	r2,4(r7)
   36f00:	29000115 	stw	r4,4(r5)
   36f04:	2987883a 	add	r3,r5,r6
   36f08:	18800117 	ldw	r2,4(r3)
   36f0c:	29400204 	addi	r5,r5,8
   36f10:	b009883a 	mov	r4,r22
   36f14:	10800054 	ori	r2,r2,1
   36f18:	18800115 	stw	r2,4(r3)
   36f1c:	00345040 	call	34504 <_free_r>
   36f20:	003f3806 	br	36c04 <_realloc_r+0xb0>
   36f24:	000d883a 	mov	r6,zero
   36f28:	0009883a 	mov	r4,zero
   36f2c:	003f5d06 	br	36ca4 <_realloc_r+0x150>
   36f30:	30c00217 	ldw	r3,8(r6)
   36f34:	30800317 	ldw	r2,12(r6)
   36f38:	800f883a 	mov	r7,r16
   36f3c:	84000204 	addi	r16,r16,8
   36f40:	10c00215 	stw	r3,8(r2)
   36f44:	18800315 	stw	r2,12(r3)
   36f48:	003f2306 	br	36bd8 <_realloc_r+0x84>
   36f4c:	8809883a 	mov	r4,r17
   36f50:	900b883a 	mov	r5,r18
   36f54:	00359500 	call	35950 <memmove>
   36f58:	003fd006 	br	36e9c <_realloc_r+0x348>
   36f5c:	30800117 	ldw	r2,4(r6)
   36f60:	e0c00404 	addi	r3,fp,16
   36f64:	1108703a 	and	r4,r2,r4
   36f68:	9905883a 	add	r2,r19,r4
   36f6c:	10ff4d16 	blt	r2,r3,36ca4 <_realloc_r+0x150>
   36f70:	1705c83a 	sub	r2,r2,fp
   36f74:	870b883a 	add	r5,r16,fp
   36f78:	10800054 	ori	r2,r2,1
   36f7c:	28800115 	stw	r2,4(r5)
   36f80:	80c00117 	ldw	r3,4(r16)
   36f84:	00800174 	movhi	r2,5
   36f88:	10a1e304 	addi	r2,r2,-30836
   36f8c:	b009883a 	mov	r4,r22
   36f90:	18c0004c 	andi	r3,r3,1
   36f94:	e0c6b03a 	or	r3,fp,r3
   36f98:	11400215 	stw	r5,8(r2)
   36f9c:	80c00115 	stw	r3,4(r16)
   36fa0:	003a5c00 	call	3a5c0 <__malloc_unlock>
   36fa4:	84400204 	addi	r17,r16,8
   36fa8:	003f2006 	br	36c2c <_realloc_r+0xd8>
   36fac:	98a9883a 	add	r20,r19,r2
   36fb0:	2509883a 	add	r4,r4,r20
   36fb4:	e0800404 	addi	r2,fp,16
   36fb8:	d9000115 	stw	r4,4(sp)
   36fbc:	20bf7016 	blt	r4,r2,36d80 <_realloc_r+0x22c>
   36fc0:	b8c00317 	ldw	r3,12(r23)
   36fc4:	b8800217 	ldw	r2,8(r23)
   36fc8:	99bfff04 	addi	r6,r19,-4
   36fcc:	01400904 	movi	r5,36
   36fd0:	18800215 	stw	r2,8(r3)
   36fd4:	10c00315 	stw	r3,12(r2)
   36fd8:	bc400204 	addi	r17,r23,8
   36fdc:	29804136 	bltu	r5,r6,370e4 <_realloc_r+0x590>
   36fe0:	008004c4 	movi	r2,19
   36fe4:	9009883a 	mov	r4,r18
   36fe8:	880f883a 	mov	r7,r17
   36fec:	11800f2e 	bgeu	r2,r6,3702c <_realloc_r+0x4d8>
   36ff0:	90800017 	ldw	r2,0(r18)
   36ff4:	b9c00404 	addi	r7,r23,16
   36ff8:	91000204 	addi	r4,r18,8
   36ffc:	b8800215 	stw	r2,8(r23)
   37000:	90c00117 	ldw	r3,4(r18)
   37004:	008006c4 	movi	r2,27
   37008:	b8c00315 	stw	r3,12(r23)
   3700c:	1180072e 	bgeu	r2,r6,3702c <_realloc_r+0x4d8>
   37010:	90c00217 	ldw	r3,8(r18)
   37014:	b9c00604 	addi	r7,r23,24
   37018:	91000404 	addi	r4,r18,16
   3701c:	b8c00415 	stw	r3,16(r23)
   37020:	90800317 	ldw	r2,12(r18)
   37024:	b8800515 	stw	r2,20(r23)
   37028:	31404026 	beq	r6,r5,3712c <_realloc_r+0x5d8>
   3702c:	20800017 	ldw	r2,0(r4)
   37030:	38800015 	stw	r2,0(r7)
   37034:	20c00117 	ldw	r3,4(r4)
   37038:	38c00115 	stw	r3,4(r7)
   3703c:	20800217 	ldw	r2,8(r4)
   37040:	38800215 	stw	r2,8(r7)
   37044:	d8c00117 	ldw	r3,4(sp)
   37048:	bf0b883a 	add	r5,r23,fp
   3704c:	b009883a 	mov	r4,r22
   37050:	1f05c83a 	sub	r2,r3,fp
   37054:	10800054 	ori	r2,r2,1
   37058:	28800115 	stw	r2,4(r5)
   3705c:	b8c00117 	ldw	r3,4(r23)
   37060:	00800174 	movhi	r2,5
   37064:	10a1e304 	addi	r2,r2,-30836
   37068:	11400215 	stw	r5,8(r2)
   3706c:	18c0004c 	andi	r3,r3,1
   37070:	e0c6b03a 	or	r3,fp,r3
   37074:	b8c00115 	stw	r3,4(r23)
   37078:	003a5c00 	call	3a5c0 <__malloc_unlock>
   3707c:	003eeb06 	br	36c2c <_realloc_r+0xd8>
   37080:	20800117 	ldw	r2,4(r4)
   37084:	00ffff04 	movi	r3,-4
   37088:	800f883a 	mov	r7,r16
   3708c:	10c4703a 	and	r2,r2,r3
   37090:	98a9883a 	add	r20,r19,r2
   37094:	84000204 	addi	r16,r16,8
   37098:	003ecf06 	br	36bd8 <_realloc_r+0x84>
   3709c:	900b883a 	mov	r5,r18
   370a0:	8009883a 	mov	r4,r16
   370a4:	00359500 	call	35950 <memmove>
   370a8:	dd000017 	ldw	r20,0(sp)
   370ac:	b80f883a 	mov	r7,r23
   370b0:	003ec906 	br	36bd8 <_realloc_r+0x84>
   370b4:	900b883a 	mov	r5,r18
   370b8:	8009883a 	mov	r4,r16
   370bc:	00359500 	call	35950 <memmove>
   370c0:	b80f883a 	mov	r7,r23
   370c4:	003ec406 	br	36bd8 <_realloc_r+0x84>
   370c8:	90c00417 	ldw	r3,16(r18)
   370cc:	89400604 	addi	r5,r17,24
   370d0:	91000604 	addi	r4,r18,24
   370d4:	88c00415 	stw	r3,16(r17)
   370d8:	90800517 	ldw	r2,20(r18)
   370dc:	88800515 	stw	r2,20(r17)
   370e0:	003f6806 	br	36e84 <_realloc_r+0x330>
   370e4:	900b883a 	mov	r5,r18
   370e8:	8809883a 	mov	r4,r17
   370ec:	00359500 	call	35950 <memmove>
   370f0:	003fd406 	br	37044 <_realloc_r+0x4f0>
   370f4:	90c00417 	ldw	r3,16(r18)
   370f8:	91000604 	addi	r4,r18,24
   370fc:	ba000804 	addi	r8,r23,32
   37100:	b8c00615 	stw	r3,24(r23)
   37104:	90800517 	ldw	r2,20(r18)
   37108:	b8800715 	stw	r2,28(r23)
   3710c:	003f1206 	br	36d58 <_realloc_r+0x204>
   37110:	90c00417 	ldw	r3,16(r18)
   37114:	91000604 	addi	r4,r18,24
   37118:	ba000804 	addi	r8,r23,32
   3711c:	b8c00615 	stw	r3,24(r23)
   37120:	90800517 	ldw	r2,20(r18)
   37124:	b8800715 	stw	r2,28(r23)
   37128:	003f3206 	br	36df4 <_realloc_r+0x2a0>
   3712c:	90c00417 	ldw	r3,16(r18)
   37130:	91000604 	addi	r4,r18,24
   37134:	b9c00804 	addi	r7,r23,32
   37138:	b8c00615 	stw	r3,24(r23)
   3713c:	90800517 	ldw	r2,20(r18)
   37140:	b8800715 	stw	r2,28(r23)
   37144:	003fb906 	br	3702c <_realloc_r+0x4d8>

00037148 <__isinfd>:
   37148:	200d883a 	mov	r6,r4
   3714c:	0109c83a 	sub	r4,zero,r4
   37150:	2188b03a 	or	r4,r4,r6
   37154:	2008d7fa 	srli	r4,r4,31
   37158:	00a00034 	movhi	r2,32768
   3715c:	10bfffc4 	addi	r2,r2,-1
   37160:	1144703a 	and	r2,r2,r5
   37164:	2088b03a 	or	r4,r4,r2
   37168:	009ffc34 	movhi	r2,32752
   3716c:	1105c83a 	sub	r2,r2,r4
   37170:	0087c83a 	sub	r3,zero,r2
   37174:	10c4b03a 	or	r2,r2,r3
   37178:	1004d7fa 	srli	r2,r2,31
   3717c:	00c00044 	movi	r3,1
   37180:	1885c83a 	sub	r2,r3,r2
   37184:	f800283a 	ret

00037188 <__isnand>:
   37188:	200d883a 	mov	r6,r4
   3718c:	0109c83a 	sub	r4,zero,r4
   37190:	2188b03a 	or	r4,r4,r6
   37194:	2008d7fa 	srli	r4,r4,31
   37198:	00a00034 	movhi	r2,32768
   3719c:	10bfffc4 	addi	r2,r2,-1
   371a0:	1144703a 	and	r2,r2,r5
   371a4:	2088b03a 	or	r4,r4,r2
   371a8:	009ffc34 	movhi	r2,32752
   371ac:	1105c83a 	sub	r2,r2,r4
   371b0:	1004d7fa 	srli	r2,r2,31
   371b4:	f800283a 	ret

000371b8 <_sbrk_r>:
   371b8:	defffd04 	addi	sp,sp,-12
   371bc:	dc000015 	stw	r16,0(sp)
   371c0:	04000174 	movhi	r16,5
   371c4:	84278204 	addi	r16,r16,-25080
   371c8:	dc400115 	stw	r17,4(sp)
   371cc:	80000015 	stw	zero,0(r16)
   371d0:	2023883a 	mov	r17,r4
   371d4:	2809883a 	mov	r4,r5
   371d8:	dfc00215 	stw	ra,8(sp)
   371dc:	003a7dc0 	call	3a7dc <sbrk>
   371e0:	1007883a 	mov	r3,r2
   371e4:	00bfffc4 	movi	r2,-1
   371e8:	18800626 	beq	r3,r2,37204 <_sbrk_r+0x4c>
   371ec:	1805883a 	mov	r2,r3
   371f0:	dfc00217 	ldw	ra,8(sp)
   371f4:	dc400117 	ldw	r17,4(sp)
   371f8:	dc000017 	ldw	r16,0(sp)
   371fc:	dec00304 	addi	sp,sp,12
   37200:	f800283a 	ret
   37204:	80800017 	ldw	r2,0(r16)
   37208:	103ff826 	beq	r2,zero,371ec <_sbrk_r+0x34>
   3720c:	88800015 	stw	r2,0(r17)
   37210:	1805883a 	mov	r2,r3
   37214:	dfc00217 	ldw	ra,8(sp)
   37218:	dc400117 	ldw	r17,4(sp)
   3721c:	dc000017 	ldw	r16,0(sp)
   37220:	dec00304 	addi	sp,sp,12
   37224:	f800283a 	ret

00037228 <__sclose>:
   37228:	2940038f 	ldh	r5,14(r5)
   3722c:	00375701 	jmpi	37570 <_close_r>

00037230 <__sseek>:
   37230:	defffe04 	addi	sp,sp,-8
   37234:	dc000015 	stw	r16,0(sp)
   37238:	2821883a 	mov	r16,r5
   3723c:	2940038f 	ldh	r5,14(r5)
   37240:	dfc00115 	stw	ra,4(sp)
   37244:	00377e80 	call	377e8 <_lseek_r>
   37248:	1007883a 	mov	r3,r2
   3724c:	00bfffc4 	movi	r2,-1
   37250:	18800926 	beq	r3,r2,37278 <__sseek+0x48>
   37254:	8080030b 	ldhu	r2,12(r16)
   37258:	80c01415 	stw	r3,80(r16)
   3725c:	10840014 	ori	r2,r2,4096
   37260:	8080030d 	sth	r2,12(r16)
   37264:	1805883a 	mov	r2,r3
   37268:	dfc00117 	ldw	ra,4(sp)
   3726c:	dc000017 	ldw	r16,0(sp)
   37270:	dec00204 	addi	sp,sp,8
   37274:	f800283a 	ret
   37278:	8080030b 	ldhu	r2,12(r16)
   3727c:	10bbffcc 	andi	r2,r2,61439
   37280:	8080030d 	sth	r2,12(r16)
   37284:	1805883a 	mov	r2,r3
   37288:	dfc00117 	ldw	ra,4(sp)
   3728c:	dc000017 	ldw	r16,0(sp)
   37290:	dec00204 	addi	sp,sp,8
   37294:	f800283a 	ret

00037298 <__swrite>:
   37298:	2880030b 	ldhu	r2,12(r5)
   3729c:	defffb04 	addi	sp,sp,-20
   372a0:	dcc00315 	stw	r19,12(sp)
   372a4:	1080400c 	andi	r2,r2,256
   372a8:	dc800215 	stw	r18,8(sp)
   372ac:	dc400115 	stw	r17,4(sp)
   372b0:	dc000015 	stw	r16,0(sp)
   372b4:	3027883a 	mov	r19,r6
   372b8:	3825883a 	mov	r18,r7
   372bc:	dfc00415 	stw	ra,16(sp)
   372c0:	2821883a 	mov	r16,r5
   372c4:	000d883a 	mov	r6,zero
   372c8:	01c00084 	movi	r7,2
   372cc:	2023883a 	mov	r17,r4
   372d0:	10000226 	beq	r2,zero,372dc <__swrite+0x44>
   372d4:	2940038f 	ldh	r5,14(r5)
   372d8:	00377e80 	call	377e8 <_lseek_r>
   372dc:	8080030b 	ldhu	r2,12(r16)
   372e0:	8140038f 	ldh	r5,14(r16)
   372e4:	8809883a 	mov	r4,r17
   372e8:	10bbffcc 	andi	r2,r2,61439
   372ec:	980d883a 	mov	r6,r19
   372f0:	900f883a 	mov	r7,r18
   372f4:	8080030d 	sth	r2,12(r16)
   372f8:	dfc00417 	ldw	ra,16(sp)
   372fc:	dcc00317 	ldw	r19,12(sp)
   37300:	dc800217 	ldw	r18,8(sp)
   37304:	dc400117 	ldw	r17,4(sp)
   37308:	dc000017 	ldw	r16,0(sp)
   3730c:	dec00504 	addi	sp,sp,20
   37310:	00374301 	jmpi	37430 <_write_r>

00037314 <__sread>:
   37314:	defffe04 	addi	sp,sp,-8
   37318:	dc000015 	stw	r16,0(sp)
   3731c:	2821883a 	mov	r16,r5
   37320:	2940038f 	ldh	r5,14(r5)
   37324:	dfc00115 	stw	ra,4(sp)
   37328:	00378600 	call	37860 <_read_r>
   3732c:	1007883a 	mov	r3,r2
   37330:	10000816 	blt	r2,zero,37354 <__sread+0x40>
   37334:	80801417 	ldw	r2,80(r16)
   37338:	10c5883a 	add	r2,r2,r3
   3733c:	80801415 	stw	r2,80(r16)
   37340:	1805883a 	mov	r2,r3
   37344:	dfc00117 	ldw	ra,4(sp)
   37348:	dc000017 	ldw	r16,0(sp)
   3734c:	dec00204 	addi	sp,sp,8
   37350:	f800283a 	ret
   37354:	8080030b 	ldhu	r2,12(r16)
   37358:	10bbffcc 	andi	r2,r2,61439
   3735c:	8080030d 	sth	r2,12(r16)
   37360:	1805883a 	mov	r2,r3
   37364:	dfc00117 	ldw	ra,4(sp)
   37368:	dc000017 	ldw	r16,0(sp)
   3736c:	dec00204 	addi	sp,sp,8
   37370:	f800283a 	ret

00037374 <strcmp>:
   37374:	2144b03a 	or	r2,r4,r5
   37378:	108000cc 	andi	r2,r2,3
   3737c:	10001d1e 	bne	r2,zero,373f4 <strcmp+0x80>
   37380:	200f883a 	mov	r7,r4
   37384:	28800017 	ldw	r2,0(r5)
   37388:	21000017 	ldw	r4,0(r4)
   3738c:	280d883a 	mov	r6,r5
   37390:	2080161e 	bne	r4,r2,373ec <strcmp+0x78>
   37394:	023fbff4 	movhi	r8,65279
   37398:	423fbfc4 	addi	r8,r8,-257
   3739c:	2207883a 	add	r3,r4,r8
   373a0:	01602074 	movhi	r5,32897
   373a4:	29602004 	addi	r5,r5,-32640
   373a8:	1946703a 	and	r3,r3,r5
   373ac:	0104303a 	nor	r2,zero,r4
   373b0:	10c4703a 	and	r2,r2,r3
   373b4:	10001c1e 	bne	r2,zero,37428 <strcmp+0xb4>
   373b8:	4013883a 	mov	r9,r8
   373bc:	2811883a 	mov	r8,r5
   373c0:	00000106 	br	373c8 <strcmp+0x54>
   373c4:	1800181e 	bne	r3,zero,37428 <strcmp+0xb4>
   373c8:	39c00104 	addi	r7,r7,4
   373cc:	39000017 	ldw	r4,0(r7)
   373d0:	31800104 	addi	r6,r6,4
   373d4:	31400017 	ldw	r5,0(r6)
   373d8:	2245883a 	add	r2,r4,r9
   373dc:	1204703a 	and	r2,r2,r8
   373e0:	0106303a 	nor	r3,zero,r4
   373e4:	1886703a 	and	r3,r3,r2
   373e8:	217ff626 	beq	r4,r5,373c4 <strcmp+0x50>
   373ec:	3809883a 	mov	r4,r7
   373f0:	300b883a 	mov	r5,r6
   373f4:	20c00007 	ldb	r3,0(r4)
   373f8:	1800051e 	bne	r3,zero,37410 <strcmp+0x9c>
   373fc:	00000606 	br	37418 <strcmp+0xa4>
   37400:	21000044 	addi	r4,r4,1
   37404:	20c00007 	ldb	r3,0(r4)
   37408:	29400044 	addi	r5,r5,1
   3740c:	18000226 	beq	r3,zero,37418 <strcmp+0xa4>
   37410:	28800007 	ldb	r2,0(r5)
   37414:	18bffa26 	beq	r3,r2,37400 <strcmp+0x8c>
   37418:	20c00003 	ldbu	r3,0(r4)
   3741c:	28800003 	ldbu	r2,0(r5)
   37420:	1885c83a 	sub	r2,r3,r2
   37424:	f800283a 	ret
   37428:	0005883a 	mov	r2,zero
   3742c:	f800283a 	ret

00037430 <_write_r>:
   37430:	defffd04 	addi	sp,sp,-12
   37434:	dc000015 	stw	r16,0(sp)
   37438:	04000174 	movhi	r16,5
   3743c:	84278204 	addi	r16,r16,-25080
   37440:	dc400115 	stw	r17,4(sp)
   37444:	80000015 	stw	zero,0(r16)
   37448:	2023883a 	mov	r17,r4
   3744c:	2809883a 	mov	r4,r5
   37450:	300b883a 	mov	r5,r6
   37454:	380d883a 	mov	r6,r7
   37458:	dfc00215 	stw	ra,8(sp)
   3745c:	003a8980 	call	3a898 <write>
   37460:	1007883a 	mov	r3,r2
   37464:	00bfffc4 	movi	r2,-1
   37468:	18800626 	beq	r3,r2,37484 <_write_r+0x54>
   3746c:	1805883a 	mov	r2,r3
   37470:	dfc00217 	ldw	ra,8(sp)
   37474:	dc400117 	ldw	r17,4(sp)
   37478:	dc000017 	ldw	r16,0(sp)
   3747c:	dec00304 	addi	sp,sp,12
   37480:	f800283a 	ret
   37484:	80800017 	ldw	r2,0(r16)
   37488:	103ff826 	beq	r2,zero,3746c <_write_r+0x3c>
   3748c:	88800015 	stw	r2,0(r17)
   37490:	1805883a 	mov	r2,r3
   37494:	dfc00217 	ldw	ra,8(sp)
   37498:	dc400117 	ldw	r17,4(sp)
   3749c:	dc000017 	ldw	r16,0(sp)
   374a0:	dec00304 	addi	sp,sp,12
   374a4:	f800283a 	ret

000374a8 <_calloc_r>:
   374a8:	defffe04 	addi	sp,sp,-8
   374ac:	dc400015 	stw	r17,0(sp)
   374b0:	2023883a 	mov	r17,r4
   374b4:	2809883a 	mov	r4,r5
   374b8:	300b883a 	mov	r5,r6
   374bc:	dfc00115 	stw	ra,4(sp)
   374c0:	003981c0 	call	3981c <__mulsi3>
   374c4:	100b883a 	mov	r5,r2
   374c8:	8809883a 	mov	r4,r17
   374cc:	003508c0 	call	3508c <_malloc_r>
   374d0:	1023883a 	mov	r17,r2
   374d4:	01c00904 	movi	r7,36
   374d8:	10000d26 	beq	r2,zero,37510 <_calloc_r+0x68>
   374dc:	10ffff17 	ldw	r3,-4(r2)
   374e0:	1009883a 	mov	r4,r2
   374e4:	00bfff04 	movi	r2,-4
   374e8:	1886703a 	and	r3,r3,r2
   374ec:	1887883a 	add	r3,r3,r2
   374f0:	180d883a 	mov	r6,r3
   374f4:	000b883a 	mov	r5,zero
   374f8:	38c01736 	bltu	r7,r3,37558 <_calloc_r+0xb0>
   374fc:	008004c4 	movi	r2,19
   37500:	10c00836 	bltu	r2,r3,37524 <_calloc_r+0x7c>
   37504:	20000215 	stw	zero,8(r4)
   37508:	20000015 	stw	zero,0(r4)
   3750c:	20000115 	stw	zero,4(r4)
   37510:	8805883a 	mov	r2,r17
   37514:	dfc00117 	ldw	ra,4(sp)
   37518:	dc400017 	ldw	r17,0(sp)
   3751c:	dec00204 	addi	sp,sp,8
   37520:	f800283a 	ret
   37524:	008006c4 	movi	r2,27
   37528:	88000015 	stw	zero,0(r17)
   3752c:	88000115 	stw	zero,4(r17)
   37530:	89000204 	addi	r4,r17,8
   37534:	10fff32e 	bgeu	r2,r3,37504 <_calloc_r+0x5c>
   37538:	88000215 	stw	zero,8(r17)
   3753c:	88000315 	stw	zero,12(r17)
   37540:	89000404 	addi	r4,r17,16
   37544:	19ffef1e 	bne	r3,r7,37504 <_calloc_r+0x5c>
   37548:	89000604 	addi	r4,r17,24
   3754c:	88000415 	stw	zero,16(r17)
   37550:	88000515 	stw	zero,20(r17)
   37554:	003feb06 	br	37504 <_calloc_r+0x5c>
   37558:	0035a300 	call	35a30 <memset>
   3755c:	8805883a 	mov	r2,r17
   37560:	dfc00117 	ldw	ra,4(sp)
   37564:	dc400017 	ldw	r17,0(sp)
   37568:	dec00204 	addi	sp,sp,8
   3756c:	f800283a 	ret

00037570 <_close_r>:
   37570:	defffd04 	addi	sp,sp,-12
   37574:	dc000015 	stw	r16,0(sp)
   37578:	04000174 	movhi	r16,5
   3757c:	84278204 	addi	r16,r16,-25080
   37580:	dc400115 	stw	r17,4(sp)
   37584:	80000015 	stw	zero,0(r16)
   37588:	2023883a 	mov	r17,r4
   3758c:	2809883a 	mov	r4,r5
   37590:	dfc00215 	stw	ra,8(sp)
   37594:	0039f0c0 	call	39f0c <close>
   37598:	1007883a 	mov	r3,r2
   3759c:	00bfffc4 	movi	r2,-1
   375a0:	18800626 	beq	r3,r2,375bc <_close_r+0x4c>
   375a4:	1805883a 	mov	r2,r3
   375a8:	dfc00217 	ldw	ra,8(sp)
   375ac:	dc400117 	ldw	r17,4(sp)
   375b0:	dc000017 	ldw	r16,0(sp)
   375b4:	dec00304 	addi	sp,sp,12
   375b8:	f800283a 	ret
   375bc:	80800017 	ldw	r2,0(r16)
   375c0:	103ff826 	beq	r2,zero,375a4 <_close_r+0x34>
   375c4:	88800015 	stw	r2,0(r17)
   375c8:	1805883a 	mov	r2,r3
   375cc:	dfc00217 	ldw	ra,8(sp)
   375d0:	dc400117 	ldw	r17,4(sp)
   375d4:	dc000017 	ldw	r16,0(sp)
   375d8:	dec00304 	addi	sp,sp,12
   375dc:	f800283a 	ret

000375e0 <_fclose_r>:
   375e0:	defffc04 	addi	sp,sp,-16
   375e4:	dc400115 	stw	r17,4(sp)
   375e8:	dc000015 	stw	r16,0(sp)
   375ec:	dfc00315 	stw	ra,12(sp)
   375f0:	dc800215 	stw	r18,8(sp)
   375f4:	2821883a 	mov	r16,r5
   375f8:	2023883a 	mov	r17,r4
   375fc:	28002926 	beq	r5,zero,376a4 <_fclose_r+0xc4>
   37600:	003413c0 	call	3413c <__sfp_lock_acquire>
   37604:	88000226 	beq	r17,zero,37610 <_fclose_r+0x30>
   37608:	88800e17 	ldw	r2,56(r17)
   3760c:	10002d26 	beq	r2,zero,376c4 <_fclose_r+0xe4>
   37610:	8080030f 	ldh	r2,12(r16)
   37614:	10002226 	beq	r2,zero,376a0 <_fclose_r+0xc0>
   37618:	8809883a 	mov	r4,r17
   3761c:	800b883a 	mov	r5,r16
   37620:	0033eb40 	call	33eb4 <_fflush_r>
   37624:	1025883a 	mov	r18,r2
   37628:	80800b17 	ldw	r2,44(r16)
   3762c:	10000426 	beq	r2,zero,37640 <_fclose_r+0x60>
   37630:	81400717 	ldw	r5,28(r16)
   37634:	8809883a 	mov	r4,r17
   37638:	103ee83a 	callr	r2
   3763c:	10002a16 	blt	r2,zero,376e8 <_fclose_r+0x108>
   37640:	8080030b 	ldhu	r2,12(r16)
   37644:	1080200c 	andi	r2,r2,128
   37648:	1000231e 	bne	r2,zero,376d8 <_fclose_r+0xf8>
   3764c:	81400c17 	ldw	r5,48(r16)
   37650:	28000526 	beq	r5,zero,37668 <_fclose_r+0x88>
   37654:	80801004 	addi	r2,r16,64
   37658:	28800226 	beq	r5,r2,37664 <_fclose_r+0x84>
   3765c:	8809883a 	mov	r4,r17
   37660:	00345040 	call	34504 <_free_r>
   37664:	80000c15 	stw	zero,48(r16)
   37668:	81401117 	ldw	r5,68(r16)
   3766c:	28000326 	beq	r5,zero,3767c <_fclose_r+0x9c>
   37670:	8809883a 	mov	r4,r17
   37674:	00345040 	call	34504 <_free_r>
   37678:	80001115 	stw	zero,68(r16)
   3767c:	8000030d 	sth	zero,12(r16)
   37680:	00341400 	call	34140 <__sfp_lock_release>
   37684:	9005883a 	mov	r2,r18
   37688:	dfc00317 	ldw	ra,12(sp)
   3768c:	dc800217 	ldw	r18,8(sp)
   37690:	dc400117 	ldw	r17,4(sp)
   37694:	dc000017 	ldw	r16,0(sp)
   37698:	dec00404 	addi	sp,sp,16
   3769c:	f800283a 	ret
   376a0:	00341400 	call	34140 <__sfp_lock_release>
   376a4:	0025883a 	mov	r18,zero
   376a8:	9005883a 	mov	r2,r18
   376ac:	dfc00317 	ldw	ra,12(sp)
   376b0:	dc800217 	ldw	r18,8(sp)
   376b4:	dc400117 	ldw	r17,4(sp)
   376b8:	dc000017 	ldw	r16,0(sp)
   376bc:	dec00404 	addi	sp,sp,16
   376c0:	f800283a 	ret
   376c4:	8809883a 	mov	r4,r17
   376c8:	003414c0 	call	3414c <__sinit>
   376cc:	8080030f 	ldh	r2,12(r16)
   376d0:	103fd11e 	bne	r2,zero,37618 <_fclose_r+0x38>
   376d4:	003ff206 	br	376a0 <_fclose_r+0xc0>
   376d8:	81400417 	ldw	r5,16(r16)
   376dc:	8809883a 	mov	r4,r17
   376e0:	00345040 	call	34504 <_free_r>
   376e4:	003fd906 	br	3764c <_fclose_r+0x6c>
   376e8:	04bfffc4 	movi	r18,-1
   376ec:	003fd406 	br	37640 <_fclose_r+0x60>

000376f0 <fclose>:
   376f0:	00800174 	movhi	r2,5
   376f4:	10a76704 	addi	r2,r2,-25188
   376f8:	200b883a 	mov	r5,r4
   376fc:	11000017 	ldw	r4,0(r2)
   37700:	00375e01 	jmpi	375e0 <_fclose_r>

00037704 <_fstat_r>:
   37704:	defffd04 	addi	sp,sp,-12
   37708:	dc000015 	stw	r16,0(sp)
   3770c:	04000174 	movhi	r16,5
   37710:	84278204 	addi	r16,r16,-25080
   37714:	dc400115 	stw	r17,4(sp)
   37718:	80000015 	stw	zero,0(r16)
   3771c:	2023883a 	mov	r17,r4
   37720:	2809883a 	mov	r4,r5
   37724:	300b883a 	mov	r5,r6
   37728:	dfc00215 	stw	ra,8(sp)
   3772c:	003a0980 	call	3a098 <fstat>
   37730:	1007883a 	mov	r3,r2
   37734:	00bfffc4 	movi	r2,-1
   37738:	18800626 	beq	r3,r2,37754 <_fstat_r+0x50>
   3773c:	1805883a 	mov	r2,r3
   37740:	dfc00217 	ldw	ra,8(sp)
   37744:	dc400117 	ldw	r17,4(sp)
   37748:	dc000017 	ldw	r16,0(sp)
   3774c:	dec00304 	addi	sp,sp,12
   37750:	f800283a 	ret
   37754:	80800017 	ldw	r2,0(r16)
   37758:	103ff826 	beq	r2,zero,3773c <_fstat_r+0x38>
   3775c:	88800015 	stw	r2,0(r17)
   37760:	1805883a 	mov	r2,r3
   37764:	dfc00217 	ldw	ra,8(sp)
   37768:	dc400117 	ldw	r17,4(sp)
   3776c:	dc000017 	ldw	r16,0(sp)
   37770:	dec00304 	addi	sp,sp,12
   37774:	f800283a 	ret

00037778 <_isatty_r>:
   37778:	defffd04 	addi	sp,sp,-12
   3777c:	dc000015 	stw	r16,0(sp)
   37780:	04000174 	movhi	r16,5
   37784:	84278204 	addi	r16,r16,-25080
   37788:	dc400115 	stw	r17,4(sp)
   3778c:	80000015 	stw	zero,0(r16)
   37790:	2023883a 	mov	r17,r4
   37794:	2809883a 	mov	r4,r5
   37798:	dfc00215 	stw	ra,8(sp)
   3779c:	003a1d00 	call	3a1d0 <isatty>
   377a0:	1007883a 	mov	r3,r2
   377a4:	00bfffc4 	movi	r2,-1
   377a8:	18800626 	beq	r3,r2,377c4 <_isatty_r+0x4c>
   377ac:	1805883a 	mov	r2,r3
   377b0:	dfc00217 	ldw	ra,8(sp)
   377b4:	dc400117 	ldw	r17,4(sp)
   377b8:	dc000017 	ldw	r16,0(sp)
   377bc:	dec00304 	addi	sp,sp,12
   377c0:	f800283a 	ret
   377c4:	80800017 	ldw	r2,0(r16)
   377c8:	103ff826 	beq	r2,zero,377ac <_isatty_r+0x34>
   377cc:	88800015 	stw	r2,0(r17)
   377d0:	1805883a 	mov	r2,r3
   377d4:	dfc00217 	ldw	ra,8(sp)
   377d8:	dc400117 	ldw	r17,4(sp)
   377dc:	dc000017 	ldw	r16,0(sp)
   377e0:	dec00304 	addi	sp,sp,12
   377e4:	f800283a 	ret

000377e8 <_lseek_r>:
   377e8:	defffd04 	addi	sp,sp,-12
   377ec:	dc000015 	stw	r16,0(sp)
   377f0:	04000174 	movhi	r16,5
   377f4:	84278204 	addi	r16,r16,-25080
   377f8:	dc400115 	stw	r17,4(sp)
   377fc:	80000015 	stw	zero,0(r16)
   37800:	2023883a 	mov	r17,r4
   37804:	2809883a 	mov	r4,r5
   37808:	300b883a 	mov	r5,r6
   3780c:	380d883a 	mov	r6,r7
   37810:	dfc00215 	stw	ra,8(sp)
   37814:	003a3e00 	call	3a3e0 <lseek>
   37818:	1007883a 	mov	r3,r2
   3781c:	00bfffc4 	movi	r2,-1
   37820:	18800626 	beq	r3,r2,3783c <_lseek_r+0x54>
   37824:	1805883a 	mov	r2,r3
   37828:	dfc00217 	ldw	ra,8(sp)
   3782c:	dc400117 	ldw	r17,4(sp)
   37830:	dc000017 	ldw	r16,0(sp)
   37834:	dec00304 	addi	sp,sp,12
   37838:	f800283a 	ret
   3783c:	80800017 	ldw	r2,0(r16)
   37840:	103ff826 	beq	r2,zero,37824 <_lseek_r+0x3c>
   37844:	88800015 	stw	r2,0(r17)
   37848:	1805883a 	mov	r2,r3
   3784c:	dfc00217 	ldw	ra,8(sp)
   37850:	dc400117 	ldw	r17,4(sp)
   37854:	dc000017 	ldw	r16,0(sp)
   37858:	dec00304 	addi	sp,sp,12
   3785c:	f800283a 	ret

00037860 <_read_r>:
   37860:	defffd04 	addi	sp,sp,-12
   37864:	dc000015 	stw	r16,0(sp)
   37868:	04000174 	movhi	r16,5
   3786c:	84278204 	addi	r16,r16,-25080
   37870:	dc400115 	stw	r17,4(sp)
   37874:	80000015 	stw	zero,0(r16)
   37878:	2023883a 	mov	r17,r4
   3787c:	2809883a 	mov	r4,r5
   37880:	300b883a 	mov	r5,r6
   37884:	380d883a 	mov	r6,r7
   37888:	dfc00215 	stw	ra,8(sp)
   3788c:	003a5e00 	call	3a5e0 <read>
   37890:	1007883a 	mov	r3,r2
   37894:	00bfffc4 	movi	r2,-1
   37898:	18800626 	beq	r3,r2,378b4 <_read_r+0x54>
   3789c:	1805883a 	mov	r2,r3
   378a0:	dfc00217 	ldw	ra,8(sp)
   378a4:	dc400117 	ldw	r17,4(sp)
   378a8:	dc000017 	ldw	r16,0(sp)
   378ac:	dec00304 	addi	sp,sp,12
   378b0:	f800283a 	ret
   378b4:	80800017 	ldw	r2,0(r16)
   378b8:	103ff826 	beq	r2,zero,3789c <_read_r+0x3c>
   378bc:	88800015 	stw	r2,0(r17)
   378c0:	1805883a 	mov	r2,r3
   378c4:	dfc00217 	ldw	ra,8(sp)
   378c8:	dc400117 	ldw	r17,4(sp)
   378cc:	dc000017 	ldw	r16,0(sp)
   378d0:	dec00304 	addi	sp,sp,12
   378d4:	f800283a 	ret

000378d8 <__udivdi3>:
   378d8:	defff104 	addi	sp,sp,-60
   378dc:	0015883a 	mov	r10,zero
   378e0:	2005883a 	mov	r2,r4
   378e4:	3011883a 	mov	r8,r6
   378e8:	df000d15 	stw	fp,52(sp)
   378ec:	dd400a15 	stw	r21,40(sp)
   378f0:	dcc00815 	stw	r19,32(sp)
   378f4:	dfc00e15 	stw	ra,56(sp)
   378f8:	ddc00c15 	stw	r23,48(sp)
   378fc:	dd800b15 	stw	r22,44(sp)
   37900:	dd000915 	stw	r20,36(sp)
   37904:	dc800715 	stw	r18,28(sp)
   37908:	dc400615 	stw	r17,24(sp)
   3790c:	dc000515 	stw	r16,20(sp)
   37910:	da800315 	stw	r10,12(sp)
   37914:	4027883a 	mov	r19,r8
   37918:	1039883a 	mov	fp,r2
   3791c:	282b883a 	mov	r21,r5
   37920:	da800415 	stw	r10,16(sp)
   37924:	3800401e 	bne	r7,zero,37a28 <__udivdi3+0x150>
   37928:	2a006536 	bltu	r5,r8,37ac0 <__udivdi3+0x1e8>
   3792c:	4000b526 	beq	r8,zero,37c04 <__udivdi3+0x32c>
   37930:	00bfffd4 	movui	r2,65535
   37934:	14c0ad36 	bltu	r2,r19,37bec <__udivdi3+0x314>
   37938:	00803fc4 	movi	r2,255
   3793c:	14c15e36 	bltu	r2,r19,37eb8 <__udivdi3+0x5e0>
   37940:	000b883a 	mov	r5,zero
   37944:	0005883a 	mov	r2,zero
   37948:	9884d83a 	srl	r2,r19,r2
   3794c:	01000174 	movhi	r4,5
   37950:	21209504 	addi	r4,r4,-32172
   37954:	01800804 	movi	r6,32
   37958:	1105883a 	add	r2,r2,r4
   3795c:	10c00003 	ldbu	r3,0(r2)
   37960:	28c7883a 	add	r3,r5,r3
   37964:	30e9c83a 	sub	r20,r6,r3
   37968:	a0010a1e 	bne	r20,zero,37d94 <__udivdi3+0x4bc>
   3796c:	982ed43a 	srli	r23,r19,16
   37970:	acebc83a 	sub	r21,r21,r19
   37974:	9dbfffcc 	andi	r22,r19,65535
   37978:	05000044 	movi	r20,1
   3797c:	a809883a 	mov	r4,r21
   37980:	b80b883a 	mov	r5,r23
   37984:	003980c0 	call	3980c <__udivsi3>
   37988:	100b883a 	mov	r5,r2
   3798c:	b009883a 	mov	r4,r22
   37990:	1021883a 	mov	r16,r2
   37994:	003981c0 	call	3981c <__mulsi3>
   37998:	a809883a 	mov	r4,r21
   3799c:	b80b883a 	mov	r5,r23
   379a0:	1023883a 	mov	r17,r2
   379a4:	00398140 	call	39814 <__umodsi3>
   379a8:	1004943a 	slli	r2,r2,16
   379ac:	e006d43a 	srli	r3,fp,16
   379b0:	10c4b03a 	or	r2,r2,r3
   379b4:	1440042e 	bgeu	r2,r17,379c8 <__udivdi3+0xf0>
   379b8:	14c5883a 	add	r2,r2,r19
   379bc:	843fffc4 	addi	r16,r16,-1
   379c0:	14c00136 	bltu	r2,r19,379c8 <__udivdi3+0xf0>
   379c4:	14415c36 	bltu	r2,r17,37f38 <__udivdi3+0x660>
   379c8:	1463c83a 	sub	r17,r2,r17
   379cc:	8809883a 	mov	r4,r17
   379d0:	b80b883a 	mov	r5,r23
   379d4:	003980c0 	call	3980c <__udivsi3>
   379d8:	100b883a 	mov	r5,r2
   379dc:	b009883a 	mov	r4,r22
   379e0:	102b883a 	mov	r21,r2
   379e4:	003981c0 	call	3981c <__mulsi3>
   379e8:	8809883a 	mov	r4,r17
   379ec:	b80b883a 	mov	r5,r23
   379f0:	1025883a 	mov	r18,r2
   379f4:	00398140 	call	39814 <__umodsi3>
   379f8:	1004943a 	slli	r2,r2,16
   379fc:	e0ffffcc 	andi	r3,fp,65535
   37a00:	10c4b03a 	or	r2,r2,r3
   37a04:	1480042e 	bgeu	r2,r18,37a18 <__udivdi3+0x140>
   37a08:	9885883a 	add	r2,r19,r2
   37a0c:	ad7fffc4 	addi	r21,r21,-1
   37a10:	14c00136 	bltu	r2,r19,37a18 <__udivdi3+0x140>
   37a14:	14813c36 	bltu	r2,r18,37f08 <__udivdi3+0x630>
   37a18:	8004943a 	slli	r2,r16,16
   37a1c:	a009883a 	mov	r4,r20
   37a20:	a884b03a 	or	r2,r21,r2
   37a24:	00001506 	br	37a7c <__udivdi3+0x1a4>
   37a28:	380d883a 	mov	r6,r7
   37a2c:	29c06c36 	bltu	r5,r7,37be0 <__udivdi3+0x308>
   37a30:	00bfffd4 	movui	r2,65535
   37a34:	11c06436 	bltu	r2,r7,37bc8 <__udivdi3+0x2f0>
   37a38:	00803fc4 	movi	r2,255
   37a3c:	11c11836 	bltu	r2,r7,37ea0 <__udivdi3+0x5c8>
   37a40:	000b883a 	mov	r5,zero
   37a44:	0005883a 	mov	r2,zero
   37a48:	3084d83a 	srl	r2,r6,r2
   37a4c:	01000174 	movhi	r4,5
   37a50:	21209504 	addi	r4,r4,-32172
   37a54:	01c00804 	movi	r7,32
   37a58:	1105883a 	add	r2,r2,r4
   37a5c:	10c00003 	ldbu	r3,0(r2)
   37a60:	28c7883a 	add	r3,r5,r3
   37a64:	38edc83a 	sub	r22,r7,r3
   37a68:	b000731e 	bne	r22,zero,37c38 <__udivdi3+0x360>
   37a6c:	35400136 	bltu	r6,r21,37a74 <__udivdi3+0x19c>
   37a70:	e4c05b36 	bltu	fp,r19,37be0 <__udivdi3+0x308>
   37a74:	00800044 	movi	r2,1
   37a78:	0009883a 	mov	r4,zero
   37a7c:	d8800315 	stw	r2,12(sp)
   37a80:	d9400317 	ldw	r5,12(sp)
   37a84:	2007883a 	mov	r3,r4
   37a88:	d9000415 	stw	r4,16(sp)
   37a8c:	2805883a 	mov	r2,r5
   37a90:	dfc00e17 	ldw	ra,56(sp)
   37a94:	df000d17 	ldw	fp,52(sp)
   37a98:	ddc00c17 	ldw	r23,48(sp)
   37a9c:	dd800b17 	ldw	r22,44(sp)
   37aa0:	dd400a17 	ldw	r21,40(sp)
   37aa4:	dd000917 	ldw	r20,36(sp)
   37aa8:	dcc00817 	ldw	r19,32(sp)
   37aac:	dc800717 	ldw	r18,28(sp)
   37ab0:	dc400617 	ldw	r17,24(sp)
   37ab4:	dc000517 	ldw	r16,20(sp)
   37ab8:	dec00f04 	addi	sp,sp,60
   37abc:	f800283a 	ret
   37ac0:	00bfffd4 	movui	r2,65535
   37ac4:	12005636 	bltu	r2,r8,37c20 <__udivdi3+0x348>
   37ac8:	00803fc4 	movi	r2,255
   37acc:	12010036 	bltu	r2,r8,37ed0 <__udivdi3+0x5f8>
   37ad0:	000b883a 	mov	r5,zero
   37ad4:	0005883a 	mov	r2,zero
   37ad8:	9884d83a 	srl	r2,r19,r2
   37adc:	01000174 	movhi	r4,5
   37ae0:	21209504 	addi	r4,r4,-32172
   37ae4:	01800804 	movi	r6,32
   37ae8:	1105883a 	add	r2,r2,r4
   37aec:	10c00003 	ldbu	r3,0(r2)
   37af0:	28c7883a 	add	r3,r5,r3
   37af4:	30cbc83a 	sub	r5,r6,r3
   37af8:	28000626 	beq	r5,zero,37b14 <__udivdi3+0x23c>
   37afc:	3145c83a 	sub	r2,r6,r5
   37b00:	e084d83a 	srl	r2,fp,r2
   37b04:	a946983a 	sll	r3,r21,r5
   37b08:	e178983a 	sll	fp,fp,r5
   37b0c:	9966983a 	sll	r19,r19,r5
   37b10:	18aab03a 	or	r21,r3,r2
   37b14:	982ed43a 	srli	r23,r19,16
   37b18:	a809883a 	mov	r4,r21
   37b1c:	9cbfffcc 	andi	r18,r19,65535
   37b20:	b80b883a 	mov	r5,r23
   37b24:	003980c0 	call	3980c <__udivsi3>
   37b28:	100b883a 	mov	r5,r2
   37b2c:	9009883a 	mov	r4,r18
   37b30:	1021883a 	mov	r16,r2
   37b34:	003981c0 	call	3981c <__mulsi3>
   37b38:	a809883a 	mov	r4,r21
   37b3c:	b80b883a 	mov	r5,r23
   37b40:	1023883a 	mov	r17,r2
   37b44:	00398140 	call	39814 <__umodsi3>
   37b48:	1004943a 	slli	r2,r2,16
   37b4c:	e006d43a 	srli	r3,fp,16
   37b50:	10c4b03a 	or	r2,r2,r3
   37b54:	1440042e 	bgeu	r2,r17,37b68 <__udivdi3+0x290>
   37b58:	14c5883a 	add	r2,r2,r19
   37b5c:	843fffc4 	addi	r16,r16,-1
   37b60:	14c00136 	bltu	r2,r19,37b68 <__udivdi3+0x290>
   37b64:	1440ea36 	bltu	r2,r17,37f10 <__udivdi3+0x638>
   37b68:	1463c83a 	sub	r17,r2,r17
   37b6c:	8809883a 	mov	r4,r17
   37b70:	b80b883a 	mov	r5,r23
   37b74:	003980c0 	call	3980c <__udivsi3>
   37b78:	100b883a 	mov	r5,r2
   37b7c:	9009883a 	mov	r4,r18
   37b80:	102b883a 	mov	r21,r2
   37b84:	003981c0 	call	3981c <__mulsi3>
   37b88:	8809883a 	mov	r4,r17
   37b8c:	b80b883a 	mov	r5,r23
   37b90:	1025883a 	mov	r18,r2
   37b94:	00398140 	call	39814 <__umodsi3>
   37b98:	1004943a 	slli	r2,r2,16
   37b9c:	e0ffffcc 	andi	r3,fp,65535
   37ba0:	10c4b03a 	or	r2,r2,r3
   37ba4:	1480042e 	bgeu	r2,r18,37bb8 <__udivdi3+0x2e0>
   37ba8:	9885883a 	add	r2,r19,r2
   37bac:	ad7fffc4 	addi	r21,r21,-1
   37bb0:	14c00136 	bltu	r2,r19,37bb8 <__udivdi3+0x2e0>
   37bb4:	1480d936 	bltu	r2,r18,37f1c <__udivdi3+0x644>
   37bb8:	8004943a 	slli	r2,r16,16
   37bbc:	0009883a 	mov	r4,zero
   37bc0:	a884b03a 	or	r2,r21,r2
   37bc4:	003fad06 	br	37a7c <__udivdi3+0x1a4>
   37bc8:	00804034 	movhi	r2,256
   37bcc:	10bfffc4 	addi	r2,r2,-1
   37bd0:	11c0b636 	bltu	r2,r7,37eac <__udivdi3+0x5d4>
   37bd4:	01400404 	movi	r5,16
   37bd8:	2805883a 	mov	r2,r5
   37bdc:	003f9a06 	br	37a48 <__udivdi3+0x170>
   37be0:	0005883a 	mov	r2,zero
   37be4:	0009883a 	mov	r4,zero
   37be8:	003fa406 	br	37a7c <__udivdi3+0x1a4>
   37bec:	00804034 	movhi	r2,256
   37bf0:	10bfffc4 	addi	r2,r2,-1
   37bf4:	14c0b336 	bltu	r2,r19,37ec4 <__udivdi3+0x5ec>
   37bf8:	01400404 	movi	r5,16
   37bfc:	2805883a 	mov	r2,r5
   37c00:	003f5106 	br	37948 <__udivdi3+0x70>
   37c04:	01000044 	movi	r4,1
   37c08:	000b883a 	mov	r5,zero
   37c0c:	003980c0 	call	3980c <__udivsi3>
   37c10:	1027883a 	mov	r19,r2
   37c14:	00bfffd4 	movui	r2,65535
   37c18:	14fff436 	bltu	r2,r19,37bec <__udivdi3+0x314>
   37c1c:	003f4606 	br	37938 <__udivdi3+0x60>
   37c20:	00804034 	movhi	r2,256
   37c24:	10bfffc4 	addi	r2,r2,-1
   37c28:	1200ac36 	bltu	r2,r8,37edc <__udivdi3+0x604>
   37c2c:	01400404 	movi	r5,16
   37c30:	2805883a 	mov	r2,r5
   37c34:	003fa806 	br	37ad8 <__udivdi3+0x200>
   37c38:	3d85c83a 	sub	r2,r7,r22
   37c3c:	3588983a 	sll	r4,r6,r22
   37c40:	9886d83a 	srl	r3,r19,r2
   37c44:	a8a2d83a 	srl	r17,r21,r2
   37c48:	e084d83a 	srl	r2,fp,r2
   37c4c:	20eeb03a 	or	r23,r4,r3
   37c50:	b824d43a 	srli	r18,r23,16
   37c54:	ad86983a 	sll	r3,r21,r22
   37c58:	8809883a 	mov	r4,r17
   37c5c:	900b883a 	mov	r5,r18
   37c60:	1886b03a 	or	r3,r3,r2
   37c64:	d8c00115 	stw	r3,4(sp)
   37c68:	bc3fffcc 	andi	r16,r23,65535
   37c6c:	003980c0 	call	3980c <__udivsi3>
   37c70:	100b883a 	mov	r5,r2
   37c74:	8009883a 	mov	r4,r16
   37c78:	1029883a 	mov	r20,r2
   37c7c:	003981c0 	call	3981c <__mulsi3>
   37c80:	900b883a 	mov	r5,r18
   37c84:	8809883a 	mov	r4,r17
   37c88:	102b883a 	mov	r21,r2
   37c8c:	00398140 	call	39814 <__umodsi3>
   37c90:	d9400117 	ldw	r5,4(sp)
   37c94:	1004943a 	slli	r2,r2,16
   37c98:	9da6983a 	sll	r19,r19,r22
   37c9c:	2806d43a 	srli	r3,r5,16
   37ca0:	10c4b03a 	or	r2,r2,r3
   37ca4:	1540032e 	bgeu	r2,r21,37cb4 <__udivdi3+0x3dc>
   37ca8:	15c5883a 	add	r2,r2,r23
   37cac:	a53fffc4 	addi	r20,r20,-1
   37cb0:	15c0912e 	bgeu	r2,r23,37ef8 <__udivdi3+0x620>
   37cb4:	1563c83a 	sub	r17,r2,r21
   37cb8:	8809883a 	mov	r4,r17
   37cbc:	900b883a 	mov	r5,r18
   37cc0:	003980c0 	call	3980c <__udivsi3>
   37cc4:	100b883a 	mov	r5,r2
   37cc8:	8009883a 	mov	r4,r16
   37ccc:	102b883a 	mov	r21,r2
   37cd0:	003981c0 	call	3981c <__mulsi3>
   37cd4:	8809883a 	mov	r4,r17
   37cd8:	900b883a 	mov	r5,r18
   37cdc:	1021883a 	mov	r16,r2
   37ce0:	00398140 	call	39814 <__umodsi3>
   37ce4:	da800117 	ldw	r10,4(sp)
   37ce8:	1004943a 	slli	r2,r2,16
   37cec:	50ffffcc 	andi	r3,r10,65535
   37cf0:	10c6b03a 	or	r3,r2,r3
   37cf4:	1c00032e 	bgeu	r3,r16,37d04 <__udivdi3+0x42c>
   37cf8:	1dc7883a 	add	r3,r3,r23
   37cfc:	ad7fffc4 	addi	r21,r21,-1
   37d00:	1dc0792e 	bgeu	r3,r23,37ee8 <__udivdi3+0x610>
   37d04:	a004943a 	slli	r2,r20,16
   37d08:	982ed43a 	srli	r23,r19,16
   37d0c:	9cffffcc 	andi	r19,r19,65535
   37d10:	a8a4b03a 	or	r18,r21,r2
   37d14:	947fffcc 	andi	r17,r18,65535
   37d18:	902ad43a 	srli	r21,r18,16
   37d1c:	8809883a 	mov	r4,r17
   37d20:	980b883a 	mov	r5,r19
   37d24:	1c21c83a 	sub	r16,r3,r16
   37d28:	003981c0 	call	3981c <__mulsi3>
   37d2c:	8809883a 	mov	r4,r17
   37d30:	b80b883a 	mov	r5,r23
   37d34:	1029883a 	mov	r20,r2
   37d38:	003981c0 	call	3981c <__mulsi3>
   37d3c:	980b883a 	mov	r5,r19
   37d40:	a809883a 	mov	r4,r21
   37d44:	1023883a 	mov	r17,r2
   37d48:	003981c0 	call	3981c <__mulsi3>
   37d4c:	a809883a 	mov	r4,r21
   37d50:	b80b883a 	mov	r5,r23
   37d54:	1027883a 	mov	r19,r2
   37d58:	003981c0 	call	3981c <__mulsi3>
   37d5c:	1009883a 	mov	r4,r2
   37d60:	a004d43a 	srli	r2,r20,16
   37d64:	8ce3883a 	add	r17,r17,r19
   37d68:	1447883a 	add	r3,r2,r17
   37d6c:	1cc0022e 	bgeu	r3,r19,37d78 <__udivdi3+0x4a0>
   37d70:	00800074 	movhi	r2,1
   37d74:	2089883a 	add	r4,r4,r2
   37d78:	1804d43a 	srli	r2,r3,16
   37d7c:	2085883a 	add	r2,r4,r2
   37d80:	80804436 	bltu	r16,r2,37e94 <__udivdi3+0x5bc>
   37d84:	80803e26 	beq	r16,r2,37e80 <__udivdi3+0x5a8>
   37d88:	9005883a 	mov	r2,r18
   37d8c:	0009883a 	mov	r4,zero
   37d90:	003f3a06 	br	37a7c <__udivdi3+0x1a4>
   37d94:	9d26983a 	sll	r19,r19,r20
   37d98:	3505c83a 	sub	r2,r6,r20
   37d9c:	a8a2d83a 	srl	r17,r21,r2
   37da0:	982ed43a 	srli	r23,r19,16
   37da4:	e084d83a 	srl	r2,fp,r2
   37da8:	ad06983a 	sll	r3,r21,r20
   37dac:	8809883a 	mov	r4,r17
   37db0:	b80b883a 	mov	r5,r23
   37db4:	1886b03a 	or	r3,r3,r2
   37db8:	d8c00015 	stw	r3,0(sp)
   37dbc:	9dbfffcc 	andi	r22,r19,65535
   37dc0:	003980c0 	call	3980c <__udivsi3>
   37dc4:	100b883a 	mov	r5,r2
   37dc8:	b009883a 	mov	r4,r22
   37dcc:	d8800215 	stw	r2,8(sp)
   37dd0:	003981c0 	call	3981c <__mulsi3>
   37dd4:	8809883a 	mov	r4,r17
   37dd8:	b80b883a 	mov	r5,r23
   37ddc:	102b883a 	mov	r21,r2
   37de0:	00398140 	call	39814 <__umodsi3>
   37de4:	d9000017 	ldw	r4,0(sp)
   37de8:	1004943a 	slli	r2,r2,16
   37dec:	2006d43a 	srli	r3,r4,16
   37df0:	10c4b03a 	or	r2,r2,r3
   37df4:	1540052e 	bgeu	r2,r21,37e0c <__udivdi3+0x534>
   37df8:	d9400217 	ldw	r5,8(sp)
   37dfc:	14c5883a 	add	r2,r2,r19
   37e00:	297fffc4 	addi	r5,r5,-1
   37e04:	d9400215 	stw	r5,8(sp)
   37e08:	14c0462e 	bgeu	r2,r19,37f24 <__udivdi3+0x64c>
   37e0c:	1563c83a 	sub	r17,r2,r21
   37e10:	8809883a 	mov	r4,r17
   37e14:	b80b883a 	mov	r5,r23
   37e18:	003980c0 	call	3980c <__udivsi3>
   37e1c:	100b883a 	mov	r5,r2
   37e20:	b009883a 	mov	r4,r22
   37e24:	1025883a 	mov	r18,r2
   37e28:	003981c0 	call	3981c <__mulsi3>
   37e2c:	8809883a 	mov	r4,r17
   37e30:	b80b883a 	mov	r5,r23
   37e34:	1021883a 	mov	r16,r2
   37e38:	00398140 	call	39814 <__umodsi3>
   37e3c:	da800017 	ldw	r10,0(sp)
   37e40:	1004943a 	slli	r2,r2,16
   37e44:	50ffffcc 	andi	r3,r10,65535
   37e48:	10c6b03a 	or	r3,r2,r3
   37e4c:	1c00062e 	bgeu	r3,r16,37e68 <__udivdi3+0x590>
   37e50:	1cc7883a 	add	r3,r3,r19
   37e54:	94bfffc4 	addi	r18,r18,-1
   37e58:	1cc00336 	bltu	r3,r19,37e68 <__udivdi3+0x590>
   37e5c:	1c00022e 	bgeu	r3,r16,37e68 <__udivdi3+0x590>
   37e60:	94bfffc4 	addi	r18,r18,-1
   37e64:	1cc7883a 	add	r3,r3,r19
   37e68:	d9000217 	ldw	r4,8(sp)
   37e6c:	e538983a 	sll	fp,fp,r20
   37e70:	1c2bc83a 	sub	r21,r3,r16
   37e74:	2004943a 	slli	r2,r4,16
   37e78:	90a8b03a 	or	r20,r18,r2
   37e7c:	003ebf06 	br	3797c <__udivdi3+0xa4>
   37e80:	1804943a 	slli	r2,r3,16
   37e84:	e588983a 	sll	r4,fp,r22
   37e88:	a0ffffcc 	andi	r3,r20,65535
   37e8c:	10c5883a 	add	r2,r2,r3
   37e90:	20bfbd2e 	bgeu	r4,r2,37d88 <__udivdi3+0x4b0>
   37e94:	90bfffc4 	addi	r2,r18,-1
   37e98:	0009883a 	mov	r4,zero
   37e9c:	003ef706 	br	37a7c <__udivdi3+0x1a4>
   37ea0:	01400204 	movi	r5,8
   37ea4:	2805883a 	mov	r2,r5
   37ea8:	003ee706 	br	37a48 <__udivdi3+0x170>
   37eac:	01400604 	movi	r5,24
   37eb0:	2805883a 	mov	r2,r5
   37eb4:	003ee406 	br	37a48 <__udivdi3+0x170>
   37eb8:	01400204 	movi	r5,8
   37ebc:	2805883a 	mov	r2,r5
   37ec0:	003ea106 	br	37948 <__udivdi3+0x70>
   37ec4:	01400604 	movi	r5,24
   37ec8:	2805883a 	mov	r2,r5
   37ecc:	003e9e06 	br	37948 <__udivdi3+0x70>
   37ed0:	01400204 	movi	r5,8
   37ed4:	2805883a 	mov	r2,r5
   37ed8:	003eff06 	br	37ad8 <__udivdi3+0x200>
   37edc:	01400604 	movi	r5,24
   37ee0:	2805883a 	mov	r2,r5
   37ee4:	003efc06 	br	37ad8 <__udivdi3+0x200>
   37ee8:	1c3f862e 	bgeu	r3,r16,37d04 <__udivdi3+0x42c>
   37eec:	1dc7883a 	add	r3,r3,r23
   37ef0:	ad7fffc4 	addi	r21,r21,-1
   37ef4:	003f8306 	br	37d04 <__udivdi3+0x42c>
   37ef8:	157f6e2e 	bgeu	r2,r21,37cb4 <__udivdi3+0x3dc>
   37efc:	a53fffc4 	addi	r20,r20,-1
   37f00:	15c5883a 	add	r2,r2,r23
   37f04:	003f6b06 	br	37cb4 <__udivdi3+0x3dc>
   37f08:	ad7fffc4 	addi	r21,r21,-1
   37f0c:	003ec206 	br	37a18 <__udivdi3+0x140>
   37f10:	843fffc4 	addi	r16,r16,-1
   37f14:	14c5883a 	add	r2,r2,r19
   37f18:	003f1306 	br	37b68 <__udivdi3+0x290>
   37f1c:	ad7fffc4 	addi	r21,r21,-1
   37f20:	003f2506 	br	37bb8 <__udivdi3+0x2e0>
   37f24:	157fb92e 	bgeu	r2,r21,37e0c <__udivdi3+0x534>
   37f28:	297fffc4 	addi	r5,r5,-1
   37f2c:	14c5883a 	add	r2,r2,r19
   37f30:	d9400215 	stw	r5,8(sp)
   37f34:	003fb506 	br	37e0c <__udivdi3+0x534>
   37f38:	843fffc4 	addi	r16,r16,-1
   37f3c:	14c5883a 	add	r2,r2,r19
   37f40:	003ea106 	br	379c8 <__udivdi3+0xf0>

00037f44 <__umoddi3>:
   37f44:	defff004 	addi	sp,sp,-64
   37f48:	3011883a 	mov	r8,r6
   37f4c:	000d883a 	mov	r6,zero
   37f50:	dd400b15 	stw	r21,44(sp)
   37f54:	dcc00915 	stw	r19,36(sp)
   37f58:	dc000615 	stw	r16,24(sp)
   37f5c:	dfc00f15 	stw	ra,60(sp)
   37f60:	df000e15 	stw	fp,56(sp)
   37f64:	ddc00d15 	stw	r23,52(sp)
   37f68:	dd800c15 	stw	r22,48(sp)
   37f6c:	dd000a15 	stw	r20,40(sp)
   37f70:	dc800815 	stw	r18,32(sp)
   37f74:	dc400715 	stw	r17,28(sp)
   37f78:	2817883a 	mov	r11,r5
   37f7c:	d9800415 	stw	r6,16(sp)
   37f80:	4027883a 	mov	r19,r8
   37f84:	d9800515 	stw	r6,20(sp)
   37f88:	2021883a 	mov	r16,r4
   37f8c:	282b883a 	mov	r21,r5
   37f90:	38002c1e 	bne	r7,zero,38044 <__umoddi3+0x100>
   37f94:	2a005636 	bltu	r5,r8,380f0 <__umoddi3+0x1ac>
   37f98:	40009a26 	beq	r8,zero,38204 <__umoddi3+0x2c0>
   37f9c:	00bfffd4 	movui	r2,65535
   37fa0:	14c09236 	bltu	r2,r19,381ec <__umoddi3+0x2a8>
   37fa4:	00803fc4 	movi	r2,255
   37fa8:	14c15c36 	bltu	r2,r19,3851c <__umoddi3+0x5d8>
   37fac:	000b883a 	mov	r5,zero
   37fb0:	0005883a 	mov	r2,zero
   37fb4:	9884d83a 	srl	r2,r19,r2
   37fb8:	01000174 	movhi	r4,5
   37fbc:	21209504 	addi	r4,r4,-32172
   37fc0:	01800804 	movi	r6,32
   37fc4:	1105883a 	add	r2,r2,r4
   37fc8:	10c00003 	ldbu	r3,0(r2)
   37fcc:	28c7883a 	add	r3,r5,r3
   37fd0:	30e5c83a 	sub	r18,r6,r3
   37fd4:	9000a41e 	bne	r18,zero,38268 <__umoddi3+0x324>
   37fd8:	982ed43a 	srli	r23,r19,16
   37fdc:	acebc83a 	sub	r21,r21,r19
   37fe0:	9d3fffcc 	andi	r20,r19,65535
   37fe4:	002d883a 	mov	r22,zero
   37fe8:	a809883a 	mov	r4,r21
   37fec:	b80b883a 	mov	r5,r23
   37ff0:	003980c0 	call	3980c <__udivsi3>
   37ff4:	100b883a 	mov	r5,r2
   37ff8:	a009883a 	mov	r4,r20
   37ffc:	003981c0 	call	3981c <__mulsi3>
   38000:	a809883a 	mov	r4,r21
   38004:	b80b883a 	mov	r5,r23
   38008:	1023883a 	mov	r17,r2
   3800c:	00398140 	call	39814 <__umodsi3>
   38010:	1004943a 	slli	r2,r2,16
   38014:	8006d43a 	srli	r3,r16,16
   38018:	10c4b03a 	or	r2,r2,r3
   3801c:	1440032e 	bgeu	r2,r17,3802c <__umoddi3+0xe8>
   38020:	14c5883a 	add	r2,r2,r19
   38024:	14c00136 	bltu	r2,r19,3802c <__umoddi3+0xe8>
   38028:	14415836 	bltu	r2,r17,3858c <__umoddi3+0x648>
   3802c:	1463c83a 	sub	r17,r2,r17
   38030:	8809883a 	mov	r4,r17
   38034:	b80b883a 	mov	r5,r23
   38038:	003980c0 	call	3980c <__udivsi3>
   3803c:	a009883a 	mov	r4,r20
   38040:	00005306 	br	38190 <__umoddi3+0x24c>
   38044:	380d883a 	mov	r6,r7
   38048:	29c0132e 	bgeu	r5,r7,38098 <__umoddi3+0x154>
   3804c:	d9000415 	stw	r4,16(sp)
   38050:	d9400515 	stw	r5,20(sp)
   38054:	d9400417 	ldw	r5,16(sp)
   38058:	5813883a 	mov	r9,r11
   3805c:	2811883a 	mov	r8,r5
   38060:	4005883a 	mov	r2,r8
   38064:	4807883a 	mov	r3,r9
   38068:	dfc00f17 	ldw	ra,60(sp)
   3806c:	df000e17 	ldw	fp,56(sp)
   38070:	ddc00d17 	ldw	r23,52(sp)
   38074:	dd800c17 	ldw	r22,48(sp)
   38078:	dd400b17 	ldw	r21,44(sp)
   3807c:	dd000a17 	ldw	r20,40(sp)
   38080:	dcc00917 	ldw	r19,36(sp)
   38084:	dc800817 	ldw	r18,32(sp)
   38088:	dc400717 	ldw	r17,28(sp)
   3808c:	dc000617 	ldw	r16,24(sp)
   38090:	dec01004 	addi	sp,sp,64
   38094:	f800283a 	ret
   38098:	00bfffd4 	movui	r2,65535
   3809c:	11c06636 	bltu	r2,r7,38238 <__umoddi3+0x2f4>
   380a0:	00803fc4 	movi	r2,255
   380a4:	11c12036 	bltu	r2,r7,38528 <__umoddi3+0x5e4>
   380a8:	000b883a 	mov	r5,zero
   380ac:	0005883a 	mov	r2,zero
   380b0:	3084d83a 	srl	r2,r6,r2
   380b4:	01000174 	movhi	r4,5
   380b8:	21209504 	addi	r4,r4,-32172
   380bc:	01c00804 	movi	r7,32
   380c0:	1105883a 	add	r2,r2,r4
   380c4:	10c00003 	ldbu	r3,0(r2)
   380c8:	28c7883a 	add	r3,r5,r3
   380cc:	38e5c83a 	sub	r18,r7,r3
   380d0:	9000941e 	bne	r18,zero,38324 <__umoddi3+0x3e0>
   380d4:	35405e36 	bltu	r6,r21,38250 <__umoddi3+0x30c>
   380d8:	84c05d2e 	bgeu	r16,r19,38250 <__umoddi3+0x30c>
   380dc:	8011883a 	mov	r8,r16
   380e0:	a813883a 	mov	r9,r21
   380e4:	dc000415 	stw	r16,16(sp)
   380e8:	dd400515 	stw	r21,20(sp)
   380ec:	003fdc06 	br	38060 <__umoddi3+0x11c>
   380f0:	00bfffd4 	movui	r2,65535
   380f4:	12004a36 	bltu	r2,r8,38220 <__umoddi3+0x2dc>
   380f8:	00803fc4 	movi	r2,255
   380fc:	12010d36 	bltu	r2,r8,38534 <__umoddi3+0x5f0>
   38100:	000b883a 	mov	r5,zero
   38104:	0005883a 	mov	r2,zero
   38108:	9884d83a 	srl	r2,r19,r2
   3810c:	01000174 	movhi	r4,5
   38110:	21209504 	addi	r4,r4,-32172
   38114:	01800804 	movi	r6,32
   38118:	1105883a 	add	r2,r2,r4
   3811c:	10c00003 	ldbu	r3,0(r2)
   38120:	28c7883a 	add	r3,r5,r3
   38124:	30c7c83a 	sub	r3,r6,r3
   38128:	1800dc1e 	bne	r3,zero,3849c <__umoddi3+0x558>
   3812c:	002d883a 	mov	r22,zero
   38130:	982ed43a 	srli	r23,r19,16
   38134:	a809883a 	mov	r4,r21
   38138:	9cbfffcc 	andi	r18,r19,65535
   3813c:	b80b883a 	mov	r5,r23
   38140:	003980c0 	call	3980c <__udivsi3>
   38144:	100b883a 	mov	r5,r2
   38148:	9009883a 	mov	r4,r18
   3814c:	003981c0 	call	3981c <__mulsi3>
   38150:	a809883a 	mov	r4,r21
   38154:	b80b883a 	mov	r5,r23
   38158:	1023883a 	mov	r17,r2
   3815c:	00398140 	call	39814 <__umodsi3>
   38160:	1004943a 	slli	r2,r2,16
   38164:	8006d43a 	srli	r3,r16,16
   38168:	10c4b03a 	or	r2,r2,r3
   3816c:	1440032e 	bgeu	r2,r17,3817c <__umoddi3+0x238>
   38170:	14c5883a 	add	r2,r2,r19
   38174:	14c00136 	bltu	r2,r19,3817c <__umoddi3+0x238>
   38178:	14410236 	bltu	r2,r17,38584 <__umoddi3+0x640>
   3817c:	1463c83a 	sub	r17,r2,r17
   38180:	8809883a 	mov	r4,r17
   38184:	b80b883a 	mov	r5,r23
   38188:	003980c0 	call	3980c <__udivsi3>
   3818c:	9009883a 	mov	r4,r18
   38190:	100b883a 	mov	r5,r2
   38194:	003981c0 	call	3981c <__mulsi3>
   38198:	8809883a 	mov	r4,r17
   3819c:	b80b883a 	mov	r5,r23
   381a0:	102b883a 	mov	r21,r2
   381a4:	00398140 	call	39814 <__umodsi3>
   381a8:	1004943a 	slli	r2,r2,16
   381ac:	80ffffcc 	andi	r3,r16,65535
   381b0:	10c4b03a 	or	r2,r2,r3
   381b4:	1540042e 	bgeu	r2,r21,381c8 <__umoddi3+0x284>
   381b8:	14c5883a 	add	r2,r2,r19
   381bc:	14c00236 	bltu	r2,r19,381c8 <__umoddi3+0x284>
   381c0:	1540012e 	bgeu	r2,r21,381c8 <__umoddi3+0x284>
   381c4:	14c5883a 	add	r2,r2,r19
   381c8:	1545c83a 	sub	r2,r2,r21
   381cc:	1584d83a 	srl	r2,r2,r22
   381d0:	0013883a 	mov	r9,zero
   381d4:	d8800415 	stw	r2,16(sp)
   381d8:	d8c00417 	ldw	r3,16(sp)
   381dc:	0005883a 	mov	r2,zero
   381e0:	d8800515 	stw	r2,20(sp)
   381e4:	1811883a 	mov	r8,r3
   381e8:	003f9d06 	br	38060 <__umoddi3+0x11c>
   381ec:	00804034 	movhi	r2,256
   381f0:	10bfffc4 	addi	r2,r2,-1
   381f4:	14c0c636 	bltu	r2,r19,38510 <__umoddi3+0x5cc>
   381f8:	01400404 	movi	r5,16
   381fc:	2805883a 	mov	r2,r5
   38200:	003f6c06 	br	37fb4 <__umoddi3+0x70>
   38204:	01000044 	movi	r4,1
   38208:	000b883a 	mov	r5,zero
   3820c:	003980c0 	call	3980c <__udivsi3>
   38210:	1027883a 	mov	r19,r2
   38214:	00bfffd4 	movui	r2,65535
   38218:	14fff436 	bltu	r2,r19,381ec <__umoddi3+0x2a8>
   3821c:	003f6106 	br	37fa4 <__umoddi3+0x60>
   38220:	00804034 	movhi	r2,256
   38224:	10bfffc4 	addi	r2,r2,-1
   38228:	1200c536 	bltu	r2,r8,38540 <__umoddi3+0x5fc>
   3822c:	01400404 	movi	r5,16
   38230:	2805883a 	mov	r2,r5
   38234:	003fb406 	br	38108 <__umoddi3+0x1c4>
   38238:	00804034 	movhi	r2,256
   3823c:	10bfffc4 	addi	r2,r2,-1
   38240:	11c0c236 	bltu	r2,r7,3854c <__umoddi3+0x608>
   38244:	01400404 	movi	r5,16
   38248:	2805883a 	mov	r2,r5
   3824c:	003f9806 	br	380b0 <__umoddi3+0x16c>
   38250:	84c9c83a 	sub	r4,r16,r19
   38254:	8105803a 	cmpltu	r2,r16,r4
   38258:	a987c83a 	sub	r3,r21,r6
   3825c:	18abc83a 	sub	r21,r3,r2
   38260:	2021883a 	mov	r16,r4
   38264:	003f9d06 	br	380dc <__umoddi3+0x198>
   38268:	9ca6983a 	sll	r19,r19,r18
   3826c:	3485c83a 	sub	r2,r6,r18
   38270:	a8a2d83a 	srl	r17,r21,r2
   38274:	982ed43a 	srli	r23,r19,16
   38278:	ac86983a 	sll	r3,r21,r18
   3827c:	8084d83a 	srl	r2,r16,r2
   38280:	8809883a 	mov	r4,r17
   38284:	b80b883a 	mov	r5,r23
   38288:	18b8b03a 	or	fp,r3,r2
   3828c:	9d3fffcc 	andi	r20,r19,65535
   38290:	003980c0 	call	3980c <__udivsi3>
   38294:	100b883a 	mov	r5,r2
   38298:	a009883a 	mov	r4,r20
   3829c:	003981c0 	call	3981c <__mulsi3>
   382a0:	8809883a 	mov	r4,r17
   382a4:	b80b883a 	mov	r5,r23
   382a8:	102b883a 	mov	r21,r2
   382ac:	00398140 	call	39814 <__umodsi3>
   382b0:	1004943a 	slli	r2,r2,16
   382b4:	e006d43a 	srli	r3,fp,16
   382b8:	902d883a 	mov	r22,r18
   382bc:	10c4b03a 	or	r2,r2,r3
   382c0:	1540022e 	bgeu	r2,r21,382cc <__umoddi3+0x388>
   382c4:	14c5883a 	add	r2,r2,r19
   382c8:	14c0ab2e 	bgeu	r2,r19,38578 <__umoddi3+0x634>
   382cc:	1563c83a 	sub	r17,r2,r21
   382d0:	8809883a 	mov	r4,r17
   382d4:	b80b883a 	mov	r5,r23
   382d8:	003980c0 	call	3980c <__udivsi3>
   382dc:	100b883a 	mov	r5,r2
   382e0:	a009883a 	mov	r4,r20
   382e4:	003981c0 	call	3981c <__mulsi3>
   382e8:	8809883a 	mov	r4,r17
   382ec:	b80b883a 	mov	r5,r23
   382f0:	102b883a 	mov	r21,r2
   382f4:	00398140 	call	39814 <__umodsi3>
   382f8:	1004943a 	slli	r2,r2,16
   382fc:	e0ffffcc 	andi	r3,fp,65535
   38300:	10c4b03a 	or	r2,r2,r3
   38304:	1540042e 	bgeu	r2,r21,38318 <__umoddi3+0x3d4>
   38308:	14c5883a 	add	r2,r2,r19
   3830c:	14c00236 	bltu	r2,r19,38318 <__umoddi3+0x3d4>
   38310:	1540012e 	bgeu	r2,r21,38318 <__umoddi3+0x3d4>
   38314:	14c5883a 	add	r2,r2,r19
   38318:	84a0983a 	sll	r16,r16,r18
   3831c:	156bc83a 	sub	r21,r2,r21
   38320:	003f3106 	br	37fe8 <__umoddi3+0xa4>
   38324:	3c8fc83a 	sub	r7,r7,r18
   38328:	3486983a 	sll	r3,r6,r18
   3832c:	99c4d83a 	srl	r2,r19,r7
   38330:	a9e2d83a 	srl	r17,r21,r7
   38334:	ac8c983a 	sll	r6,r21,r18
   38338:	18acb03a 	or	r22,r3,r2
   3833c:	b02ed43a 	srli	r23,r22,16
   38340:	81c4d83a 	srl	r2,r16,r7
   38344:	8809883a 	mov	r4,r17
   38348:	b80b883a 	mov	r5,r23
   3834c:	308cb03a 	or	r6,r6,r2
   38350:	d9c00315 	stw	r7,12(sp)
   38354:	d9800215 	stw	r6,8(sp)
   38358:	b53fffcc 	andi	r20,r22,65535
   3835c:	003980c0 	call	3980c <__udivsi3>
   38360:	100b883a 	mov	r5,r2
   38364:	a009883a 	mov	r4,r20
   38368:	1039883a 	mov	fp,r2
   3836c:	003981c0 	call	3981c <__mulsi3>
   38370:	8809883a 	mov	r4,r17
   38374:	b80b883a 	mov	r5,r23
   38378:	102b883a 	mov	r21,r2
   3837c:	00398140 	call	39814 <__umodsi3>
   38380:	d9000217 	ldw	r4,8(sp)
   38384:	1004943a 	slli	r2,r2,16
   38388:	9ca6983a 	sll	r19,r19,r18
   3838c:	2006d43a 	srli	r3,r4,16
   38390:	84a0983a 	sll	r16,r16,r18
   38394:	dcc00015 	stw	r19,0(sp)
   38398:	10c4b03a 	or	r2,r2,r3
   3839c:	dc000115 	stw	r16,4(sp)
   383a0:	1540032e 	bgeu	r2,r21,383b0 <__umoddi3+0x46c>
   383a4:	1585883a 	add	r2,r2,r22
   383a8:	e73fffc4 	addi	fp,fp,-1
   383ac:	15806e2e 	bgeu	r2,r22,38568 <__umoddi3+0x624>
   383b0:	1563c83a 	sub	r17,r2,r21
   383b4:	8809883a 	mov	r4,r17
   383b8:	b80b883a 	mov	r5,r23
   383bc:	003980c0 	call	3980c <__udivsi3>
   383c0:	100b883a 	mov	r5,r2
   383c4:	a009883a 	mov	r4,r20
   383c8:	1021883a 	mov	r16,r2
   383cc:	003981c0 	call	3981c <__mulsi3>
   383d0:	b80b883a 	mov	r5,r23
   383d4:	8809883a 	mov	r4,r17
   383d8:	1029883a 	mov	r20,r2
   383dc:	00398140 	call	39814 <__umodsi3>
   383e0:	d9400217 	ldw	r5,8(sp)
   383e4:	1004943a 	slli	r2,r2,16
   383e8:	28ffffcc 	andi	r3,r5,65535
   383ec:	10c4b03a 	or	r2,r2,r3
   383f0:	1500032e 	bgeu	r2,r20,38400 <__umoddi3+0x4bc>
   383f4:	1585883a 	add	r2,r2,r22
   383f8:	843fffc4 	addi	r16,r16,-1
   383fc:	1580562e 	bgeu	r2,r22,38558 <__umoddi3+0x614>
   38400:	d9800017 	ldw	r6,0(sp)
   38404:	e022943a 	slli	r17,fp,16
   38408:	302ed43a 	srli	r23,r6,16
   3840c:	8462b03a 	or	r17,r16,r17
   38410:	34ffffcc 	andi	r19,r6,65535
   38414:	882ad43a 	srli	r21,r17,16
   38418:	8c7fffcc 	andi	r17,r17,65535
   3841c:	8809883a 	mov	r4,r17
   38420:	980b883a 	mov	r5,r19
   38424:	1521c83a 	sub	r16,r2,r20
   38428:	003981c0 	call	3981c <__mulsi3>
   3842c:	8809883a 	mov	r4,r17
   38430:	b80b883a 	mov	r5,r23
   38434:	1029883a 	mov	r20,r2
   38438:	003981c0 	call	3981c <__mulsi3>
   3843c:	980b883a 	mov	r5,r19
   38440:	a809883a 	mov	r4,r21
   38444:	1023883a 	mov	r17,r2
   38448:	003981c0 	call	3981c <__mulsi3>
   3844c:	a809883a 	mov	r4,r21
   38450:	b80b883a 	mov	r5,r23
   38454:	1027883a 	mov	r19,r2
   38458:	003981c0 	call	3981c <__mulsi3>
   3845c:	100b883a 	mov	r5,r2
   38460:	a004d43a 	srli	r2,r20,16
   38464:	8ce3883a 	add	r17,r17,r19
   38468:	1449883a 	add	r4,r2,r17
   3846c:	24c0022e 	bgeu	r4,r19,38478 <__umoddi3+0x534>
   38470:	00800074 	movhi	r2,1
   38474:	288b883a 	add	r5,r5,r2
   38478:	2004d43a 	srli	r2,r4,16
   3847c:	2008943a 	slli	r4,r4,16
   38480:	a0ffffcc 	andi	r3,r20,65535
   38484:	288d883a 	add	r6,r5,r2
   38488:	20c9883a 	add	r4,r4,r3
   3848c:	81800b36 	bltu	r16,r6,384bc <__umoddi3+0x578>
   38490:	81804026 	beq	r16,r6,38594 <__umoddi3+0x650>
   38494:	818dc83a 	sub	r6,r16,r6
   38498:	00000f06 	br	384d8 <__umoddi3+0x594>
   3849c:	30c5c83a 	sub	r2,r6,r3
   384a0:	182d883a 	mov	r22,r3
   384a4:	8084d83a 	srl	r2,r16,r2
   384a8:	a8c6983a 	sll	r3,r21,r3
   384ac:	9da6983a 	sll	r19,r19,r22
   384b0:	85a0983a 	sll	r16,r16,r22
   384b4:	18aab03a 	or	r21,r3,r2
   384b8:	003f1d06 	br	38130 <__umoddi3+0x1ec>
   384bc:	d8c00017 	ldw	r3,0(sp)
   384c0:	20c5c83a 	sub	r2,r4,r3
   384c4:	2089803a 	cmpltu	r4,r4,r2
   384c8:	3587c83a 	sub	r3,r6,r22
   384cc:	1907c83a 	sub	r3,r3,r4
   384d0:	80cdc83a 	sub	r6,r16,r3
   384d4:	1009883a 	mov	r4,r2
   384d8:	d9400117 	ldw	r5,4(sp)
   384dc:	2905c83a 	sub	r2,r5,r4
   384e0:	2887803a 	cmpltu	r3,r5,r2
   384e4:	30c7c83a 	sub	r3,r6,r3
   384e8:	d9800317 	ldw	r6,12(sp)
   384ec:	1484d83a 	srl	r2,r2,r18
   384f0:	1988983a 	sll	r4,r3,r6
   384f4:	1c86d83a 	srl	r3,r3,r18
   384f8:	2088b03a 	or	r4,r4,r2
   384fc:	2011883a 	mov	r8,r4
   38500:	1813883a 	mov	r9,r3
   38504:	d9000415 	stw	r4,16(sp)
   38508:	d8c00515 	stw	r3,20(sp)
   3850c:	003ed406 	br	38060 <__umoddi3+0x11c>
   38510:	01400604 	movi	r5,24
   38514:	2805883a 	mov	r2,r5
   38518:	003ea606 	br	37fb4 <__umoddi3+0x70>
   3851c:	01400204 	movi	r5,8
   38520:	2805883a 	mov	r2,r5
   38524:	003ea306 	br	37fb4 <__umoddi3+0x70>
   38528:	01400204 	movi	r5,8
   3852c:	2805883a 	mov	r2,r5
   38530:	003edf06 	br	380b0 <__umoddi3+0x16c>
   38534:	01400204 	movi	r5,8
   38538:	2805883a 	mov	r2,r5
   3853c:	003ef206 	br	38108 <__umoddi3+0x1c4>
   38540:	01400604 	movi	r5,24
   38544:	2805883a 	mov	r2,r5
   38548:	003eef06 	br	38108 <__umoddi3+0x1c4>
   3854c:	01400604 	movi	r5,24
   38550:	2805883a 	mov	r2,r5
   38554:	003ed606 	br	380b0 <__umoddi3+0x16c>
   38558:	153fa92e 	bgeu	r2,r20,38400 <__umoddi3+0x4bc>
   3855c:	843fffc4 	addi	r16,r16,-1
   38560:	1585883a 	add	r2,r2,r22
   38564:	003fa606 	br	38400 <__umoddi3+0x4bc>
   38568:	157f912e 	bgeu	r2,r21,383b0 <__umoddi3+0x46c>
   3856c:	e73fffc4 	addi	fp,fp,-1
   38570:	1585883a 	add	r2,r2,r22
   38574:	003f8e06 	br	383b0 <__umoddi3+0x46c>
   38578:	157f542e 	bgeu	r2,r21,382cc <__umoddi3+0x388>
   3857c:	14c5883a 	add	r2,r2,r19
   38580:	003f5206 	br	382cc <__umoddi3+0x388>
   38584:	14c5883a 	add	r2,r2,r19
   38588:	003efc06 	br	3817c <__umoddi3+0x238>
   3858c:	14c5883a 	add	r2,r2,r19
   38590:	003ea606 	br	3802c <__umoddi3+0xe8>
   38594:	d8800117 	ldw	r2,4(sp)
   38598:	113fc836 	bltu	r2,r4,384bc <__umoddi3+0x578>
   3859c:	000d883a 	mov	r6,zero
   385a0:	003fcd06 	br	384d8 <__umoddi3+0x594>

000385a4 <_fpadd_parts>:
   385a4:	defff804 	addi	sp,sp,-32
   385a8:	dcc00315 	stw	r19,12(sp)
   385ac:	2027883a 	mov	r19,r4
   385b0:	21000017 	ldw	r4,0(r4)
   385b4:	00c00044 	movi	r3,1
   385b8:	dd400515 	stw	r21,20(sp)
   385bc:	dd000415 	stw	r20,16(sp)
   385c0:	ddc00715 	stw	r23,28(sp)
   385c4:	dd800615 	stw	r22,24(sp)
   385c8:	dc800215 	stw	r18,8(sp)
   385cc:	dc400115 	stw	r17,4(sp)
   385d0:	dc000015 	stw	r16,0(sp)
   385d4:	282b883a 	mov	r21,r5
   385d8:	3029883a 	mov	r20,r6
   385dc:	1900632e 	bgeu	r3,r4,3876c <_fpadd_parts+0x1c8>
   385e0:	28800017 	ldw	r2,0(r5)
   385e4:	1880812e 	bgeu	r3,r2,387ec <_fpadd_parts+0x248>
   385e8:	00c00104 	movi	r3,4
   385ec:	20c0dc26 	beq	r4,r3,38960 <_fpadd_parts+0x3bc>
   385f0:	10c07e26 	beq	r2,r3,387ec <_fpadd_parts+0x248>
   385f4:	00c00084 	movi	r3,2
   385f8:	10c06726 	beq	r2,r3,38798 <_fpadd_parts+0x1f4>
   385fc:	20c07b26 	beq	r4,r3,387ec <_fpadd_parts+0x248>
   38600:	9dc00217 	ldw	r23,8(r19)
   38604:	28c00217 	ldw	r3,8(r5)
   38608:	9c400317 	ldw	r17,12(r19)
   3860c:	2bc00317 	ldw	r15,12(r5)
   38610:	b8cdc83a 	sub	r6,r23,r3
   38614:	9c800417 	ldw	r18,16(r19)
   38618:	2c000417 	ldw	r16,16(r5)
   3861c:	3009883a 	mov	r4,r6
   38620:	30009716 	blt	r6,zero,38880 <_fpadd_parts+0x2dc>
   38624:	00800fc4 	movi	r2,63
   38628:	11806b16 	blt	r2,r6,387d8 <_fpadd_parts+0x234>
   3862c:	0100a40e 	bge	zero,r4,388c0 <_fpadd_parts+0x31c>
   38630:	35bff804 	addi	r22,r6,-32
   38634:	b000bc16 	blt	r22,zero,38928 <_fpadd_parts+0x384>
   38638:	8596d83a 	srl	r11,r16,r22
   3863c:	0019883a 	mov	r12,zero
   38640:	0013883a 	mov	r9,zero
   38644:	01000044 	movi	r4,1
   38648:	0015883a 	mov	r10,zero
   3864c:	b000be16 	blt	r22,zero,38948 <_fpadd_parts+0x3a4>
   38650:	2590983a 	sll	r8,r4,r22
   38654:	000f883a 	mov	r7,zero
   38658:	00bfffc4 	movi	r2,-1
   3865c:	3889883a 	add	r4,r7,r2
   38660:	408b883a 	add	r5,r8,r2
   38664:	21cd803a 	cmpltu	r6,r4,r7
   38668:	314b883a 	add	r5,r6,r5
   3866c:	7904703a 	and	r2,r15,r4
   38670:	8146703a 	and	r3,r16,r5
   38674:	10c4b03a 	or	r2,r2,r3
   38678:	10000226 	beq	r2,zero,38684 <_fpadd_parts+0xe0>
   3867c:	02400044 	movi	r9,1
   38680:	0015883a 	mov	r10,zero
   38684:	5a5eb03a 	or	r15,r11,r9
   38688:	62a0b03a 	or	r16,r12,r10
   3868c:	99400117 	ldw	r5,4(r19)
   38690:	a8800117 	ldw	r2,4(r21)
   38694:	28806e26 	beq	r5,r2,38850 <_fpadd_parts+0x2ac>
   38698:	28006626 	beq	r5,zero,38834 <_fpadd_parts+0x290>
   3869c:	7c45c83a 	sub	r2,r15,r17
   386a0:	7889803a 	cmpltu	r4,r15,r2
   386a4:	8487c83a 	sub	r3,r16,r18
   386a8:	1909c83a 	sub	r4,r3,r4
   386ac:	100d883a 	mov	r6,r2
   386b0:	200f883a 	mov	r7,r4
   386b4:	38007716 	blt	r7,zero,38894 <_fpadd_parts+0x2f0>
   386b8:	a5c00215 	stw	r23,8(r20)
   386bc:	a1c00415 	stw	r7,16(r20)
   386c0:	a0000115 	stw	zero,4(r20)
   386c4:	a1800315 	stw	r6,12(r20)
   386c8:	a2000317 	ldw	r8,12(r20)
   386cc:	a2400417 	ldw	r9,16(r20)
   386d0:	00bfffc4 	movi	r2,-1
   386d4:	408b883a 	add	r5,r8,r2
   386d8:	2a09803a 	cmpltu	r4,r5,r8
   386dc:	488d883a 	add	r6,r9,r2
   386e0:	01c40034 	movhi	r7,4096
   386e4:	39ffffc4 	addi	r7,r7,-1
   386e8:	218d883a 	add	r6,r4,r6
   386ec:	39801736 	bltu	r7,r6,3874c <_fpadd_parts+0x1a8>
   386f0:	31c06526 	beq	r6,r7,38888 <_fpadd_parts+0x2e4>
   386f4:	a3000217 	ldw	r12,8(r20)
   386f8:	4209883a 	add	r4,r8,r8
   386fc:	00bfffc4 	movi	r2,-1
   38700:	220f803a 	cmpltu	r7,r4,r8
   38704:	4a4b883a 	add	r5,r9,r9
   38708:	394f883a 	add	r7,r7,r5
   3870c:	2095883a 	add	r10,r4,r2
   38710:	3897883a 	add	r11,r7,r2
   38714:	510d803a 	cmpltu	r6,r10,r4
   38718:	6099883a 	add	r12,r12,r2
   3871c:	32d7883a 	add	r11,r6,r11
   38720:	00840034 	movhi	r2,4096
   38724:	10bfffc4 	addi	r2,r2,-1
   38728:	2011883a 	mov	r8,r4
   3872c:	3813883a 	mov	r9,r7
   38730:	a1000315 	stw	r4,12(r20)
   38734:	a1c00415 	stw	r7,16(r20)
   38738:	a3000215 	stw	r12,8(r20)
   3873c:	12c00336 	bltu	r2,r11,3874c <_fpadd_parts+0x1a8>
   38740:	58bfed1e 	bne	r11,r2,386f8 <_fpadd_parts+0x154>
   38744:	00bfff84 	movi	r2,-2
   38748:	12bfeb2e 	bgeu	r2,r10,386f8 <_fpadd_parts+0x154>
   3874c:	a2800417 	ldw	r10,16(r20)
   38750:	008000c4 	movi	r2,3
   38754:	00c80034 	movhi	r3,8192
   38758:	18ffffc4 	addi	r3,r3,-1
   3875c:	a2400317 	ldw	r9,12(r20)
   38760:	a0800015 	stw	r2,0(r20)
   38764:	1a802336 	bltu	r3,r10,387f4 <_fpadd_parts+0x250>
   38768:	a027883a 	mov	r19,r20
   3876c:	9805883a 	mov	r2,r19
   38770:	ddc00717 	ldw	r23,28(sp)
   38774:	dd800617 	ldw	r22,24(sp)
   38778:	dd400517 	ldw	r21,20(sp)
   3877c:	dd000417 	ldw	r20,16(sp)
   38780:	dcc00317 	ldw	r19,12(sp)
   38784:	dc800217 	ldw	r18,8(sp)
   38788:	dc400117 	ldw	r17,4(sp)
   3878c:	dc000017 	ldw	r16,0(sp)
   38790:	dec00804 	addi	sp,sp,32
   38794:	f800283a 	ret
   38798:	20fff41e 	bne	r4,r3,3876c <_fpadd_parts+0x1c8>
   3879c:	31000015 	stw	r4,0(r6)
   387a0:	98800117 	ldw	r2,4(r19)
   387a4:	30800115 	stw	r2,4(r6)
   387a8:	98c00217 	ldw	r3,8(r19)
   387ac:	30c00215 	stw	r3,8(r6)
   387b0:	98800317 	ldw	r2,12(r19)
   387b4:	30800315 	stw	r2,12(r6)
   387b8:	98c00417 	ldw	r3,16(r19)
   387bc:	30c00415 	stw	r3,16(r6)
   387c0:	98800117 	ldw	r2,4(r19)
   387c4:	28c00117 	ldw	r3,4(r5)
   387c8:	3027883a 	mov	r19,r6
   387cc:	10c4703a 	and	r2,r2,r3
   387d0:	30800115 	stw	r2,4(r6)
   387d4:	003fe506 	br	3876c <_fpadd_parts+0x1c8>
   387d8:	1dc02616 	blt	r3,r23,38874 <_fpadd_parts+0x2d0>
   387dc:	0023883a 	mov	r17,zero
   387e0:	182f883a 	mov	r23,r3
   387e4:	0025883a 	mov	r18,zero
   387e8:	003fa806 	br	3868c <_fpadd_parts+0xe8>
   387ec:	a827883a 	mov	r19,r21
   387f0:	003fde06 	br	3876c <_fpadd_parts+0x1c8>
   387f4:	01800044 	movi	r6,1
   387f8:	500497fa 	slli	r2,r10,31
   387fc:	4808d07a 	srli	r4,r9,1
   38800:	518ad83a 	srl	r5,r10,r6
   38804:	a2000217 	ldw	r8,8(r20)
   38808:	1108b03a 	or	r4,r2,r4
   3880c:	0007883a 	mov	r3,zero
   38810:	4984703a 	and	r2,r9,r6
   38814:	208cb03a 	or	r6,r4,r2
   38818:	28ceb03a 	or	r7,r5,r3
   3881c:	42000044 	addi	r8,r8,1
   38820:	a027883a 	mov	r19,r20
   38824:	a1c00415 	stw	r7,16(r20)
   38828:	a2000215 	stw	r8,8(r20)
   3882c:	a1800315 	stw	r6,12(r20)
   38830:	003fce06 	br	3876c <_fpadd_parts+0x1c8>
   38834:	8bc5c83a 	sub	r2,r17,r15
   38838:	8889803a 	cmpltu	r4,r17,r2
   3883c:	9407c83a 	sub	r3,r18,r16
   38840:	1909c83a 	sub	r4,r3,r4
   38844:	100d883a 	mov	r6,r2
   38848:	200f883a 	mov	r7,r4
   3884c:	003f9906 	br	386b4 <_fpadd_parts+0x110>
   38850:	7c45883a 	add	r2,r15,r17
   38854:	13c9803a 	cmpltu	r4,r2,r15
   38858:	8487883a 	add	r3,r16,r18
   3885c:	20c9883a 	add	r4,r4,r3
   38860:	a1400115 	stw	r5,4(r20)
   38864:	a5c00215 	stw	r23,8(r20)
   38868:	a0800315 	stw	r2,12(r20)
   3886c:	a1000415 	stw	r4,16(r20)
   38870:	003fb606 	br	3874c <_fpadd_parts+0x1a8>
   38874:	001f883a 	mov	r15,zero
   38878:	0021883a 	mov	r16,zero
   3887c:	003f8306 	br	3868c <_fpadd_parts+0xe8>
   38880:	018dc83a 	sub	r6,zero,r6
   38884:	003f6706 	br	38624 <_fpadd_parts+0x80>
   38888:	00bfff84 	movi	r2,-2
   3888c:	117faf36 	bltu	r2,r5,3874c <_fpadd_parts+0x1a8>
   38890:	003f9806 	br	386f4 <_fpadd_parts+0x150>
   38894:	0005883a 	mov	r2,zero
   38898:	1189c83a 	sub	r4,r2,r6
   3889c:	1105803a 	cmpltu	r2,r2,r4
   388a0:	01cbc83a 	sub	r5,zero,r7
   388a4:	2885c83a 	sub	r2,r5,r2
   388a8:	01800044 	movi	r6,1
   388ac:	a1800115 	stw	r6,4(r20)
   388b0:	a5c00215 	stw	r23,8(r20)
   388b4:	a1000315 	stw	r4,12(r20)
   388b8:	a0800415 	stw	r2,16(r20)
   388bc:	003f8206 	br	386c8 <_fpadd_parts+0x124>
   388c0:	203f7226 	beq	r4,zero,3868c <_fpadd_parts+0xe8>
   388c4:	35bff804 	addi	r22,r6,-32
   388c8:	b9af883a 	add	r23,r23,r6
   388cc:	b0003116 	blt	r22,zero,38994 <_fpadd_parts+0x3f0>
   388d0:	959ad83a 	srl	r13,r18,r22
   388d4:	001d883a 	mov	r14,zero
   388d8:	000f883a 	mov	r7,zero
   388dc:	01000044 	movi	r4,1
   388e0:	0011883a 	mov	r8,zero
   388e4:	b0002516 	blt	r22,zero,3897c <_fpadd_parts+0x3d8>
   388e8:	2594983a 	sll	r10,r4,r22
   388ec:	0013883a 	mov	r9,zero
   388f0:	00bfffc4 	movi	r2,-1
   388f4:	4889883a 	add	r4,r9,r2
   388f8:	508b883a 	add	r5,r10,r2
   388fc:	224d803a 	cmpltu	r6,r4,r9
   38900:	314b883a 	add	r5,r6,r5
   38904:	8904703a 	and	r2,r17,r4
   38908:	9146703a 	and	r3,r18,r5
   3890c:	10c4b03a 	or	r2,r2,r3
   38910:	10000226 	beq	r2,zero,3891c <_fpadd_parts+0x378>
   38914:	01c00044 	movi	r7,1
   38918:	0011883a 	mov	r8,zero
   3891c:	69e2b03a 	or	r17,r13,r7
   38920:	7224b03a 	or	r18,r14,r8
   38924:	003f5906 	br	3868c <_fpadd_parts+0xe8>
   38928:	8407883a 	add	r3,r16,r16
   3892c:	008007c4 	movi	r2,31
   38930:	1185c83a 	sub	r2,r2,r6
   38934:	1886983a 	sll	r3,r3,r2
   38938:	7996d83a 	srl	r11,r15,r6
   3893c:	8198d83a 	srl	r12,r16,r6
   38940:	1ad6b03a 	or	r11,r3,r11
   38944:	003f3e06 	br	38640 <_fpadd_parts+0x9c>
   38948:	2006d07a 	srli	r3,r4,1
   3894c:	008007c4 	movi	r2,31
   38950:	1185c83a 	sub	r2,r2,r6
   38954:	1890d83a 	srl	r8,r3,r2
   38958:	218e983a 	sll	r7,r4,r6
   3895c:	003f3e06 	br	38658 <_fpadd_parts+0xb4>
   38960:	113f821e 	bne	r2,r4,3876c <_fpadd_parts+0x1c8>
   38964:	28c00117 	ldw	r3,4(r5)
   38968:	98800117 	ldw	r2,4(r19)
   3896c:	10ff7f26 	beq	r2,r3,3876c <_fpadd_parts+0x1c8>
   38970:	04c00174 	movhi	r19,5
   38974:	9ce09004 	addi	r19,r19,-32192
   38978:	003f7c06 	br	3876c <_fpadd_parts+0x1c8>
   3897c:	2006d07a 	srli	r3,r4,1
   38980:	008007c4 	movi	r2,31
   38984:	1185c83a 	sub	r2,r2,r6
   38988:	1894d83a 	srl	r10,r3,r2
   3898c:	2192983a 	sll	r9,r4,r6
   38990:	003fd706 	br	388f0 <_fpadd_parts+0x34c>
   38994:	9487883a 	add	r3,r18,r18
   38998:	008007c4 	movi	r2,31
   3899c:	1185c83a 	sub	r2,r2,r6
   389a0:	1886983a 	sll	r3,r3,r2
   389a4:	899ad83a 	srl	r13,r17,r6
   389a8:	919cd83a 	srl	r14,r18,r6
   389ac:	1b5ab03a 	or	r13,r3,r13
   389b0:	003fc906 	br	388d8 <_fpadd_parts+0x334>

000389b4 <__subdf3>:
   389b4:	deffea04 	addi	sp,sp,-88
   389b8:	dcc01415 	stw	r19,80(sp)
   389bc:	dcc00404 	addi	r19,sp,16
   389c0:	2011883a 	mov	r8,r4
   389c4:	2813883a 	mov	r9,r5
   389c8:	dc401315 	stw	r17,76(sp)
   389cc:	d809883a 	mov	r4,sp
   389d0:	980b883a 	mov	r5,r19
   389d4:	dc400904 	addi	r17,sp,36
   389d8:	dfc01515 	stw	ra,84(sp)
   389dc:	da400115 	stw	r9,4(sp)
   389e0:	d9c00315 	stw	r7,12(sp)
   389e4:	da000015 	stw	r8,0(sp)
   389e8:	d9800215 	stw	r6,8(sp)
   389ec:	0039d0c0 	call	39d0c <__unpack_d>
   389f0:	d9000204 	addi	r4,sp,8
   389f4:	880b883a 	mov	r5,r17
   389f8:	0039d0c0 	call	39d0c <__unpack_d>
   389fc:	d8800a17 	ldw	r2,40(sp)
   38a00:	880b883a 	mov	r5,r17
   38a04:	9809883a 	mov	r4,r19
   38a08:	d9800e04 	addi	r6,sp,56
   38a0c:	1080005c 	xori	r2,r2,1
   38a10:	d8800a15 	stw	r2,40(sp)
   38a14:	00385a40 	call	385a4 <_fpadd_parts>
   38a18:	1009883a 	mov	r4,r2
   38a1c:	00399f80 	call	399f8 <__pack_d>
   38a20:	dfc01517 	ldw	ra,84(sp)
   38a24:	dcc01417 	ldw	r19,80(sp)
   38a28:	dc401317 	ldw	r17,76(sp)
   38a2c:	dec01604 	addi	sp,sp,88
   38a30:	f800283a 	ret

00038a34 <__adddf3>:
   38a34:	deffea04 	addi	sp,sp,-88
   38a38:	dcc01415 	stw	r19,80(sp)
   38a3c:	dcc00404 	addi	r19,sp,16
   38a40:	2011883a 	mov	r8,r4
   38a44:	2813883a 	mov	r9,r5
   38a48:	dc401315 	stw	r17,76(sp)
   38a4c:	d809883a 	mov	r4,sp
   38a50:	980b883a 	mov	r5,r19
   38a54:	dc400904 	addi	r17,sp,36
   38a58:	dfc01515 	stw	ra,84(sp)
   38a5c:	da400115 	stw	r9,4(sp)
   38a60:	d9c00315 	stw	r7,12(sp)
   38a64:	da000015 	stw	r8,0(sp)
   38a68:	d9800215 	stw	r6,8(sp)
   38a6c:	0039d0c0 	call	39d0c <__unpack_d>
   38a70:	d9000204 	addi	r4,sp,8
   38a74:	880b883a 	mov	r5,r17
   38a78:	0039d0c0 	call	39d0c <__unpack_d>
   38a7c:	d9800e04 	addi	r6,sp,56
   38a80:	9809883a 	mov	r4,r19
   38a84:	880b883a 	mov	r5,r17
   38a88:	00385a40 	call	385a4 <_fpadd_parts>
   38a8c:	1009883a 	mov	r4,r2
   38a90:	00399f80 	call	399f8 <__pack_d>
   38a94:	dfc01517 	ldw	ra,84(sp)
   38a98:	dcc01417 	ldw	r19,80(sp)
   38a9c:	dc401317 	ldw	r17,76(sp)
   38aa0:	dec01604 	addi	sp,sp,88
   38aa4:	f800283a 	ret

00038aa8 <__muldf3>:
   38aa8:	deffe004 	addi	sp,sp,-128
   38aac:	dc401815 	stw	r17,96(sp)
   38ab0:	dc400404 	addi	r17,sp,16
   38ab4:	2011883a 	mov	r8,r4
   38ab8:	2813883a 	mov	r9,r5
   38abc:	dc001715 	stw	r16,92(sp)
   38ac0:	d809883a 	mov	r4,sp
   38ac4:	880b883a 	mov	r5,r17
   38ac8:	dc000904 	addi	r16,sp,36
   38acc:	dfc01f15 	stw	ra,124(sp)
   38ad0:	da400115 	stw	r9,4(sp)
   38ad4:	d9c00315 	stw	r7,12(sp)
   38ad8:	da000015 	stw	r8,0(sp)
   38adc:	d9800215 	stw	r6,8(sp)
   38ae0:	ddc01e15 	stw	r23,120(sp)
   38ae4:	dd801d15 	stw	r22,116(sp)
   38ae8:	dd401c15 	stw	r21,112(sp)
   38aec:	dd001b15 	stw	r20,108(sp)
   38af0:	dcc01a15 	stw	r19,104(sp)
   38af4:	dc801915 	stw	r18,100(sp)
   38af8:	0039d0c0 	call	39d0c <__unpack_d>
   38afc:	d9000204 	addi	r4,sp,8
   38b00:	800b883a 	mov	r5,r16
   38b04:	0039d0c0 	call	39d0c <__unpack_d>
   38b08:	d9000417 	ldw	r4,16(sp)
   38b0c:	00800044 	movi	r2,1
   38b10:	1100102e 	bgeu	r2,r4,38b54 <__muldf3+0xac>
   38b14:	d8c00917 	ldw	r3,36(sp)
   38b18:	10c0062e 	bgeu	r2,r3,38b34 <__muldf3+0x8c>
   38b1c:	00800104 	movi	r2,4
   38b20:	20800a26 	beq	r4,r2,38b4c <__muldf3+0xa4>
   38b24:	1880cc26 	beq	r3,r2,38e58 <__muldf3+0x3b0>
   38b28:	00800084 	movi	r2,2
   38b2c:	20800926 	beq	r4,r2,38b54 <__muldf3+0xac>
   38b30:	1880191e 	bne	r3,r2,38b98 <__muldf3+0xf0>
   38b34:	d8c00a17 	ldw	r3,40(sp)
   38b38:	d8800517 	ldw	r2,20(sp)
   38b3c:	8009883a 	mov	r4,r16
   38b40:	10c4c03a 	cmpne	r2,r2,r3
   38b44:	d8800a15 	stw	r2,40(sp)
   38b48:	00000706 	br	38b68 <__muldf3+0xc0>
   38b4c:	00800084 	movi	r2,2
   38b50:	1880c326 	beq	r3,r2,38e60 <__muldf3+0x3b8>
   38b54:	d8800517 	ldw	r2,20(sp)
   38b58:	d8c00a17 	ldw	r3,40(sp)
   38b5c:	8809883a 	mov	r4,r17
   38b60:	10c4c03a 	cmpne	r2,r2,r3
   38b64:	d8800515 	stw	r2,20(sp)
   38b68:	00399f80 	call	399f8 <__pack_d>
   38b6c:	dfc01f17 	ldw	ra,124(sp)
   38b70:	ddc01e17 	ldw	r23,120(sp)
   38b74:	dd801d17 	ldw	r22,116(sp)
   38b78:	dd401c17 	ldw	r21,112(sp)
   38b7c:	dd001b17 	ldw	r20,108(sp)
   38b80:	dcc01a17 	ldw	r19,104(sp)
   38b84:	dc801917 	ldw	r18,100(sp)
   38b88:	dc401817 	ldw	r17,96(sp)
   38b8c:	dc001717 	ldw	r16,92(sp)
   38b90:	dec02004 	addi	sp,sp,128
   38b94:	f800283a 	ret
   38b98:	dd800717 	ldw	r22,28(sp)
   38b9c:	dc800c17 	ldw	r18,48(sp)
   38ba0:	002b883a 	mov	r21,zero
   38ba4:	0023883a 	mov	r17,zero
   38ba8:	a80b883a 	mov	r5,r21
   38bac:	b00d883a 	mov	r6,r22
   38bb0:	880f883a 	mov	r7,r17
   38bb4:	ddc00817 	ldw	r23,32(sp)
   38bb8:	dcc00d17 	ldw	r19,52(sp)
   38bbc:	9009883a 	mov	r4,r18
   38bc0:	00398540 	call	39854 <__muldi3>
   38bc4:	001b883a 	mov	r13,zero
   38bc8:	680f883a 	mov	r7,r13
   38bcc:	b009883a 	mov	r4,r22
   38bd0:	000b883a 	mov	r5,zero
   38bd4:	980d883a 	mov	r6,r19
   38bd8:	b82d883a 	mov	r22,r23
   38bdc:	002f883a 	mov	r23,zero
   38be0:	db401615 	stw	r13,88(sp)
   38be4:	d8801315 	stw	r2,76(sp)
   38be8:	d8c01415 	stw	r3,80(sp)
   38bec:	dcc01515 	stw	r19,84(sp)
   38bf0:	00398540 	call	39854 <__muldi3>
   38bf4:	b00d883a 	mov	r6,r22
   38bf8:	000b883a 	mov	r5,zero
   38bfc:	9009883a 	mov	r4,r18
   38c00:	b80f883a 	mov	r7,r23
   38c04:	1021883a 	mov	r16,r2
   38c08:	1823883a 	mov	r17,r3
   38c0c:	00398540 	call	39854 <__muldi3>
   38c10:	8085883a 	add	r2,r16,r2
   38c14:	140d803a 	cmpltu	r6,r2,r16
   38c18:	88c7883a 	add	r3,r17,r3
   38c1c:	30cd883a 	add	r6,r6,r3
   38c20:	1029883a 	mov	r20,r2
   38c24:	302b883a 	mov	r21,r6
   38c28:	da801317 	ldw	r10,76(sp)
   38c2c:	dac01417 	ldw	r11,80(sp)
   38c30:	db001517 	ldw	r12,84(sp)
   38c34:	db401617 	ldw	r13,88(sp)
   38c38:	3440612e 	bgeu	r6,r17,38dc0 <__muldf3+0x318>
   38c3c:	0009883a 	mov	r4,zero
   38c40:	5105883a 	add	r2,r10,r4
   38c44:	128d803a 	cmpltu	r6,r2,r10
   38c48:	5d07883a 	add	r3,r11,r20
   38c4c:	30cd883a 	add	r6,r6,r3
   38c50:	0021883a 	mov	r16,zero
   38c54:	04400044 	movi	r17,1
   38c58:	1025883a 	mov	r18,r2
   38c5c:	3027883a 	mov	r19,r6
   38c60:	32c06236 	bltu	r6,r11,38dec <__muldf3+0x344>
   38c64:	59807a26 	beq	r11,r6,38e50 <__muldf3+0x3a8>
   38c68:	680b883a 	mov	r5,r13
   38c6c:	b80f883a 	mov	r7,r23
   38c70:	6009883a 	mov	r4,r12
   38c74:	b00d883a 	mov	r6,r22
   38c78:	00398540 	call	39854 <__muldi3>
   38c7c:	1009883a 	mov	r4,r2
   38c80:	000f883a 	mov	r7,zero
   38c84:	1545883a 	add	r2,r2,r21
   38c88:	1111803a 	cmpltu	r8,r2,r4
   38c8c:	19c7883a 	add	r3,r3,r7
   38c90:	40c7883a 	add	r3,r8,r3
   38c94:	88cb883a 	add	r5,r17,r3
   38c98:	d8c00617 	ldw	r3,24(sp)
   38c9c:	8089883a 	add	r4,r16,r2
   38ca0:	d8800b17 	ldw	r2,44(sp)
   38ca4:	18c00104 	addi	r3,r3,4
   38ca8:	240d803a 	cmpltu	r6,r4,r16
   38cac:	10c7883a 	add	r3,r2,r3
   38cb0:	2013883a 	mov	r9,r4
   38cb4:	d8800a17 	ldw	r2,40(sp)
   38cb8:	d9000517 	ldw	r4,20(sp)
   38cbc:	314d883a 	add	r6,r6,r5
   38cc0:	3015883a 	mov	r10,r6
   38cc4:	2088c03a 	cmpne	r4,r4,r2
   38cc8:	00880034 	movhi	r2,8192
   38ccc:	10bfffc4 	addi	r2,r2,-1
   38cd0:	d9000f15 	stw	r4,60(sp)
   38cd4:	d8c01015 	stw	r3,64(sp)
   38cd8:	1180162e 	bgeu	r2,r6,38d34 <__muldf3+0x28c>
   38cdc:	1811883a 	mov	r8,r3
   38ce0:	101f883a 	mov	r15,r2
   38ce4:	980497fa 	slli	r2,r19,31
   38ce8:	9016d07a 	srli	r11,r18,1
   38cec:	500697fa 	slli	r3,r10,31
   38cf0:	480cd07a 	srli	r6,r9,1
   38cf4:	500ed07a 	srli	r7,r10,1
   38cf8:	12d6b03a 	or	r11,r2,r11
   38cfc:	00800044 	movi	r2,1
   38d00:	198cb03a 	or	r6,r3,r6
   38d04:	4888703a 	and	r4,r9,r2
   38d08:	9818d07a 	srli	r12,r19,1
   38d0c:	001b883a 	mov	r13,zero
   38d10:	03a00034 	movhi	r14,32768
   38d14:	3013883a 	mov	r9,r6
   38d18:	3815883a 	mov	r10,r7
   38d1c:	4091883a 	add	r8,r8,r2
   38d20:	20000226 	beq	r4,zero,38d2c <__muldf3+0x284>
   38d24:	5b64b03a 	or	r18,r11,r13
   38d28:	63a6b03a 	or	r19,r12,r14
   38d2c:	7abfed36 	bltu	r15,r10,38ce4 <__muldf3+0x23c>
   38d30:	da001015 	stw	r8,64(sp)
   38d34:	00840034 	movhi	r2,4096
   38d38:	10bfffc4 	addi	r2,r2,-1
   38d3c:	12801436 	bltu	r2,r10,38d90 <__muldf3+0x2e8>
   38d40:	da001017 	ldw	r8,64(sp)
   38d44:	101f883a 	mov	r15,r2
   38d48:	4a45883a 	add	r2,r9,r9
   38d4c:	124d803a 	cmpltu	r6,r2,r9
   38d50:	5287883a 	add	r3,r10,r10
   38d54:	9497883a 	add	r11,r18,r18
   38d58:	5c8f803a 	cmpltu	r7,r11,r18
   38d5c:	9cd9883a 	add	r12,r19,r19
   38d60:	01000044 	movi	r4,1
   38d64:	30cd883a 	add	r6,r6,r3
   38d68:	3b0f883a 	add	r7,r7,r12
   38d6c:	423fffc4 	addi	r8,r8,-1
   38d70:	1013883a 	mov	r9,r2
   38d74:	3015883a 	mov	r10,r6
   38d78:	111ab03a 	or	r13,r2,r4
   38d7c:	98003016 	blt	r19,zero,38e40 <__muldf3+0x398>
   38d80:	5825883a 	mov	r18,r11
   38d84:	3827883a 	mov	r19,r7
   38d88:	7abfef2e 	bgeu	r15,r10,38d48 <__muldf3+0x2a0>
   38d8c:	da001015 	stw	r8,64(sp)
   38d90:	00803fc4 	movi	r2,255
   38d94:	488e703a 	and	r7,r9,r2
   38d98:	00802004 	movi	r2,128
   38d9c:	0007883a 	mov	r3,zero
   38da0:	0011883a 	mov	r8,zero
   38da4:	38801826 	beq	r7,r2,38e08 <__muldf3+0x360>
   38da8:	008000c4 	movi	r2,3
   38dac:	d9000e04 	addi	r4,sp,56
   38db0:	da801215 	stw	r10,72(sp)
   38db4:	d8800e15 	stw	r2,56(sp)
   38db8:	da401115 	stw	r9,68(sp)
   38dbc:	003f6a06 	br	38b68 <__muldf3+0xc0>
   38dc0:	89802126 	beq	r17,r6,38e48 <__muldf3+0x3a0>
   38dc4:	0009883a 	mov	r4,zero
   38dc8:	5105883a 	add	r2,r10,r4
   38dcc:	128d803a 	cmpltu	r6,r2,r10
   38dd0:	5d07883a 	add	r3,r11,r20
   38dd4:	30cd883a 	add	r6,r6,r3
   38dd8:	0021883a 	mov	r16,zero
   38ddc:	0023883a 	mov	r17,zero
   38de0:	1025883a 	mov	r18,r2
   38de4:	3027883a 	mov	r19,r6
   38de8:	32ff9e2e 	bgeu	r6,r11,38c64 <__muldf3+0x1bc>
   38dec:	00800044 	movi	r2,1
   38df0:	8089883a 	add	r4,r16,r2
   38df4:	240d803a 	cmpltu	r6,r4,r16
   38df8:	344d883a 	add	r6,r6,r17
   38dfc:	2021883a 	mov	r16,r4
   38e00:	3023883a 	mov	r17,r6
   38e04:	003f9806 	br	38c68 <__muldf3+0x1c0>
   38e08:	403fe71e 	bne	r8,zero,38da8 <__muldf3+0x300>
   38e0c:	01004004 	movi	r4,256
   38e10:	4904703a 	and	r2,r9,r4
   38e14:	10c4b03a 	or	r2,r2,r3
   38e18:	103fe31e 	bne	r2,zero,38da8 <__muldf3+0x300>
   38e1c:	94c4b03a 	or	r2,r18,r19
   38e20:	103fe126 	beq	r2,zero,38da8 <__muldf3+0x300>
   38e24:	49c5883a 	add	r2,r9,r7
   38e28:	1251803a 	cmpltu	r8,r2,r9
   38e2c:	4291883a 	add	r8,r8,r10
   38e30:	013fc004 	movi	r4,-256
   38e34:	1112703a 	and	r9,r2,r4
   38e38:	4015883a 	mov	r10,r8
   38e3c:	003fda06 	br	38da8 <__muldf3+0x300>
   38e40:	6813883a 	mov	r9,r13
   38e44:	003fce06 	br	38d80 <__muldf3+0x2d8>
   38e48:	143f7c36 	bltu	r2,r16,38c3c <__muldf3+0x194>
   38e4c:	003fdd06 	br	38dc4 <__muldf3+0x31c>
   38e50:	12bf852e 	bgeu	r2,r10,38c68 <__muldf3+0x1c0>
   38e54:	003fe506 	br	38dec <__muldf3+0x344>
   38e58:	00800084 	movi	r2,2
   38e5c:	20bf351e 	bne	r4,r2,38b34 <__muldf3+0x8c>
   38e60:	01000174 	movhi	r4,5
   38e64:	21209004 	addi	r4,r4,-32192
   38e68:	003f3f06 	br	38b68 <__muldf3+0xc0>

00038e6c <__divdf3>:
   38e6c:	deffed04 	addi	sp,sp,-76
   38e70:	dcc01115 	stw	r19,68(sp)
   38e74:	dcc00404 	addi	r19,sp,16
   38e78:	2011883a 	mov	r8,r4
   38e7c:	2813883a 	mov	r9,r5
   38e80:	dc000e15 	stw	r16,56(sp)
   38e84:	d809883a 	mov	r4,sp
   38e88:	980b883a 	mov	r5,r19
   38e8c:	dc000904 	addi	r16,sp,36
   38e90:	dfc01215 	stw	ra,72(sp)
   38e94:	da400115 	stw	r9,4(sp)
   38e98:	d9c00315 	stw	r7,12(sp)
   38e9c:	da000015 	stw	r8,0(sp)
   38ea0:	d9800215 	stw	r6,8(sp)
   38ea4:	dc801015 	stw	r18,64(sp)
   38ea8:	dc400f15 	stw	r17,60(sp)
   38eac:	0039d0c0 	call	39d0c <__unpack_d>
   38eb0:	d9000204 	addi	r4,sp,8
   38eb4:	800b883a 	mov	r5,r16
   38eb8:	0039d0c0 	call	39d0c <__unpack_d>
   38ebc:	d9000417 	ldw	r4,16(sp)
   38ec0:	00800044 	movi	r2,1
   38ec4:	11000b2e 	bgeu	r2,r4,38ef4 <__divdf3+0x88>
   38ec8:	d9400917 	ldw	r5,36(sp)
   38ecc:	1140762e 	bgeu	r2,r5,390a8 <__divdf3+0x23c>
   38ed0:	d8800517 	ldw	r2,20(sp)
   38ed4:	d8c00a17 	ldw	r3,40(sp)
   38ed8:	01800104 	movi	r6,4
   38edc:	10c4f03a 	xor	r2,r2,r3
   38ee0:	d8800515 	stw	r2,20(sp)
   38ee4:	21800226 	beq	r4,r6,38ef0 <__divdf3+0x84>
   38ee8:	00800084 	movi	r2,2
   38eec:	2080141e 	bne	r4,r2,38f40 <__divdf3+0xd4>
   38ef0:	29000926 	beq	r5,r4,38f18 <__divdf3+0xac>
   38ef4:	9809883a 	mov	r4,r19
   38ef8:	00399f80 	call	399f8 <__pack_d>
   38efc:	dfc01217 	ldw	ra,72(sp)
   38f00:	dcc01117 	ldw	r19,68(sp)
   38f04:	dc801017 	ldw	r18,64(sp)
   38f08:	dc400f17 	ldw	r17,60(sp)
   38f0c:	dc000e17 	ldw	r16,56(sp)
   38f10:	dec01304 	addi	sp,sp,76
   38f14:	f800283a 	ret
   38f18:	01000174 	movhi	r4,5
   38f1c:	21209004 	addi	r4,r4,-32192
   38f20:	00399f80 	call	399f8 <__pack_d>
   38f24:	dfc01217 	ldw	ra,72(sp)
   38f28:	dcc01117 	ldw	r19,68(sp)
   38f2c:	dc801017 	ldw	r18,64(sp)
   38f30:	dc400f17 	ldw	r17,60(sp)
   38f34:	dc000e17 	ldw	r16,56(sp)
   38f38:	dec01304 	addi	sp,sp,76
   38f3c:	f800283a 	ret
   38f40:	29805b26 	beq	r5,r6,390b0 <__divdf3+0x244>
   38f44:	28802d26 	beq	r5,r2,38ffc <__divdf3+0x190>
   38f48:	d8c00617 	ldw	r3,24(sp)
   38f4c:	d8800b17 	ldw	r2,44(sp)
   38f50:	d9c00817 	ldw	r7,32(sp)
   38f54:	dc400d17 	ldw	r17,52(sp)
   38f58:	188bc83a 	sub	r5,r3,r2
   38f5c:	d9800717 	ldw	r6,28(sp)
   38f60:	dc000c17 	ldw	r16,48(sp)
   38f64:	d9400615 	stw	r5,24(sp)
   38f68:	3c403836 	bltu	r7,r17,3904c <__divdf3+0x1e0>
   38f6c:	89c03626 	beq	r17,r7,39048 <__divdf3+0x1dc>
   38f70:	0015883a 	mov	r10,zero
   38f74:	001d883a 	mov	r14,zero
   38f78:	02c40034 	movhi	r11,4096
   38f7c:	001f883a 	mov	r15,zero
   38f80:	003f883a 	mov	ra,zero
   38f84:	04800f44 	movi	r18,61
   38f88:	00000f06 	br	38fc8 <__divdf3+0x15c>
   38f8c:	601d883a 	mov	r14,r12
   38f90:	681f883a 	mov	r15,r13
   38f94:	400d883a 	mov	r6,r8
   38f98:	100f883a 	mov	r7,r2
   38f9c:	3191883a 	add	r8,r6,r6
   38fa0:	5808d07a 	srli	r4,r11,1
   38fa4:	4185803a 	cmpltu	r2,r8,r6
   38fa8:	39d3883a 	add	r9,r7,r7
   38fac:	28c6b03a 	or	r3,r5,r3
   38fb0:	1245883a 	add	r2,r2,r9
   38fb4:	1815883a 	mov	r10,r3
   38fb8:	2017883a 	mov	r11,r4
   38fbc:	400d883a 	mov	r6,r8
   38fc0:	100f883a 	mov	r7,r2
   38fc4:	fc801726 	beq	ra,r18,39024 <__divdf3+0x1b8>
   38fc8:	580a97fa 	slli	r5,r11,31
   38fcc:	5006d07a 	srli	r3,r10,1
   38fd0:	ffc00044 	addi	ra,ra,1
   38fd4:	3c7ff136 	bltu	r7,r17,38f9c <__divdf3+0x130>
   38fd8:	3411c83a 	sub	r8,r6,r16
   38fdc:	3205803a 	cmpltu	r2,r6,r8
   38fe0:	3c53c83a 	sub	r9,r7,r17
   38fe4:	7298b03a 	or	r12,r14,r10
   38fe8:	7adab03a 	or	r13,r15,r11
   38fec:	4885c83a 	sub	r2,r9,r2
   38ff0:	89ffe61e 	bne	r17,r7,38f8c <__divdf3+0x120>
   38ff4:	343fe936 	bltu	r6,r16,38f9c <__divdf3+0x130>
   38ff8:	003fe406 	br	38f8c <__divdf3+0x120>
   38ffc:	9809883a 	mov	r4,r19
   39000:	d9800415 	stw	r6,16(sp)
   39004:	00399f80 	call	399f8 <__pack_d>
   39008:	dfc01217 	ldw	ra,72(sp)
   3900c:	dcc01117 	ldw	r19,68(sp)
   39010:	dc801017 	ldw	r18,64(sp)
   39014:	dc400f17 	ldw	r17,60(sp)
   39018:	dc000e17 	ldw	r16,56(sp)
   3901c:	dec01304 	addi	sp,sp,76
   39020:	f800283a 	ret
   39024:	00803fc4 	movi	r2,255
   39028:	7090703a 	and	r8,r14,r2
   3902c:	00802004 	movi	r2,128
   39030:	0007883a 	mov	r3,zero
   39034:	0013883a 	mov	r9,zero
   39038:	40800d26 	beq	r8,r2,39070 <__divdf3+0x204>
   3903c:	dbc00815 	stw	r15,32(sp)
   39040:	db800715 	stw	r14,28(sp)
   39044:	003fab06 	br	38ef4 <__divdf3+0x88>
   39048:	343fc92e 	bgeu	r6,r16,38f70 <__divdf3+0x104>
   3904c:	3185883a 	add	r2,r6,r6
   39050:	1189803a 	cmpltu	r4,r2,r6
   39054:	39c7883a 	add	r3,r7,r7
   39058:	20c9883a 	add	r4,r4,r3
   3905c:	297fffc4 	addi	r5,r5,-1
   39060:	100d883a 	mov	r6,r2
   39064:	200f883a 	mov	r7,r4
   39068:	d9400615 	stw	r5,24(sp)
   3906c:	003fc006 	br	38f70 <__divdf3+0x104>
   39070:	483ff21e 	bne	r9,zero,3903c <__divdf3+0x1d0>
   39074:	01004004 	movi	r4,256
   39078:	7104703a 	and	r2,r14,r4
   3907c:	10c4b03a 	or	r2,r2,r3
   39080:	103fee1e 	bne	r2,zero,3903c <__divdf3+0x1d0>
   39084:	31c4b03a 	or	r2,r6,r7
   39088:	103fec26 	beq	r2,zero,3903c <__divdf3+0x1d0>
   3908c:	7205883a 	add	r2,r14,r8
   39090:	1391803a 	cmpltu	r8,r2,r14
   39094:	43d1883a 	add	r8,r8,r15
   39098:	013fc004 	movi	r4,-256
   3909c:	111c703a 	and	r14,r2,r4
   390a0:	401f883a 	mov	r15,r8
   390a4:	003fe506 	br	3903c <__divdf3+0x1d0>
   390a8:	8009883a 	mov	r4,r16
   390ac:	003f9206 	br	38ef8 <__divdf3+0x8c>
   390b0:	9809883a 	mov	r4,r19
   390b4:	d8000715 	stw	zero,28(sp)
   390b8:	d8000815 	stw	zero,32(sp)
   390bc:	d8000615 	stw	zero,24(sp)
   390c0:	003f8d06 	br	38ef8 <__divdf3+0x8c>

000390c4 <__eqdf2>:
   390c4:	deffef04 	addi	sp,sp,-68
   390c8:	dc400f15 	stw	r17,60(sp)
   390cc:	dc400404 	addi	r17,sp,16
   390d0:	2005883a 	mov	r2,r4
   390d4:	2807883a 	mov	r3,r5
   390d8:	dc000e15 	stw	r16,56(sp)
   390dc:	d809883a 	mov	r4,sp
   390e0:	880b883a 	mov	r5,r17
   390e4:	dc000904 	addi	r16,sp,36
   390e8:	d8c00115 	stw	r3,4(sp)
   390ec:	d8800015 	stw	r2,0(sp)
   390f0:	d9800215 	stw	r6,8(sp)
   390f4:	dfc01015 	stw	ra,64(sp)
   390f8:	d9c00315 	stw	r7,12(sp)
   390fc:	0039d0c0 	call	39d0c <__unpack_d>
   39100:	d9000204 	addi	r4,sp,8
   39104:	800b883a 	mov	r5,r16
   39108:	0039d0c0 	call	39d0c <__unpack_d>
   3910c:	d8800417 	ldw	r2,16(sp)
   39110:	00c00044 	movi	r3,1
   39114:	180d883a 	mov	r6,r3
   39118:	1880062e 	bgeu	r3,r2,39134 <__eqdf2+0x70>
   3911c:	d8800917 	ldw	r2,36(sp)
   39120:	8809883a 	mov	r4,r17
   39124:	800b883a 	mov	r5,r16
   39128:	1880022e 	bgeu	r3,r2,39134 <__eqdf2+0x70>
   3912c:	0039e440 	call	39e44 <__fpcmp_parts_d>
   39130:	100d883a 	mov	r6,r2
   39134:	3005883a 	mov	r2,r6
   39138:	dfc01017 	ldw	ra,64(sp)
   3913c:	dc400f17 	ldw	r17,60(sp)
   39140:	dc000e17 	ldw	r16,56(sp)
   39144:	dec01104 	addi	sp,sp,68
   39148:	f800283a 	ret

0003914c <__nedf2>:
   3914c:	deffef04 	addi	sp,sp,-68
   39150:	dc400f15 	stw	r17,60(sp)
   39154:	dc400404 	addi	r17,sp,16
   39158:	2005883a 	mov	r2,r4
   3915c:	2807883a 	mov	r3,r5
   39160:	dc000e15 	stw	r16,56(sp)
   39164:	d809883a 	mov	r4,sp
   39168:	880b883a 	mov	r5,r17
   3916c:	dc000904 	addi	r16,sp,36
   39170:	d8c00115 	stw	r3,4(sp)
   39174:	d8800015 	stw	r2,0(sp)
   39178:	d9800215 	stw	r6,8(sp)
   3917c:	dfc01015 	stw	ra,64(sp)
   39180:	d9c00315 	stw	r7,12(sp)
   39184:	0039d0c0 	call	39d0c <__unpack_d>
   39188:	d9000204 	addi	r4,sp,8
   3918c:	800b883a 	mov	r5,r16
   39190:	0039d0c0 	call	39d0c <__unpack_d>
   39194:	d8800417 	ldw	r2,16(sp)
   39198:	00c00044 	movi	r3,1
   3919c:	180d883a 	mov	r6,r3
   391a0:	1880062e 	bgeu	r3,r2,391bc <__nedf2+0x70>
   391a4:	d8800917 	ldw	r2,36(sp)
   391a8:	8809883a 	mov	r4,r17
   391ac:	800b883a 	mov	r5,r16
   391b0:	1880022e 	bgeu	r3,r2,391bc <__nedf2+0x70>
   391b4:	0039e440 	call	39e44 <__fpcmp_parts_d>
   391b8:	100d883a 	mov	r6,r2
   391bc:	3005883a 	mov	r2,r6
   391c0:	dfc01017 	ldw	ra,64(sp)
   391c4:	dc400f17 	ldw	r17,60(sp)
   391c8:	dc000e17 	ldw	r16,56(sp)
   391cc:	dec01104 	addi	sp,sp,68
   391d0:	f800283a 	ret

000391d4 <__gtdf2>:
   391d4:	deffef04 	addi	sp,sp,-68
   391d8:	dc400f15 	stw	r17,60(sp)
   391dc:	dc400404 	addi	r17,sp,16
   391e0:	2005883a 	mov	r2,r4
   391e4:	2807883a 	mov	r3,r5
   391e8:	dc000e15 	stw	r16,56(sp)
   391ec:	d809883a 	mov	r4,sp
   391f0:	880b883a 	mov	r5,r17
   391f4:	dc000904 	addi	r16,sp,36
   391f8:	d8c00115 	stw	r3,4(sp)
   391fc:	d8800015 	stw	r2,0(sp)
   39200:	d9800215 	stw	r6,8(sp)
   39204:	dfc01015 	stw	ra,64(sp)
   39208:	d9c00315 	stw	r7,12(sp)
   3920c:	0039d0c0 	call	39d0c <__unpack_d>
   39210:	d9000204 	addi	r4,sp,8
   39214:	800b883a 	mov	r5,r16
   39218:	0039d0c0 	call	39d0c <__unpack_d>
   3921c:	d8800417 	ldw	r2,16(sp)
   39220:	00c00044 	movi	r3,1
   39224:	01bfffc4 	movi	r6,-1
   39228:	1880062e 	bgeu	r3,r2,39244 <__gtdf2+0x70>
   3922c:	d8800917 	ldw	r2,36(sp)
   39230:	8809883a 	mov	r4,r17
   39234:	800b883a 	mov	r5,r16
   39238:	1880022e 	bgeu	r3,r2,39244 <__gtdf2+0x70>
   3923c:	0039e440 	call	39e44 <__fpcmp_parts_d>
   39240:	100d883a 	mov	r6,r2
   39244:	3005883a 	mov	r2,r6
   39248:	dfc01017 	ldw	ra,64(sp)
   3924c:	dc400f17 	ldw	r17,60(sp)
   39250:	dc000e17 	ldw	r16,56(sp)
   39254:	dec01104 	addi	sp,sp,68
   39258:	f800283a 	ret

0003925c <__gedf2>:
   3925c:	deffef04 	addi	sp,sp,-68
   39260:	dc400f15 	stw	r17,60(sp)
   39264:	dc400404 	addi	r17,sp,16
   39268:	2005883a 	mov	r2,r4
   3926c:	2807883a 	mov	r3,r5
   39270:	dc000e15 	stw	r16,56(sp)
   39274:	d809883a 	mov	r4,sp
   39278:	880b883a 	mov	r5,r17
   3927c:	dc000904 	addi	r16,sp,36
   39280:	d8c00115 	stw	r3,4(sp)
   39284:	d8800015 	stw	r2,0(sp)
   39288:	d9800215 	stw	r6,8(sp)
   3928c:	dfc01015 	stw	ra,64(sp)
   39290:	d9c00315 	stw	r7,12(sp)
   39294:	0039d0c0 	call	39d0c <__unpack_d>
   39298:	d9000204 	addi	r4,sp,8
   3929c:	800b883a 	mov	r5,r16
   392a0:	0039d0c0 	call	39d0c <__unpack_d>
   392a4:	d8800417 	ldw	r2,16(sp)
   392a8:	00c00044 	movi	r3,1
   392ac:	01bfffc4 	movi	r6,-1
   392b0:	1880062e 	bgeu	r3,r2,392cc <__gedf2+0x70>
   392b4:	d8800917 	ldw	r2,36(sp)
   392b8:	8809883a 	mov	r4,r17
   392bc:	800b883a 	mov	r5,r16
   392c0:	1880022e 	bgeu	r3,r2,392cc <__gedf2+0x70>
   392c4:	0039e440 	call	39e44 <__fpcmp_parts_d>
   392c8:	100d883a 	mov	r6,r2
   392cc:	3005883a 	mov	r2,r6
   392d0:	dfc01017 	ldw	ra,64(sp)
   392d4:	dc400f17 	ldw	r17,60(sp)
   392d8:	dc000e17 	ldw	r16,56(sp)
   392dc:	dec01104 	addi	sp,sp,68
   392e0:	f800283a 	ret

000392e4 <__ltdf2>:
   392e4:	deffef04 	addi	sp,sp,-68
   392e8:	dc400f15 	stw	r17,60(sp)
   392ec:	dc400404 	addi	r17,sp,16
   392f0:	2005883a 	mov	r2,r4
   392f4:	2807883a 	mov	r3,r5
   392f8:	dc000e15 	stw	r16,56(sp)
   392fc:	d809883a 	mov	r4,sp
   39300:	880b883a 	mov	r5,r17
   39304:	dc000904 	addi	r16,sp,36
   39308:	d8c00115 	stw	r3,4(sp)
   3930c:	d8800015 	stw	r2,0(sp)
   39310:	d9800215 	stw	r6,8(sp)
   39314:	dfc01015 	stw	ra,64(sp)
   39318:	d9c00315 	stw	r7,12(sp)
   3931c:	0039d0c0 	call	39d0c <__unpack_d>
   39320:	d9000204 	addi	r4,sp,8
   39324:	800b883a 	mov	r5,r16
   39328:	0039d0c0 	call	39d0c <__unpack_d>
   3932c:	d8800417 	ldw	r2,16(sp)
   39330:	00c00044 	movi	r3,1
   39334:	180d883a 	mov	r6,r3
   39338:	1880062e 	bgeu	r3,r2,39354 <__ltdf2+0x70>
   3933c:	d8800917 	ldw	r2,36(sp)
   39340:	8809883a 	mov	r4,r17
   39344:	800b883a 	mov	r5,r16
   39348:	1880022e 	bgeu	r3,r2,39354 <__ltdf2+0x70>
   3934c:	0039e440 	call	39e44 <__fpcmp_parts_d>
   39350:	100d883a 	mov	r6,r2
   39354:	3005883a 	mov	r2,r6
   39358:	dfc01017 	ldw	ra,64(sp)
   3935c:	dc400f17 	ldw	r17,60(sp)
   39360:	dc000e17 	ldw	r16,56(sp)
   39364:	dec01104 	addi	sp,sp,68
   39368:	f800283a 	ret

0003936c <__floatsidf>:
   3936c:	2006d7fa 	srli	r3,r4,31
   39370:	defff604 	addi	sp,sp,-40
   39374:	008000c4 	movi	r2,3
   39378:	dfc00915 	stw	ra,36(sp)
   3937c:	dcc00815 	stw	r19,32(sp)
   39380:	dc800715 	stw	r18,28(sp)
   39384:	dc400615 	stw	r17,24(sp)
   39388:	dc000515 	stw	r16,20(sp)
   3938c:	d8800015 	stw	r2,0(sp)
   39390:	d8c00115 	stw	r3,4(sp)
   39394:	20000f1e 	bne	r4,zero,393d4 <__floatsidf+0x68>
   39398:	00800084 	movi	r2,2
   3939c:	d8800015 	stw	r2,0(sp)
   393a0:	d809883a 	mov	r4,sp
   393a4:	00399f80 	call	399f8 <__pack_d>
   393a8:	1009883a 	mov	r4,r2
   393ac:	180b883a 	mov	r5,r3
   393b0:	2005883a 	mov	r2,r4
   393b4:	2807883a 	mov	r3,r5
   393b8:	dfc00917 	ldw	ra,36(sp)
   393bc:	dcc00817 	ldw	r19,32(sp)
   393c0:	dc800717 	ldw	r18,28(sp)
   393c4:	dc400617 	ldw	r17,24(sp)
   393c8:	dc000517 	ldw	r16,20(sp)
   393cc:	dec00a04 	addi	sp,sp,40
   393d0:	f800283a 	ret
   393d4:	00800f04 	movi	r2,60
   393d8:	1807003a 	cmpeq	r3,r3,zero
   393dc:	d8800215 	stw	r2,8(sp)
   393e0:	18001126 	beq	r3,zero,39428 <__floatsidf+0xbc>
   393e4:	0027883a 	mov	r19,zero
   393e8:	2025883a 	mov	r18,r4
   393ec:	d9000315 	stw	r4,12(sp)
   393f0:	dcc00415 	stw	r19,16(sp)
   393f4:	00399780 	call	39978 <__clzsi2>
   393f8:	11000744 	addi	r4,r2,29
   393fc:	013fe80e 	bge	zero,r4,393a0 <__floatsidf+0x34>
   39400:	10bfff44 	addi	r2,r2,-3
   39404:	10000c16 	blt	r2,zero,39438 <__floatsidf+0xcc>
   39408:	90a2983a 	sll	r17,r18,r2
   3940c:	0021883a 	mov	r16,zero
   39410:	d8800217 	ldw	r2,8(sp)
   39414:	dc400415 	stw	r17,16(sp)
   39418:	dc000315 	stw	r16,12(sp)
   3941c:	1105c83a 	sub	r2,r2,r4
   39420:	d8800215 	stw	r2,8(sp)
   39424:	003fde06 	br	393a0 <__floatsidf+0x34>
   39428:	00a00034 	movhi	r2,32768
   3942c:	20800a26 	beq	r4,r2,39458 <__floatsidf+0xec>
   39430:	0109c83a 	sub	r4,zero,r4
   39434:	003feb06 	br	393e4 <__floatsidf+0x78>
   39438:	9006d07a 	srli	r3,r18,1
   3943c:	008007c4 	movi	r2,31
   39440:	1105c83a 	sub	r2,r2,r4
   39444:	1886d83a 	srl	r3,r3,r2
   39448:	9922983a 	sll	r17,r19,r4
   3944c:	9120983a 	sll	r16,r18,r4
   39450:	1c62b03a 	or	r17,r3,r17
   39454:	003fee06 	br	39410 <__floatsidf+0xa4>
   39458:	0009883a 	mov	r4,zero
   3945c:	01707834 	movhi	r5,49632
   39460:	003fd306 	br	393b0 <__floatsidf+0x44>

00039464 <__fixdfsi>:
   39464:	defff804 	addi	sp,sp,-32
   39468:	2005883a 	mov	r2,r4
   3946c:	2807883a 	mov	r3,r5
   39470:	d809883a 	mov	r4,sp
   39474:	d9400204 	addi	r5,sp,8
   39478:	d8c00115 	stw	r3,4(sp)
   3947c:	d8800015 	stw	r2,0(sp)
   39480:	dfc00715 	stw	ra,28(sp)
   39484:	0039d0c0 	call	39d0c <__unpack_d>
   39488:	d8c00217 	ldw	r3,8(sp)
   3948c:	00800084 	movi	r2,2
   39490:	1880051e 	bne	r3,r2,394a8 <__fixdfsi+0x44>
   39494:	0007883a 	mov	r3,zero
   39498:	1805883a 	mov	r2,r3
   3949c:	dfc00717 	ldw	ra,28(sp)
   394a0:	dec00804 	addi	sp,sp,32
   394a4:	f800283a 	ret
   394a8:	00800044 	movi	r2,1
   394ac:	10fff92e 	bgeu	r2,r3,39494 <__fixdfsi+0x30>
   394b0:	00800104 	movi	r2,4
   394b4:	18800426 	beq	r3,r2,394c8 <__fixdfsi+0x64>
   394b8:	d8c00417 	ldw	r3,16(sp)
   394bc:	183ff516 	blt	r3,zero,39494 <__fixdfsi+0x30>
   394c0:	00800784 	movi	r2,30
   394c4:	10c0080e 	bge	r2,r3,394e8 <__fixdfsi+0x84>
   394c8:	d8800317 	ldw	r2,12(sp)
   394cc:	1000121e 	bne	r2,zero,39518 <__fixdfsi+0xb4>
   394d0:	00e00034 	movhi	r3,32768
   394d4:	18ffffc4 	addi	r3,r3,-1
   394d8:	1805883a 	mov	r2,r3
   394dc:	dfc00717 	ldw	ra,28(sp)
   394e0:	dec00804 	addi	sp,sp,32
   394e4:	f800283a 	ret
   394e8:	00800f04 	movi	r2,60
   394ec:	10d1c83a 	sub	r8,r2,r3
   394f0:	40bff804 	addi	r2,r8,-32
   394f4:	d9800517 	ldw	r6,20(sp)
   394f8:	d9c00617 	ldw	r7,24(sp)
   394fc:	10000816 	blt	r2,zero,39520 <__fixdfsi+0xbc>
   39500:	3888d83a 	srl	r4,r7,r2
   39504:	d8800317 	ldw	r2,12(sp)
   39508:	2007883a 	mov	r3,r4
   3950c:	103fe226 	beq	r2,zero,39498 <__fixdfsi+0x34>
   39510:	0107c83a 	sub	r3,zero,r4
   39514:	003fe006 	br	39498 <__fixdfsi+0x34>
   39518:	00e00034 	movhi	r3,32768
   3951c:	003fde06 	br	39498 <__fixdfsi+0x34>
   39520:	39c7883a 	add	r3,r7,r7
   39524:	008007c4 	movi	r2,31
   39528:	1205c83a 	sub	r2,r2,r8
   3952c:	1886983a 	sll	r3,r3,r2
   39530:	3208d83a 	srl	r4,r6,r8
   39534:	1908b03a 	or	r4,r3,r4
   39538:	003ff206 	br	39504 <__fixdfsi+0xa0>

0003953c <__floatunsidf>:
   3953c:	defff204 	addi	sp,sp,-56
   39540:	dfc00d15 	stw	ra,52(sp)
   39544:	ddc00c15 	stw	r23,48(sp)
   39548:	dd800b15 	stw	r22,44(sp)
   3954c:	dd400a15 	stw	r21,40(sp)
   39550:	dd000915 	stw	r20,36(sp)
   39554:	dcc00815 	stw	r19,32(sp)
   39558:	dc800715 	stw	r18,28(sp)
   3955c:	dc400615 	stw	r17,24(sp)
   39560:	dc000515 	stw	r16,20(sp)
   39564:	d8000115 	stw	zero,4(sp)
   39568:	20000f1e 	bne	r4,zero,395a8 <__floatunsidf+0x6c>
   3956c:	00800084 	movi	r2,2
   39570:	d8800015 	stw	r2,0(sp)
   39574:	d809883a 	mov	r4,sp
   39578:	00399f80 	call	399f8 <__pack_d>
   3957c:	dfc00d17 	ldw	ra,52(sp)
   39580:	ddc00c17 	ldw	r23,48(sp)
   39584:	dd800b17 	ldw	r22,44(sp)
   39588:	dd400a17 	ldw	r21,40(sp)
   3958c:	dd000917 	ldw	r20,36(sp)
   39590:	dcc00817 	ldw	r19,32(sp)
   39594:	dc800717 	ldw	r18,28(sp)
   39598:	dc400617 	ldw	r17,24(sp)
   3959c:	dc000517 	ldw	r16,20(sp)
   395a0:	dec00e04 	addi	sp,sp,56
   395a4:	f800283a 	ret
   395a8:	008000c4 	movi	r2,3
   395ac:	00c00f04 	movi	r3,60
   395b0:	002f883a 	mov	r23,zero
   395b4:	202d883a 	mov	r22,r4
   395b8:	d8800015 	stw	r2,0(sp)
   395bc:	d8c00215 	stw	r3,8(sp)
   395c0:	d9000315 	stw	r4,12(sp)
   395c4:	ddc00415 	stw	r23,16(sp)
   395c8:	00399780 	call	39978 <__clzsi2>
   395cc:	12400744 	addi	r9,r2,29
   395d0:	48000b16 	blt	r9,zero,39600 <__floatunsidf+0xc4>
   395d4:	483fe726 	beq	r9,zero,39574 <__floatunsidf+0x38>
   395d8:	10bfff44 	addi	r2,r2,-3
   395dc:	10002e16 	blt	r2,zero,39698 <__floatunsidf+0x15c>
   395e0:	b0a2983a 	sll	r17,r22,r2
   395e4:	0021883a 	mov	r16,zero
   395e8:	d8800217 	ldw	r2,8(sp)
   395ec:	dc400415 	stw	r17,16(sp)
   395f0:	dc000315 	stw	r16,12(sp)
   395f4:	1245c83a 	sub	r2,r2,r9
   395f8:	d8800215 	stw	r2,8(sp)
   395fc:	003fdd06 	br	39574 <__floatunsidf+0x38>
   39600:	0255c83a 	sub	r10,zero,r9
   39604:	51bff804 	addi	r6,r10,-32
   39608:	30001b16 	blt	r6,zero,39678 <__floatunsidf+0x13c>
   3960c:	b9a8d83a 	srl	r20,r23,r6
   39610:	002b883a 	mov	r21,zero
   39614:	000f883a 	mov	r7,zero
   39618:	01000044 	movi	r4,1
   3961c:	0011883a 	mov	r8,zero
   39620:	30002516 	blt	r6,zero,396b8 <__floatunsidf+0x17c>
   39624:	21a6983a 	sll	r19,r4,r6
   39628:	0025883a 	mov	r18,zero
   3962c:	00bfffc4 	movi	r2,-1
   39630:	9089883a 	add	r4,r18,r2
   39634:	988b883a 	add	r5,r19,r2
   39638:	248d803a 	cmpltu	r6,r4,r18
   3963c:	314b883a 	add	r5,r6,r5
   39640:	b104703a 	and	r2,r22,r4
   39644:	b946703a 	and	r3,r23,r5
   39648:	10c4b03a 	or	r2,r2,r3
   3964c:	10000226 	beq	r2,zero,39658 <__floatunsidf+0x11c>
   39650:	01c00044 	movi	r7,1
   39654:	0011883a 	mov	r8,zero
   39658:	d9000217 	ldw	r4,8(sp)
   3965c:	a1c4b03a 	or	r2,r20,r7
   39660:	aa06b03a 	or	r3,r21,r8
   39664:	2249c83a 	sub	r4,r4,r9
   39668:	d8c00415 	stw	r3,16(sp)
   3966c:	d9000215 	stw	r4,8(sp)
   39670:	d8800315 	stw	r2,12(sp)
   39674:	003fbf06 	br	39574 <__floatunsidf+0x38>
   39678:	bdc7883a 	add	r3,r23,r23
   3967c:	008007c4 	movi	r2,31
   39680:	1285c83a 	sub	r2,r2,r10
   39684:	1886983a 	sll	r3,r3,r2
   39688:	b2a8d83a 	srl	r20,r22,r10
   3968c:	baaad83a 	srl	r21,r23,r10
   39690:	1d28b03a 	or	r20,r3,r20
   39694:	003fdf06 	br	39614 <__floatunsidf+0xd8>
   39698:	b006d07a 	srli	r3,r22,1
   3969c:	008007c4 	movi	r2,31
   396a0:	1245c83a 	sub	r2,r2,r9
   396a4:	1886d83a 	srl	r3,r3,r2
   396a8:	ba62983a 	sll	r17,r23,r9
   396ac:	b260983a 	sll	r16,r22,r9
   396b0:	1c62b03a 	or	r17,r3,r17
   396b4:	003fcc06 	br	395e8 <__floatunsidf+0xac>
   396b8:	2006d07a 	srli	r3,r4,1
   396bc:	008007c4 	movi	r2,31
   396c0:	1285c83a 	sub	r2,r2,r10
   396c4:	18a6d83a 	srl	r19,r3,r2
   396c8:	22a4983a 	sll	r18,r4,r10
   396cc:	003fd706 	br	3962c <__floatunsidf+0xf0>

000396d0 <udivmodsi4>:
   396d0:	29001b2e 	bgeu	r5,r4,39740 <udivmodsi4+0x70>
   396d4:	28001a16 	blt	r5,zero,39740 <udivmodsi4+0x70>
   396d8:	00800044 	movi	r2,1
   396dc:	0007883a 	mov	r3,zero
   396e0:	01c007c4 	movi	r7,31
   396e4:	00000306 	br	396f4 <udivmodsi4+0x24>
   396e8:	19c01326 	beq	r3,r7,39738 <udivmodsi4+0x68>
   396ec:	18c00044 	addi	r3,r3,1
   396f0:	28000416 	blt	r5,zero,39704 <udivmodsi4+0x34>
   396f4:	294b883a 	add	r5,r5,r5
   396f8:	1085883a 	add	r2,r2,r2
   396fc:	293ffa36 	bltu	r5,r4,396e8 <udivmodsi4+0x18>
   39700:	10000d26 	beq	r2,zero,39738 <udivmodsi4+0x68>
   39704:	0007883a 	mov	r3,zero
   39708:	21400236 	bltu	r4,r5,39714 <udivmodsi4+0x44>
   3970c:	2149c83a 	sub	r4,r4,r5
   39710:	1886b03a 	or	r3,r3,r2
   39714:	1004d07a 	srli	r2,r2,1
   39718:	280ad07a 	srli	r5,r5,1
   3971c:	103ffa1e 	bne	r2,zero,39708 <udivmodsi4+0x38>
   39720:	30000226 	beq	r6,zero,3972c <udivmodsi4+0x5c>
   39724:	2005883a 	mov	r2,r4
   39728:	f800283a 	ret
   3972c:	1809883a 	mov	r4,r3
   39730:	2005883a 	mov	r2,r4
   39734:	f800283a 	ret
   39738:	0007883a 	mov	r3,zero
   3973c:	003ff806 	br	39720 <udivmodsi4+0x50>
   39740:	00800044 	movi	r2,1
   39744:	0007883a 	mov	r3,zero
   39748:	003fef06 	br	39708 <udivmodsi4+0x38>

0003974c <__divsi3>:
   3974c:	defffe04 	addi	sp,sp,-8
   39750:	dc000015 	stw	r16,0(sp)
   39754:	dfc00115 	stw	ra,4(sp)
   39758:	0021883a 	mov	r16,zero
   3975c:	20000c16 	blt	r4,zero,39790 <__divsi3+0x44>
   39760:	000d883a 	mov	r6,zero
   39764:	28000e16 	blt	r5,zero,397a0 <__divsi3+0x54>
   39768:	00396d00 	call	396d0 <udivmodsi4>
   3976c:	1007883a 	mov	r3,r2
   39770:	8005003a 	cmpeq	r2,r16,zero
   39774:	1000011e 	bne	r2,zero,3977c <__divsi3+0x30>
   39778:	00c7c83a 	sub	r3,zero,r3
   3977c:	1805883a 	mov	r2,r3
   39780:	dfc00117 	ldw	ra,4(sp)
   39784:	dc000017 	ldw	r16,0(sp)
   39788:	dec00204 	addi	sp,sp,8
   3978c:	f800283a 	ret
   39790:	0109c83a 	sub	r4,zero,r4
   39794:	04000044 	movi	r16,1
   39798:	000d883a 	mov	r6,zero
   3979c:	283ff20e 	bge	r5,zero,39768 <__divsi3+0x1c>
   397a0:	014bc83a 	sub	r5,zero,r5
   397a4:	8021003a 	cmpeq	r16,r16,zero
   397a8:	003fef06 	br	39768 <__divsi3+0x1c>

000397ac <__modsi3>:
   397ac:	deffff04 	addi	sp,sp,-4
   397b0:	dfc00015 	stw	ra,0(sp)
   397b4:	01800044 	movi	r6,1
   397b8:	2807883a 	mov	r3,r5
   397bc:	20000416 	blt	r4,zero,397d0 <__modsi3+0x24>
   397c0:	28000c16 	blt	r5,zero,397f4 <__modsi3+0x48>
   397c4:	dfc00017 	ldw	ra,0(sp)
   397c8:	dec00104 	addi	sp,sp,4
   397cc:	00396d01 	jmpi	396d0 <udivmodsi4>
   397d0:	0109c83a 	sub	r4,zero,r4
   397d4:	28000b16 	blt	r5,zero,39804 <__modsi3+0x58>
   397d8:	180b883a 	mov	r5,r3
   397dc:	01800044 	movi	r6,1
   397e0:	00396d00 	call	396d0 <udivmodsi4>
   397e4:	0085c83a 	sub	r2,zero,r2
   397e8:	dfc00017 	ldw	ra,0(sp)
   397ec:	dec00104 	addi	sp,sp,4
   397f0:	f800283a 	ret
   397f4:	014bc83a 	sub	r5,zero,r5
   397f8:	dfc00017 	ldw	ra,0(sp)
   397fc:	dec00104 	addi	sp,sp,4
   39800:	00396d01 	jmpi	396d0 <udivmodsi4>
   39804:	0147c83a 	sub	r3,zero,r5
   39808:	003ff306 	br	397d8 <__modsi3+0x2c>

0003980c <__udivsi3>:
   3980c:	000d883a 	mov	r6,zero
   39810:	00396d01 	jmpi	396d0 <udivmodsi4>

00039814 <__umodsi3>:
   39814:	01800044 	movi	r6,1
   39818:	00396d01 	jmpi	396d0 <udivmodsi4>

0003981c <__mulsi3>:
   3981c:	20000a26 	beq	r4,zero,39848 <__mulsi3+0x2c>
   39820:	0007883a 	mov	r3,zero
   39824:	2080004c 	andi	r2,r4,1
   39828:	1005003a 	cmpeq	r2,r2,zero
   3982c:	2008d07a 	srli	r4,r4,1
   39830:	1000011e 	bne	r2,zero,39838 <__mulsi3+0x1c>
   39834:	1947883a 	add	r3,r3,r5
   39838:	294b883a 	add	r5,r5,r5
   3983c:	203ff91e 	bne	r4,zero,39824 <__mulsi3+0x8>
   39840:	1805883a 	mov	r2,r3
   39844:	f800283a 	ret
   39848:	0007883a 	mov	r3,zero
   3984c:	1805883a 	mov	r2,r3
   39850:	f800283a 	ret

00039854 <__muldi3>:
   39854:	defff204 	addi	sp,sp,-56
   39858:	df000c15 	stw	fp,48(sp)
   3985c:	3038d43a 	srli	fp,r6,16
   39860:	dd000815 	stw	r20,32(sp)
   39864:	dc400515 	stw	r17,20(sp)
   39868:	2028d43a 	srli	r20,r4,16
   3986c:	247fffcc 	andi	r17,r4,65535
   39870:	dc000415 	stw	r16,16(sp)
   39874:	343fffcc 	andi	r16,r6,65535
   39878:	dcc00715 	stw	r19,28(sp)
   3987c:	d9000015 	stw	r4,0(sp)
   39880:	2827883a 	mov	r19,r5
   39884:	8809883a 	mov	r4,r17
   39888:	d9400115 	stw	r5,4(sp)
   3988c:	800b883a 	mov	r5,r16
   39890:	d9800215 	stw	r6,8(sp)
   39894:	dfc00d15 	stw	ra,52(sp)
   39898:	d9c00315 	stw	r7,12(sp)
   3989c:	dd800a15 	stw	r22,40(sp)
   398a0:	dd400915 	stw	r21,36(sp)
   398a4:	302d883a 	mov	r22,r6
   398a8:	ddc00b15 	stw	r23,44(sp)
   398ac:	dc800615 	stw	r18,24(sp)
   398b0:	003981c0 	call	3981c <__mulsi3>
   398b4:	8809883a 	mov	r4,r17
   398b8:	e00b883a 	mov	r5,fp
   398bc:	102b883a 	mov	r21,r2
   398c0:	003981c0 	call	3981c <__mulsi3>
   398c4:	800b883a 	mov	r5,r16
   398c8:	a009883a 	mov	r4,r20
   398cc:	1023883a 	mov	r17,r2
   398d0:	003981c0 	call	3981c <__mulsi3>
   398d4:	a009883a 	mov	r4,r20
   398d8:	e00b883a 	mov	r5,fp
   398dc:	1021883a 	mov	r16,r2
   398e0:	003981c0 	call	3981c <__mulsi3>
   398e4:	a8ffffcc 	andi	r3,r21,65535
   398e8:	a82ad43a 	srli	r21,r21,16
   398ec:	8c23883a 	add	r17,r17,r16
   398f0:	1011883a 	mov	r8,r2
   398f4:	ac6b883a 	add	r21,r21,r17
   398f8:	a804943a 	slli	r2,r21,16
   398fc:	b009883a 	mov	r4,r22
   39900:	980b883a 	mov	r5,r19
   39904:	10c7883a 	add	r3,r2,r3
   39908:	a812d43a 	srli	r9,r21,16
   3990c:	180d883a 	mov	r6,r3
   39910:	ac00022e 	bgeu	r21,r16,3991c <__muldi3+0xc8>
   39914:	00800074 	movhi	r2,1
   39918:	4091883a 	add	r8,r8,r2
   3991c:	4267883a 	add	r19,r8,r9
   39920:	302d883a 	mov	r22,r6
   39924:	003981c0 	call	3981c <__mulsi3>
   39928:	d9400317 	ldw	r5,12(sp)
   3992c:	d9000017 	ldw	r4,0(sp)
   39930:	1023883a 	mov	r17,r2
   39934:	003981c0 	call	3981c <__mulsi3>
   39938:	14cb883a 	add	r5,r2,r19
   3993c:	894b883a 	add	r5,r17,r5
   39940:	b005883a 	mov	r2,r22
   39944:	2807883a 	mov	r3,r5
   39948:	dfc00d17 	ldw	ra,52(sp)
   3994c:	df000c17 	ldw	fp,48(sp)
   39950:	ddc00b17 	ldw	r23,44(sp)
   39954:	dd800a17 	ldw	r22,40(sp)
   39958:	dd400917 	ldw	r21,36(sp)
   3995c:	dd000817 	ldw	r20,32(sp)
   39960:	dcc00717 	ldw	r19,28(sp)
   39964:	dc800617 	ldw	r18,24(sp)
   39968:	dc400517 	ldw	r17,20(sp)
   3996c:	dc000417 	ldw	r16,16(sp)
   39970:	dec00e04 	addi	sp,sp,56
   39974:	f800283a 	ret

00039978 <__clzsi2>:
   39978:	00bfffd4 	movui	r2,65535
   3997c:	11000e36 	bltu	r2,r4,399b8 <__clzsi2+0x40>
   39980:	00803fc4 	movi	r2,255
   39984:	01400204 	movi	r5,8
   39988:	0007883a 	mov	r3,zero
   3998c:	11001036 	bltu	r2,r4,399d0 <__clzsi2+0x58>
   39990:	000b883a 	mov	r5,zero
   39994:	20c6d83a 	srl	r3,r4,r3
   39998:	00800174 	movhi	r2,5
   3999c:	10a09504 	addi	r2,r2,-32172
   399a0:	1887883a 	add	r3,r3,r2
   399a4:	18800003 	ldbu	r2,0(r3)
   399a8:	00c00804 	movi	r3,32
   399ac:	2885883a 	add	r2,r5,r2
   399b0:	1885c83a 	sub	r2,r3,r2
   399b4:	f800283a 	ret
   399b8:	01400404 	movi	r5,16
   399bc:	00804034 	movhi	r2,256
   399c0:	10bfffc4 	addi	r2,r2,-1
   399c4:	2807883a 	mov	r3,r5
   399c8:	113ff22e 	bgeu	r2,r4,39994 <__clzsi2+0x1c>
   399cc:	01400604 	movi	r5,24
   399d0:	2807883a 	mov	r3,r5
   399d4:	20c6d83a 	srl	r3,r4,r3
   399d8:	00800174 	movhi	r2,5
   399dc:	10a09504 	addi	r2,r2,-32172
   399e0:	1887883a 	add	r3,r3,r2
   399e4:	18800003 	ldbu	r2,0(r3)
   399e8:	00c00804 	movi	r3,32
   399ec:	2885883a 	add	r2,r5,r2
   399f0:	1885c83a 	sub	r2,r3,r2
   399f4:	f800283a 	ret

000399f8 <__pack_d>:
   399f8:	20c00017 	ldw	r3,0(r4)
   399fc:	defffd04 	addi	sp,sp,-12
   39a00:	dc000015 	stw	r16,0(sp)
   39a04:	dc800215 	stw	r18,8(sp)
   39a08:	dc400115 	stw	r17,4(sp)
   39a0c:	00800044 	movi	r2,1
   39a10:	22000317 	ldw	r8,12(r4)
   39a14:	001f883a 	mov	r15,zero
   39a18:	22400417 	ldw	r9,16(r4)
   39a1c:	24000117 	ldw	r16,4(r4)
   39a20:	10c0552e 	bgeu	r2,r3,39b78 <__pack_d+0x180>
   39a24:	00800104 	movi	r2,4
   39a28:	18804f26 	beq	r3,r2,39b68 <__pack_d+0x170>
   39a2c:	00800084 	movi	r2,2
   39a30:	18800226 	beq	r3,r2,39a3c <__pack_d+0x44>
   39a34:	4244b03a 	or	r2,r8,r9
   39a38:	10001a1e 	bne	r2,zero,39aa4 <__pack_d+0xac>
   39a3c:	000d883a 	mov	r6,zero
   39a40:	000f883a 	mov	r7,zero
   39a44:	0011883a 	mov	r8,zero
   39a48:	00800434 	movhi	r2,16
   39a4c:	10bfffc4 	addi	r2,r2,-1
   39a50:	301d883a 	mov	r14,r6
   39a54:	3884703a 	and	r2,r7,r2
   39a58:	400a953a 	slli	r5,r8,20
   39a5c:	79bffc2c 	andhi	r6,r15,65520
   39a60:	308cb03a 	or	r6,r6,r2
   39a64:	00e00434 	movhi	r3,32784
   39a68:	18ffffc4 	addi	r3,r3,-1
   39a6c:	800497fa 	slli	r2,r16,31
   39a70:	30c6703a 	and	r3,r6,r3
   39a74:	1946b03a 	or	r3,r3,r5
   39a78:	01600034 	movhi	r5,32768
   39a7c:	297fffc4 	addi	r5,r5,-1
   39a80:	194a703a 	and	r5,r3,r5
   39a84:	288ab03a 	or	r5,r5,r2
   39a88:	2807883a 	mov	r3,r5
   39a8c:	7005883a 	mov	r2,r14
   39a90:	dc800217 	ldw	r18,8(sp)
   39a94:	dc400117 	ldw	r17,4(sp)
   39a98:	dc000017 	ldw	r16,0(sp)
   39a9c:	dec00304 	addi	sp,sp,12
   39aa0:	f800283a 	ret
   39aa4:	21000217 	ldw	r4,8(r4)
   39aa8:	00bf0084 	movi	r2,-1022
   39aac:	20803f16 	blt	r4,r2,39bac <__pack_d+0x1b4>
   39ab0:	0080ffc4 	movi	r2,1023
   39ab4:	11002c16 	blt	r2,r4,39b68 <__pack_d+0x170>
   39ab8:	00803fc4 	movi	r2,255
   39abc:	408c703a 	and	r6,r8,r2
   39ac0:	00802004 	movi	r2,128
   39ac4:	0007883a 	mov	r3,zero
   39ac8:	000f883a 	mov	r7,zero
   39acc:	2280ffc4 	addi	r10,r4,1023
   39ad0:	30801e26 	beq	r6,r2,39b4c <__pack_d+0x154>
   39ad4:	00801fc4 	movi	r2,127
   39ad8:	4089883a 	add	r4,r8,r2
   39adc:	220d803a 	cmpltu	r6,r4,r8
   39ae0:	324d883a 	add	r6,r6,r9
   39ae4:	2011883a 	mov	r8,r4
   39ae8:	3013883a 	mov	r9,r6
   39aec:	00880034 	movhi	r2,8192
   39af0:	10bfffc4 	addi	r2,r2,-1
   39af4:	12400d36 	bltu	r2,r9,39b2c <__pack_d+0x134>
   39af8:	4804963a 	slli	r2,r9,24
   39afc:	400cd23a 	srli	r6,r8,8
   39b00:	480ed23a 	srli	r7,r9,8
   39b04:	013fffc4 	movi	r4,-1
   39b08:	118cb03a 	or	r6,r2,r6
   39b0c:	01400434 	movhi	r5,16
   39b10:	297fffc4 	addi	r5,r5,-1
   39b14:	3104703a 	and	r2,r6,r4
   39b18:	3946703a 	and	r3,r7,r5
   39b1c:	5201ffcc 	andi	r8,r10,2047
   39b20:	100d883a 	mov	r6,r2
   39b24:	180f883a 	mov	r7,r3
   39b28:	003fc706 	br	39a48 <__pack_d+0x50>
   39b2c:	480897fa 	slli	r4,r9,31
   39b30:	4004d07a 	srli	r2,r8,1
   39b34:	4806d07a 	srli	r3,r9,1
   39b38:	52800044 	addi	r10,r10,1
   39b3c:	2084b03a 	or	r2,r4,r2
   39b40:	1011883a 	mov	r8,r2
   39b44:	1813883a 	mov	r9,r3
   39b48:	003feb06 	br	39af8 <__pack_d+0x100>
   39b4c:	383fe11e 	bne	r7,zero,39ad4 <__pack_d+0xdc>
   39b50:	01004004 	movi	r4,256
   39b54:	4104703a 	and	r2,r8,r4
   39b58:	10c4b03a 	or	r2,r2,r3
   39b5c:	103fe326 	beq	r2,zero,39aec <__pack_d+0xf4>
   39b60:	3005883a 	mov	r2,r6
   39b64:	003fdc06 	br	39ad8 <__pack_d+0xe0>
   39b68:	000d883a 	mov	r6,zero
   39b6c:	000f883a 	mov	r7,zero
   39b70:	0201ffc4 	movi	r8,2047
   39b74:	003fb406 	br	39a48 <__pack_d+0x50>
   39b78:	0005883a 	mov	r2,zero
   39b7c:	00c00234 	movhi	r3,8
   39b80:	408cb03a 	or	r6,r8,r2
   39b84:	48ceb03a 	or	r7,r9,r3
   39b88:	013fffc4 	movi	r4,-1
   39b8c:	01400434 	movhi	r5,16
   39b90:	297fffc4 	addi	r5,r5,-1
   39b94:	3104703a 	and	r2,r6,r4
   39b98:	3946703a 	and	r3,r7,r5
   39b9c:	100d883a 	mov	r6,r2
   39ba0:	180f883a 	mov	r7,r3
   39ba4:	0201ffc4 	movi	r8,2047
   39ba8:	003fa706 	br	39a48 <__pack_d+0x50>
   39bac:	1109c83a 	sub	r4,r2,r4
   39bb0:	00800e04 	movi	r2,56
   39bb4:	11004316 	blt	r2,r4,39cc4 <__pack_d+0x2cc>
   39bb8:	21fff804 	addi	r7,r4,-32
   39bbc:	38004516 	blt	r7,zero,39cd4 <__pack_d+0x2dc>
   39bc0:	49d8d83a 	srl	r12,r9,r7
   39bc4:	001b883a 	mov	r13,zero
   39bc8:	0023883a 	mov	r17,zero
   39bcc:	01400044 	movi	r5,1
   39bd0:	0025883a 	mov	r18,zero
   39bd4:	38004716 	blt	r7,zero,39cf4 <__pack_d+0x2fc>
   39bd8:	29d6983a 	sll	r11,r5,r7
   39bdc:	0015883a 	mov	r10,zero
   39be0:	00bfffc4 	movi	r2,-1
   39be4:	5089883a 	add	r4,r10,r2
   39be8:	588b883a 	add	r5,r11,r2
   39bec:	228d803a 	cmpltu	r6,r4,r10
   39bf0:	314b883a 	add	r5,r6,r5
   39bf4:	4104703a 	and	r2,r8,r4
   39bf8:	4946703a 	and	r3,r9,r5
   39bfc:	10c4b03a 	or	r2,r2,r3
   39c00:	10000226 	beq	r2,zero,39c0c <__pack_d+0x214>
   39c04:	04400044 	movi	r17,1
   39c08:	0025883a 	mov	r18,zero
   39c0c:	00803fc4 	movi	r2,255
   39c10:	644eb03a 	or	r7,r12,r17
   39c14:	3892703a 	and	r9,r7,r2
   39c18:	00802004 	movi	r2,128
   39c1c:	6c90b03a 	or	r8,r13,r18
   39c20:	0015883a 	mov	r10,zero
   39c24:	48801626 	beq	r9,r2,39c80 <__pack_d+0x288>
   39c28:	01001fc4 	movi	r4,127
   39c2c:	3905883a 	add	r2,r7,r4
   39c30:	11cd803a 	cmpltu	r6,r2,r7
   39c34:	320d883a 	add	r6,r6,r8
   39c38:	100f883a 	mov	r7,r2
   39c3c:	00840034 	movhi	r2,4096
   39c40:	10bfffc4 	addi	r2,r2,-1
   39c44:	3011883a 	mov	r8,r6
   39c48:	0007883a 	mov	r3,zero
   39c4c:	11801b36 	bltu	r2,r6,39cbc <__pack_d+0x2c4>
   39c50:	4004963a 	slli	r2,r8,24
   39c54:	3808d23a 	srli	r4,r7,8
   39c58:	400ad23a 	srli	r5,r8,8
   39c5c:	1813883a 	mov	r9,r3
   39c60:	1108b03a 	or	r4,r2,r4
   39c64:	00bfffc4 	movi	r2,-1
   39c68:	00c00434 	movhi	r3,16
   39c6c:	18ffffc4 	addi	r3,r3,-1
   39c70:	208c703a 	and	r6,r4,r2
   39c74:	28ce703a 	and	r7,r5,r3
   39c78:	4a01ffcc 	andi	r8,r9,2047
   39c7c:	003f7206 	br	39a48 <__pack_d+0x50>
   39c80:	503fe91e 	bne	r10,zero,39c28 <__pack_d+0x230>
   39c84:	01004004 	movi	r4,256
   39c88:	3904703a 	and	r2,r7,r4
   39c8c:	0007883a 	mov	r3,zero
   39c90:	10c4b03a 	or	r2,r2,r3
   39c94:	10000626 	beq	r2,zero,39cb0 <__pack_d+0x2b8>
   39c98:	3a45883a 	add	r2,r7,r9
   39c9c:	11cd803a 	cmpltu	r6,r2,r7
   39ca0:	320d883a 	add	r6,r6,r8
   39ca4:	100f883a 	mov	r7,r2
   39ca8:	3011883a 	mov	r8,r6
   39cac:	0007883a 	mov	r3,zero
   39cb0:	00840034 	movhi	r2,4096
   39cb4:	10bfffc4 	addi	r2,r2,-1
   39cb8:	123fe52e 	bgeu	r2,r8,39c50 <__pack_d+0x258>
   39cbc:	00c00044 	movi	r3,1
   39cc0:	003fe306 	br	39c50 <__pack_d+0x258>
   39cc4:	0009883a 	mov	r4,zero
   39cc8:	0013883a 	mov	r9,zero
   39ccc:	000b883a 	mov	r5,zero
   39cd0:	003fe406 	br	39c64 <__pack_d+0x26c>
   39cd4:	4a47883a 	add	r3,r9,r9
   39cd8:	008007c4 	movi	r2,31
   39cdc:	1105c83a 	sub	r2,r2,r4
   39ce0:	1886983a 	sll	r3,r3,r2
   39ce4:	4118d83a 	srl	r12,r8,r4
   39ce8:	491ad83a 	srl	r13,r9,r4
   39cec:	1b18b03a 	or	r12,r3,r12
   39cf0:	003fb506 	br	39bc8 <__pack_d+0x1d0>
   39cf4:	2806d07a 	srli	r3,r5,1
   39cf8:	008007c4 	movi	r2,31
   39cfc:	1105c83a 	sub	r2,r2,r4
   39d00:	1896d83a 	srl	r11,r3,r2
   39d04:	2914983a 	sll	r10,r5,r4
   39d08:	003fb506 	br	39be0 <__pack_d+0x1e8>

00039d0c <__unpack_d>:
   39d0c:	20c00117 	ldw	r3,4(r4)
   39d10:	22400017 	ldw	r9,0(r4)
   39d14:	00800434 	movhi	r2,16
   39d18:	10bfffc4 	addi	r2,r2,-1
   39d1c:	1808d53a 	srli	r4,r3,20
   39d20:	180cd7fa 	srli	r6,r3,31
   39d24:	1894703a 	and	r10,r3,r2
   39d28:	2201ffcc 	andi	r8,r4,2047
   39d2c:	281b883a 	mov	r13,r5
   39d30:	4817883a 	mov	r11,r9
   39d34:	29800115 	stw	r6,4(r5)
   39d38:	5019883a 	mov	r12,r10
   39d3c:	40001e1e 	bne	r8,zero,39db8 <__unpack_d+0xac>
   39d40:	4a84b03a 	or	r2,r9,r10
   39d44:	10001926 	beq	r2,zero,39dac <__unpack_d+0xa0>
   39d48:	4804d63a 	srli	r2,r9,24
   39d4c:	500c923a 	slli	r6,r10,8
   39d50:	013f0084 	movi	r4,-1022
   39d54:	00c40034 	movhi	r3,4096
   39d58:	18ffffc4 	addi	r3,r3,-1
   39d5c:	118cb03a 	or	r6,r2,r6
   39d60:	008000c4 	movi	r2,3
   39d64:	480a923a 	slli	r5,r9,8
   39d68:	68800015 	stw	r2,0(r13)
   39d6c:	69000215 	stw	r4,8(r13)
   39d70:	19800b36 	bltu	r3,r6,39da0 <__unpack_d+0x94>
   39d74:	200f883a 	mov	r7,r4
   39d78:	1811883a 	mov	r8,r3
   39d7c:	2945883a 	add	r2,r5,r5
   39d80:	1149803a 	cmpltu	r4,r2,r5
   39d84:	3187883a 	add	r3,r6,r6
   39d88:	20c9883a 	add	r4,r4,r3
   39d8c:	100b883a 	mov	r5,r2
   39d90:	200d883a 	mov	r6,r4
   39d94:	39ffffc4 	addi	r7,r7,-1
   39d98:	413ff82e 	bgeu	r8,r4,39d7c <__unpack_d+0x70>
   39d9c:	69c00215 	stw	r7,8(r13)
   39da0:	69800415 	stw	r6,16(r13)
   39da4:	69400315 	stw	r5,12(r13)
   39da8:	f800283a 	ret
   39dac:	00800084 	movi	r2,2
   39db0:	28800015 	stw	r2,0(r5)
   39db4:	f800283a 	ret
   39db8:	0081ffc4 	movi	r2,2047
   39dbc:	40800f26 	beq	r8,r2,39dfc <__unpack_d+0xf0>
   39dc0:	480cd63a 	srli	r6,r9,24
   39dc4:	5006923a 	slli	r3,r10,8
   39dc8:	4804923a 	slli	r2,r9,8
   39dcc:	0009883a 	mov	r4,zero
   39dd0:	30c6b03a 	or	r3,r6,r3
   39dd4:	01440034 	movhi	r5,4096
   39dd8:	110cb03a 	or	r6,r2,r4
   39ddc:	423f0044 	addi	r8,r8,-1023
   39de0:	194eb03a 	or	r7,r3,r5
   39de4:	008000c4 	movi	r2,3
   39de8:	69c00415 	stw	r7,16(r13)
   39dec:	6a000215 	stw	r8,8(r13)
   39df0:	68800015 	stw	r2,0(r13)
   39df4:	69800315 	stw	r6,12(r13)
   39df8:	f800283a 	ret
   39dfc:	4a84b03a 	or	r2,r9,r10
   39e00:	1000031e 	bne	r2,zero,39e10 <__unpack_d+0x104>
   39e04:	00800104 	movi	r2,4
   39e08:	28800015 	stw	r2,0(r5)
   39e0c:	f800283a 	ret
   39e10:	0009883a 	mov	r4,zero
   39e14:	01400234 	movhi	r5,8
   39e18:	4904703a 	and	r2,r9,r4
   39e1c:	5146703a 	and	r3,r10,r5
   39e20:	10c4b03a 	or	r2,r2,r3
   39e24:	10000526 	beq	r2,zero,39e3c <__unpack_d+0x130>
   39e28:	00800044 	movi	r2,1
   39e2c:	68800015 	stw	r2,0(r13)
   39e30:	6b000415 	stw	r12,16(r13)
   39e34:	6ac00315 	stw	r11,12(r13)
   39e38:	f800283a 	ret
   39e3c:	68000015 	stw	zero,0(r13)
   39e40:	003ffb06 	br	39e30 <__unpack_d+0x124>

00039e44 <__fpcmp_parts_d>:
   39e44:	21800017 	ldw	r6,0(r4)
   39e48:	00c00044 	movi	r3,1
   39e4c:	19800a2e 	bgeu	r3,r6,39e78 <__fpcmp_parts_d+0x34>
   39e50:	28800017 	ldw	r2,0(r5)
   39e54:	1880082e 	bgeu	r3,r2,39e78 <__fpcmp_parts_d+0x34>
   39e58:	00c00104 	movi	r3,4
   39e5c:	30c02626 	beq	r6,r3,39ef8 <__fpcmp_parts_d+0xb4>
   39e60:	10c02226 	beq	r2,r3,39eec <__fpcmp_parts_d+0xa8>
   39e64:	00c00084 	movi	r3,2
   39e68:	30c00526 	beq	r6,r3,39e80 <__fpcmp_parts_d+0x3c>
   39e6c:	10c0071e 	bne	r2,r3,39e8c <__fpcmp_parts_d+0x48>
   39e70:	20800117 	ldw	r2,4(r4)
   39e74:	1000091e 	bne	r2,zero,39e9c <__fpcmp_parts_d+0x58>
   39e78:	00800044 	movi	r2,1
   39e7c:	f800283a 	ret
   39e80:	10c01a1e 	bne	r2,r3,39eec <__fpcmp_parts_d+0xa8>
   39e84:	0005883a 	mov	r2,zero
   39e88:	f800283a 	ret
   39e8c:	22000117 	ldw	r8,4(r4)
   39e90:	28800117 	ldw	r2,4(r5)
   39e94:	40800326 	beq	r8,r2,39ea4 <__fpcmp_parts_d+0x60>
   39e98:	403ff726 	beq	r8,zero,39e78 <__fpcmp_parts_d+0x34>
   39e9c:	00bfffc4 	movi	r2,-1
   39ea0:	f800283a 	ret
   39ea4:	20c00217 	ldw	r3,8(r4)
   39ea8:	28800217 	ldw	r2,8(r5)
   39eac:	10fffa16 	blt	r2,r3,39e98 <__fpcmp_parts_d+0x54>
   39eb0:	18800916 	blt	r3,r2,39ed8 <__fpcmp_parts_d+0x94>
   39eb4:	21c00417 	ldw	r7,16(r4)
   39eb8:	28c00417 	ldw	r3,16(r5)
   39ebc:	21800317 	ldw	r6,12(r4)
   39ec0:	28800317 	ldw	r2,12(r5)
   39ec4:	19fff436 	bltu	r3,r7,39e98 <__fpcmp_parts_d+0x54>
   39ec8:	38c00526 	beq	r7,r3,39ee0 <__fpcmp_parts_d+0x9c>
   39ecc:	38c00236 	bltu	r7,r3,39ed8 <__fpcmp_parts_d+0x94>
   39ed0:	19ffec1e 	bne	r3,r7,39e84 <__fpcmp_parts_d+0x40>
   39ed4:	30bfeb2e 	bgeu	r6,r2,39e84 <__fpcmp_parts_d+0x40>
   39ed8:	403fe71e 	bne	r8,zero,39e78 <__fpcmp_parts_d+0x34>
   39edc:	003fef06 	br	39e9c <__fpcmp_parts_d+0x58>
   39ee0:	11bffa2e 	bgeu	r2,r6,39ecc <__fpcmp_parts_d+0x88>
   39ee4:	403fe426 	beq	r8,zero,39e78 <__fpcmp_parts_d+0x34>
   39ee8:	003fec06 	br	39e9c <__fpcmp_parts_d+0x58>
   39eec:	28800117 	ldw	r2,4(r5)
   39ef0:	103fe11e 	bne	r2,zero,39e78 <__fpcmp_parts_d+0x34>
   39ef4:	003fe906 	br	39e9c <__fpcmp_parts_d+0x58>
   39ef8:	11bfdd1e 	bne	r2,r6,39e70 <__fpcmp_parts_d+0x2c>
   39efc:	28c00117 	ldw	r3,4(r5)
   39f00:	20800117 	ldw	r2,4(r4)
   39f04:	1885c83a 	sub	r2,r3,r2
   39f08:	f800283a 	ret

00039f0c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   39f0c:	defff804 	addi	sp,sp,-32
   39f10:	dfc00715 	stw	ra,28(sp)
   39f14:	df000615 	stw	fp,24(sp)
   39f18:	df000604 	addi	fp,sp,24
   39f1c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   39f20:	e0bffc17 	ldw	r2,-16(fp)
   39f24:	1004803a 	cmplt	r2,r2,zero
   39f28:	1000091e 	bne	r2,zero,39f50 <close+0x44>
   39f2c:	e13ffc17 	ldw	r4,-16(fp)
   39f30:	01400304 	movi	r5,12
   39f34:	003981c0 	call	3981c <__mulsi3>
   39f38:	1007883a 	mov	r3,r2
   39f3c:	00800174 	movhi	r2,5
   39f40:	10a2ef04 	addi	r2,r2,-29764
   39f44:	1887883a 	add	r3,r3,r2
   39f48:	e0ffff15 	stw	r3,-4(fp)
   39f4c:	00000106 	br	39f54 <close+0x48>
   39f50:	e03fff15 	stw	zero,-4(fp)
   39f54:	e0bfff17 	ldw	r2,-4(fp)
   39f58:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   39f5c:	e0bffb17 	ldw	r2,-20(fp)
   39f60:	1005003a 	cmpeq	r2,r2,zero
   39f64:	10001d1e 	bne	r2,zero,39fdc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   39f68:	e0bffb17 	ldw	r2,-20(fp)
   39f6c:	10800017 	ldw	r2,0(r2)
   39f70:	10800417 	ldw	r2,16(r2)
   39f74:	1005003a 	cmpeq	r2,r2,zero
   39f78:	1000071e 	bne	r2,zero,39f98 <close+0x8c>
   39f7c:	e0bffb17 	ldw	r2,-20(fp)
   39f80:	10800017 	ldw	r2,0(r2)
   39f84:	10800417 	ldw	r2,16(r2)
   39f88:	e13ffb17 	ldw	r4,-20(fp)
   39f8c:	103ee83a 	callr	r2
   39f90:	e0bffe15 	stw	r2,-8(fp)
   39f94:	00000106 	br	39f9c <close+0x90>
   39f98:	e03ffe15 	stw	zero,-8(fp)
   39f9c:	e0bffe17 	ldw	r2,-8(fp)
   39fa0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   39fa4:	e13ffc17 	ldw	r4,-16(fp)
   39fa8:	003a7640 	call	3a764 <alt_release_fd>
    if (rval < 0)
   39fac:	e0bffa17 	ldw	r2,-24(fp)
   39fb0:	1004403a 	cmpge	r2,r2,zero
   39fb4:	1000071e 	bne	r2,zero,39fd4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   39fb8:	003a00c0 	call	3a00c <alt_get_errno>
   39fbc:	e0fffa17 	ldw	r3,-24(fp)
   39fc0:	00c7c83a 	sub	r3,zero,r3
   39fc4:	10c00015 	stw	r3,0(r2)
      return -1;
   39fc8:	00bfffc4 	movi	r2,-1
   39fcc:	e0bffd15 	stw	r2,-12(fp)
   39fd0:	00000806 	br	39ff4 <close+0xe8>
    }
    return 0;
   39fd4:	e03ffd15 	stw	zero,-12(fp)
   39fd8:	00000606 	br	39ff4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39fdc:	003a00c0 	call	3a00c <alt_get_errno>
   39fe0:	1007883a 	mov	r3,r2
   39fe4:	00801444 	movi	r2,81
   39fe8:	18800015 	stw	r2,0(r3)
    return -1;
   39fec:	00bfffc4 	movi	r2,-1
   39ff0:	e0bffd15 	stw	r2,-12(fp)
   39ff4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   39ff8:	e037883a 	mov	sp,fp
   39ffc:	dfc00117 	ldw	ra,4(sp)
   3a000:	df000017 	ldw	fp,0(sp)
   3a004:	dec00204 	addi	sp,sp,8
   3a008:	f800283a 	ret

0003a00c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a00c:	defffd04 	addi	sp,sp,-12
   3a010:	dfc00215 	stw	ra,8(sp)
   3a014:	df000115 	stw	fp,4(sp)
   3a018:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a01c:	00800174 	movhi	r2,5
   3a020:	10a77204 	addi	r2,r2,-25144
   3a024:	10800017 	ldw	r2,0(r2)
   3a028:	1005003a 	cmpeq	r2,r2,zero
   3a02c:	1000061e 	bne	r2,zero,3a048 <alt_get_errno+0x3c>
   3a030:	00800174 	movhi	r2,5
   3a034:	10a77204 	addi	r2,r2,-25144
   3a038:	10800017 	ldw	r2,0(r2)
   3a03c:	103ee83a 	callr	r2
   3a040:	e0bfff15 	stw	r2,-4(fp)
   3a044:	00000306 	br	3a054 <alt_get_errno+0x48>
   3a048:	00800174 	movhi	r2,5
   3a04c:	10a78204 	addi	r2,r2,-25080
   3a050:	e0bfff15 	stw	r2,-4(fp)
   3a054:	e0bfff17 	ldw	r2,-4(fp)
}
   3a058:	e037883a 	mov	sp,fp
   3a05c:	dfc00117 	ldw	ra,4(sp)
   3a060:	df000017 	ldw	fp,0(sp)
   3a064:	dec00204 	addi	sp,sp,8
   3a068:	f800283a 	ret

0003a06c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   3a06c:	defffc04 	addi	sp,sp,-16
   3a070:	df000315 	stw	fp,12(sp)
   3a074:	df000304 	addi	fp,sp,12
   3a078:	e13ffd15 	stw	r4,-12(fp)
   3a07c:	e17ffe15 	stw	r5,-8(fp)
   3a080:	e1bfff15 	stw	r6,-4(fp)
  return len;
   3a084:	e0bfff17 	ldw	r2,-4(fp)
}
   3a088:	e037883a 	mov	sp,fp
   3a08c:	df000017 	ldw	fp,0(sp)
   3a090:	dec00104 	addi	sp,sp,4
   3a094:	f800283a 	ret

0003a098 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   3a098:	defff904 	addi	sp,sp,-28
   3a09c:	dfc00615 	stw	ra,24(sp)
   3a0a0:	df000515 	stw	fp,20(sp)
   3a0a4:	df000504 	addi	fp,sp,20
   3a0a8:	e13ffc15 	stw	r4,-16(fp)
   3a0ac:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a0b0:	e0bffc17 	ldw	r2,-16(fp)
   3a0b4:	1004803a 	cmplt	r2,r2,zero
   3a0b8:	1000091e 	bne	r2,zero,3a0e0 <fstat+0x48>
   3a0bc:	e13ffc17 	ldw	r4,-16(fp)
   3a0c0:	01400304 	movi	r5,12
   3a0c4:	003981c0 	call	3981c <__mulsi3>
   3a0c8:	1007883a 	mov	r3,r2
   3a0cc:	00800174 	movhi	r2,5
   3a0d0:	10a2ef04 	addi	r2,r2,-29764
   3a0d4:	1887883a 	add	r3,r3,r2
   3a0d8:	e0ffff15 	stw	r3,-4(fp)
   3a0dc:	00000106 	br	3a0e4 <fstat+0x4c>
   3a0e0:	e03fff15 	stw	zero,-4(fp)
   3a0e4:	e0bfff17 	ldw	r2,-4(fp)
   3a0e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3a0ec:	e0bffb17 	ldw	r2,-20(fp)
   3a0f0:	1005003a 	cmpeq	r2,r2,zero
   3a0f4:	1000121e 	bne	r2,zero,3a140 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   3a0f8:	e0bffb17 	ldw	r2,-20(fp)
   3a0fc:	10800017 	ldw	r2,0(r2)
   3a100:	10800817 	ldw	r2,32(r2)
   3a104:	1005003a 	cmpeq	r2,r2,zero
   3a108:	1000081e 	bne	r2,zero,3a12c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   3a10c:	e0bffb17 	ldw	r2,-20(fp)
   3a110:	10800017 	ldw	r2,0(r2)
   3a114:	10800817 	ldw	r2,32(r2)
   3a118:	e13ffb17 	ldw	r4,-20(fp)
   3a11c:	e17ffd17 	ldw	r5,-12(fp)
   3a120:	103ee83a 	callr	r2
   3a124:	e0bffe15 	stw	r2,-8(fp)
   3a128:	00000b06 	br	3a158 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   3a12c:	e0fffd17 	ldw	r3,-12(fp)
   3a130:	00880004 	movi	r2,8192
   3a134:	18800115 	stw	r2,4(r3)
      return 0;
   3a138:	e03ffe15 	stw	zero,-8(fp)
   3a13c:	00000606 	br	3a158 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   3a140:	003a1700 	call	3a170 <alt_get_errno>
   3a144:	1007883a 	mov	r3,r2
   3a148:	00801444 	movi	r2,81
   3a14c:	18800015 	stw	r2,0(r3)
    return -1;
   3a150:	00bfffc4 	movi	r2,-1
   3a154:	e0bffe15 	stw	r2,-8(fp)
   3a158:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   3a15c:	e037883a 	mov	sp,fp
   3a160:	dfc00117 	ldw	ra,4(sp)
   3a164:	df000017 	ldw	fp,0(sp)
   3a168:	dec00204 	addi	sp,sp,8
   3a16c:	f800283a 	ret

0003a170 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a170:	defffd04 	addi	sp,sp,-12
   3a174:	dfc00215 	stw	ra,8(sp)
   3a178:	df000115 	stw	fp,4(sp)
   3a17c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a180:	00800174 	movhi	r2,5
   3a184:	10a77204 	addi	r2,r2,-25144
   3a188:	10800017 	ldw	r2,0(r2)
   3a18c:	1005003a 	cmpeq	r2,r2,zero
   3a190:	1000061e 	bne	r2,zero,3a1ac <alt_get_errno+0x3c>
   3a194:	00800174 	movhi	r2,5
   3a198:	10a77204 	addi	r2,r2,-25144
   3a19c:	10800017 	ldw	r2,0(r2)
   3a1a0:	103ee83a 	callr	r2
   3a1a4:	e0bfff15 	stw	r2,-4(fp)
   3a1a8:	00000306 	br	3a1b8 <alt_get_errno+0x48>
   3a1ac:	00800174 	movhi	r2,5
   3a1b0:	10a78204 	addi	r2,r2,-25080
   3a1b4:	e0bfff15 	stw	r2,-4(fp)
   3a1b8:	e0bfff17 	ldw	r2,-4(fp)
}
   3a1bc:	e037883a 	mov	sp,fp
   3a1c0:	dfc00117 	ldw	ra,4(sp)
   3a1c4:	df000017 	ldw	fp,0(sp)
   3a1c8:	dec00204 	addi	sp,sp,8
   3a1cc:	f800283a 	ret

0003a1d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   3a1d0:	deffeb04 	addi	sp,sp,-84
   3a1d4:	dfc01415 	stw	ra,80(sp)
   3a1d8:	df001315 	stw	fp,76(sp)
   3a1dc:	df001304 	addi	fp,sp,76
   3a1e0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a1e4:	e0bffd17 	ldw	r2,-12(fp)
   3a1e8:	1004803a 	cmplt	r2,r2,zero
   3a1ec:	1000091e 	bne	r2,zero,3a214 <isatty+0x44>
   3a1f0:	e13ffd17 	ldw	r4,-12(fp)
   3a1f4:	01400304 	movi	r5,12
   3a1f8:	003981c0 	call	3981c <__mulsi3>
   3a1fc:	1007883a 	mov	r3,r2
   3a200:	00800174 	movhi	r2,5
   3a204:	10a2ef04 	addi	r2,r2,-29764
   3a208:	1887883a 	add	r3,r3,r2
   3a20c:	e0ffff15 	stw	r3,-4(fp)
   3a210:	00000106 	br	3a218 <isatty+0x48>
   3a214:	e03fff15 	stw	zero,-4(fp)
   3a218:	e0bfff17 	ldw	r2,-4(fp)
   3a21c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   3a220:	e0bfed17 	ldw	r2,-76(fp)
   3a224:	1005003a 	cmpeq	r2,r2,zero
   3a228:	10000f1e 	bne	r2,zero,3a268 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   3a22c:	e0bfed17 	ldw	r2,-76(fp)
   3a230:	10800017 	ldw	r2,0(r2)
   3a234:	10800817 	ldw	r2,32(r2)
   3a238:	1004c03a 	cmpne	r2,r2,zero
   3a23c:	1000031e 	bne	r2,zero,3a24c <isatty+0x7c>
    {
      return 1;
   3a240:	00800044 	movi	r2,1
   3a244:	e0bffe15 	stw	r2,-8(fp)
   3a248:	00000c06 	br	3a27c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   3a24c:	e17fee04 	addi	r5,fp,-72
   3a250:	e13ffd17 	ldw	r4,-12(fp)
   3a254:	003a0980 	call	3a098 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   3a258:	e0bfef17 	ldw	r2,-68(fp)
   3a25c:	10880020 	cmpeqi	r2,r2,8192
   3a260:	e0bffe15 	stw	r2,-8(fp)
   3a264:	00000506 	br	3a27c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   3a268:	003a2940 	call	3a294 <alt_get_errno>
   3a26c:	1007883a 	mov	r3,r2
   3a270:	00801444 	movi	r2,81
   3a274:	18800015 	stw	r2,0(r3)
    return 0;
   3a278:	e03ffe15 	stw	zero,-8(fp)
   3a27c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   3a280:	e037883a 	mov	sp,fp
   3a284:	dfc00117 	ldw	ra,4(sp)
   3a288:	df000017 	ldw	fp,0(sp)
   3a28c:	dec00204 	addi	sp,sp,8
   3a290:	f800283a 	ret

0003a294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a294:	defffd04 	addi	sp,sp,-12
   3a298:	dfc00215 	stw	ra,8(sp)
   3a29c:	df000115 	stw	fp,4(sp)
   3a2a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a2a4:	00800174 	movhi	r2,5
   3a2a8:	10a77204 	addi	r2,r2,-25144
   3a2ac:	10800017 	ldw	r2,0(r2)
   3a2b0:	1005003a 	cmpeq	r2,r2,zero
   3a2b4:	1000061e 	bne	r2,zero,3a2d0 <alt_get_errno+0x3c>
   3a2b8:	00800174 	movhi	r2,5
   3a2bc:	10a77204 	addi	r2,r2,-25144
   3a2c0:	10800017 	ldw	r2,0(r2)
   3a2c4:	103ee83a 	callr	r2
   3a2c8:	e0bfff15 	stw	r2,-4(fp)
   3a2cc:	00000306 	br	3a2dc <alt_get_errno+0x48>
   3a2d0:	00800174 	movhi	r2,5
   3a2d4:	10a78204 	addi	r2,r2,-25080
   3a2d8:	e0bfff15 	stw	r2,-4(fp)
   3a2dc:	e0bfff17 	ldw	r2,-4(fp)
}
   3a2e0:	e037883a 	mov	sp,fp
   3a2e4:	dfc00117 	ldw	ra,4(sp)
   3a2e8:	df000017 	ldw	fp,0(sp)
   3a2ec:	dec00204 	addi	sp,sp,8
   3a2f0:	f800283a 	ret

0003a2f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   3a2f4:	defffe04 	addi	sp,sp,-8
   3a2f8:	dfc00115 	stw	ra,4(sp)
   3a2fc:	df000015 	stw	fp,0(sp)
   3a300:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   3a304:	01000134 	movhi	r4,4
   3a308:	21327c04 	addi	r4,r4,-13840
   3a30c:	01400174 	movhi	r5,5
   3a310:	2960e004 	addi	r5,r5,-31872
   3a314:	01800174 	movhi	r6,5
   3a318:	31a77704 	addi	r6,r6,-25124
   3a31c:	003a3740 	call	3a374 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   3a320:	010000f4 	movhi	r4,3
   3a324:	21000804 	addi	r4,r4,32
   3a328:	014000f4 	movhi	r5,3
   3a32c:	29400804 	addi	r5,r5,32
   3a330:	018000f4 	movhi	r6,3
   3a334:	31806d04 	addi	r6,r6,436
   3a338:	003a3740 	call	3a374 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   3a33c:	01000174 	movhi	r4,5
   3a340:	21200004 	addi	r4,r4,-32768
   3a344:	01400174 	movhi	r5,5
   3a348:	29600004 	addi	r5,r5,-32768
   3a34c:	01800174 	movhi	r6,5
   3a350:	31a0e004 	addi	r6,r6,-31872
   3a354:	003a3740 	call	3a374 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   3a358:	003b7e40 	call	3b7e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   3a35c:	003b9dc0 	call	3b9dc <alt_icache_flush_all>
}
   3a360:	e037883a 	mov	sp,fp
   3a364:	dfc00117 	ldw	ra,4(sp)
   3a368:	df000017 	ldw	fp,0(sp)
   3a36c:	dec00204 	addi	sp,sp,8
   3a370:	f800283a 	ret

0003a374 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   3a374:	defffc04 	addi	sp,sp,-16
   3a378:	df000315 	stw	fp,12(sp)
   3a37c:	df000304 	addi	fp,sp,12
   3a380:	e13ffd15 	stw	r4,-12(fp)
   3a384:	e17ffe15 	stw	r5,-8(fp)
   3a388:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   3a38c:	e0fffe17 	ldw	r3,-8(fp)
   3a390:	e0bffd17 	ldw	r2,-12(fp)
   3a394:	18800e26 	beq	r3,r2,3a3d0 <alt_load_section+0x5c>
  {
    while( to != end )
   3a398:	00000a06 	br	3a3c4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   3a39c:	e0bffd17 	ldw	r2,-12(fp)
   3a3a0:	10c00017 	ldw	r3,0(r2)
   3a3a4:	e0bffe17 	ldw	r2,-8(fp)
   3a3a8:	10c00015 	stw	r3,0(r2)
   3a3ac:	e0bffe17 	ldw	r2,-8(fp)
   3a3b0:	10800104 	addi	r2,r2,4
   3a3b4:	e0bffe15 	stw	r2,-8(fp)
   3a3b8:	e0bffd17 	ldw	r2,-12(fp)
   3a3bc:	10800104 	addi	r2,r2,4
   3a3c0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   3a3c4:	e0fffe17 	ldw	r3,-8(fp)
   3a3c8:	e0bfff17 	ldw	r2,-4(fp)
   3a3cc:	18bff31e 	bne	r3,r2,3a39c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   3a3d0:	e037883a 	mov	sp,fp
   3a3d4:	df000017 	ldw	fp,0(sp)
   3a3d8:	dec00104 	addi	sp,sp,4
   3a3dc:	f800283a 	ret

0003a3e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   3a3e0:	defff804 	addi	sp,sp,-32
   3a3e4:	dfc00715 	stw	ra,28(sp)
   3a3e8:	df000615 	stw	fp,24(sp)
   3a3ec:	df000604 	addi	fp,sp,24
   3a3f0:	e13ffc15 	stw	r4,-16(fp)
   3a3f4:	e17ffd15 	stw	r5,-12(fp)
   3a3f8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   3a3fc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a400:	e0bffc17 	ldw	r2,-16(fp)
   3a404:	1004803a 	cmplt	r2,r2,zero
   3a408:	1000091e 	bne	r2,zero,3a430 <lseek+0x50>
   3a40c:	e13ffc17 	ldw	r4,-16(fp)
   3a410:	01400304 	movi	r5,12
   3a414:	003981c0 	call	3981c <__mulsi3>
   3a418:	1007883a 	mov	r3,r2
   3a41c:	00800174 	movhi	r2,5
   3a420:	10a2ef04 	addi	r2,r2,-29764
   3a424:	1887883a 	add	r3,r3,r2
   3a428:	e0ffff15 	stw	r3,-4(fp)
   3a42c:	00000106 	br	3a434 <lseek+0x54>
   3a430:	e03fff15 	stw	zero,-4(fp)
   3a434:	e0bfff17 	ldw	r2,-4(fp)
   3a438:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   3a43c:	e0bffb17 	ldw	r2,-20(fp)
   3a440:	1005003a 	cmpeq	r2,r2,zero
   3a444:	1000111e 	bne	r2,zero,3a48c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   3a448:	e0bffb17 	ldw	r2,-20(fp)
   3a44c:	10800017 	ldw	r2,0(r2)
   3a450:	10800717 	ldw	r2,28(r2)
   3a454:	1005003a 	cmpeq	r2,r2,zero
   3a458:	1000091e 	bne	r2,zero,3a480 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   3a45c:	e0bffb17 	ldw	r2,-20(fp)
   3a460:	10800017 	ldw	r2,0(r2)
   3a464:	10800717 	ldw	r2,28(r2)
   3a468:	e13ffb17 	ldw	r4,-20(fp)
   3a46c:	e17ffd17 	ldw	r5,-12(fp)
   3a470:	e1bffe17 	ldw	r6,-8(fp)
   3a474:	103ee83a 	callr	r2
   3a478:	e0bffa15 	stw	r2,-24(fp)
   3a47c:	00000506 	br	3a494 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   3a480:	00bfde84 	movi	r2,-134
   3a484:	e0bffa15 	stw	r2,-24(fp)
   3a488:	00000206 	br	3a494 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   3a48c:	00bfebc4 	movi	r2,-81
   3a490:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   3a494:	e0bffa17 	ldw	r2,-24(fp)
   3a498:	1004403a 	cmpge	r2,r2,zero
   3a49c:	1000071e 	bne	r2,zero,3a4bc <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   3a4a0:	003a4d40 	call	3a4d4 <alt_get_errno>
   3a4a4:	1007883a 	mov	r3,r2
   3a4a8:	e0bffa17 	ldw	r2,-24(fp)
   3a4ac:	0085c83a 	sub	r2,zero,r2
   3a4b0:	18800015 	stw	r2,0(r3)
    rc = -1;
   3a4b4:	00bfffc4 	movi	r2,-1
   3a4b8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   3a4bc:	e0bffa17 	ldw	r2,-24(fp)
}
   3a4c0:	e037883a 	mov	sp,fp
   3a4c4:	dfc00117 	ldw	ra,4(sp)
   3a4c8:	df000017 	ldw	fp,0(sp)
   3a4cc:	dec00204 	addi	sp,sp,8
   3a4d0:	f800283a 	ret

0003a4d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a4d4:	defffd04 	addi	sp,sp,-12
   3a4d8:	dfc00215 	stw	ra,8(sp)
   3a4dc:	df000115 	stw	fp,4(sp)
   3a4e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a4e4:	00800174 	movhi	r2,5
   3a4e8:	10a77204 	addi	r2,r2,-25144
   3a4ec:	10800017 	ldw	r2,0(r2)
   3a4f0:	1005003a 	cmpeq	r2,r2,zero
   3a4f4:	1000061e 	bne	r2,zero,3a510 <alt_get_errno+0x3c>
   3a4f8:	00800174 	movhi	r2,5
   3a4fc:	10a77204 	addi	r2,r2,-25144
   3a500:	10800017 	ldw	r2,0(r2)
   3a504:	103ee83a 	callr	r2
   3a508:	e0bfff15 	stw	r2,-4(fp)
   3a50c:	00000306 	br	3a51c <alt_get_errno+0x48>
   3a510:	00800174 	movhi	r2,5
   3a514:	10a78204 	addi	r2,r2,-25080
   3a518:	e0bfff15 	stw	r2,-4(fp)
   3a51c:	e0bfff17 	ldw	r2,-4(fp)
}
   3a520:	e037883a 	mov	sp,fp
   3a524:	dfc00117 	ldw	ra,4(sp)
   3a528:	df000017 	ldw	fp,0(sp)
   3a52c:	dec00204 	addi	sp,sp,8
   3a530:	f800283a 	ret

0003a534 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   3a534:	defffd04 	addi	sp,sp,-12
   3a538:	dfc00215 	stw	ra,8(sp)
   3a53c:	df000115 	stw	fp,4(sp)
   3a540:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   3a544:	0009883a 	mov	r4,zero
   3a548:	003aa1c0 	call	3aa1c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   3a54c:	003aa500 	call	3aa50 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   3a550:	01000174 	movhi	r4,5
   3a554:	2120d804 	addi	r4,r4,-31904
   3a558:	01400174 	movhi	r5,5
   3a55c:	2960d804 	addi	r5,r5,-31904
   3a560:	01800174 	movhi	r6,5
   3a564:	31a0d804 	addi	r6,r6,-31904
   3a568:	003bdb00 	call	3bdb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   3a56c:	003b9140 	call	3b914 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   3a570:	01000134 	movhi	r4,4
   3a574:	212e5e04 	addi	r4,r4,-18056
   3a578:	003c5e40 	call	3c5e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   3a57c:	d1201c17 	ldw	r4,-32656(gp)
   3a580:	d1601d17 	ldw	r5,-32652(gp)
   3a584:	d1a01e17 	ldw	r6,-32648(gp)
   3a588:	00303ac0 	call	303ac <main>
   3a58c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   3a590:	01000044 	movi	r4,1
   3a594:	0039f0c0 	call	39f0c <close>
  exit (result);
   3a598:	e13fff17 	ldw	r4,-4(fp)
   3a59c:	003c5f80 	call	3c5f8 <exit>

0003a5a0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   3a5a0:	defffe04 	addi	sp,sp,-8
   3a5a4:	df000115 	stw	fp,4(sp)
   3a5a8:	df000104 	addi	fp,sp,4
   3a5ac:	e13fff15 	stw	r4,-4(fp)
}
   3a5b0:	e037883a 	mov	sp,fp
   3a5b4:	df000017 	ldw	fp,0(sp)
   3a5b8:	dec00104 	addi	sp,sp,4
   3a5bc:	f800283a 	ret

0003a5c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   3a5c0:	defffe04 	addi	sp,sp,-8
   3a5c4:	df000115 	stw	fp,4(sp)
   3a5c8:	df000104 	addi	fp,sp,4
   3a5cc:	e13fff15 	stw	r4,-4(fp)
}
   3a5d0:	e037883a 	mov	sp,fp
   3a5d4:	df000017 	ldw	fp,0(sp)
   3a5d8:	dec00104 	addi	sp,sp,4
   3a5dc:	f800283a 	ret

0003a5e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   3a5e0:	defff704 	addi	sp,sp,-36
   3a5e4:	dfc00815 	stw	ra,32(sp)
   3a5e8:	df000715 	stw	fp,28(sp)
   3a5ec:	df000704 	addi	fp,sp,28
   3a5f0:	e13ffb15 	stw	r4,-20(fp)
   3a5f4:	e17ffc15 	stw	r5,-16(fp)
   3a5f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a5fc:	e0bffb17 	ldw	r2,-20(fp)
   3a600:	1004803a 	cmplt	r2,r2,zero
   3a604:	1000091e 	bne	r2,zero,3a62c <read+0x4c>
   3a608:	e13ffb17 	ldw	r4,-20(fp)
   3a60c:	01400304 	movi	r5,12
   3a610:	003981c0 	call	3981c <__mulsi3>
   3a614:	1007883a 	mov	r3,r2
   3a618:	00800174 	movhi	r2,5
   3a61c:	10a2ef04 	addi	r2,r2,-29764
   3a620:	1887883a 	add	r3,r3,r2
   3a624:	e0ffff15 	stw	r3,-4(fp)
   3a628:	00000106 	br	3a630 <read+0x50>
   3a62c:	e03fff15 	stw	zero,-4(fp)
   3a630:	e0bfff17 	ldw	r2,-4(fp)
   3a634:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   3a638:	e0bffa17 	ldw	r2,-24(fp)
   3a63c:	1005003a 	cmpeq	r2,r2,zero
   3a640:	1000241e 	bne	r2,zero,3a6d4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3a644:	e0bffa17 	ldw	r2,-24(fp)
   3a648:	10800217 	ldw	r2,8(r2)
   3a64c:	108000cc 	andi	r2,r2,3
   3a650:	10800060 	cmpeqi	r2,r2,1
   3a654:	10001a1e 	bne	r2,zero,3a6c0 <read+0xe0>
   3a658:	e0bffa17 	ldw	r2,-24(fp)
   3a65c:	10800017 	ldw	r2,0(r2)
   3a660:	10800517 	ldw	r2,20(r2)
   3a664:	1005003a 	cmpeq	r2,r2,zero
   3a668:	1000151e 	bne	r2,zero,3a6c0 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   3a66c:	e0bffa17 	ldw	r2,-24(fp)
   3a670:	10800017 	ldw	r2,0(r2)
   3a674:	10800517 	ldw	r2,20(r2)
   3a678:	e17ffc17 	ldw	r5,-16(fp)
   3a67c:	e1bffd17 	ldw	r6,-12(fp)
   3a680:	e13ffa17 	ldw	r4,-24(fp)
   3a684:	103ee83a 	callr	r2
   3a688:	e0bff915 	stw	r2,-28(fp)
   3a68c:	e0bff917 	ldw	r2,-28(fp)
   3a690:	1004403a 	cmpge	r2,r2,zero
   3a694:	1000071e 	bne	r2,zero,3a6b4 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   3a698:	003a7040 	call	3a704 <alt_get_errno>
   3a69c:	e0fff917 	ldw	r3,-28(fp)
   3a6a0:	00c7c83a 	sub	r3,zero,r3
   3a6a4:	10c00015 	stw	r3,0(r2)
          return -1;
   3a6a8:	00bfffc4 	movi	r2,-1
   3a6ac:	e0bffe15 	stw	r2,-8(fp)
   3a6b0:	00000e06 	br	3a6ec <read+0x10c>
        }
        return rval;
   3a6b4:	e0bff917 	ldw	r2,-28(fp)
   3a6b8:	e0bffe15 	stw	r2,-8(fp)
   3a6bc:	00000b06 	br	3a6ec <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   3a6c0:	003a7040 	call	3a704 <alt_get_errno>
   3a6c4:	1007883a 	mov	r3,r2
   3a6c8:	00800344 	movi	r2,13
   3a6cc:	18800015 	stw	r2,0(r3)
   3a6d0:	00000406 	br	3a6e4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   3a6d4:	003a7040 	call	3a704 <alt_get_errno>
   3a6d8:	1007883a 	mov	r3,r2
   3a6dc:	00801444 	movi	r2,81
   3a6e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   3a6e4:	00bfffc4 	movi	r2,-1
   3a6e8:	e0bffe15 	stw	r2,-8(fp)
   3a6ec:	e0bffe17 	ldw	r2,-8(fp)
}
   3a6f0:	e037883a 	mov	sp,fp
   3a6f4:	dfc00117 	ldw	ra,4(sp)
   3a6f8:	df000017 	ldw	fp,0(sp)
   3a6fc:	dec00204 	addi	sp,sp,8
   3a700:	f800283a 	ret

0003a704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a704:	defffd04 	addi	sp,sp,-12
   3a708:	dfc00215 	stw	ra,8(sp)
   3a70c:	df000115 	stw	fp,4(sp)
   3a710:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a714:	00800174 	movhi	r2,5
   3a718:	10a77204 	addi	r2,r2,-25144
   3a71c:	10800017 	ldw	r2,0(r2)
   3a720:	1005003a 	cmpeq	r2,r2,zero
   3a724:	1000061e 	bne	r2,zero,3a740 <alt_get_errno+0x3c>
   3a728:	00800174 	movhi	r2,5
   3a72c:	10a77204 	addi	r2,r2,-25144
   3a730:	10800017 	ldw	r2,0(r2)
   3a734:	103ee83a 	callr	r2
   3a738:	e0bfff15 	stw	r2,-4(fp)
   3a73c:	00000306 	br	3a74c <alt_get_errno+0x48>
   3a740:	00800174 	movhi	r2,5
   3a744:	10a78204 	addi	r2,r2,-25080
   3a748:	e0bfff15 	stw	r2,-4(fp)
   3a74c:	e0bfff17 	ldw	r2,-4(fp)
}
   3a750:	e037883a 	mov	sp,fp
   3a754:	dfc00117 	ldw	ra,4(sp)
   3a758:	df000017 	ldw	fp,0(sp)
   3a75c:	dec00204 	addi	sp,sp,8
   3a760:	f800283a 	ret

0003a764 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   3a764:	defffc04 	addi	sp,sp,-16
   3a768:	dfc00315 	stw	ra,12(sp)
   3a76c:	df000215 	stw	fp,8(sp)
   3a770:	dc000115 	stw	r16,4(sp)
   3a774:	df000104 	addi	fp,sp,4
   3a778:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   3a77c:	e0bfff17 	ldw	r2,-4(fp)
   3a780:	108000d0 	cmplti	r2,r2,3
   3a784:	10000f1e 	bne	r2,zero,3a7c4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   3a788:	e13fff17 	ldw	r4,-4(fp)
   3a78c:	04000174 	movhi	r16,5
   3a790:	8422ef04 	addi	r16,r16,-29764
   3a794:	01400304 	movi	r5,12
   3a798:	003981c0 	call	3981c <__mulsi3>
   3a79c:	1405883a 	add	r2,r2,r16
   3a7a0:	10800204 	addi	r2,r2,8
   3a7a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   3a7a8:	e13fff17 	ldw	r4,-4(fp)
   3a7ac:	04000174 	movhi	r16,5
   3a7b0:	8422ef04 	addi	r16,r16,-29764
   3a7b4:	01400304 	movi	r5,12
   3a7b8:	003981c0 	call	3981c <__mulsi3>
   3a7bc:	1405883a 	add	r2,r2,r16
   3a7c0:	10000015 	stw	zero,0(r2)
  }
}
   3a7c4:	e037883a 	mov	sp,fp
   3a7c8:	dfc00217 	ldw	ra,8(sp)
   3a7cc:	df000117 	ldw	fp,4(sp)
   3a7d0:	dc000017 	ldw	r16,0(sp)
   3a7d4:	dec00304 	addi	sp,sp,12
   3a7d8:	f800283a 	ret

0003a7dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   3a7dc:	defff804 	addi	sp,sp,-32
   3a7e0:	df000715 	stw	fp,28(sp)
   3a7e4:	df000704 	addi	fp,sp,28
   3a7e8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3a7ec:	0005303a 	rdctl	r2,status
   3a7f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3a7f4:	e0fffb17 	ldw	r3,-20(fp)
   3a7f8:	00bfff84 	movi	r2,-2
   3a7fc:	1884703a 	and	r2,r3,r2
   3a800:	1001703a 	wrctl	status,r2
  
  return context;
   3a804:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   3a808:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   3a80c:	d0a00c17 	ldw	r2,-32720(gp)
   3a810:	10c000c4 	addi	r3,r2,3
   3a814:	00bfff04 	movi	r2,-4
   3a818:	1884703a 	and	r2,r3,r2
   3a81c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   3a820:	d0e00c17 	ldw	r3,-32720(gp)
   3a824:	e0bffe17 	ldw	r2,-8(fp)
   3a828:	1887883a 	add	r3,r3,r2
   3a82c:	00800174 	movhi	r2,5
   3a830:	10800004 	addi	r2,r2,0
   3a834:	10c0072e 	bgeu	r2,r3,3a854 <sbrk+0x78>
   3a838:	e0bffd17 	ldw	r2,-12(fp)
   3a83c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3a840:	e0bffa17 	ldw	r2,-24(fp)
   3a844:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   3a848:	00bfffc4 	movi	r2,-1
   3a84c:	e0bfff15 	stw	r2,-4(fp)
   3a850:	00000c06 	br	3a884 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   3a854:	d0a00c17 	ldw	r2,-32720(gp)
   3a858:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   3a85c:	d0e00c17 	ldw	r3,-32720(gp)
   3a860:	e0bffe17 	ldw	r2,-8(fp)
   3a864:	1885883a 	add	r2,r3,r2
   3a868:	d0a00c15 	stw	r2,-32720(gp)
   3a86c:	e0bffd17 	ldw	r2,-12(fp)
   3a870:	e0bff915 	stw	r2,-28(fp)
   3a874:	e0bff917 	ldw	r2,-28(fp)
   3a878:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   3a87c:	e0bffc17 	ldw	r2,-16(fp)
   3a880:	e0bfff15 	stw	r2,-4(fp)
   3a884:	e0bfff17 	ldw	r2,-4(fp)
} 
   3a888:	e037883a 	mov	sp,fp
   3a88c:	df000017 	ldw	fp,0(sp)
   3a890:	dec00104 	addi	sp,sp,4
   3a894:	f800283a 	ret

0003a898 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   3a898:	defff704 	addi	sp,sp,-36
   3a89c:	dfc00815 	stw	ra,32(sp)
   3a8a0:	df000715 	stw	fp,28(sp)
   3a8a4:	df000704 	addi	fp,sp,28
   3a8a8:	e13ffb15 	stw	r4,-20(fp)
   3a8ac:	e17ffc15 	stw	r5,-16(fp)
   3a8b0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a8b4:	e0bffb17 	ldw	r2,-20(fp)
   3a8b8:	1004803a 	cmplt	r2,r2,zero
   3a8bc:	1000091e 	bne	r2,zero,3a8e4 <write+0x4c>
   3a8c0:	e13ffb17 	ldw	r4,-20(fp)
   3a8c4:	01400304 	movi	r5,12
   3a8c8:	003981c0 	call	3981c <__mulsi3>
   3a8cc:	1007883a 	mov	r3,r2
   3a8d0:	00800174 	movhi	r2,5
   3a8d4:	10a2ef04 	addi	r2,r2,-29764
   3a8d8:	1887883a 	add	r3,r3,r2
   3a8dc:	e0ffff15 	stw	r3,-4(fp)
   3a8e0:	00000106 	br	3a8e8 <write+0x50>
   3a8e4:	e03fff15 	stw	zero,-4(fp)
   3a8e8:	e0bfff17 	ldw	r2,-4(fp)
   3a8ec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   3a8f0:	e0bffa17 	ldw	r2,-24(fp)
   3a8f4:	1005003a 	cmpeq	r2,r2,zero
   3a8f8:	1000241e 	bne	r2,zero,3a98c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   3a8fc:	e0bffa17 	ldw	r2,-24(fp)
   3a900:	10800217 	ldw	r2,8(r2)
   3a904:	108000cc 	andi	r2,r2,3
   3a908:	1005003a 	cmpeq	r2,r2,zero
   3a90c:	10001a1e 	bne	r2,zero,3a978 <write+0xe0>
   3a910:	e0bffa17 	ldw	r2,-24(fp)
   3a914:	10800017 	ldw	r2,0(r2)
   3a918:	10800617 	ldw	r2,24(r2)
   3a91c:	1005003a 	cmpeq	r2,r2,zero
   3a920:	1000151e 	bne	r2,zero,3a978 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   3a924:	e0bffa17 	ldw	r2,-24(fp)
   3a928:	10800017 	ldw	r2,0(r2)
   3a92c:	10800617 	ldw	r2,24(r2)
   3a930:	e17ffc17 	ldw	r5,-16(fp)
   3a934:	e1bffd17 	ldw	r6,-12(fp)
   3a938:	e13ffa17 	ldw	r4,-24(fp)
   3a93c:	103ee83a 	callr	r2
   3a940:	e0bff915 	stw	r2,-28(fp)
   3a944:	e0bff917 	ldw	r2,-28(fp)
   3a948:	1004403a 	cmpge	r2,r2,zero
   3a94c:	1000071e 	bne	r2,zero,3a96c <write+0xd4>
      {
        ALT_ERRNO = -rval;
   3a950:	003a9bc0 	call	3a9bc <alt_get_errno>
   3a954:	e0fff917 	ldw	r3,-28(fp)
   3a958:	00c7c83a 	sub	r3,zero,r3
   3a95c:	10c00015 	stw	r3,0(r2)
        return -1;
   3a960:	00bfffc4 	movi	r2,-1
   3a964:	e0bffe15 	stw	r2,-8(fp)
   3a968:	00000e06 	br	3a9a4 <write+0x10c>
      }
      return rval;
   3a96c:	e0bff917 	ldw	r2,-28(fp)
   3a970:	e0bffe15 	stw	r2,-8(fp)
   3a974:	00000b06 	br	3a9a4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   3a978:	003a9bc0 	call	3a9bc <alt_get_errno>
   3a97c:	1007883a 	mov	r3,r2
   3a980:	00800344 	movi	r2,13
   3a984:	18800015 	stw	r2,0(r3)
   3a988:	00000406 	br	3a99c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   3a98c:	003a9bc0 	call	3a9bc <alt_get_errno>
   3a990:	1007883a 	mov	r3,r2
   3a994:	00801444 	movi	r2,81
   3a998:	18800015 	stw	r2,0(r3)
  }
  return -1;
   3a99c:	00bfffc4 	movi	r2,-1
   3a9a0:	e0bffe15 	stw	r2,-8(fp)
   3a9a4:	e0bffe17 	ldw	r2,-8(fp)
}
   3a9a8:	e037883a 	mov	sp,fp
   3a9ac:	dfc00117 	ldw	ra,4(sp)
   3a9b0:	df000017 	ldw	fp,0(sp)
   3a9b4:	dec00204 	addi	sp,sp,8
   3a9b8:	f800283a 	ret

0003a9bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a9bc:	defffd04 	addi	sp,sp,-12
   3a9c0:	dfc00215 	stw	ra,8(sp)
   3a9c4:	df000115 	stw	fp,4(sp)
   3a9c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3a9cc:	00800174 	movhi	r2,5
   3a9d0:	10a77204 	addi	r2,r2,-25144
   3a9d4:	10800017 	ldw	r2,0(r2)
   3a9d8:	1005003a 	cmpeq	r2,r2,zero
   3a9dc:	1000061e 	bne	r2,zero,3a9f8 <alt_get_errno+0x3c>
   3a9e0:	00800174 	movhi	r2,5
   3a9e4:	10a77204 	addi	r2,r2,-25144
   3a9e8:	10800017 	ldw	r2,0(r2)
   3a9ec:	103ee83a 	callr	r2
   3a9f0:	e0bfff15 	stw	r2,-4(fp)
   3a9f4:	00000306 	br	3aa04 <alt_get_errno+0x48>
   3a9f8:	00800174 	movhi	r2,5
   3a9fc:	10a78204 	addi	r2,r2,-25080
   3aa00:	e0bfff15 	stw	r2,-4(fp)
   3aa04:	e0bfff17 	ldw	r2,-4(fp)
}
   3aa08:	e037883a 	mov	sp,fp
   3aa0c:	dfc00117 	ldw	ra,4(sp)
   3aa10:	df000017 	ldw	fp,0(sp)
   3aa14:	dec00204 	addi	sp,sp,8
   3aa18:	f800283a 	ret

0003aa1c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   3aa1c:	defffd04 	addi	sp,sp,-12
   3aa20:	dfc00215 	stw	ra,8(sp)
   3aa24:	df000115 	stw	fp,4(sp)
   3aa28:	df000104 	addi	fp,sp,4
   3aa2c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   3aa30:	003c2b00 	call	3c2b0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   3aa34:	00800044 	movi	r2,1
   3aa38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   3aa3c:	e037883a 	mov	sp,fp
   3aa40:	dfc00117 	ldw	ra,4(sp)
   3aa44:	df000017 	ldw	fp,0(sp)
   3aa48:	dec00204 	addi	sp,sp,8
   3aa4c:	f800283a 	ret

0003aa50 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   3aa50:	defffe04 	addi	sp,sp,-8
   3aa54:	dfc00115 	stw	ra,4(sp)
   3aa58:	df000015 	stw	fp,0(sp)
   3aa5c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   3aa60:	01000174 	movhi	r4,5
   3aa64:	21040004 	addi	r4,r4,4096
   3aa68:	000b883a 	mov	r5,zero
   3aa6c:	01800044 	movi	r6,1
   3aa70:	01c0fa04 	movi	r7,1000
   3aa74:	003b6000 	call	3b600 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART0, jtag_uart0);
   3aa78:	01000174 	movhi	r4,5
   3aa7c:	21235904 	addi	r4,r4,-29340
   3aa80:	000b883a 	mov	r5,zero
   3aa84:	01800404 	movi	r6,16
   3aa88:	003ac2c0 	call	3ac2c <altera_avalon_jtag_uart_init>
   3aa8c:	01000174 	movhi	r4,5
   3aa90:	21234f04 	addi	r4,r4,-29380
   3aa94:	003aaac0 	call	3aaac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   3aa98:	e037883a 	mov	sp,fp
   3aa9c:	dfc00117 	ldw	ra,4(sp)
   3aaa0:	df000017 	ldw	fp,0(sp)
   3aaa4:	dec00204 	addi	sp,sp,8
   3aaa8:	f800283a 	ret

0003aaac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   3aaac:	defffd04 	addi	sp,sp,-12
   3aab0:	dfc00215 	stw	ra,8(sp)
   3aab4:	df000115 	stw	fp,4(sp)
   3aab8:	df000104 	addi	fp,sp,4
   3aabc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   3aac0:	e13fff17 	ldw	r4,-4(fp)
   3aac4:	01400174 	movhi	r5,5
   3aac8:	29676f04 	addi	r5,r5,-25156
   3aacc:	003b8000 	call	3b800 <alt_dev_llist_insert>
}
   3aad0:	e037883a 	mov	sp,fp
   3aad4:	dfc00117 	ldw	ra,4(sp)
   3aad8:	df000017 	ldw	fp,0(sp)
   3aadc:	dec00204 	addi	sp,sp,8
   3aae0:	f800283a 	ret

0003aae4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   3aae4:	defffa04 	addi	sp,sp,-24
   3aae8:	dfc00515 	stw	ra,20(sp)
   3aaec:	df000415 	stw	fp,16(sp)
   3aaf0:	df000404 	addi	fp,sp,16
   3aaf4:	e13ffd15 	stw	r4,-12(fp)
   3aaf8:	e17ffe15 	stw	r5,-8(fp)
   3aafc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3ab00:	e0bffd17 	ldw	r2,-12(fp)
   3ab04:	10800017 	ldw	r2,0(r2)
   3ab08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   3ab0c:	e0bffc17 	ldw	r2,-16(fp)
   3ab10:	11000a04 	addi	r4,r2,40
   3ab14:	e0bffd17 	ldw	r2,-12(fp)
   3ab18:	11c00217 	ldw	r7,8(r2)
   3ab1c:	e17ffe17 	ldw	r5,-8(fp)
   3ab20:	e1bfff17 	ldw	r6,-4(fp)
   3ab24:	003b12c0 	call	3b12c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   3ab28:	e037883a 	mov	sp,fp
   3ab2c:	dfc00117 	ldw	ra,4(sp)
   3ab30:	df000017 	ldw	fp,0(sp)
   3ab34:	dec00204 	addi	sp,sp,8
   3ab38:	f800283a 	ret

0003ab3c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   3ab3c:	defffa04 	addi	sp,sp,-24
   3ab40:	dfc00515 	stw	ra,20(sp)
   3ab44:	df000415 	stw	fp,16(sp)
   3ab48:	df000404 	addi	fp,sp,16
   3ab4c:	e13ffd15 	stw	r4,-12(fp)
   3ab50:	e17ffe15 	stw	r5,-8(fp)
   3ab54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3ab58:	e0bffd17 	ldw	r2,-12(fp)
   3ab5c:	10800017 	ldw	r2,0(r2)
   3ab60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3ab64:	e0bffc17 	ldw	r2,-16(fp)
   3ab68:	11000a04 	addi	r4,r2,40
   3ab6c:	e0bffd17 	ldw	r2,-12(fp)
   3ab70:	11c00217 	ldw	r7,8(r2)
   3ab74:	e17ffe17 	ldw	r5,-8(fp)
   3ab78:	e1bfff17 	ldw	r6,-4(fp)
   3ab7c:	003b3500 	call	3b350 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   3ab80:	e037883a 	mov	sp,fp
   3ab84:	dfc00117 	ldw	ra,4(sp)
   3ab88:	df000017 	ldw	fp,0(sp)
   3ab8c:	dec00204 	addi	sp,sp,8
   3ab90:	f800283a 	ret

0003ab94 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   3ab94:	defffc04 	addi	sp,sp,-16
   3ab98:	dfc00315 	stw	ra,12(sp)
   3ab9c:	df000215 	stw	fp,8(sp)
   3aba0:	df000204 	addi	fp,sp,8
   3aba4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3aba8:	e0bfff17 	ldw	r2,-4(fp)
   3abac:	10800017 	ldw	r2,0(r2)
   3abb0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   3abb4:	e0bffe17 	ldw	r2,-8(fp)
   3abb8:	11000a04 	addi	r4,r2,40
   3abbc:	e0bfff17 	ldw	r2,-4(fp)
   3abc0:	11400217 	ldw	r5,8(r2)
   3abc4:	003afc40 	call	3afc4 <altera_avalon_jtag_uart_close>
}
   3abc8:	e037883a 	mov	sp,fp
   3abcc:	dfc00117 	ldw	ra,4(sp)
   3abd0:	df000017 	ldw	fp,0(sp)
   3abd4:	dec00204 	addi	sp,sp,8
   3abd8:	f800283a 	ret

0003abdc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   3abdc:	defffa04 	addi	sp,sp,-24
   3abe0:	dfc00515 	stw	ra,20(sp)
   3abe4:	df000415 	stw	fp,16(sp)
   3abe8:	df000404 	addi	fp,sp,16
   3abec:	e13ffd15 	stw	r4,-12(fp)
   3abf0:	e17ffe15 	stw	r5,-8(fp)
   3abf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   3abf8:	e0bffd17 	ldw	r2,-12(fp)
   3abfc:	10800017 	ldw	r2,0(r2)
   3ac00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   3ac04:	e0bffc17 	ldw	r2,-16(fp)
   3ac08:	11000a04 	addi	r4,r2,40
   3ac0c:	e17ffe17 	ldw	r5,-8(fp)
   3ac10:	e1bfff17 	ldw	r6,-4(fp)
   3ac14:	003b0380 	call	3b038 <altera_avalon_jtag_uart_ioctl>
}
   3ac18:	e037883a 	mov	sp,fp
   3ac1c:	dfc00117 	ldw	ra,4(sp)
   3ac20:	df000017 	ldw	fp,0(sp)
   3ac24:	dec00204 	addi	sp,sp,8
   3ac28:	f800283a 	ret

0003ac2c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   3ac2c:	defffa04 	addi	sp,sp,-24
   3ac30:	dfc00515 	stw	ra,20(sp)
   3ac34:	df000415 	stw	fp,16(sp)
   3ac38:	df000404 	addi	fp,sp,16
   3ac3c:	e13ffd15 	stw	r4,-12(fp)
   3ac40:	e17ffe15 	stw	r5,-8(fp)
   3ac44:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3ac48:	e0fffd17 	ldw	r3,-12(fp)
   3ac4c:	00800044 	movi	r2,1
   3ac50:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   3ac54:	e0bffd17 	ldw	r2,-12(fp)
   3ac58:	10800017 	ldw	r2,0(r2)
   3ac5c:	11000104 	addi	r4,r2,4
   3ac60:	e0bffd17 	ldw	r2,-12(fp)
   3ac64:	10800817 	ldw	r2,32(r2)
   3ac68:	1007883a 	mov	r3,r2
   3ac6c:	2005883a 	mov	r2,r4
   3ac70:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   3ac74:	e13ffe17 	ldw	r4,-8(fp)
   3ac78:	e17fff17 	ldw	r5,-4(fp)
   3ac7c:	d8000015 	stw	zero,0(sp)
   3ac80:	01800134 	movhi	r6,4
   3ac84:	31ab3b04 	addi	r6,r6,-21268
   3ac88:	e1fffd17 	ldw	r7,-12(fp)
   3ac8c:	003ba0c0 	call	3ba0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   3ac90:	e0bffd17 	ldw	r2,-12(fp)
   3ac94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   3ac98:	e0bffd17 	ldw	r2,-12(fp)
   3ac9c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3aca0:	00800174 	movhi	r2,5
   3aca4:	10a78704 	addi	r2,r2,-25060
   3aca8:	10800017 	ldw	r2,0(r2)
   3acac:	100b883a 	mov	r5,r2
   3acb0:	01800134 	movhi	r6,4
   3acb4:	31abc504 	addi	r6,r6,-20716
   3acb8:	e1fffd17 	ldw	r7,-12(fp)
   3acbc:	003b6900 	call	3b690 <alt_alarm_start>
   3acc0:	1004403a 	cmpge	r2,r2,zero
   3acc4:	1000041e 	bne	r2,zero,3acd8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   3acc8:	e0fffd17 	ldw	r3,-12(fp)
   3accc:	00a00034 	movhi	r2,32768
   3acd0:	10bfffc4 	addi	r2,r2,-1
   3acd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   3acd8:	e037883a 	mov	sp,fp
   3acdc:	dfc00117 	ldw	ra,4(sp)
   3ace0:	df000017 	ldw	fp,0(sp)
   3ace4:	dec00204 	addi	sp,sp,8
   3ace8:	f800283a 	ret

0003acec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   3acec:	defff804 	addi	sp,sp,-32
   3acf0:	df000715 	stw	fp,28(sp)
   3acf4:	df000704 	addi	fp,sp,28
   3acf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   3acfc:	e0bfff17 	ldw	r2,-4(fp)
   3ad00:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   3ad04:	e0bffe17 	ldw	r2,-8(fp)
   3ad08:	10800017 	ldw	r2,0(r2)
   3ad0c:	e0bffd15 	stw	r2,-12(fp)
   3ad10:	00000006 	br	3ad14 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ad14:	e0bffd17 	ldw	r2,-12(fp)
   3ad18:	10800104 	addi	r2,r2,4
   3ad1c:	10800037 	ldwio	r2,0(r2)
   3ad20:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   3ad24:	e0bffc17 	ldw	r2,-16(fp)
   3ad28:	1080c00c 	andi	r2,r2,768
   3ad2c:	1005003a 	cmpeq	r2,r2,zero
   3ad30:	1000741e 	bne	r2,zero,3af04 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   3ad34:	e0bffc17 	ldw	r2,-16(fp)
   3ad38:	1080400c 	andi	r2,r2,256
   3ad3c:	1005003a 	cmpeq	r2,r2,zero
   3ad40:	1000351e 	bne	r2,zero,3ae18 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   3ad44:	00800074 	movhi	r2,1
   3ad48:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3ad4c:	e0bffe17 	ldw	r2,-8(fp)
   3ad50:	10800a17 	ldw	r2,40(r2)
   3ad54:	10800044 	addi	r2,r2,1
   3ad58:	1081ffcc 	andi	r2,r2,2047
   3ad5c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   3ad60:	e0bffe17 	ldw	r2,-8(fp)
   3ad64:	10c00b17 	ldw	r3,44(r2)
   3ad68:	e0bffa17 	ldw	r2,-24(fp)
   3ad6c:	18801626 	beq	r3,r2,3adc8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   3ad70:	e0bffd17 	ldw	r2,-12(fp)
   3ad74:	10800037 	ldwio	r2,0(r2)
   3ad78:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   3ad7c:	e0bffb17 	ldw	r2,-20(fp)
   3ad80:	10a0000c 	andi	r2,r2,32768
   3ad84:	1005003a 	cmpeq	r2,r2,zero
   3ad88:	10000f1e 	bne	r2,zero,3adc8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   3ad8c:	e0bffe17 	ldw	r2,-8(fp)
   3ad90:	10c00a17 	ldw	r3,40(r2)
   3ad94:	e0bffb17 	ldw	r2,-20(fp)
   3ad98:	1009883a 	mov	r4,r2
   3ad9c:	e0bffe17 	ldw	r2,-8(fp)
   3ada0:	1885883a 	add	r2,r3,r2
   3ada4:	10800e04 	addi	r2,r2,56
   3ada8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3adac:	e0bffe17 	ldw	r2,-8(fp)
   3adb0:	10800a17 	ldw	r2,40(r2)
   3adb4:	10800044 	addi	r2,r2,1
   3adb8:	10c1ffcc 	andi	r3,r2,2047
   3adbc:	e0bffe17 	ldw	r2,-8(fp)
   3adc0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   3adc4:	003fe106 	br	3ad4c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   3adc8:	e0bffb17 	ldw	r2,-20(fp)
   3adcc:	10bfffec 	andhi	r2,r2,65535
   3add0:	1005003a 	cmpeq	r2,r2,zero
   3add4:	1000101e 	bne	r2,zero,3ae18 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3add8:	e0bffe17 	ldw	r2,-8(fp)
   3addc:	10c00817 	ldw	r3,32(r2)
   3ade0:	00bfff84 	movi	r2,-2
   3ade4:	1886703a 	and	r3,r3,r2
   3ade8:	e0bffe17 	ldw	r2,-8(fp)
   3adec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   3adf0:	e0bffd17 	ldw	r2,-12(fp)
   3adf4:	11000104 	addi	r4,r2,4
   3adf8:	e0bffe17 	ldw	r2,-8(fp)
   3adfc:	10800817 	ldw	r2,32(r2)
   3ae00:	1007883a 	mov	r3,r2
   3ae04:	2005883a 	mov	r2,r4
   3ae08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ae0c:	e0bffd17 	ldw	r2,-12(fp)
   3ae10:	10800104 	addi	r2,r2,4
   3ae14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   3ae18:	e0bffc17 	ldw	r2,-16(fp)
   3ae1c:	1080800c 	andi	r2,r2,512
   3ae20:	1005003a 	cmpeq	r2,r2,zero
   3ae24:	103fbb1e 	bne	r2,zero,3ad14 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   3ae28:	e0bffc17 	ldw	r2,-16(fp)
   3ae2c:	10bfffec 	andhi	r2,r2,65535
   3ae30:	1004d43a 	srli	r2,r2,16
   3ae34:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   3ae38:	00001506 	br	3ae90 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   3ae3c:	e13ffd17 	ldw	r4,-12(fp)
   3ae40:	e0bffe17 	ldw	r2,-8(fp)
   3ae44:	10c00d17 	ldw	r3,52(r2)
   3ae48:	e0bffe17 	ldw	r2,-8(fp)
   3ae4c:	1885883a 	add	r2,r3,r2
   3ae50:	10820e04 	addi	r2,r2,2104
   3ae54:	10800003 	ldbu	r2,0(r2)
   3ae58:	10c03fcc 	andi	r3,r2,255
   3ae5c:	18c0201c 	xori	r3,r3,128
   3ae60:	18ffe004 	addi	r3,r3,-128
   3ae64:	2005883a 	mov	r2,r4
   3ae68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3ae6c:	e0bffe17 	ldw	r2,-8(fp)
   3ae70:	10800d17 	ldw	r2,52(r2)
   3ae74:	10800044 	addi	r2,r2,1
   3ae78:	10c1ffcc 	andi	r3,r2,2047
   3ae7c:	e0bffe17 	ldw	r2,-8(fp)
   3ae80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   3ae84:	e0bff917 	ldw	r2,-28(fp)
   3ae88:	10bfffc4 	addi	r2,r2,-1
   3ae8c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   3ae90:	e0bff917 	ldw	r2,-28(fp)
   3ae94:	1005003a 	cmpeq	r2,r2,zero
   3ae98:	1000051e 	bne	r2,zero,3aeb0 <altera_avalon_jtag_uart_irq+0x1c4>
   3ae9c:	e0bffe17 	ldw	r2,-8(fp)
   3aea0:	10c00d17 	ldw	r3,52(r2)
   3aea4:	e0bffe17 	ldw	r2,-8(fp)
   3aea8:	10800c17 	ldw	r2,48(r2)
   3aeac:	18bfe31e 	bne	r3,r2,3ae3c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   3aeb0:	e0bff917 	ldw	r2,-28(fp)
   3aeb4:	1005003a 	cmpeq	r2,r2,zero
   3aeb8:	103f961e 	bne	r2,zero,3ad14 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3aebc:	e0bffe17 	ldw	r2,-8(fp)
   3aec0:	10c00817 	ldw	r3,32(r2)
   3aec4:	00bfff44 	movi	r2,-3
   3aec8:	1886703a 	and	r3,r3,r2
   3aecc:	e0bffe17 	ldw	r2,-8(fp)
   3aed0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3aed4:	e0bffe17 	ldw	r2,-8(fp)
   3aed8:	10800017 	ldw	r2,0(r2)
   3aedc:	11000104 	addi	r4,r2,4
   3aee0:	e0bffe17 	ldw	r2,-8(fp)
   3aee4:	10800817 	ldw	r2,32(r2)
   3aee8:	1007883a 	mov	r3,r2
   3aeec:	2005883a 	mov	r2,r4
   3aef0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3aef4:	e0bffd17 	ldw	r2,-12(fp)
   3aef8:	10800104 	addi	r2,r2,4
   3aefc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   3af00:	003f8406 	br	3ad14 <altera_avalon_jtag_uart_irq+0x28>
}
   3af04:	e037883a 	mov	sp,fp
   3af08:	df000017 	ldw	fp,0(sp)
   3af0c:	dec00104 	addi	sp,sp,4
   3af10:	f800283a 	ret

0003af14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   3af14:	defffc04 	addi	sp,sp,-16
   3af18:	df000315 	stw	fp,12(sp)
   3af1c:	df000304 	addi	fp,sp,12
   3af20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   3af24:	e0bfff17 	ldw	r2,-4(fp)
   3af28:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   3af2c:	e0bffe17 	ldw	r2,-8(fp)
   3af30:	10800017 	ldw	r2,0(r2)
   3af34:	10800104 	addi	r2,r2,4
   3af38:	10800037 	ldwio	r2,0(r2)
   3af3c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   3af40:	e0bffd17 	ldw	r2,-12(fp)
   3af44:	1081000c 	andi	r2,r2,1024
   3af48:	1005003a 	cmpeq	r2,r2,zero
   3af4c:	10000c1e 	bne	r2,zero,3af80 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   3af50:	e0bffe17 	ldw	r2,-8(fp)
   3af54:	10800017 	ldw	r2,0(r2)
   3af58:	11000104 	addi	r4,r2,4
   3af5c:	e0bffe17 	ldw	r2,-8(fp)
   3af60:	10800817 	ldw	r2,32(r2)
   3af64:	10810014 	ori	r2,r2,1024
   3af68:	1007883a 	mov	r3,r2
   3af6c:	2005883a 	mov	r2,r4
   3af70:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   3af74:	e0bffe17 	ldw	r2,-8(fp)
   3af78:	10000915 	stw	zero,36(r2)
   3af7c:	00000a06 	br	3afa8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   3af80:	e0bffe17 	ldw	r2,-8(fp)
   3af84:	10c00917 	ldw	r3,36(r2)
   3af88:	00a00034 	movhi	r2,32768
   3af8c:	10bfff04 	addi	r2,r2,-4
   3af90:	10c00536 	bltu	r2,r3,3afa8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   3af94:	e0bffe17 	ldw	r2,-8(fp)
   3af98:	10800917 	ldw	r2,36(r2)
   3af9c:	10c00044 	addi	r3,r2,1
   3afa0:	e0bffe17 	ldw	r2,-8(fp)
   3afa4:	10c00915 	stw	r3,36(r2)
   3afa8:	00800174 	movhi	r2,5
   3afac:	10a78704 	addi	r2,r2,-25060
   3afb0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   3afb4:	e037883a 	mov	sp,fp
   3afb8:	df000017 	ldw	fp,0(sp)
   3afbc:	dec00104 	addi	sp,sp,4
   3afc0:	f800283a 	ret

0003afc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   3afc4:	defffc04 	addi	sp,sp,-16
   3afc8:	df000315 	stw	fp,12(sp)
   3afcc:	df000304 	addi	fp,sp,12
   3afd0:	e13ffd15 	stw	r4,-12(fp)
   3afd4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3afd8:	00000706 	br	3aff8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   3afdc:	e0bffe17 	ldw	r2,-8(fp)
   3afe0:	1090000c 	andi	r2,r2,16384
   3afe4:	1005003a 	cmpeq	r2,r2,zero
   3afe8:	1000031e 	bne	r2,zero,3aff8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   3afec:	00bffd44 	movi	r2,-11
   3aff0:	e0bfff15 	stw	r2,-4(fp)
   3aff4:	00000b06 	br	3b024 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3aff8:	e0bffd17 	ldw	r2,-12(fp)
   3affc:	10c00d17 	ldw	r3,52(r2)
   3b000:	e0bffd17 	ldw	r2,-12(fp)
   3b004:	10800c17 	ldw	r2,48(r2)
   3b008:	18800526 	beq	r3,r2,3b020 <altera_avalon_jtag_uart_close+0x5c>
   3b00c:	e0bffd17 	ldw	r2,-12(fp)
   3b010:	10c00917 	ldw	r3,36(r2)
   3b014:	e0bffd17 	ldw	r2,-12(fp)
   3b018:	10800117 	ldw	r2,4(r2)
   3b01c:	18bfef36 	bltu	r3,r2,3afdc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   3b020:	e03fff15 	stw	zero,-4(fp)
   3b024:	e0bfff17 	ldw	r2,-4(fp)
}
   3b028:	e037883a 	mov	sp,fp
   3b02c:	df000017 	ldw	fp,0(sp)
   3b030:	dec00104 	addi	sp,sp,4
   3b034:	f800283a 	ret

0003b038 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   3b038:	defff804 	addi	sp,sp,-32
   3b03c:	df000715 	stw	fp,28(sp)
   3b040:	df000704 	addi	fp,sp,28
   3b044:	e13ffb15 	stw	r4,-20(fp)
   3b048:	e17ffc15 	stw	r5,-16(fp)
   3b04c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   3b050:	00bff9c4 	movi	r2,-25
   3b054:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   3b058:	e0bffc17 	ldw	r2,-16(fp)
   3b05c:	e0bfff15 	stw	r2,-4(fp)
   3b060:	e0ffff17 	ldw	r3,-4(fp)
   3b064:	189a8060 	cmpeqi	r2,r3,27137
   3b068:	1000041e 	bne	r2,zero,3b07c <altera_avalon_jtag_uart_ioctl+0x44>
   3b06c:	e0ffff17 	ldw	r3,-4(fp)
   3b070:	189a80a0 	cmpeqi	r2,r3,27138
   3b074:	10001b1e 	bne	r2,zero,3b0e4 <altera_avalon_jtag_uart_ioctl+0xac>
   3b078:	00002706 	br	3b118 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   3b07c:	e0bffb17 	ldw	r2,-20(fp)
   3b080:	10c00117 	ldw	r3,4(r2)
   3b084:	00a00034 	movhi	r2,32768
   3b088:	10bfffc4 	addi	r2,r2,-1
   3b08c:	18802226 	beq	r3,r2,3b118 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   3b090:	e0bffd17 	ldw	r2,-12(fp)
   3b094:	10800017 	ldw	r2,0(r2)
   3b098:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   3b09c:	e0bff917 	ldw	r2,-28(fp)
   3b0a0:	10800090 	cmplti	r2,r2,2
   3b0a4:	1000071e 	bne	r2,zero,3b0c4 <altera_avalon_jtag_uart_ioctl+0x8c>
   3b0a8:	e0fff917 	ldw	r3,-28(fp)
   3b0ac:	00a00034 	movhi	r2,32768
   3b0b0:	10bfffc4 	addi	r2,r2,-1
   3b0b4:	18800326 	beq	r3,r2,3b0c4 <altera_avalon_jtag_uart_ioctl+0x8c>
   3b0b8:	e0bff917 	ldw	r2,-28(fp)
   3b0bc:	e0bffe15 	stw	r2,-8(fp)
   3b0c0:	00000306 	br	3b0d0 <altera_avalon_jtag_uart_ioctl+0x98>
   3b0c4:	00e00034 	movhi	r3,32768
   3b0c8:	18ffff84 	addi	r3,r3,-2
   3b0cc:	e0fffe15 	stw	r3,-8(fp)
   3b0d0:	e0bffb17 	ldw	r2,-20(fp)
   3b0d4:	e0fffe17 	ldw	r3,-8(fp)
   3b0d8:	10c00115 	stw	r3,4(r2)
      rc = 0;
   3b0dc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   3b0e0:	00000d06 	br	3b118 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   3b0e4:	e0bffb17 	ldw	r2,-20(fp)
   3b0e8:	10c00117 	ldw	r3,4(r2)
   3b0ec:	00a00034 	movhi	r2,32768
   3b0f0:	10bfffc4 	addi	r2,r2,-1
   3b0f4:	18800826 	beq	r3,r2,3b118 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   3b0f8:	e13ffd17 	ldw	r4,-12(fp)
   3b0fc:	e0bffb17 	ldw	r2,-20(fp)
   3b100:	10c00917 	ldw	r3,36(r2)
   3b104:	e0bffb17 	ldw	r2,-20(fp)
   3b108:	10800117 	ldw	r2,4(r2)
   3b10c:	1885803a 	cmpltu	r2,r3,r2
   3b110:	20800015 	stw	r2,0(r4)
      rc = 0;
   3b114:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   3b118:	e0bffa17 	ldw	r2,-24(fp)
}
   3b11c:	e037883a 	mov	sp,fp
   3b120:	df000017 	ldw	fp,0(sp)
   3b124:	dec00104 	addi	sp,sp,4
   3b128:	f800283a 	ret

0003b12c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   3b12c:	defff204 	addi	sp,sp,-56
   3b130:	dfc00d15 	stw	ra,52(sp)
   3b134:	df000c15 	stw	fp,48(sp)
   3b138:	df000c04 	addi	fp,sp,48
   3b13c:	e13ffb15 	stw	r4,-20(fp)
   3b140:	e17ffc15 	stw	r5,-16(fp)
   3b144:	e1bffd15 	stw	r6,-12(fp)
   3b148:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   3b14c:	e0bffc17 	ldw	r2,-16(fp)
   3b150:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3b154:	00004806 	br	3b278 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   3b158:	e0bffb17 	ldw	r2,-20(fp)
   3b15c:	10800a17 	ldw	r2,40(r2)
   3b160:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   3b164:	e0bffb17 	ldw	r2,-20(fp)
   3b168:	10800b17 	ldw	r2,44(r2)
   3b16c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   3b170:	e0fff717 	ldw	r3,-36(fp)
   3b174:	e0bff617 	ldw	r2,-40(fp)
   3b178:	18800536 	bltu	r3,r2,3b190 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   3b17c:	e0bff717 	ldw	r2,-36(fp)
   3b180:	e0fff617 	ldw	r3,-40(fp)
   3b184:	10c5c83a 	sub	r2,r2,r3
   3b188:	e0bff815 	stw	r2,-32(fp)
   3b18c:	00000406 	br	3b1a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   3b190:	00820004 	movi	r2,2048
   3b194:	e0fff617 	ldw	r3,-40(fp)
   3b198:	10c5c83a 	sub	r2,r2,r3
   3b19c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   3b1a0:	e0bff817 	ldw	r2,-32(fp)
   3b1a4:	1005003a 	cmpeq	r2,r2,zero
   3b1a8:	10001f1e 	bne	r2,zero,3b228 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   3b1ac:	e0fffd17 	ldw	r3,-12(fp)
   3b1b0:	e0bff817 	ldw	r2,-32(fp)
   3b1b4:	1880022e 	bgeu	r3,r2,3b1c0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   3b1b8:	e0bffd17 	ldw	r2,-12(fp)
   3b1bc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   3b1c0:	e0bffb17 	ldw	r2,-20(fp)
   3b1c4:	10c00e04 	addi	r3,r2,56
   3b1c8:	e0bff617 	ldw	r2,-40(fp)
   3b1cc:	1887883a 	add	r3,r3,r2
   3b1d0:	e0bffa17 	ldw	r2,-24(fp)
   3b1d4:	1009883a 	mov	r4,r2
   3b1d8:	180b883a 	mov	r5,r3
   3b1dc:	e1bff817 	ldw	r6,-32(fp)
   3b1e0:	00358b00 	call	358b0 <memcpy>
      ptr   += n;
   3b1e4:	e0fff817 	ldw	r3,-32(fp)
   3b1e8:	e0bffa17 	ldw	r2,-24(fp)
   3b1ec:	10c5883a 	add	r2,r2,r3
   3b1f0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   3b1f4:	e0fffd17 	ldw	r3,-12(fp)
   3b1f8:	e0bff817 	ldw	r2,-32(fp)
   3b1fc:	1885c83a 	sub	r2,r3,r2
   3b200:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3b204:	e0fff617 	ldw	r3,-40(fp)
   3b208:	e0bff817 	ldw	r2,-32(fp)
   3b20c:	1885883a 	add	r2,r3,r2
   3b210:	10c1ffcc 	andi	r3,r2,2047
   3b214:	e0bffb17 	ldw	r2,-20(fp)
   3b218:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   3b21c:	e0bffd17 	ldw	r2,-12(fp)
   3b220:	10800048 	cmpgei	r2,r2,1
   3b224:	103fcc1e 	bne	r2,zero,3b158 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   3b228:	e0fffa17 	ldw	r3,-24(fp)
   3b22c:	e0bffc17 	ldw	r2,-16(fp)
   3b230:	1880141e 	bne	r3,r2,3b284 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   3b234:	e0bffe17 	ldw	r2,-8(fp)
   3b238:	1090000c 	andi	r2,r2,16384
   3b23c:	1004c03a 	cmpne	r2,r2,zero
   3b240:	1000101e 	bne	r2,zero,3b284 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   3b244:	e0bffb17 	ldw	r2,-20(fp)
   3b248:	10c00a17 	ldw	r3,40(r2)
   3b24c:	e0bff717 	ldw	r2,-36(fp)
   3b250:	1880051e 	bne	r3,r2,3b268 <altera_avalon_jtag_uart_read+0x13c>
   3b254:	e0bffb17 	ldw	r2,-20(fp)
   3b258:	10c00917 	ldw	r3,36(r2)
   3b25c:	e0bffb17 	ldw	r2,-20(fp)
   3b260:	10800117 	ldw	r2,4(r2)
   3b264:	18bff736 	bltu	r3,r2,3b244 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   3b268:	e0bffb17 	ldw	r2,-20(fp)
   3b26c:	10c00a17 	ldw	r3,40(r2)
   3b270:	e0bff717 	ldw	r2,-36(fp)
   3b274:	18800326 	beq	r3,r2,3b284 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3b278:	e0bffd17 	ldw	r2,-12(fp)
   3b27c:	10800048 	cmpgei	r2,r2,1
   3b280:	103fb51e 	bne	r2,zero,3b158 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   3b284:	e0fffa17 	ldw	r3,-24(fp)
   3b288:	e0bffc17 	ldw	r2,-16(fp)
   3b28c:	18801926 	beq	r3,r2,3b2f4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b290:	0005303a 	rdctl	r2,status
   3b294:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b298:	e0fff517 	ldw	r3,-44(fp)
   3b29c:	00bfff84 	movi	r2,-2
   3b2a0:	1884703a 	and	r2,r3,r2
   3b2a4:	1001703a 	wrctl	status,r2
  
  return context;
   3b2a8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   3b2ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3b2b0:	e0bffb17 	ldw	r2,-20(fp)
   3b2b4:	10800817 	ldw	r2,32(r2)
   3b2b8:	10c00054 	ori	r3,r2,1
   3b2bc:	e0bffb17 	ldw	r2,-20(fp)
   3b2c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3b2c4:	e0bffb17 	ldw	r2,-20(fp)
   3b2c8:	10800017 	ldw	r2,0(r2)
   3b2cc:	11000104 	addi	r4,r2,4
   3b2d0:	e0bffb17 	ldw	r2,-20(fp)
   3b2d4:	10800817 	ldw	r2,32(r2)
   3b2d8:	1007883a 	mov	r3,r2
   3b2dc:	2005883a 	mov	r2,r4
   3b2e0:	10c00035 	stwio	r3,0(r2)
   3b2e4:	e0bff917 	ldw	r2,-28(fp)
   3b2e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b2ec:	e0bff417 	ldw	r2,-48(fp)
   3b2f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   3b2f4:	e0fffa17 	ldw	r3,-24(fp)
   3b2f8:	e0bffc17 	ldw	r2,-16(fp)
   3b2fc:	18800526 	beq	r3,r2,3b314 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   3b300:	e0fffa17 	ldw	r3,-24(fp)
   3b304:	e0bffc17 	ldw	r2,-16(fp)
   3b308:	1887c83a 	sub	r3,r3,r2
   3b30c:	e0ffff15 	stw	r3,-4(fp)
   3b310:	00000906 	br	3b338 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   3b314:	e0bffe17 	ldw	r2,-8(fp)
   3b318:	1090000c 	andi	r2,r2,16384
   3b31c:	1005003a 	cmpeq	r2,r2,zero
   3b320:	1000031e 	bne	r2,zero,3b330 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   3b324:	00bffd44 	movi	r2,-11
   3b328:	e0bfff15 	stw	r2,-4(fp)
   3b32c:	00000206 	br	3b338 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   3b330:	00bffec4 	movi	r2,-5
   3b334:	e0bfff15 	stw	r2,-4(fp)
   3b338:	e0bfff17 	ldw	r2,-4(fp)
}
   3b33c:	e037883a 	mov	sp,fp
   3b340:	dfc00117 	ldw	ra,4(sp)
   3b344:	df000017 	ldw	fp,0(sp)
   3b348:	dec00204 	addi	sp,sp,8
   3b34c:	f800283a 	ret

0003b350 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   3b350:	defff204 	addi	sp,sp,-56
   3b354:	dfc00d15 	stw	ra,52(sp)
   3b358:	df000c15 	stw	fp,48(sp)
   3b35c:	df000c04 	addi	fp,sp,48
   3b360:	e13ffb15 	stw	r4,-20(fp)
   3b364:	e17ffc15 	stw	r5,-16(fp)
   3b368:	e1bffd15 	stw	r6,-12(fp)
   3b36c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   3b370:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   3b374:	e0bffc17 	ldw	r2,-16(fp)
   3b378:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3b37c:	00003a06 	br	3b468 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   3b380:	e0bffb17 	ldw	r2,-20(fp)
   3b384:	10800c17 	ldw	r2,48(r2)
   3b388:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   3b38c:	e0bffb17 	ldw	r2,-20(fp)
   3b390:	10800d17 	ldw	r2,52(r2)
   3b394:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   3b398:	e0fffa17 	ldw	r3,-24(fp)
   3b39c:	e0bff917 	ldw	r2,-28(fp)
   3b3a0:	1880062e 	bgeu	r3,r2,3b3bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   3b3a4:	e0fff917 	ldw	r3,-28(fp)
   3b3a8:	e0bffa17 	ldw	r2,-24(fp)
   3b3ac:	1885c83a 	sub	r2,r3,r2
   3b3b0:	10bfffc4 	addi	r2,r2,-1
   3b3b4:	e0bff815 	stw	r2,-32(fp)
   3b3b8:	00000c06 	br	3b3ec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   3b3bc:	e0bff917 	ldw	r2,-28(fp)
   3b3c0:	1005003a 	cmpeq	r2,r2,zero
   3b3c4:	1000051e 	bne	r2,zero,3b3dc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   3b3c8:	00820004 	movi	r2,2048
   3b3cc:	e0fffa17 	ldw	r3,-24(fp)
   3b3d0:	10c5c83a 	sub	r2,r2,r3
   3b3d4:	e0bff815 	stw	r2,-32(fp)
   3b3d8:	00000406 	br	3b3ec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   3b3dc:	0081ffc4 	movi	r2,2047
   3b3e0:	e0fffa17 	ldw	r3,-24(fp)
   3b3e4:	10c5c83a 	sub	r2,r2,r3
   3b3e8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   3b3ec:	e0bff817 	ldw	r2,-32(fp)
   3b3f0:	1005003a 	cmpeq	r2,r2,zero
   3b3f4:	10001f1e 	bne	r2,zero,3b474 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   3b3f8:	e0fffd17 	ldw	r3,-12(fp)
   3b3fc:	e0bff817 	ldw	r2,-32(fp)
   3b400:	1880022e 	bgeu	r3,r2,3b40c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   3b404:	e0bffd17 	ldw	r2,-12(fp)
   3b408:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   3b40c:	e0bffb17 	ldw	r2,-20(fp)
   3b410:	10c20e04 	addi	r3,r2,2104
   3b414:	e0bffa17 	ldw	r2,-24(fp)
   3b418:	1885883a 	add	r2,r3,r2
   3b41c:	e0fffc17 	ldw	r3,-16(fp)
   3b420:	1009883a 	mov	r4,r2
   3b424:	180b883a 	mov	r5,r3
   3b428:	e1bff817 	ldw	r6,-32(fp)
   3b42c:	00358b00 	call	358b0 <memcpy>
      ptr   += n;
   3b430:	e0fff817 	ldw	r3,-32(fp)
   3b434:	e0bffc17 	ldw	r2,-16(fp)
   3b438:	10c5883a 	add	r2,r2,r3
   3b43c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   3b440:	e0fffd17 	ldw	r3,-12(fp)
   3b444:	e0bff817 	ldw	r2,-32(fp)
   3b448:	1885c83a 	sub	r2,r3,r2
   3b44c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3b450:	e0fffa17 	ldw	r3,-24(fp)
   3b454:	e0bff817 	ldw	r2,-32(fp)
   3b458:	1885883a 	add	r2,r3,r2
   3b45c:	10c1ffcc 	andi	r3,r2,2047
   3b460:	e0bffb17 	ldw	r2,-20(fp)
   3b464:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3b468:	e0bffd17 	ldw	r2,-12(fp)
   3b46c:	10800048 	cmpgei	r2,r2,1
   3b470:	103fc31e 	bne	r2,zero,3b380 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b474:	0005303a 	rdctl	r2,status
   3b478:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b47c:	e0fff517 	ldw	r3,-44(fp)
   3b480:	00bfff84 	movi	r2,-2
   3b484:	1884703a 	and	r2,r3,r2
   3b488:	1001703a 	wrctl	status,r2
  
  return context;
   3b48c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   3b490:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3b494:	e0bffb17 	ldw	r2,-20(fp)
   3b498:	10800817 	ldw	r2,32(r2)
   3b49c:	10c00094 	ori	r3,r2,2
   3b4a0:	e0bffb17 	ldw	r2,-20(fp)
   3b4a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3b4a8:	e0bffb17 	ldw	r2,-20(fp)
   3b4ac:	10800017 	ldw	r2,0(r2)
   3b4b0:	11000104 	addi	r4,r2,4
   3b4b4:	e0bffb17 	ldw	r2,-20(fp)
   3b4b8:	10800817 	ldw	r2,32(r2)
   3b4bc:	1007883a 	mov	r3,r2
   3b4c0:	2005883a 	mov	r2,r4
   3b4c4:	10c00035 	stwio	r3,0(r2)
   3b4c8:	e0bff717 	ldw	r2,-36(fp)
   3b4cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b4d0:	e0bff417 	ldw	r2,-48(fp)
   3b4d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   3b4d8:	e0bffd17 	ldw	r2,-12(fp)
   3b4dc:	10800050 	cmplti	r2,r2,1
   3b4e0:	1000111e 	bne	r2,zero,3b528 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   3b4e4:	e0bffe17 	ldw	r2,-8(fp)
   3b4e8:	1090000c 	andi	r2,r2,16384
   3b4ec:	1004c03a 	cmpne	r2,r2,zero
   3b4f0:	1000101e 	bne	r2,zero,3b534 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   3b4f4:	e0bffb17 	ldw	r2,-20(fp)
   3b4f8:	10c00d17 	ldw	r3,52(r2)
   3b4fc:	e0bff917 	ldw	r2,-28(fp)
   3b500:	1880051e 	bne	r3,r2,3b518 <altera_avalon_jtag_uart_write+0x1c8>
   3b504:	e0bffb17 	ldw	r2,-20(fp)
   3b508:	10c00917 	ldw	r3,36(r2)
   3b50c:	e0bffb17 	ldw	r2,-20(fp)
   3b510:	10800117 	ldw	r2,4(r2)
   3b514:	18bff736 	bltu	r3,r2,3b4f4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   3b518:	e0bffb17 	ldw	r2,-20(fp)
   3b51c:	10c00d17 	ldw	r3,52(r2)
   3b520:	e0bff917 	ldw	r2,-28(fp)
   3b524:	18800326 	beq	r3,r2,3b534 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   3b528:	e0bffd17 	ldw	r2,-12(fp)
   3b52c:	10800048 	cmpgei	r2,r2,1
   3b530:	103fcd1e 	bne	r2,zero,3b468 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   3b534:	e0fffc17 	ldw	r3,-16(fp)
   3b538:	e0bff617 	ldw	r2,-40(fp)
   3b53c:	18800526 	beq	r3,r2,3b554 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   3b540:	e0fffc17 	ldw	r3,-16(fp)
   3b544:	e0bff617 	ldw	r2,-40(fp)
   3b548:	1887c83a 	sub	r3,r3,r2
   3b54c:	e0ffff15 	stw	r3,-4(fp)
   3b550:	00000906 	br	3b578 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   3b554:	e0bffe17 	ldw	r2,-8(fp)
   3b558:	1090000c 	andi	r2,r2,16384
   3b55c:	1005003a 	cmpeq	r2,r2,zero
   3b560:	1000031e 	bne	r2,zero,3b570 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   3b564:	00bffd44 	movi	r2,-11
   3b568:	e0bfff15 	stw	r2,-4(fp)
   3b56c:	00000206 	br	3b578 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   3b570:	00bffec4 	movi	r2,-5
   3b574:	e0bfff15 	stw	r2,-4(fp)
   3b578:	e0bfff17 	ldw	r2,-4(fp)
}
   3b57c:	e037883a 	mov	sp,fp
   3b580:	dfc00117 	ldw	ra,4(sp)
   3b584:	df000017 	ldw	fp,0(sp)
   3b588:	dec00204 	addi	sp,sp,8
   3b58c:	f800283a 	ret

0003b590 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   3b590:	defffa04 	addi	sp,sp,-24
   3b594:	dfc00515 	stw	ra,20(sp)
   3b598:	df000415 	stw	fp,16(sp)
   3b59c:	df000404 	addi	fp,sp,16
   3b5a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   3b5a4:	e0bfff17 	ldw	r2,-4(fp)
   3b5a8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   3b5ac:	e0bfff17 	ldw	r2,-4(fp)
   3b5b0:	10800104 	addi	r2,r2,4
   3b5b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b5b8:	0005303a 	rdctl	r2,status
   3b5bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b5c0:	e0fffd17 	ldw	r3,-12(fp)
   3b5c4:	00bfff84 	movi	r2,-2
   3b5c8:	1884703a 	and	r2,r3,r2
   3b5cc:	1001703a 	wrctl	status,r2
  
  return context;
   3b5d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   3b5d4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   3b5d8:	003c1a40 	call	3c1a4 <alt_tick>
   3b5dc:	e0bffe17 	ldw	r2,-8(fp)
   3b5e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b5e4:	e0bffc17 	ldw	r2,-16(fp)
   3b5e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   3b5ec:	e037883a 	mov	sp,fp
   3b5f0:	dfc00117 	ldw	ra,4(sp)
   3b5f4:	df000017 	ldw	fp,0(sp)
   3b5f8:	dec00204 	addi	sp,sp,8
   3b5fc:	f800283a 	ret

0003b600 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   3b600:	defff804 	addi	sp,sp,-32
   3b604:	dfc00715 	stw	ra,28(sp)
   3b608:	df000615 	stw	fp,24(sp)
   3b60c:	df000604 	addi	fp,sp,24
   3b610:	e13ffc15 	stw	r4,-16(fp)
   3b614:	e17ffd15 	stw	r5,-12(fp)
   3b618:	e1bffe15 	stw	r6,-8(fp)
   3b61c:	e1ffff15 	stw	r7,-4(fp)
   3b620:	e0bfff17 	ldw	r2,-4(fp)
   3b624:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   3b628:	00800174 	movhi	r2,5
   3b62c:	10a78704 	addi	r2,r2,-25060
   3b630:	10800017 	ldw	r2,0(r2)
   3b634:	1004c03a 	cmpne	r2,r2,zero
   3b638:	1000041e 	bne	r2,zero,3b64c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   3b63c:	00c00174 	movhi	r3,5
   3b640:	18e78704 	addi	r3,r3,-25060
   3b644:	e0bffb17 	ldw	r2,-20(fp)
   3b648:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   3b64c:	e0bffc17 	ldw	r2,-16(fp)
   3b650:	10800104 	addi	r2,r2,4
   3b654:	1007883a 	mov	r3,r2
   3b658:	008001c4 	movi	r2,7
   3b65c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   3b660:	d8000015 	stw	zero,0(sp)
   3b664:	e13ffd17 	ldw	r4,-12(fp)
   3b668:	e17ffe17 	ldw	r5,-8(fp)
   3b66c:	01800134 	movhi	r6,4
   3b670:	31ad6404 	addi	r6,r6,-19056
   3b674:	e1fffc17 	ldw	r7,-16(fp)
   3b678:	003ba0c0 	call	3ba0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   3b67c:	e037883a 	mov	sp,fp
   3b680:	dfc00117 	ldw	ra,4(sp)
   3b684:	df000017 	ldw	fp,0(sp)
   3b688:	dec00204 	addi	sp,sp,8
   3b68c:	f800283a 	ret

0003b690 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   3b690:	defff404 	addi	sp,sp,-48
   3b694:	df000b15 	stw	fp,44(sp)
   3b698:	df000b04 	addi	fp,sp,44
   3b69c:	e13ffb15 	stw	r4,-20(fp)
   3b6a0:	e17ffc15 	stw	r5,-16(fp)
   3b6a4:	e1bffd15 	stw	r6,-12(fp)
   3b6a8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   3b6ac:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3b6b0:	00800174 	movhi	r2,5
   3b6b4:	10a78704 	addi	r2,r2,-25060
   3b6b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   3b6bc:	1005003a 	cmpeq	r2,r2,zero
   3b6c0:	1000411e 	bne	r2,zero,3b7c8 <alt_alarm_start+0x138>
  {
    if (alarm)
   3b6c4:	e0bffb17 	ldw	r2,-20(fp)
   3b6c8:	1005003a 	cmpeq	r2,r2,zero
   3b6cc:	10003b1e 	bne	r2,zero,3b7bc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   3b6d0:	e0fffb17 	ldw	r3,-20(fp)
   3b6d4:	e0bffd17 	ldw	r2,-12(fp)
   3b6d8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   3b6dc:	e0fffb17 	ldw	r3,-20(fp)
   3b6e0:	e0bffe17 	ldw	r2,-8(fp)
   3b6e4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b6e8:	0005303a 	rdctl	r2,status
   3b6ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b6f0:	e0fff817 	ldw	r3,-32(fp)
   3b6f4:	00bfff84 	movi	r2,-2
   3b6f8:	1884703a 	and	r2,r3,r2
   3b6fc:	1001703a 	wrctl	status,r2
  
  return context;
   3b700:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   3b704:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   3b708:	00800174 	movhi	r2,5
   3b70c:	10a78804 	addi	r2,r2,-25056
   3b710:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   3b714:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   3b718:	e0fffc17 	ldw	r3,-16(fp)
   3b71c:	e0bff917 	ldw	r2,-28(fp)
   3b720:	1885883a 	add	r2,r3,r2
   3b724:	10c00044 	addi	r3,r2,1
   3b728:	e0bffb17 	ldw	r2,-20(fp)
   3b72c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   3b730:	e0bffb17 	ldw	r2,-20(fp)
   3b734:	10c00217 	ldw	r3,8(r2)
   3b738:	e0bff917 	ldw	r2,-28(fp)
   3b73c:	1880042e 	bgeu	r3,r2,3b750 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   3b740:	e0fffb17 	ldw	r3,-20(fp)
   3b744:	00800044 	movi	r2,1
   3b748:	18800405 	stb	r2,16(r3)
   3b74c:	00000206 	br	3b758 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   3b750:	e0bffb17 	ldw	r2,-20(fp)
   3b754:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   3b758:	e0fffb17 	ldw	r3,-20(fp)
   3b75c:	00800174 	movhi	r2,5
   3b760:	10a77504 	addi	r2,r2,-25132
   3b764:	e0bff615 	stw	r2,-40(fp)
   3b768:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3b76c:	e0fff717 	ldw	r3,-36(fp)
   3b770:	e0bff617 	ldw	r2,-40(fp)
   3b774:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   3b778:	e0bff617 	ldw	r2,-40(fp)
   3b77c:	10c00017 	ldw	r3,0(r2)
   3b780:	e0bff717 	ldw	r2,-36(fp)
   3b784:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3b788:	e0bff617 	ldw	r2,-40(fp)
   3b78c:	10c00017 	ldw	r3,0(r2)
   3b790:	e0bff717 	ldw	r2,-36(fp)
   3b794:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   3b798:	e0fff617 	ldw	r3,-40(fp)
   3b79c:	e0bff717 	ldw	r2,-36(fp)
   3b7a0:	18800015 	stw	r2,0(r3)
   3b7a4:	e0bffa17 	ldw	r2,-24(fp)
   3b7a8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b7ac:	e0bff517 	ldw	r2,-44(fp)
   3b7b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   3b7b4:	e03fff15 	stw	zero,-4(fp)
   3b7b8:	00000506 	br	3b7d0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   3b7bc:	00bffa84 	movi	r2,-22
   3b7c0:	e0bfff15 	stw	r2,-4(fp)
   3b7c4:	00000206 	br	3b7d0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   3b7c8:	00bfde84 	movi	r2,-134
   3b7cc:	e0bfff15 	stw	r2,-4(fp)
   3b7d0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   3b7d4:	e037883a 	mov	sp,fp
   3b7d8:	df000017 	ldw	fp,0(sp)
   3b7dc:	dec00104 	addi	sp,sp,4
   3b7e0:	f800283a 	ret

0003b7e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   3b7e4:	deffff04 	addi	sp,sp,-4
   3b7e8:	df000015 	stw	fp,0(sp)
   3b7ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   3b7f0:	e037883a 	mov	sp,fp
   3b7f4:	df000017 	ldw	fp,0(sp)
   3b7f8:	dec00104 	addi	sp,sp,4
   3b7fc:	f800283a 	ret

0003b800 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   3b800:	defff904 	addi	sp,sp,-28
   3b804:	dfc00615 	stw	ra,24(sp)
   3b808:	df000515 	stw	fp,20(sp)
   3b80c:	df000504 	addi	fp,sp,20
   3b810:	e13ffd15 	stw	r4,-12(fp)
   3b814:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   3b818:	e0bffd17 	ldw	r2,-12(fp)
   3b81c:	1005003a 	cmpeq	r2,r2,zero
   3b820:	1000041e 	bne	r2,zero,3b834 <alt_dev_llist_insert+0x34>
   3b824:	e0bffd17 	ldw	r2,-12(fp)
   3b828:	10800217 	ldw	r2,8(r2)
   3b82c:	1004c03a 	cmpne	r2,r2,zero
   3b830:	1000071e 	bne	r2,zero,3b850 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   3b834:	003b8b40 	call	3b8b4 <alt_get_errno>
   3b838:	1007883a 	mov	r3,r2
   3b83c:	00800584 	movi	r2,22
   3b840:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   3b844:	00bffa84 	movi	r2,-22
   3b848:	e0bfff15 	stw	r2,-4(fp)
   3b84c:	00001306 	br	3b89c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   3b850:	e0fffd17 	ldw	r3,-12(fp)
   3b854:	e0bffe17 	ldw	r2,-8(fp)
   3b858:	e0bffb15 	stw	r2,-20(fp)
   3b85c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3b860:	e0fffc17 	ldw	r3,-16(fp)
   3b864:	e0bffb17 	ldw	r2,-20(fp)
   3b868:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   3b86c:	e0bffb17 	ldw	r2,-20(fp)
   3b870:	10c00017 	ldw	r3,0(r2)
   3b874:	e0bffc17 	ldw	r2,-16(fp)
   3b878:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3b87c:	e0bffb17 	ldw	r2,-20(fp)
   3b880:	10c00017 	ldw	r3,0(r2)
   3b884:	e0bffc17 	ldw	r2,-16(fp)
   3b888:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   3b88c:	e0fffb17 	ldw	r3,-20(fp)
   3b890:	e0bffc17 	ldw	r2,-16(fp)
   3b894:	18800015 	stw	r2,0(r3)

  return 0;  
   3b898:	e03fff15 	stw	zero,-4(fp)
   3b89c:	e0bfff17 	ldw	r2,-4(fp)
}
   3b8a0:	e037883a 	mov	sp,fp
   3b8a4:	dfc00117 	ldw	ra,4(sp)
   3b8a8:	df000017 	ldw	fp,0(sp)
   3b8ac:	dec00204 	addi	sp,sp,8
   3b8b0:	f800283a 	ret

0003b8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3b8b4:	defffd04 	addi	sp,sp,-12
   3b8b8:	dfc00215 	stw	ra,8(sp)
   3b8bc:	df000115 	stw	fp,4(sp)
   3b8c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3b8c4:	00800174 	movhi	r2,5
   3b8c8:	10a77204 	addi	r2,r2,-25144
   3b8cc:	10800017 	ldw	r2,0(r2)
   3b8d0:	1005003a 	cmpeq	r2,r2,zero
   3b8d4:	1000061e 	bne	r2,zero,3b8f0 <alt_get_errno+0x3c>
   3b8d8:	00800174 	movhi	r2,5
   3b8dc:	10a77204 	addi	r2,r2,-25144
   3b8e0:	10800017 	ldw	r2,0(r2)
   3b8e4:	103ee83a 	callr	r2
   3b8e8:	e0bfff15 	stw	r2,-4(fp)
   3b8ec:	00000306 	br	3b8fc <alt_get_errno+0x48>
   3b8f0:	00800174 	movhi	r2,5
   3b8f4:	10a78204 	addi	r2,r2,-25080
   3b8f8:	e0bfff15 	stw	r2,-4(fp)
   3b8fc:	e0bfff17 	ldw	r2,-4(fp)
}
   3b900:	e037883a 	mov	sp,fp
   3b904:	dfc00117 	ldw	ra,4(sp)
   3b908:	df000017 	ldw	fp,0(sp)
   3b90c:	dec00204 	addi	sp,sp,8
   3b910:	f800283a 	ret

0003b914 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   3b914:	defffd04 	addi	sp,sp,-12
   3b918:	dfc00215 	stw	ra,8(sp)
   3b91c:	df000115 	stw	fp,4(sp)
   3b920:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3b924:	00bfff04 	movi	r2,-4
   3b928:	00c00134 	movhi	r3,4
   3b92c:	18f27c04 	addi	r3,r3,-13840
   3b930:	1885883a 	add	r2,r3,r2
   3b934:	e0bfff15 	stw	r2,-4(fp)
   3b938:	00000606 	br	3b954 <_do_ctors+0x40>
        (*ctor) (); 
   3b93c:	e0bfff17 	ldw	r2,-4(fp)
   3b940:	10800017 	ldw	r2,0(r2)
   3b944:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3b948:	e0bfff17 	ldw	r2,-4(fp)
   3b94c:	10bfff04 	addi	r2,r2,-4
   3b950:	e0bfff15 	stw	r2,-4(fp)
   3b954:	e0ffff17 	ldw	r3,-4(fp)
   3b958:	00800134 	movhi	r2,4
   3b95c:	10b27b04 	addi	r2,r2,-13844
   3b960:	18bff62e 	bgeu	r3,r2,3b93c <_do_ctors+0x28>
        (*ctor) (); 
}
   3b964:	e037883a 	mov	sp,fp
   3b968:	dfc00117 	ldw	ra,4(sp)
   3b96c:	df000017 	ldw	fp,0(sp)
   3b970:	dec00204 	addi	sp,sp,8
   3b974:	f800283a 	ret

0003b978 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   3b978:	defffd04 	addi	sp,sp,-12
   3b97c:	dfc00215 	stw	ra,8(sp)
   3b980:	df000115 	stw	fp,4(sp)
   3b984:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3b988:	00bfff04 	movi	r2,-4
   3b98c:	00c00134 	movhi	r3,4
   3b990:	18f27c04 	addi	r3,r3,-13840
   3b994:	1885883a 	add	r2,r3,r2
   3b998:	e0bfff15 	stw	r2,-4(fp)
   3b99c:	00000606 	br	3b9b8 <_do_dtors+0x40>
        (*dtor) (); 
   3b9a0:	e0bfff17 	ldw	r2,-4(fp)
   3b9a4:	10800017 	ldw	r2,0(r2)
   3b9a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3b9ac:	e0bfff17 	ldw	r2,-4(fp)
   3b9b0:	10bfff04 	addi	r2,r2,-4
   3b9b4:	e0bfff15 	stw	r2,-4(fp)
   3b9b8:	e0ffff17 	ldw	r3,-4(fp)
   3b9bc:	00800134 	movhi	r2,4
   3b9c0:	10b27c04 	addi	r2,r2,-13840
   3b9c4:	18bff62e 	bgeu	r3,r2,3b9a0 <_do_dtors+0x28>
        (*dtor) (); 
}
   3b9c8:	e037883a 	mov	sp,fp
   3b9cc:	dfc00117 	ldw	ra,4(sp)
   3b9d0:	df000017 	ldw	fp,0(sp)
   3b9d4:	dec00204 	addi	sp,sp,8
   3b9d8:	f800283a 	ret

0003b9dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   3b9dc:	defffe04 	addi	sp,sp,-8
   3b9e0:	dfc00115 	stw	ra,4(sp)
   3b9e4:	df000015 	stw	fp,0(sp)
   3b9e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   3b9ec:	0009883a 	mov	r4,zero
   3b9f0:	01440004 	movi	r5,4096
   3b9f4:	003c5540 	call	3c554 <alt_icache_flush>
#endif
}
   3b9f8:	e037883a 	mov	sp,fp
   3b9fc:	dfc00117 	ldw	ra,4(sp)
   3ba00:	df000017 	ldw	fp,0(sp)
   3ba04:	dec00204 	addi	sp,sp,8
   3ba08:	f800283a 	ret

0003ba0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3ba0c:	defff904 	addi	sp,sp,-28
   3ba10:	dfc00615 	stw	ra,24(sp)
   3ba14:	df000515 	stw	fp,20(sp)
   3ba18:	df000504 	addi	fp,sp,20
   3ba1c:	e13ffc15 	stw	r4,-16(fp)
   3ba20:	e17ffd15 	stw	r5,-12(fp)
   3ba24:	e1bffe15 	stw	r6,-8(fp)
   3ba28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   3ba2c:	e0800217 	ldw	r2,8(fp)
   3ba30:	d8800015 	stw	r2,0(sp)
   3ba34:	e13ffc17 	ldw	r4,-16(fp)
   3ba38:	e17ffd17 	ldw	r5,-12(fp)
   3ba3c:	e1bffe17 	ldw	r6,-8(fp)
   3ba40:	e1ffff17 	ldw	r7,-4(fp)
   3ba44:	003bbe00 	call	3bbe0 <alt_iic_isr_register>
}  
   3ba48:	e037883a 	mov	sp,fp
   3ba4c:	dfc00117 	ldw	ra,4(sp)
   3ba50:	df000017 	ldw	fp,0(sp)
   3ba54:	dec00204 	addi	sp,sp,8
   3ba58:	f800283a 	ret

0003ba5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   3ba5c:	defff904 	addi	sp,sp,-28
   3ba60:	df000615 	stw	fp,24(sp)
   3ba64:	df000604 	addi	fp,sp,24
   3ba68:	e13ffe15 	stw	r4,-8(fp)
   3ba6c:	e17fff15 	stw	r5,-4(fp)
   3ba70:	e0bfff17 	ldw	r2,-4(fp)
   3ba74:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3ba78:	0005303a 	rdctl	r2,status
   3ba7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3ba80:	e0fffb17 	ldw	r3,-20(fp)
   3ba84:	00bfff84 	movi	r2,-2
   3ba88:	1884703a 	and	r2,r3,r2
   3ba8c:	1001703a 	wrctl	status,r2
  
  return context;
   3ba90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3ba94:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   3ba98:	e0fffc17 	ldw	r3,-16(fp)
   3ba9c:	00800044 	movi	r2,1
   3baa0:	10c4983a 	sll	r2,r2,r3
   3baa4:	1007883a 	mov	r3,r2
   3baa8:	00800174 	movhi	r2,5
   3baac:	10a78604 	addi	r2,r2,-25064
   3bab0:	10800017 	ldw	r2,0(r2)
   3bab4:	1886b03a 	or	r3,r3,r2
   3bab8:	00800174 	movhi	r2,5
   3babc:	10a78604 	addi	r2,r2,-25064
   3bac0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3bac4:	00800174 	movhi	r2,5
   3bac8:	10a78604 	addi	r2,r2,-25064
   3bacc:	10800017 	ldw	r2,0(r2)
   3bad0:	100170fa 	wrctl	ienable,r2
   3bad4:	e0bffd17 	ldw	r2,-12(fp)
   3bad8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3badc:	e0bffa17 	ldw	r2,-24(fp)
   3bae0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3bae4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   3bae8:	e037883a 	mov	sp,fp
   3baec:	df000017 	ldw	fp,0(sp)
   3baf0:	dec00104 	addi	sp,sp,4
   3baf4:	f800283a 	ret

0003baf8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   3baf8:	defff904 	addi	sp,sp,-28
   3bafc:	df000615 	stw	fp,24(sp)
   3bb00:	df000604 	addi	fp,sp,24
   3bb04:	e13ffe15 	stw	r4,-8(fp)
   3bb08:	e17fff15 	stw	r5,-4(fp)
   3bb0c:	e0bfff17 	ldw	r2,-4(fp)
   3bb10:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3bb14:	0005303a 	rdctl	r2,status
   3bb18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3bb1c:	e0fffb17 	ldw	r3,-20(fp)
   3bb20:	00bfff84 	movi	r2,-2
   3bb24:	1884703a 	and	r2,r3,r2
   3bb28:	1001703a 	wrctl	status,r2
  
  return context;
   3bb2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3bb30:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   3bb34:	e0fffc17 	ldw	r3,-16(fp)
   3bb38:	00800044 	movi	r2,1
   3bb3c:	10c4983a 	sll	r2,r2,r3
   3bb40:	0084303a 	nor	r2,zero,r2
   3bb44:	1007883a 	mov	r3,r2
   3bb48:	00800174 	movhi	r2,5
   3bb4c:	10a78604 	addi	r2,r2,-25064
   3bb50:	10800017 	ldw	r2,0(r2)
   3bb54:	1886703a 	and	r3,r3,r2
   3bb58:	00800174 	movhi	r2,5
   3bb5c:	10a78604 	addi	r2,r2,-25064
   3bb60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3bb64:	00800174 	movhi	r2,5
   3bb68:	10a78604 	addi	r2,r2,-25064
   3bb6c:	10800017 	ldw	r2,0(r2)
   3bb70:	100170fa 	wrctl	ienable,r2
   3bb74:	e0bffd17 	ldw	r2,-12(fp)
   3bb78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3bb7c:	e0bffa17 	ldw	r2,-24(fp)
   3bb80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3bb84:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   3bb88:	e037883a 	mov	sp,fp
   3bb8c:	df000017 	ldw	fp,0(sp)
   3bb90:	dec00104 	addi	sp,sp,4
   3bb94:	f800283a 	ret

0003bb98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   3bb98:	defffc04 	addi	sp,sp,-16
   3bb9c:	df000315 	stw	fp,12(sp)
   3bba0:	df000304 	addi	fp,sp,12
   3bba4:	e13ffe15 	stw	r4,-8(fp)
   3bba8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   3bbac:	000530fa 	rdctl	r2,ienable
   3bbb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   3bbb4:	e0ffff17 	ldw	r3,-4(fp)
   3bbb8:	00800044 	movi	r2,1
   3bbbc:	10c4983a 	sll	r2,r2,r3
   3bbc0:	1007883a 	mov	r3,r2
   3bbc4:	e0bffd17 	ldw	r2,-12(fp)
   3bbc8:	1884703a 	and	r2,r3,r2
   3bbcc:	1004c03a 	cmpne	r2,r2,zero
}
   3bbd0:	e037883a 	mov	sp,fp
   3bbd4:	df000017 	ldw	fp,0(sp)
   3bbd8:	dec00104 	addi	sp,sp,4
   3bbdc:	f800283a 	ret

0003bbe0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3bbe0:	defff404 	addi	sp,sp,-48
   3bbe4:	dfc00b15 	stw	ra,44(sp)
   3bbe8:	df000a15 	stw	fp,40(sp)
   3bbec:	df000a04 	addi	fp,sp,40
   3bbf0:	e13ffb15 	stw	r4,-20(fp)
   3bbf4:	e17ffc15 	stw	r5,-16(fp)
   3bbf8:	e1bffd15 	stw	r6,-12(fp)
   3bbfc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   3bc00:	00bffa84 	movi	r2,-22
   3bc04:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   3bc08:	e0bffc17 	ldw	r2,-16(fp)
   3bc0c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   3bc10:	e0bff917 	ldw	r2,-28(fp)
   3bc14:	10800808 	cmpgei	r2,r2,32
   3bc18:	1000291e 	bne	r2,zero,3bcc0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3bc1c:	0005303a 	rdctl	r2,status
   3bc20:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3bc24:	e0fff717 	ldw	r3,-36(fp)
   3bc28:	00bfff84 	movi	r2,-2
   3bc2c:	1884703a 	and	r2,r3,r2
   3bc30:	1001703a 	wrctl	status,r2
  
  return context;
   3bc34:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   3bc38:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   3bc3c:	e0bff917 	ldw	r2,-28(fp)
   3bc40:	00c00174 	movhi	r3,5
   3bc44:	18e79304 	addi	r3,r3,-25012
   3bc48:	100490fa 	slli	r2,r2,3
   3bc4c:	10c7883a 	add	r3,r2,r3
   3bc50:	e0bffd17 	ldw	r2,-12(fp)
   3bc54:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   3bc58:	e0bff917 	ldw	r2,-28(fp)
   3bc5c:	00c00174 	movhi	r3,5
   3bc60:	18e79304 	addi	r3,r3,-25012
   3bc64:	100490fa 	slli	r2,r2,3
   3bc68:	10c5883a 	add	r2,r2,r3
   3bc6c:	10c00104 	addi	r3,r2,4
   3bc70:	e0bffe17 	ldw	r2,-8(fp)
   3bc74:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   3bc78:	e0bffd17 	ldw	r2,-12(fp)
   3bc7c:	1005003a 	cmpeq	r2,r2,zero
   3bc80:	1000051e 	bne	r2,zero,3bc98 <alt_iic_isr_register+0xb8>
   3bc84:	e17ff917 	ldw	r5,-28(fp)
   3bc88:	e13ffb17 	ldw	r4,-20(fp)
   3bc8c:	003ba5c0 	call	3ba5c <alt_ic_irq_enable>
   3bc90:	e0bfff15 	stw	r2,-4(fp)
   3bc94:	00000406 	br	3bca8 <alt_iic_isr_register+0xc8>
   3bc98:	e17ff917 	ldw	r5,-28(fp)
   3bc9c:	e13ffb17 	ldw	r4,-20(fp)
   3bca0:	003baf80 	call	3baf8 <alt_ic_irq_disable>
   3bca4:	e0bfff15 	stw	r2,-4(fp)
   3bca8:	e0bfff17 	ldw	r2,-4(fp)
   3bcac:	e0bffa15 	stw	r2,-24(fp)
   3bcb0:	e0bff817 	ldw	r2,-32(fp)
   3bcb4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3bcb8:	e0bff617 	ldw	r2,-40(fp)
   3bcbc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   3bcc0:	e0bffa17 	ldw	r2,-24(fp)
}
   3bcc4:	e037883a 	mov	sp,fp
   3bcc8:	dfc00117 	ldw	ra,4(sp)
   3bccc:	df000017 	ldw	fp,0(sp)
   3bcd0:	dec00204 	addi	sp,sp,8
   3bcd4:	f800283a 	ret

0003bcd8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   3bcd8:	defff804 	addi	sp,sp,-32
   3bcdc:	dfc00715 	stw	ra,28(sp)
   3bce0:	df000615 	stw	fp,24(sp)
   3bce4:	dc000515 	stw	r16,20(sp)
   3bce8:	df000504 	addi	fp,sp,20
   3bcec:	e13ffc15 	stw	r4,-16(fp)
   3bcf0:	e17ffd15 	stw	r5,-12(fp)
   3bcf4:	e1bffe15 	stw	r6,-8(fp)
   3bcf8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   3bcfc:	e13ffd17 	ldw	r4,-12(fp)
   3bd00:	e17ffe17 	ldw	r5,-8(fp)
   3bd04:	e1bfff17 	ldw	r6,-4(fp)
   3bd08:	003bf200 	call	3bf20 <open>
   3bd0c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   3bd10:	e0bffb17 	ldw	r2,-20(fp)
   3bd14:	1004803a 	cmplt	r2,r2,zero
   3bd18:	10001f1e 	bne	r2,zero,3bd98 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   3bd1c:	e13ffb17 	ldw	r4,-20(fp)
   3bd20:	04000174 	movhi	r16,5
   3bd24:	8422ef04 	addi	r16,r16,-29764
   3bd28:	01400304 	movi	r5,12
   3bd2c:	003981c0 	call	3981c <__mulsi3>
   3bd30:	1405883a 	add	r2,r2,r16
   3bd34:	10c00017 	ldw	r3,0(r2)
   3bd38:	e0bffc17 	ldw	r2,-16(fp)
   3bd3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   3bd40:	e13ffb17 	ldw	r4,-20(fp)
   3bd44:	04000174 	movhi	r16,5
   3bd48:	8422ef04 	addi	r16,r16,-29764
   3bd4c:	01400304 	movi	r5,12
   3bd50:	003981c0 	call	3981c <__mulsi3>
   3bd54:	1405883a 	add	r2,r2,r16
   3bd58:	10800104 	addi	r2,r2,4
   3bd5c:	10c00017 	ldw	r3,0(r2)
   3bd60:	e0bffc17 	ldw	r2,-16(fp)
   3bd64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   3bd68:	e13ffb17 	ldw	r4,-20(fp)
   3bd6c:	04000174 	movhi	r16,5
   3bd70:	8422ef04 	addi	r16,r16,-29764
   3bd74:	01400304 	movi	r5,12
   3bd78:	003981c0 	call	3981c <__mulsi3>
   3bd7c:	1405883a 	add	r2,r2,r16
   3bd80:	10800204 	addi	r2,r2,8
   3bd84:	10c00017 	ldw	r3,0(r2)
   3bd88:	e0bffc17 	ldw	r2,-16(fp)
   3bd8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   3bd90:	e13ffb17 	ldw	r4,-20(fp)
   3bd94:	003a7640 	call	3a764 <alt_release_fd>
  }
} 
   3bd98:	e037883a 	mov	sp,fp
   3bd9c:	dfc00217 	ldw	ra,8(sp)
   3bda0:	df000117 	ldw	fp,4(sp)
   3bda4:	dc000017 	ldw	r16,0(sp)
   3bda8:	dec00304 	addi	sp,sp,12
   3bdac:	f800283a 	ret

0003bdb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   3bdb0:	defffb04 	addi	sp,sp,-20
   3bdb4:	dfc00415 	stw	ra,16(sp)
   3bdb8:	df000315 	stw	fp,12(sp)
   3bdbc:	df000304 	addi	fp,sp,12
   3bdc0:	e13ffd15 	stw	r4,-12(fp)
   3bdc4:	e17ffe15 	stw	r5,-8(fp)
   3bdc8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   3bdcc:	01000174 	movhi	r4,5
   3bdd0:	2122f204 	addi	r4,r4,-29752
   3bdd4:	e17ffd17 	ldw	r5,-12(fp)
   3bdd8:	01800044 	movi	r6,1
   3bddc:	01c07fc4 	movi	r7,511
   3bde0:	003bcd80 	call	3bcd8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   3bde4:	01000174 	movhi	r4,5
   3bde8:	2122ef04 	addi	r4,r4,-29764
   3bdec:	e17ffe17 	ldw	r5,-8(fp)
   3bdf0:	000d883a 	mov	r6,zero
   3bdf4:	01c07fc4 	movi	r7,511
   3bdf8:	003bcd80 	call	3bcd8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   3bdfc:	01000174 	movhi	r4,5
   3be00:	2122f504 	addi	r4,r4,-29740
   3be04:	e17fff17 	ldw	r5,-4(fp)
   3be08:	01800044 	movi	r6,1
   3be0c:	01c07fc4 	movi	r7,511
   3be10:	003bcd80 	call	3bcd8 <alt_open_fd>
}  
   3be14:	e037883a 	mov	sp,fp
   3be18:	dfc00117 	ldw	ra,4(sp)
   3be1c:	df000017 	ldw	fp,0(sp)
   3be20:	dec00204 	addi	sp,sp,8
   3be24:	f800283a 	ret

0003be28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   3be28:	defffa04 	addi	sp,sp,-24
   3be2c:	dfc00515 	stw	ra,20(sp)
   3be30:	df000415 	stw	fp,16(sp)
   3be34:	dc000315 	stw	r16,12(sp)
   3be38:	df000304 	addi	fp,sp,12
   3be3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   3be40:	e0bffe17 	ldw	r2,-8(fp)
   3be44:	10800217 	ldw	r2,8(r2)
   3be48:	10d00034 	orhi	r3,r2,16384
   3be4c:	e0bffe17 	ldw	r2,-8(fp)
   3be50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3be54:	e03ffd15 	stw	zero,-12(fp)
   3be58:	00002306 	br	3bee8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3be5c:	e13ffd17 	ldw	r4,-12(fp)
   3be60:	04000174 	movhi	r16,5
   3be64:	8422ef04 	addi	r16,r16,-29764
   3be68:	01400304 	movi	r5,12
   3be6c:	003981c0 	call	3981c <__mulsi3>
   3be70:	1405883a 	add	r2,r2,r16
   3be74:	10c00017 	ldw	r3,0(r2)
   3be78:	e0bffe17 	ldw	r2,-8(fp)
   3be7c:	10800017 	ldw	r2,0(r2)
   3be80:	1880161e 	bne	r3,r2,3bedc <alt_file_locked+0xb4>
   3be84:	e13ffd17 	ldw	r4,-12(fp)
   3be88:	04000174 	movhi	r16,5
   3be8c:	8422ef04 	addi	r16,r16,-29764
   3be90:	01400304 	movi	r5,12
   3be94:	003981c0 	call	3981c <__mulsi3>
   3be98:	1405883a 	add	r2,r2,r16
   3be9c:	10800204 	addi	r2,r2,8
   3bea0:	10800017 	ldw	r2,0(r2)
   3bea4:	1004403a 	cmpge	r2,r2,zero
   3bea8:	10000c1e 	bne	r2,zero,3bedc <alt_file_locked+0xb4>
   3beac:	e13ffd17 	ldw	r4,-12(fp)
   3beb0:	01400304 	movi	r5,12
   3beb4:	003981c0 	call	3981c <__mulsi3>
   3beb8:	1007883a 	mov	r3,r2
   3bebc:	00800174 	movhi	r2,5
   3bec0:	10a2ef04 	addi	r2,r2,-29764
   3bec4:	1887883a 	add	r3,r3,r2
   3bec8:	e0bffe17 	ldw	r2,-8(fp)
   3becc:	18800326 	beq	r3,r2,3bedc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   3bed0:	00bffcc4 	movi	r2,-13
   3bed4:	e0bfff15 	stw	r2,-4(fp)
   3bed8:	00000a06 	br	3bf04 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3bedc:	e0bffd17 	ldw	r2,-12(fp)
   3bee0:	10800044 	addi	r2,r2,1
   3bee4:	e0bffd15 	stw	r2,-12(fp)
   3bee8:	00800174 	movhi	r2,5
   3beec:	10a77104 	addi	r2,r2,-25148
   3bef0:	10800017 	ldw	r2,0(r2)
   3bef4:	1007883a 	mov	r3,r2
   3bef8:	e0bffd17 	ldw	r2,-12(fp)
   3befc:	18bfd72e 	bgeu	r3,r2,3be5c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   3bf00:	e03fff15 	stw	zero,-4(fp)
   3bf04:	e0bfff17 	ldw	r2,-4(fp)
}
   3bf08:	e037883a 	mov	sp,fp
   3bf0c:	dfc00217 	ldw	ra,8(sp)
   3bf10:	df000117 	ldw	fp,4(sp)
   3bf14:	dc000017 	ldw	r16,0(sp)
   3bf18:	dec00304 	addi	sp,sp,12
   3bf1c:	f800283a 	ret

0003bf20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   3bf20:	defff404 	addi	sp,sp,-48
   3bf24:	dfc00b15 	stw	ra,44(sp)
   3bf28:	df000a15 	stw	fp,40(sp)
   3bf2c:	df000a04 	addi	fp,sp,40
   3bf30:	e13ffb15 	stw	r4,-20(fp)
   3bf34:	e17ffc15 	stw	r5,-16(fp)
   3bf38:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   3bf3c:	00bfffc4 	movi	r2,-1
   3bf40:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   3bf44:	00bffb44 	movi	r2,-19
   3bf48:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   3bf4c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   3bf50:	e13ffb17 	ldw	r4,-20(fp)
   3bf54:	01400174 	movhi	r5,5
   3bf58:	29676f04 	addi	r5,r5,-25156
   3bf5c:	003c2d00 	call	3c2d0 <alt_find_dev>
   3bf60:	e0bffa15 	stw	r2,-24(fp)
   3bf64:	e0bffa17 	ldw	r2,-24(fp)
   3bf68:	1004c03a 	cmpne	r2,r2,zero
   3bf6c:	1000051e 	bne	r2,zero,3bf84 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   3bf70:	e13ffb17 	ldw	r4,-20(fp)
   3bf74:	003c3640 	call	3c364 <alt_find_file>
   3bf78:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   3bf7c:	00800044 	movi	r2,1
   3bf80:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   3bf84:	e0bffa17 	ldw	r2,-24(fp)
   3bf88:	1005003a 	cmpeq	r2,r2,zero
   3bf8c:	1000311e 	bne	r2,zero,3c054 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   3bf90:	e13ffa17 	ldw	r4,-24(fp)
   3bf94:	003c4840 	call	3c484 <alt_get_fd>
   3bf98:	e0bff815 	stw	r2,-32(fp)
   3bf9c:	e0bff817 	ldw	r2,-32(fp)
   3bfa0:	1004403a 	cmpge	r2,r2,zero
   3bfa4:	1000031e 	bne	r2,zero,3bfb4 <open+0x94>
    {
      status = index;
   3bfa8:	e0bff817 	ldw	r2,-32(fp)
   3bfac:	e0bff715 	stw	r2,-36(fp)
   3bfb0:	00002a06 	br	3c05c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   3bfb4:	e13ff817 	ldw	r4,-32(fp)
   3bfb8:	01400304 	movi	r5,12
   3bfbc:	003981c0 	call	3981c <__mulsi3>
   3bfc0:	1007883a 	mov	r3,r2
   3bfc4:	00800174 	movhi	r2,5
   3bfc8:	10a2ef04 	addi	r2,r2,-29764
   3bfcc:	1885883a 	add	r2,r3,r2
   3bfd0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3bfd4:	e0fffc17 	ldw	r3,-16(fp)
   3bfd8:	00900034 	movhi	r2,16384
   3bfdc:	10bfffc4 	addi	r2,r2,-1
   3bfe0:	1886703a 	and	r3,r3,r2
   3bfe4:	e0bff917 	ldw	r2,-28(fp)
   3bfe8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   3bfec:	e0bff617 	ldw	r2,-40(fp)
   3bff0:	1004c03a 	cmpne	r2,r2,zero
   3bff4:	1000061e 	bne	r2,zero,3c010 <open+0xf0>
   3bff8:	e13ff917 	ldw	r4,-28(fp)
   3bffc:	003be280 	call	3be28 <alt_file_locked>
   3c000:	e0bff715 	stw	r2,-36(fp)
   3c004:	e0bff717 	ldw	r2,-36(fp)
   3c008:	1004803a 	cmplt	r2,r2,zero
   3c00c:	1000131e 	bne	r2,zero,3c05c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   3c010:	e0bffa17 	ldw	r2,-24(fp)
   3c014:	10800317 	ldw	r2,12(r2)
   3c018:	1005003a 	cmpeq	r2,r2,zero
   3c01c:	1000091e 	bne	r2,zero,3c044 <open+0x124>
   3c020:	e0bffa17 	ldw	r2,-24(fp)
   3c024:	10800317 	ldw	r2,12(r2)
   3c028:	e13ff917 	ldw	r4,-28(fp)
   3c02c:	e17ffb17 	ldw	r5,-20(fp)
   3c030:	e1bffc17 	ldw	r6,-16(fp)
   3c034:	e1fffd17 	ldw	r7,-12(fp)
   3c038:	103ee83a 	callr	r2
   3c03c:	e0bfff15 	stw	r2,-4(fp)
   3c040:	00000106 	br	3c048 <open+0x128>
   3c044:	e03fff15 	stw	zero,-4(fp)
   3c048:	e0bfff17 	ldw	r2,-4(fp)
   3c04c:	e0bff715 	stw	r2,-36(fp)
   3c050:	00000206 	br	3c05c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   3c054:	00bffb44 	movi	r2,-19
   3c058:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   3c05c:	e0bff717 	ldw	r2,-36(fp)
   3c060:	1004403a 	cmpge	r2,r2,zero
   3c064:	1000091e 	bne	r2,zero,3c08c <open+0x16c>
  {
    alt_release_fd (index);  
   3c068:	e13ff817 	ldw	r4,-32(fp)
   3c06c:	003a7640 	call	3a764 <alt_release_fd>
    ALT_ERRNO = -status;
   3c070:	003c0ac0 	call	3c0ac <alt_get_errno>
   3c074:	e0fff717 	ldw	r3,-36(fp)
   3c078:	00c7c83a 	sub	r3,zero,r3
   3c07c:	10c00015 	stw	r3,0(r2)
    return -1;
   3c080:	00bfffc4 	movi	r2,-1
   3c084:	e0bffe15 	stw	r2,-8(fp)
   3c088:	00000206 	br	3c094 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   3c08c:	e0bff817 	ldw	r2,-32(fp)
   3c090:	e0bffe15 	stw	r2,-8(fp)
   3c094:	e0bffe17 	ldw	r2,-8(fp)
}
   3c098:	e037883a 	mov	sp,fp
   3c09c:	dfc00117 	ldw	ra,4(sp)
   3c0a0:	df000017 	ldw	fp,0(sp)
   3c0a4:	dec00204 	addi	sp,sp,8
   3c0a8:	f800283a 	ret

0003c0ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3c0ac:	defffd04 	addi	sp,sp,-12
   3c0b0:	dfc00215 	stw	ra,8(sp)
   3c0b4:	df000115 	stw	fp,4(sp)
   3c0b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   3c0bc:	00800174 	movhi	r2,5
   3c0c0:	10a77204 	addi	r2,r2,-25144
   3c0c4:	10800017 	ldw	r2,0(r2)
   3c0c8:	1005003a 	cmpeq	r2,r2,zero
   3c0cc:	1000061e 	bne	r2,zero,3c0e8 <alt_get_errno+0x3c>
   3c0d0:	00800174 	movhi	r2,5
   3c0d4:	10a77204 	addi	r2,r2,-25144
   3c0d8:	10800017 	ldw	r2,0(r2)
   3c0dc:	103ee83a 	callr	r2
   3c0e0:	e0bfff15 	stw	r2,-4(fp)
   3c0e4:	00000306 	br	3c0f4 <alt_get_errno+0x48>
   3c0e8:	00800174 	movhi	r2,5
   3c0ec:	10a78204 	addi	r2,r2,-25080
   3c0f0:	e0bfff15 	stw	r2,-4(fp)
   3c0f4:	e0bfff17 	ldw	r2,-4(fp)
}
   3c0f8:	e037883a 	mov	sp,fp
   3c0fc:	dfc00117 	ldw	ra,4(sp)
   3c100:	df000017 	ldw	fp,0(sp)
   3c104:	dec00204 	addi	sp,sp,8
   3c108:	f800283a 	ret

0003c10c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   3c10c:	defffa04 	addi	sp,sp,-24
   3c110:	df000515 	stw	fp,20(sp)
   3c114:	df000504 	addi	fp,sp,20
   3c118:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3c11c:	0005303a 	rdctl	r2,status
   3c120:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3c124:	e0fffd17 	ldw	r3,-12(fp)
   3c128:	00bfff84 	movi	r2,-2
   3c12c:	1884703a 	and	r2,r3,r2
   3c130:	1001703a 	wrctl	status,r2
  
  return context;
   3c134:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3c138:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   3c13c:	e0bfff17 	ldw	r2,-4(fp)
   3c140:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   3c144:	e0bffc17 	ldw	r2,-16(fp)
   3c148:	10c00017 	ldw	r3,0(r2)
   3c14c:	e0bffc17 	ldw	r2,-16(fp)
   3c150:	10800117 	ldw	r2,4(r2)
   3c154:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   3c158:	e0bffc17 	ldw	r2,-16(fp)
   3c15c:	10c00117 	ldw	r3,4(r2)
   3c160:	e0bffc17 	ldw	r2,-16(fp)
   3c164:	10800017 	ldw	r2,0(r2)
   3c168:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3c16c:	e0fffc17 	ldw	r3,-16(fp)
   3c170:	e0bffc17 	ldw	r2,-16(fp)
   3c174:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   3c178:	e0fffc17 	ldw	r3,-16(fp)
   3c17c:	e0bffc17 	ldw	r2,-16(fp)
   3c180:	18800015 	stw	r2,0(r3)
   3c184:	e0bffe17 	ldw	r2,-8(fp)
   3c188:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3c18c:	e0bffb17 	ldw	r2,-20(fp)
   3c190:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   3c194:	e037883a 	mov	sp,fp
   3c198:	df000017 	ldw	fp,0(sp)
   3c19c:	dec00104 	addi	sp,sp,4
   3c1a0:	f800283a 	ret

0003c1a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   3c1a4:	defffb04 	addi	sp,sp,-20
   3c1a8:	dfc00415 	stw	ra,16(sp)
   3c1ac:	df000315 	stw	fp,12(sp)
   3c1b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3c1b4:	d0a00e17 	ldw	r2,-32712(gp)
   3c1b8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   3c1bc:	d0a02117 	ldw	r2,-32636(gp)
   3c1c0:	10800044 	addi	r2,r2,1
   3c1c4:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3c1c8:	00003106 	br	3c290 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   3c1cc:	e0bffe17 	ldw	r2,-8(fp)
   3c1d0:	10800017 	ldw	r2,0(r2)
   3c1d4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   3c1d8:	e0bffe17 	ldw	r2,-8(fp)
   3c1dc:	10800403 	ldbu	r2,16(r2)
   3c1e0:	10803fcc 	andi	r2,r2,255
   3c1e4:	1005003a 	cmpeq	r2,r2,zero
   3c1e8:	1000051e 	bne	r2,zero,3c200 <alt_tick+0x5c>
   3c1ec:	d0a02117 	ldw	r2,-32636(gp)
   3c1f0:	1004c03a 	cmpne	r2,r2,zero
   3c1f4:	1000021e 	bne	r2,zero,3c200 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   3c1f8:	e0bffe17 	ldw	r2,-8(fp)
   3c1fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   3c200:	e0bffe17 	ldw	r2,-8(fp)
   3c204:	10c00217 	ldw	r3,8(r2)
   3c208:	d0a02117 	ldw	r2,-32636(gp)
   3c20c:	10c01e36 	bltu	r2,r3,3c288 <alt_tick+0xe4>
   3c210:	e0bffe17 	ldw	r2,-8(fp)
   3c214:	10800403 	ldbu	r2,16(r2)
   3c218:	10803fcc 	andi	r2,r2,255
   3c21c:	1004c03a 	cmpne	r2,r2,zero
   3c220:	1000191e 	bne	r2,zero,3c288 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   3c224:	e0bffe17 	ldw	r2,-8(fp)
   3c228:	10c00317 	ldw	r3,12(r2)
   3c22c:	e0bffe17 	ldw	r2,-8(fp)
   3c230:	11000517 	ldw	r4,20(r2)
   3c234:	183ee83a 	callr	r3
   3c238:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   3c23c:	e0bffd17 	ldw	r2,-12(fp)
   3c240:	1004c03a 	cmpne	r2,r2,zero
   3c244:	1000031e 	bne	r2,zero,3c254 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   3c248:	e13ffe17 	ldw	r4,-8(fp)
   3c24c:	003c10c0 	call	3c10c <alt_alarm_stop>
   3c250:	00000d06 	br	3c288 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   3c254:	e0bffe17 	ldw	r2,-8(fp)
   3c258:	10c00217 	ldw	r3,8(r2)
   3c25c:	e0bffd17 	ldw	r2,-12(fp)
   3c260:	1887883a 	add	r3,r3,r2
   3c264:	e0bffe17 	ldw	r2,-8(fp)
   3c268:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3c26c:	e0bffe17 	ldw	r2,-8(fp)
   3c270:	10c00217 	ldw	r3,8(r2)
   3c274:	d0a02117 	ldw	r2,-32636(gp)
   3c278:	1880032e 	bgeu	r3,r2,3c288 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   3c27c:	e0fffe17 	ldw	r3,-8(fp)
   3c280:	00800044 	movi	r2,1
   3c284:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   3c288:	e0bfff17 	ldw	r2,-4(fp)
   3c28c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3c290:	d0e00e04 	addi	r3,gp,-32712
   3c294:	e0bffe17 	ldw	r2,-8(fp)
   3c298:	10ffcc1e 	bne	r2,r3,3c1cc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   3c29c:	e037883a 	mov	sp,fp
   3c2a0:	dfc00117 	ldw	ra,4(sp)
   3c2a4:	df000017 	ldw	fp,0(sp)
   3c2a8:	dec00204 	addi	sp,sp,8
   3c2ac:	f800283a 	ret

0003c2b0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   3c2b0:	deffff04 	addi	sp,sp,-4
   3c2b4:	df000015 	stw	fp,0(sp)
   3c2b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3c2bc:	000170fa 	wrctl	ienable,zero
}
   3c2c0:	e037883a 	mov	sp,fp
   3c2c4:	df000017 	ldw	fp,0(sp)
   3c2c8:	dec00104 	addi	sp,sp,4
   3c2cc:	f800283a 	ret

0003c2d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   3c2d0:	defff904 	addi	sp,sp,-28
   3c2d4:	dfc00615 	stw	ra,24(sp)
   3c2d8:	df000515 	stw	fp,20(sp)
   3c2dc:	df000504 	addi	fp,sp,20
   3c2e0:	e13ffd15 	stw	r4,-12(fp)
   3c2e4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   3c2e8:	e0bffe17 	ldw	r2,-8(fp)
   3c2ec:	10800017 	ldw	r2,0(r2)
   3c2f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   3c2f4:	e13ffd17 	ldw	r4,-12(fp)
   3c2f8:	00305cc0 	call	305cc <strlen>
   3c2fc:	10800044 	addi	r2,r2,1
   3c300:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3c304:	00000d06 	br	3c33c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   3c308:	e0bffc17 	ldw	r2,-16(fp)
   3c30c:	11000217 	ldw	r4,8(r2)
   3c310:	e1bffb17 	ldw	r6,-20(fp)
   3c314:	e17ffd17 	ldw	r5,-12(fp)
   3c318:	003c6300 	call	3c630 <memcmp>
   3c31c:	1004c03a 	cmpne	r2,r2,zero
   3c320:	1000031e 	bne	r2,zero,3c330 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   3c324:	e0bffc17 	ldw	r2,-16(fp)
   3c328:	e0bfff15 	stw	r2,-4(fp)
   3c32c:	00000706 	br	3c34c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3c330:	e0bffc17 	ldw	r2,-16(fp)
   3c334:	10800017 	ldw	r2,0(r2)
   3c338:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3c33c:	e0fffe17 	ldw	r3,-8(fp)
   3c340:	e0bffc17 	ldw	r2,-16(fp)
   3c344:	10fff01e 	bne	r2,r3,3c308 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   3c348:	e03fff15 	stw	zero,-4(fp)
   3c34c:	e0bfff17 	ldw	r2,-4(fp)
}
   3c350:	e037883a 	mov	sp,fp
   3c354:	dfc00117 	ldw	ra,4(sp)
   3c358:	df000017 	ldw	fp,0(sp)
   3c35c:	dec00204 	addi	sp,sp,8
   3c360:	f800283a 	ret

0003c364 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   3c364:	defffa04 	addi	sp,sp,-24
   3c368:	dfc00515 	stw	ra,20(sp)
   3c36c:	df000415 	stw	fp,16(sp)
   3c370:	df000404 	addi	fp,sp,16
   3c374:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   3c378:	00800174 	movhi	r2,5
   3c37c:	10a76d04 	addi	r2,r2,-25164
   3c380:	10800017 	ldw	r2,0(r2)
   3c384:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3c388:	00003306 	br	3c458 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   3c38c:	e0bffd17 	ldw	r2,-12(fp)
   3c390:	11000217 	ldw	r4,8(r2)
   3c394:	00305cc0 	call	305cc <strlen>
   3c398:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   3c39c:	e0bffd17 	ldw	r2,-12(fp)
   3c3a0:	10c00217 	ldw	r3,8(r2)
   3c3a4:	e0bffc17 	ldw	r2,-16(fp)
   3c3a8:	1885883a 	add	r2,r3,r2
   3c3ac:	10bfffc4 	addi	r2,r2,-1
   3c3b0:	10800003 	ldbu	r2,0(r2)
   3c3b4:	10803fcc 	andi	r2,r2,255
   3c3b8:	1080201c 	xori	r2,r2,128
   3c3bc:	10bfe004 	addi	r2,r2,-128
   3c3c0:	10800bd8 	cmpnei	r2,r2,47
   3c3c4:	1000031e 	bne	r2,zero,3c3d4 <alt_find_file+0x70>
    {
      len -= 1;
   3c3c8:	e0bffc17 	ldw	r2,-16(fp)
   3c3cc:	10bfffc4 	addi	r2,r2,-1
   3c3d0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3c3d4:	e0bffc17 	ldw	r2,-16(fp)
   3c3d8:	1007883a 	mov	r3,r2
   3c3dc:	e0bffe17 	ldw	r2,-8(fp)
   3c3e0:	1885883a 	add	r2,r3,r2
   3c3e4:	10800003 	ldbu	r2,0(r2)
   3c3e8:	10803fcc 	andi	r2,r2,255
   3c3ec:	1080201c 	xori	r2,r2,128
   3c3f0:	10bfe004 	addi	r2,r2,-128
   3c3f4:	10800be0 	cmpeqi	r2,r2,47
   3c3f8:	10000a1e 	bne	r2,zero,3c424 <alt_find_file+0xc0>
   3c3fc:	e0bffc17 	ldw	r2,-16(fp)
   3c400:	1007883a 	mov	r3,r2
   3c404:	e0bffe17 	ldw	r2,-8(fp)
   3c408:	1885883a 	add	r2,r3,r2
   3c40c:	10800003 	ldbu	r2,0(r2)
   3c410:	10803fcc 	andi	r2,r2,255
   3c414:	1080201c 	xori	r2,r2,128
   3c418:	10bfe004 	addi	r2,r2,-128
   3c41c:	1004c03a 	cmpne	r2,r2,zero
   3c420:	10000a1e 	bne	r2,zero,3c44c <alt_find_file+0xe8>
   3c424:	e0bffd17 	ldw	r2,-12(fp)
   3c428:	11000217 	ldw	r4,8(r2)
   3c42c:	e1bffc17 	ldw	r6,-16(fp)
   3c430:	e17ffe17 	ldw	r5,-8(fp)
   3c434:	003c6300 	call	3c630 <memcmp>
   3c438:	1004c03a 	cmpne	r2,r2,zero
   3c43c:	1000031e 	bne	r2,zero,3c44c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   3c440:	e0bffd17 	ldw	r2,-12(fp)
   3c444:	e0bfff15 	stw	r2,-4(fp)
   3c448:	00000806 	br	3c46c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   3c44c:	e0bffd17 	ldw	r2,-12(fp)
   3c450:	10800017 	ldw	r2,0(r2)
   3c454:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3c458:	00c00174 	movhi	r3,5
   3c45c:	18e76d04 	addi	r3,r3,-25164
   3c460:	e0bffd17 	ldw	r2,-12(fp)
   3c464:	10ffc91e 	bne	r2,r3,3c38c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   3c468:	e03fff15 	stw	zero,-4(fp)
   3c46c:	e0bfff17 	ldw	r2,-4(fp)
}
   3c470:	e037883a 	mov	sp,fp
   3c474:	dfc00117 	ldw	ra,4(sp)
   3c478:	df000017 	ldw	fp,0(sp)
   3c47c:	dec00204 	addi	sp,sp,8
   3c480:	f800283a 	ret

0003c484 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   3c484:	defffa04 	addi	sp,sp,-24
   3c488:	dfc00515 	stw	ra,20(sp)
   3c48c:	df000415 	stw	fp,16(sp)
   3c490:	dc000315 	stw	r16,12(sp)
   3c494:	df000304 	addi	fp,sp,12
   3c498:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   3c49c:	00bffa04 	movi	r2,-24
   3c4a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3c4a4:	e03ffe15 	stw	zero,-8(fp)
   3c4a8:	00002006 	br	3c52c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   3c4ac:	e13ffe17 	ldw	r4,-8(fp)
   3c4b0:	04000174 	movhi	r16,5
   3c4b4:	8422ef04 	addi	r16,r16,-29764
   3c4b8:	01400304 	movi	r5,12
   3c4bc:	003981c0 	call	3981c <__mulsi3>
   3c4c0:	1405883a 	add	r2,r2,r16
   3c4c4:	10800017 	ldw	r2,0(r2)
   3c4c8:	1004c03a 	cmpne	r2,r2,zero
   3c4cc:	1000141e 	bne	r2,zero,3c520 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   3c4d0:	e13ffe17 	ldw	r4,-8(fp)
   3c4d4:	04000174 	movhi	r16,5
   3c4d8:	8422ef04 	addi	r16,r16,-29764
   3c4dc:	01400304 	movi	r5,12
   3c4e0:	003981c0 	call	3981c <__mulsi3>
   3c4e4:	1407883a 	add	r3,r2,r16
   3c4e8:	e0bfff17 	ldw	r2,-4(fp)
   3c4ec:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   3c4f0:	00800174 	movhi	r2,5
   3c4f4:	10a77104 	addi	r2,r2,-25148
   3c4f8:	10c00017 	ldw	r3,0(r2)
   3c4fc:	e0bffe17 	ldw	r2,-8(fp)
   3c500:	1880040e 	bge	r3,r2,3c514 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   3c504:	00c00174 	movhi	r3,5
   3c508:	18e77104 	addi	r3,r3,-25148
   3c50c:	e0bffe17 	ldw	r2,-8(fp)
   3c510:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   3c514:	e0bffe17 	ldw	r2,-8(fp)
   3c518:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   3c51c:	00000606 	br	3c538 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3c520:	e0bffe17 	ldw	r2,-8(fp)
   3c524:	10800044 	addi	r2,r2,1
   3c528:	e0bffe15 	stw	r2,-8(fp)
   3c52c:	e0bffe17 	ldw	r2,-8(fp)
   3c530:	10800810 	cmplti	r2,r2,32
   3c534:	103fdd1e 	bne	r2,zero,3c4ac <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   3c538:	e0bffd17 	ldw	r2,-12(fp)
}
   3c53c:	e037883a 	mov	sp,fp
   3c540:	dfc00217 	ldw	ra,8(sp)
   3c544:	df000117 	ldw	fp,4(sp)
   3c548:	dc000017 	ldw	r16,0(sp)
   3c54c:	dec00304 	addi	sp,sp,12
   3c550:	f800283a 	ret

0003c554 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   3c554:	defffb04 	addi	sp,sp,-20
   3c558:	df000415 	stw	fp,16(sp)
   3c55c:	df000404 	addi	fp,sp,16
   3c560:	e13ffe15 	stw	r4,-8(fp)
   3c564:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   3c568:	e0bfff17 	ldw	r2,-4(fp)
   3c56c:	10840070 	cmpltui	r2,r2,4097
   3c570:	1000021e 	bne	r2,zero,3c57c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   3c574:	00840004 	movi	r2,4096
   3c578:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   3c57c:	e0fffe17 	ldw	r3,-8(fp)
   3c580:	e0bfff17 	ldw	r2,-4(fp)
   3c584:	1885883a 	add	r2,r3,r2
   3c588:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   3c58c:	e0bffe17 	ldw	r2,-8(fp)
   3c590:	e0bffd15 	stw	r2,-12(fp)
   3c594:	00000506 	br	3c5ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   3c598:	e0bffd17 	ldw	r2,-12(fp)
   3c59c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   3c5a0:	e0bffd17 	ldw	r2,-12(fp)
   3c5a4:	10800804 	addi	r2,r2,32
   3c5a8:	e0bffd15 	stw	r2,-12(fp)
   3c5ac:	e0fffd17 	ldw	r3,-12(fp)
   3c5b0:	e0bffc17 	ldw	r2,-16(fp)
   3c5b4:	18bff836 	bltu	r3,r2,3c598 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   3c5b8:	e0bffe17 	ldw	r2,-8(fp)
   3c5bc:	108007cc 	andi	r2,r2,31
   3c5c0:	1005003a 	cmpeq	r2,r2,zero
   3c5c4:	1000021e 	bne	r2,zero,3c5d0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   3c5c8:	e0bffd17 	ldw	r2,-12(fp)
   3c5cc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   3c5d0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   3c5d4:	e037883a 	mov	sp,fp
   3c5d8:	df000017 	ldw	fp,0(sp)
   3c5dc:	dec00104 	addi	sp,sp,4
   3c5e0:	f800283a 	ret

0003c5e4 <atexit>:
   3c5e4:	200b883a 	mov	r5,r4
   3c5e8:	000d883a 	mov	r6,zero
   3c5ec:	0009883a 	mov	r4,zero
   3c5f0:	000f883a 	mov	r7,zero
   3c5f4:	003c6a41 	jmpi	3c6a4 <__register_exitproc>

0003c5f8 <exit>:
   3c5f8:	defffe04 	addi	sp,sp,-8
   3c5fc:	000b883a 	mov	r5,zero
   3c600:	dc000015 	stw	r16,0(sp)
   3c604:	dfc00115 	stw	ra,4(sp)
   3c608:	2021883a 	mov	r16,r4
   3c60c:	003c7dc0 	call	3c7dc <__call_exitprocs>
   3c610:	00800174 	movhi	r2,5
   3c614:	10a76804 	addi	r2,r2,-25184
   3c618:	11000017 	ldw	r4,0(r2)
   3c61c:	20800f17 	ldw	r2,60(r4)
   3c620:	10000126 	beq	r2,zero,3c628 <exit+0x30>
   3c624:	103ee83a 	callr	r2
   3c628:	8009883a 	mov	r4,r16
   3c62c:	003c9cc0 	call	3c9cc <_exit>

0003c630 <memcmp>:
   3c630:	00c000c4 	movi	r3,3
   3c634:	1980032e 	bgeu	r3,r6,3c644 <memcmp+0x14>
   3c638:	2144b03a 	or	r2,r4,r5
   3c63c:	10c4703a 	and	r2,r2,r3
   3c640:	10000f26 	beq	r2,zero,3c680 <memcmp+0x50>
   3c644:	31ffffc4 	addi	r7,r6,-1
   3c648:	3000061e 	bne	r6,zero,3c664 <memcmp+0x34>
   3c64c:	00000a06 	br	3c678 <memcmp+0x48>
   3c650:	39ffffc4 	addi	r7,r7,-1
   3c654:	00bfffc4 	movi	r2,-1
   3c658:	21000044 	addi	r4,r4,1
   3c65c:	29400044 	addi	r5,r5,1
   3c660:	38800526 	beq	r7,r2,3c678 <memcmp+0x48>
   3c664:	20c00003 	ldbu	r3,0(r4)
   3c668:	28800003 	ldbu	r2,0(r5)
   3c66c:	18bff826 	beq	r3,r2,3c650 <memcmp+0x20>
   3c670:	1885c83a 	sub	r2,r3,r2
   3c674:	f800283a 	ret
   3c678:	0005883a 	mov	r2,zero
   3c67c:	f800283a 	ret
   3c680:	180f883a 	mov	r7,r3
   3c684:	20c00017 	ldw	r3,0(r4)
   3c688:	28800017 	ldw	r2,0(r5)
   3c68c:	18bfed1e 	bne	r3,r2,3c644 <memcmp+0x14>
   3c690:	31bfff04 	addi	r6,r6,-4
   3c694:	21000104 	addi	r4,r4,4
   3c698:	29400104 	addi	r5,r5,4
   3c69c:	39bff936 	bltu	r7,r6,3c684 <memcmp+0x54>
   3c6a0:	003fe806 	br	3c644 <memcmp+0x14>

0003c6a4 <__register_exitproc>:
   3c6a4:	defffa04 	addi	sp,sp,-24
   3c6a8:	00800174 	movhi	r2,5
   3c6ac:	10a76804 	addi	r2,r2,-25184
   3c6b0:	dc000015 	stw	r16,0(sp)
   3c6b4:	14000017 	ldw	r16,0(r2)
   3c6b8:	dd000415 	stw	r20,16(sp)
   3c6bc:	2829883a 	mov	r20,r5
   3c6c0:	81405217 	ldw	r5,328(r16)
   3c6c4:	dcc00315 	stw	r19,12(sp)
   3c6c8:	dc800215 	stw	r18,8(sp)
   3c6cc:	dc400115 	stw	r17,4(sp)
   3c6d0:	dfc00515 	stw	ra,20(sp)
   3c6d4:	2023883a 	mov	r17,r4
   3c6d8:	3027883a 	mov	r19,r6
   3c6dc:	3825883a 	mov	r18,r7
   3c6e0:	28002526 	beq	r5,zero,3c778 <__register_exitproc+0xd4>
   3c6e4:	29000117 	ldw	r4,4(r5)
   3c6e8:	008007c4 	movi	r2,31
   3c6ec:	11002716 	blt	r2,r4,3c78c <__register_exitproc+0xe8>
   3c6f0:	8800101e 	bne	r17,zero,3c734 <__register_exitproc+0x90>
   3c6f4:	2105883a 	add	r2,r4,r4
   3c6f8:	1085883a 	add	r2,r2,r2
   3c6fc:	20c00044 	addi	r3,r4,1
   3c700:	1145883a 	add	r2,r2,r5
   3c704:	0009883a 	mov	r4,zero
   3c708:	15000215 	stw	r20,8(r2)
   3c70c:	28c00115 	stw	r3,4(r5)
   3c710:	2005883a 	mov	r2,r4
   3c714:	dfc00517 	ldw	ra,20(sp)
   3c718:	dd000417 	ldw	r20,16(sp)
   3c71c:	dcc00317 	ldw	r19,12(sp)
   3c720:	dc800217 	ldw	r18,8(sp)
   3c724:	dc400117 	ldw	r17,4(sp)
   3c728:	dc000017 	ldw	r16,0(sp)
   3c72c:	dec00604 	addi	sp,sp,24
   3c730:	f800283a 	ret
   3c734:	29802204 	addi	r6,r5,136
   3c738:	00800044 	movi	r2,1
   3c73c:	110e983a 	sll	r7,r2,r4
   3c740:	30c04017 	ldw	r3,256(r6)
   3c744:	2105883a 	add	r2,r4,r4
   3c748:	1085883a 	add	r2,r2,r2
   3c74c:	1185883a 	add	r2,r2,r6
   3c750:	19c6b03a 	or	r3,r3,r7
   3c754:	14802015 	stw	r18,128(r2)
   3c758:	14c00015 	stw	r19,0(r2)
   3c75c:	00800084 	movi	r2,2
   3c760:	30c04015 	stw	r3,256(r6)
   3c764:	88bfe31e 	bne	r17,r2,3c6f4 <__register_exitproc+0x50>
   3c768:	30804117 	ldw	r2,260(r6)
   3c76c:	11c4b03a 	or	r2,r2,r7
   3c770:	30804115 	stw	r2,260(r6)
   3c774:	003fdf06 	br	3c6f4 <__register_exitproc+0x50>
   3c778:	00800174 	movhi	r2,5
   3c77c:	10a7d304 	addi	r2,r2,-24756
   3c780:	100b883a 	mov	r5,r2
   3c784:	80805215 	stw	r2,328(r16)
   3c788:	003fd606 	br	3c6e4 <__register_exitproc+0x40>
   3c78c:	00800034 	movhi	r2,0
   3c790:	10800004 	addi	r2,r2,0
   3c794:	1000021e 	bne	r2,zero,3c7a0 <__register_exitproc+0xfc>
   3c798:	013fffc4 	movi	r4,-1
   3c79c:	003fdc06 	br	3c710 <__register_exitproc+0x6c>
   3c7a0:	01006404 	movi	r4,400
   3c7a4:	103ee83a 	callr	r2
   3c7a8:	1007883a 	mov	r3,r2
   3c7ac:	103ffa26 	beq	r2,zero,3c798 <__register_exitproc+0xf4>
   3c7b0:	80805217 	ldw	r2,328(r16)
   3c7b4:	180b883a 	mov	r5,r3
   3c7b8:	18000115 	stw	zero,4(r3)
   3c7bc:	18800015 	stw	r2,0(r3)
   3c7c0:	80c05215 	stw	r3,328(r16)
   3c7c4:	18006215 	stw	zero,392(r3)
   3c7c8:	18006315 	stw	zero,396(r3)
   3c7cc:	0009883a 	mov	r4,zero
   3c7d0:	883fc826 	beq	r17,zero,3c6f4 <__register_exitproc+0x50>
   3c7d4:	003fd706 	br	3c734 <__register_exitproc+0x90>

0003c7d8 <register_fini>:
   3c7d8:	f800283a 	ret

0003c7dc <__call_exitprocs>:
   3c7dc:	00800174 	movhi	r2,5
   3c7e0:	10a76804 	addi	r2,r2,-25184
   3c7e4:	10800017 	ldw	r2,0(r2)
   3c7e8:	defff304 	addi	sp,sp,-52
   3c7ec:	df000b15 	stw	fp,44(sp)
   3c7f0:	d8800115 	stw	r2,4(sp)
   3c7f4:	00800034 	movhi	r2,0
   3c7f8:	10800004 	addi	r2,r2,0
   3c7fc:	1005003a 	cmpeq	r2,r2,zero
   3c800:	d8800215 	stw	r2,8(sp)
   3c804:	d8800117 	ldw	r2,4(sp)
   3c808:	dd400815 	stw	r21,32(sp)
   3c80c:	dd000715 	stw	r20,28(sp)
   3c810:	10805204 	addi	r2,r2,328
   3c814:	dfc00c15 	stw	ra,48(sp)
   3c818:	ddc00a15 	stw	r23,40(sp)
   3c81c:	dd800915 	stw	r22,36(sp)
   3c820:	dcc00615 	stw	r19,24(sp)
   3c824:	dc800515 	stw	r18,20(sp)
   3c828:	dc400415 	stw	r17,16(sp)
   3c82c:	dc000315 	stw	r16,12(sp)
   3c830:	282b883a 	mov	r21,r5
   3c834:	2039883a 	mov	fp,r4
   3c838:	d8800015 	stw	r2,0(sp)
   3c83c:	2829003a 	cmpeq	r20,r5,zero
   3c840:	d8800117 	ldw	r2,4(sp)
   3c844:	14405217 	ldw	r17,328(r2)
   3c848:	88001026 	beq	r17,zero,3c88c <__call_exitprocs+0xb0>
   3c84c:	ddc00017 	ldw	r23,0(sp)
   3c850:	88800117 	ldw	r2,4(r17)
   3c854:	8c802204 	addi	r18,r17,136
   3c858:	143fffc4 	addi	r16,r2,-1
   3c85c:	80000916 	blt	r16,zero,3c884 <__call_exitprocs+0xa8>
   3c860:	05bfffc4 	movi	r22,-1
   3c864:	a000151e 	bne	r20,zero,3c8bc <__call_exitprocs+0xe0>
   3c868:	8409883a 	add	r4,r16,r16
   3c86c:	2105883a 	add	r2,r4,r4
   3c870:	1485883a 	add	r2,r2,r18
   3c874:	10c02017 	ldw	r3,128(r2)
   3c878:	a8c01126 	beq	r21,r3,3c8c0 <__call_exitprocs+0xe4>
   3c87c:	843fffc4 	addi	r16,r16,-1
   3c880:	85bff81e 	bne	r16,r22,3c864 <__call_exitprocs+0x88>
   3c884:	d8800217 	ldw	r2,8(sp)
   3c888:	10003126 	beq	r2,zero,3c950 <__call_exitprocs+0x174>
   3c88c:	dfc00c17 	ldw	ra,48(sp)
   3c890:	df000b17 	ldw	fp,44(sp)
   3c894:	ddc00a17 	ldw	r23,40(sp)
   3c898:	dd800917 	ldw	r22,36(sp)
   3c89c:	dd400817 	ldw	r21,32(sp)
   3c8a0:	dd000717 	ldw	r20,28(sp)
   3c8a4:	dcc00617 	ldw	r19,24(sp)
   3c8a8:	dc800517 	ldw	r18,20(sp)
   3c8ac:	dc400417 	ldw	r17,16(sp)
   3c8b0:	dc000317 	ldw	r16,12(sp)
   3c8b4:	dec00d04 	addi	sp,sp,52
   3c8b8:	f800283a 	ret
   3c8bc:	8409883a 	add	r4,r16,r16
   3c8c0:	88c00117 	ldw	r3,4(r17)
   3c8c4:	2105883a 	add	r2,r4,r4
   3c8c8:	1445883a 	add	r2,r2,r17
   3c8cc:	18ffffc4 	addi	r3,r3,-1
   3c8d0:	11800217 	ldw	r6,8(r2)
   3c8d4:	1c001526 	beq	r3,r16,3c92c <__call_exitprocs+0x150>
   3c8d8:	10000215 	stw	zero,8(r2)
   3c8dc:	303fe726 	beq	r6,zero,3c87c <__call_exitprocs+0xa0>
   3c8e0:	00c00044 	movi	r3,1
   3c8e4:	1c06983a 	sll	r3,r3,r16
   3c8e8:	90804017 	ldw	r2,256(r18)
   3c8ec:	8cc00117 	ldw	r19,4(r17)
   3c8f0:	1884703a 	and	r2,r3,r2
   3c8f4:	10001426 	beq	r2,zero,3c948 <__call_exitprocs+0x16c>
   3c8f8:	90804117 	ldw	r2,260(r18)
   3c8fc:	1884703a 	and	r2,r3,r2
   3c900:	10000c1e 	bne	r2,zero,3c934 <__call_exitprocs+0x158>
   3c904:	2105883a 	add	r2,r4,r4
   3c908:	1485883a 	add	r2,r2,r18
   3c90c:	11400017 	ldw	r5,0(r2)
   3c910:	e009883a 	mov	r4,fp
   3c914:	303ee83a 	callr	r6
   3c918:	88800117 	ldw	r2,4(r17)
   3c91c:	98bfc81e 	bne	r19,r2,3c840 <__call_exitprocs+0x64>
   3c920:	b8800017 	ldw	r2,0(r23)
   3c924:	147fd526 	beq	r2,r17,3c87c <__call_exitprocs+0xa0>
   3c928:	003fc506 	br	3c840 <__call_exitprocs+0x64>
   3c92c:	8c000115 	stw	r16,4(r17)
   3c930:	003fea06 	br	3c8dc <__call_exitprocs+0x100>
   3c934:	2105883a 	add	r2,r4,r4
   3c938:	1485883a 	add	r2,r2,r18
   3c93c:	11000017 	ldw	r4,0(r2)
   3c940:	303ee83a 	callr	r6
   3c944:	003ff406 	br	3c918 <__call_exitprocs+0x13c>
   3c948:	303ee83a 	callr	r6
   3c94c:	003ff206 	br	3c918 <__call_exitprocs+0x13c>
   3c950:	88800117 	ldw	r2,4(r17)
   3c954:	1000081e 	bne	r2,zero,3c978 <__call_exitprocs+0x19c>
   3c958:	89000017 	ldw	r4,0(r17)
   3c95c:	20000726 	beq	r4,zero,3c97c <__call_exitprocs+0x1a0>
   3c960:	b9000015 	stw	r4,0(r23)
   3c964:	8809883a 	mov	r4,r17
   3c968:	00000000 	call	0 <__alt_mem_onchip_sharedmem-0x20000>
   3c96c:	bc400017 	ldw	r17,0(r23)
   3c970:	883fb71e 	bne	r17,zero,3c850 <__call_exitprocs+0x74>
   3c974:	003fc506 	br	3c88c <__call_exitprocs+0xb0>
   3c978:	89000017 	ldw	r4,0(r17)
   3c97c:	882f883a 	mov	r23,r17
   3c980:	2023883a 	mov	r17,r4
   3c984:	883fb21e 	bne	r17,zero,3c850 <__call_exitprocs+0x74>
   3c988:	003fc006 	br	3c88c <__call_exitprocs+0xb0>

0003c98c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   3c98c:	defffd04 	addi	sp,sp,-12
   3c990:	df000215 	stw	fp,8(sp)
   3c994:	df000204 	addi	fp,sp,8
   3c998:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   3c99c:	e0bfff17 	ldw	r2,-4(fp)
   3c9a0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   3c9a4:	e0bffe17 	ldw	r2,-8(fp)
   3c9a8:	1005003a 	cmpeq	r2,r2,zero
   3c9ac:	1000021e 	bne	r2,zero,3c9b8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   3c9b0:	002af070 	cmpltui	zero,zero,43969
   3c9b4:	00000106 	br	3c9bc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   3c9b8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   3c9bc:	e037883a 	mov	sp,fp
   3c9c0:	df000017 	ldw	fp,0(sp)
   3c9c4:	dec00104 	addi	sp,sp,4
   3c9c8:	f800283a 	ret

0003c9cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   3c9cc:	defffd04 	addi	sp,sp,-12
   3c9d0:	dfc00215 	stw	ra,8(sp)
   3c9d4:	df000115 	stw	fp,4(sp)
   3c9d8:	df000104 	addi	fp,sp,4
   3c9dc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   3c9e0:	e13fff17 	ldw	r4,-4(fp)
   3c9e4:	003c98c0 	call	3c98c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   3c9e8:	003fff06 	br	3c9e8 <_exit+0x1c>
   3c9ec:	0003c7d8 	cmpnei	zero,zero,3871
