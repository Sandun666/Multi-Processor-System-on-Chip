
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000c990 memsz 0x0000c990 flags r-x
    LOAD off    0x0000e390 vaddr 0x00038390 paddr 0x0001c9b0 align 2**12
         filesz 0x00001a5c memsz 0x00001d5c flags rw-
    LOAD off    0x00010000 vaddr 0x00038000 paddr 0x00038000 align 2**12
         filesz 0x00000390 memsz 0x00000390 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c7fc  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000390  00038000  00038000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  00038390  0001c9b0  0000e390  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00039dec  0001e40c  0000fdec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  000103b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013ff  00000000  00000000  00011070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000235c1  00000000  00000000  0001246f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000079fe  00000000  00000000  00035a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013797  00000000  00000000  0003d42e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018e0  00000000  00000000  00050bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000223c  00000000  00000000  000524a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be48  00000000  00000000  000546e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0006052c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00060550  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063f5f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00063f62  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063f66  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063f67  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00063f68  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00063f6c  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00063f70  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000a  00000000  00000000  00063f74  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000a  00000000  00000000  00063f7e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000a  00000000  00000000  00063f88  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  00063f92  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000058  00000000  00000000  00063f97  2**0
                  CONTENTS, READONLY
 29 .jdi          0000872d  00000000  00000000  00063fef  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00062eff  00000000  00000000  0006c71c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00038000 l    d  .rodata	00000000 .rodata
00038390 l    d  .rwdata	00000000 .rwdata
00039dec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010600 l     F .text	00000058 __sprint_r
000380c6 l     O .rodata	00000010 blanks.3452
000380b6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0001267c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000140a4 l     F .text	00000058 std
000141b0 l     F .text	00000008 __fp_lock
000141b8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00038390 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00039db8 l     O .rwdata	00000004 charset
000380fc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00038244 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00018564 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00019690 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00019fcc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001a02c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001a130 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001a254 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001a334 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a494 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a6c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00039ddc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a97c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00038d4c l     O .rwdata	00001060 jtag_uart1
0001aa6c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001acac l     F .text	00000228 altera_avalon_jtag_uart_irq
0001aed4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b550 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b874 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001bc98 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001bde8 l     F .text	000000f8 alt_file_locked
0001c06c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001c798 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0001c94c l     F .text	00000040 alt_sim_halt
00015e94 g     F .text	00000094 _mprec_log10
00015f80 g     F .text	00000088 __any_on
00017738 g     F .text	00000070 _isatty_r
0003821c g     O .rodata	00000028 __mprec_tinytens
0001a4f4 g     F .text	0000006c alt_main
000104d8 g     F .text	000000a0 _puts_r
00039dec g     O .bss	00000004 writep
00039e5c g     O .bss	00000100 alt_irq
000177a8 g     F .text	00000078 _lseek_r
0001c9b0 g       *ABS*	00000000 __flash_rwdata_start
00019084 g     F .text	00000088 __eqdf2
0001032c g     F .text	00000048 FIFO_1_INIT
0003a0ec g       *ABS*	00000000 __alt_heap_start
00010460 g     F .text	00000044 printf
000171f0 g     F .text	00000068 __sseek
0001410c g     F .text	000000a4 __sinit
00014e18 g     F .text	00000084 _setlocale_r
0001420c g     F .text	0000009c __sfmoreglue
0001a580 g     F .text	00000020 __malloc_unlock
00015910 g     F .text	000000e0 memmove
000141fc g     F .text	00000010 _cleanup
00016008 g     F .text	000000bc _Balloc
00020000 g       *ABS*	00000000 __alt_mem_onchip_sharedmem
00019194 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000176c4 g     F .text	00000074 _fstat_r
00039e18 g     O .bss	00000004 errno
00039e20 g     O .bss	00000004 alt_argv
00041dac g       *ABS*	00000000 _gp
00038bcc g     O .rwdata	00000180 alt_fd_list
0001c290 g     F .text	00000094 alt_find_dev
00015870 g     F .text	000000a0 memcpy
000141f0 g     F .text	0000000c _cleanup_r
0001932c g     F .text	000000f8 __floatsidf
0001bd70 g     F .text	00000078 alt_io_redirect
000192a4 g     F .text	00000088 __ltdf2
0001c9b0 g       *ABS*	00000000 __DTOR_END__
00010578 g     F .text	00000014 puts
00015de4 g     F .text	000000b0 __ratio
0001b0ec g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000104a4 g     F .text	00000034 _printf_r
000197cc g     F .text	00000008 __udivsi3
0001a190 g     F .text	000000c4 isatty
0003812c g     O .rodata	000000c8 __mprec_tens
00014df4 g     F .text	00000008 __locale_charset
0001c514 g     F .text	00000090 alt_icache_flush
00039e0c g     O .bss	00000004 __malloc_top_pad
00039db4 g     O .rwdata	00000004 __mb_cur_max
00014dfc g     F .text	0000000c _localeconv_r
0001676c g     F .text	0000003c __i2b
000147d8 g     F .text	0000049c __sfvwrite_r
00017178 g     F .text	00000070 _sbrk_r
0001038c g     F .text	00000090 consumer
00039df0 g     O .bss	00000004 fullp
00017820 g     F .text	00000078 _read_r
00038790 g     O .rwdata	0000000c __lc_ctype
00039dd4 g     O .rwdata	00000004 alt_max_fd
00019ccc g     F .text	00000138 __unpack_d
000175a0 g     F .text	00000110 _fclose_r
00014070 g     F .text	00000034 fflush
00039e10 g     O .bss	00000004 __malloc_max_sbrked_mem
000189f4 g     F .text	00000074 __adddf3
00015cc4 g     F .text	00000120 __b2d
00017f04 g     F .text	00000660 __umoddi3
0001a3a0 g     F .text	000000f4 lseek
00039db0 g     O .rwdata	00000004 _global_impure_ptr
00016b14 g     F .text	000005f4 _realloc_r
0003a0ec g       *ABS*	00000000 __bss_end
0001bba0 g     F .text	000000f8 alt_iic_isr_register
0001c164 g     F .text	0000010c alt_tick
00017898 g     F .text	0000066c __udivdi3
000381f4 g     O .rodata	00000028 __mprec_bigtens
000169f4 g     F .text	00000120 __s2b
000194fc g     F .text	00000194 __floatunsidf
00015be4 g     F .text	00000060 __mcmp
000141d8 g     F .text	00000018 __fp_lock_all
0001bb58 g     F .text	00000048 alt_ic_irq_enabled
0001c0cc g     F .text	00000098 alt_alarm_stop
00039e28 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00038ba4 g     O .rwdata	00000028 alt_dev_null
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem1
0001b7a4 g     F .text	0000001c alt_dcache_flush_all
00015ab0 g     F .text	00000070 __hi0bits
00019424 g     F .text	000000d8 __fixdfsi
00039dec g       *ABS*	00000000 __ram_rwdata_end
00039dcc g     O .rwdata	00000008 alt_dev_list
0001a858 g     F .text	00000124 write
00038390 g       *ABS*	00000000 __ram_rodata_end
0001a058 g     F .text	000000d8 fstat
000168d4 g     F .text	00000120 __pow5mult
00039e00 g     O .bss	00000004 __nlocale_changed
000197d4 g     F .text	00000008 __umodsi3
0003a0ec g       *ABS*	00000000 end
0001abec g     F .text	000000c0 altera_avalon_jtag_uart_init
0001c9ac g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0001b5c0 g     F .text	00000090 alt_avalon_timer_sc_init
00019938 g     F .text	00000080 __clzsi2
0001b310 g     F .text	00000240 altera_avalon_jtag_uart_write
000140fc g     F .text	00000004 __sfp_lock_acquire
0001578c g     F .text	000000e4 memchr
00010658 g     F .text	00001ec4 ___vfprintf_internal_r
000144c4 g     F .text	00000314 _free_r
0001c79c g     F .text	000001b0 __call_exitprocs
00039e04 g     O .bss	00000004 __mlocale_changed
00039dc0 g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000003c _start
00039e2c g     O .bss	00000004 _alt_tick_rate
000163cc g     F .text	0000014c __lshift
00039e30 g     O .bss	00000004 _alt_nticks
0001a5a0 g     F .text	00000124 read
0001aa10 g     F .text	0000005c alt_sys_init
0001c664 g     F .text	00000134 __register_exitproc
00016518 g     F .text	00000254 __multiply
0001af84 g     F .text	00000074 altera_avalon_jtag_uart_close
000197dc g     F .text	00000038 __mulsi3
00038390 g       *ABS*	00000000 __ram_rwdata_start
00038000 g       *ABS*	00000000 __ram_rodata_start
00039e34 g     O .bss	00000028 __malloc_current_mallinfo
000160c4 g     F .text	0000017c __d2b
0001aaa4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0001c444 g     F .text	000000d0 alt_get_fd
00019e04 g     F .text	000000c8 __fpcmp_parts_d
00017530 g     F .text	00000070 _close_r
0001c5f0 g     F .text	00000074 memcmp
0001ab54 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0003a0ec g       *ABS*	00000000 __alt_stack_base
0001ab9c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00012540 g     F .text	0000013c __swsetup_r
00018e2c g     F .text	00000258 __divdf3
000142a8 g     F .text	000000f0 __sfp
00015f28 g     F .text	00000058 __copybits
0003879c g     O .rwdata	00000408 __malloc_av_
00014108 g     F .text	00000004 __sinit_lock_release
00018a68 g     F .text	000003c4 __muldf3
000172d4 g     F .text	00000060 __sread
0001c324 g     F .text	00000120 alt_find_file
0001b7c0 g     F .text	000000b4 alt_dev_llist_insert
0001a560 g     F .text	00000020 __malloc_lock
0001a79c g     F .text	000000bc sbrk
00013e74 g     F .text	000001fc _fflush_r
00017468 g     F .text	000000c8 _calloc_r
00039dec g       *ABS*	00000000 __bss_start
000159f0 g     F .text	00000098 memset
00010374 g     F .text	00000018 main
00039e24 g     O .bss	00000004 alt_envp
00039e14 g     O .bss	00000004 __malloc_max_total_mem
0001aafc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000171e8 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
000176b0 g     F .text	00000014 fclose
00039f5c g     O .bss	00000190 _atexit0
000128c0 g     F .text	000015b4 _dtoa_r
0001504c g     F .text	00000740 _malloc_r
00039dd8 g     O .rwdata	00000004 alt_errno
00014d3c g     F .text	000000b8 _fwalk
0001970c g     F .text	00000060 __divsi3
00038250 g     O .rodata	00000014 __thenan_df
00014398 g     F .text	0000012c _malloc_trim_r
0001c9b0 g       *ABS*	00000000 __CTOR_END__
00017334 g     F .text	000000bc strcmp
00038000 g       *ABS*	00000000 __flash_rodata_start
0001c9b0 g       *ABS*	00000000 __DTOR_LIST__
0001041c g     F .text	00000044 delay
0001910c g     F .text	00000088 __nedf2
0001a9dc g     F .text	00000034 alt_irq_init
0001a724 g     F .text	00000078 alt_release_fd
00038264 g     O .rodata	00000100 __clz_tab
00039e08 g     O .bss	00000004 _PathLocale
0001c5a4 g     F .text	00000014 atexit
000173f0 g     F .text	00000078 _write_r
00014e9c g     F .text	0000001c setlocale
00038000 g       *ABS*	00000000 __alt_mem_onchip_memdata1
00039dac g     O .rwdata	00000004 _impure_ptr
00039e1c g     O .bss	00000004 alt_argc
0001b938 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00015c44 g     F .text	00000080 __ulp
00017108 g     F .text	00000040 __isinfd
000141c0 g     F .text	00000018 __fp_unlock_all
00039dc4 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014e08 g     F .text	00000010 localeconv
0001b9cc g     F .text	00000050 alt_ic_isr_register
00039dec g       *ABS*	00000000 _edata
0003a0ec g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
0001aff8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001bab8 g     F .text	000000a0 alt_ic_irq_disable
00017258 g     F .text	0000007c __swrite
00039dbc g     O .rwdata	00000004 __malloc_trim_threshold
0001c270 g     F .text	00000020 altera_nios2_qsys_irq_init
0001c5b8 g     F .text	00000038 exit
00014c74 g     F .text	000000c8 _fwalk_reent
00016240 g     F .text	0000018c __mdiff
00039df4 g     O .bss	00000004 readpp
0001976c g     F .text	00000060 __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00014100 g     F .text	00000004 __sfp_lock_release
0001c98c g     F .text	00000020 _exit
00017148 g     F .text	00000030 __isnand
0001b650 g     F .text	00000154 alt_alarm_start
00019814 g     F .text	00000124 __muldi3
00014eb8 g     F .text	00000194 __smakebuf_r
0001058c g     F .text	00000074 strlen
0001bee0 g     F .text	0000018c open
0001921c g     F .text	00000088 __gedf2
000101f0 g     F .text	0000013c READ_FIFO_1
0001b99c g     F .text	00000030 alt_icache_flush_all
00039de0 g     O .rwdata	00000004 alt_priority_mask
00039df8 g     O .bss	00000004 emptyp
0001ba1c g     F .text	0000009c alt_ic_irq_enable
0001251c g     F .text	00000024 __vfprintf_internal
00018974 g     F .text	00000080 __subdf3
00015b20 g     F .text	000000c4 __lo0bits
00039de4 g     O .rwdata	00000008 alt_alarm_list
0001b8d4 g     F .text	00000064 _do_ctors
00039dfc g     O .bss	00000004 countp
00019ecc g     F .text	00000100 close
0001a2b4 g     F .text	00000080 alt_load
000199b8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00014104 g     F .text	00000004 __sinit_lock_acquire
000167a8 g     F .text	0000012c __multadd
00015a88 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406d14 	ori	at,at,436
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_mem1-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c00134 	movhi	r3,4
   10134:	18e79704 	addi	r3,r3,-24996
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c00134 	movhi	r3,4
   1014c:	18e79704 	addi	r3,r3,-24996
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   101c0:	d6876b14 	ori	gp,gp,7596
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   101c8:	10a77b14 	ori	r2,r2,40428

    movhi r3, %hi(__bss_end)
   101cc:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   101d0:	18e83b14 	ori	r3,r3,41196

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	001a2b40 	call	1a2b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	001a4f40 	call	1a4f4 <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <READ_FIFO_1>:
//	}
//}


void READ_FIFO_1(int *buffer)
{
   101f0:	defffd04 	addi	sp,sp,-12
   101f4:	dfc00215 	stw	ra,8(sp)
   101f8:	df000115 	stw	fp,4(sp)
   101fc:	df000104 	addi	fp,sp,4
   10200:	e13fff15 	stw	r4,-4(fp)
	// Wait if the FIFO is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==1);
   10204:	d0a01317 	ldw	r2,-32692(gp)
   10208:	1007883a 	mov	r3,r2
   1020c:	008000b4 	movhi	r2,2
   10210:	1885883a 	add	r2,r3,r2
   10214:	10800037 	ldwio	r2,0(r2)
   10218:	10800060 	cmpeqi	r2,r2,1
   1021c:	103ff91e 	bne	r2,zero,10204 <READ_FIFO_1+0x14>
	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE,readpp);
   10220:	d0a01217 	ldw	r2,-32696(gp)
   10224:	1007883a 	mov	r3,r2
   10228:	008000b4 	movhi	r2,2
   1022c:	1885883a 	add	r2,r3,r2
   10230:	10c00037 	ldwio	r3,0(r2)
   10234:	e0bfff17 	ldw	r2,-4(fp)
   10238:	10c00015 	stw	r3,0(r2)
	printf("%i\n",readpp);
   1023c:	d1601217 	ldw	r5,-32696(gp)
   10240:	01000134 	movhi	r4,4
   10244:	21200004 	addi	r4,r4,-32768
   10248:	00104600 	call	10460 <printf>
	// Update the read pointer
	readpp += UNIT_SIZE;
   1024c:	d0a01217 	ldw	r2,-32696(gp)
   10250:	10800104 	addi	r2,r2,4
   10254:	d0a01215 	stw	r2,-32696(gp)
	// Update "count" in shared memory
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp)-1);
   10258:	d0a01417 	ldw	r2,-32688(gp)
   1025c:	1007883a 	mov	r3,r2
   10260:	008000b4 	movhi	r2,2
   10264:	1889883a 	add	r4,r3,r2
   10268:	d0a01417 	ldw	r2,-32688(gp)
   1026c:	1007883a 	mov	r3,r2
   10270:	008000b4 	movhi	r2,2
   10274:	1885883a 	add	r2,r3,r2
   10278:	10800037 	ldwio	r2,0(r2)
   1027c:	10ffffc4 	addi	r3,r2,-1
   10280:	2005883a 	mov	r2,r4
   10284:	10c00035 	stwio	r3,0(r2)
	// Update the "full?" and "empty?" flags accordingly
	if(IORD_32DIRECT(MEM_BASE,countp) == 0){
   10288:	d0a01417 	ldw	r2,-32688(gp)
   1028c:	1007883a 	mov	r3,r2
   10290:	008000b4 	movhi	r2,2
   10294:	1885883a 	add	r2,r3,r2
   10298:	10800037 	ldwio	r2,0(r2)
   1029c:	1004c03a 	cmpne	r2,r2,zero
   102a0:	1000081e 	bne	r2,zero,102c4 <READ_FIFO_1+0xd4>
		IOWR_32DIRECT(MEM_BASE, emptyp, 0x1);
   102a4:	d0a01317 	ldw	r2,-32692(gp)
   102a8:	1007883a 	mov	r3,r2
   102ac:	008000b4 	movhi	r2,2
   102b0:	1885883a 	add	r2,r3,r2
   102b4:	1007883a 	mov	r3,r2
   102b8:	00800044 	movi	r2,1
   102bc:	18800035 	stwio	r2,0(r3)
   102c0:	00001006 	br	10304 <READ_FIFO_1+0x114>
	}
	// Reset the FULLP flag if FIFO now has count SMALLER THAN CAPACITY
	else if(IORD_32DIRECT(MEM_BASE,countp)<CAPACITY){
   102c4:	d0a01417 	ldw	r2,-32688(gp)
   102c8:	1007883a 	mov	r3,r2
   102cc:	008000b4 	movhi	r2,2
   102d0:	1885883a 	add	r2,r3,r2
   102d4:	10800037 	ldwio	r2,0(r2)
   102d8:	10800408 	cmpgei	r2,r2,16
   102dc:	1000091e 	bne	r2,zero,10304 <READ_FIFO_1+0x114>
		printf("%i",fullp);
   102e0:	d1601117 	ldw	r5,-32700(gp)
   102e4:	01000134 	movhi	r4,4
   102e8:	21200104 	addi	r4,r4,-32764
   102ec:	00104600 	call	10460 <printf>
		IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
   102f0:	d0a01117 	ldw	r2,-32700(gp)
   102f4:	1007883a 	mov	r3,r2
   102f8:	008000b4 	movhi	r2,2
   102fc:	1885883a 	add	r2,r3,r2
   10300:	10000035 	stwio	zero,0(r2)
	}
	//if read pointer hit the end off the queue
	if(readpp == STARTP + CAPACITY*UNIT_SIZE)
   10304:	d0a01217 	ldw	r2,-32696(gp)
   10308:	10801318 	cmpnei	r2,r2,76
   1030c:	1000021e 	bne	r2,zero,10318 <READ_FIFO_1+0x128>
		readpp = STARTP;
   10310:	00800304 	movi	r2,12
   10314:	d0a01215 	stw	r2,-32696(gp)


}
   10318:	e037883a 	mov	sp,fp
   1031c:	dfc00117 	ldw	ra,4(sp)
   10320:	df000017 	ldw	fp,0(sp)
   10324:	dec00204 	addi	sp,sp,8
   10328:	f800283a 	ret

0001032c <FIFO_1_INIT>:



//Initialization
void FIFO_1_INIT()
{
   1032c:	deffff04 	addi	sp,sp,-4
   10330:	df000015 	stw	fp,0(sp)
   10334:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   10338:	00800304 	movi	r2,12
   1033c:	d0a01015 	stw	r2,-32704(gp)
	readpp  = STARTP;
   10340:	00800304 	movi	r2,12
   10344:	d0a01215 	stw	r2,-32696(gp)
	fullp   = 0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   10348:	d0201115 	stw	zero,-32700(gp)
	emptyp   = fullp + 0x4;
   1034c:	d0a01117 	ldw	r2,-32700(gp)
   10350:	10800104 	addi	r2,r2,4
   10354:	d0a01315 	stw	r2,-32692(gp)
	countp  = emptyp + 0x4;
   10358:	d0a01317 	ldw	r2,-32692(gp)
   1035c:	10800104 	addi	r2,r2,4
   10360:	d0a01415 	stw	r2,-32688(gp)

	// Assigning values for the flags.
//	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
//	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
//	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
}
   10364:	e037883a 	mov	sp,fp
   10368:	df000017 	ldw	fp,0(sp)
   1036c:	dec00104 	addi	sp,sp,4
   10370:	f800283a 	ret

00010374 <main>:
void delay(int n);
int consumer();


int main()
{
   10374:	defffe04 	addi	sp,sp,-8
   10378:	dfc00115 	stw	ra,4(sp)
   1037c:	df000015 	stw	fp,0(sp)
   10380:	d839883a 	mov	fp,sp
	consumer();
   10384:	001038c0 	call	1038c <consumer>
	
	while(1) { }
   10388:	003fff06 	br	10388 <main+0x14>

0001038c <consumer>:
	return 0;
}


int consumer()
{
   1038c:	defffc04 	addi	sp,sp,-16
   10390:	dfc00315 	stw	ra,12(sp)
   10394:	df000215 	stw	fp,8(sp)
   10398:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
   1039c:	01000134 	movhi	r4,4
   103a0:	21200204 	addi	r4,r4,-32760
   103a4:	00105780 	call	10578 <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   103a8:	001032c0 	call	1032c <FIFO_1_INIT>

	int j = 0;
   103ac:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   103b0:	00800144 	movi	r2,5
   103b4:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
   103b8:	00000c06 	br	103ec <consumer+0x60>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   103bc:	e13fff04 	addi	r4,fp,-4
   103c0:	00101f00 	call	101f0 <READ_FIFO_1>
		if(j==k)
   103c4:	e0ffff17 	ldw	r3,-4(fp)
   103c8:	e0bffe17 	ldw	r2,-8(fp)
   103cc:	1880041e 	bne	r3,r2,103e0 <consumer+0x54>
			printf("Consumer succefully received [%i]\n",j);
   103d0:	e17fff17 	ldw	r5,-4(fp)
   103d4:	01000134 	movhi	r4,4
   103d8:	21200704 	addi	r4,r4,-32740
   103dc:	00104600 	call	10460 <printf>
		k+=10;
   103e0:	e0bffe17 	ldw	r2,-8(fp)
   103e4:	10800284 	addi	r2,r2,10
   103e8:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   103ec:	e0bffe17 	ldw	r2,-8(fp)
   103f0:	10807d10 	cmplti	r2,r2,500
   103f4:	103ff11e 	bne	r2,zero,103bc <consumer+0x30>
		if(j==k)
			printf("Consumer succefully received [%i]\n",j);
		k+=10;
	}

	printf("Consumer finished..\n");
   103f8:	01000134 	movhi	r4,4
   103fc:	21201004 	addi	r4,r4,-32704
   10400:	00105780 	call	10578 <puts>
	return 0;
   10404:	0005883a 	mov	r2,zero
}
   10408:	e037883a 	mov	sp,fp
   1040c:	dfc00117 	ldw	ra,4(sp)
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00204 	addi	sp,sp,8
   10418:	f800283a 	ret

0001041c <delay>:


void delay(int n)
{
   1041c:	defffd04 	addi	sp,sp,-12
   10420:	df000215 	stw	fp,8(sp)
   10424:	df000204 	addi	fp,sp,8
   10428:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   1042c:	e0bfff17 	ldw	r2,-4(fp)
   10430:	e0bffe15 	stw	r2,-8(fp)
   10434:	00000306 	br	10444 <delay+0x28>
   10438:	e0bffe17 	ldw	r2,-8(fp)
   1043c:	10bfffc4 	addi	r2,r2,-1
   10440:	e0bffe15 	stw	r2,-8(fp)
   10444:	e0bffe17 	ldw	r2,-8(fp)
   10448:	10800048 	cmpgei	r2,r2,1
   1044c:	103ffa1e 	bne	r2,zero,10438 <delay+0x1c>
	{
		continue;
	}
}
   10450:	e037883a 	mov	sp,fp
   10454:	df000017 	ldw	fp,0(sp)
   10458:	dec00104 	addi	sp,sp,4
   1045c:	f800283a 	ret

00010460 <printf>:
   10460:	defffb04 	addi	sp,sp,-20
   10464:	dfc00115 	stw	ra,4(sp)
   10468:	d9400215 	stw	r5,8(sp)
   1046c:	d9800315 	stw	r6,12(sp)
   10470:	d9c00415 	stw	r7,16(sp)
   10474:	00800134 	movhi	r2,4
   10478:	10a76b04 	addi	r2,r2,-25172
   1047c:	10c00017 	ldw	r3,0(r2)
   10480:	200b883a 	mov	r5,r4
   10484:	d8800204 	addi	r2,sp,8
   10488:	19000217 	ldw	r4,8(r3)
   1048c:	100d883a 	mov	r6,r2
   10490:	d8800015 	stw	r2,0(sp)
   10494:	001251c0 	call	1251c <__vfprintf_internal>
   10498:	dfc00117 	ldw	ra,4(sp)
   1049c:	dec00504 	addi	sp,sp,20
   104a0:	f800283a 	ret

000104a4 <_printf_r>:
   104a4:	defffc04 	addi	sp,sp,-16
   104a8:	dfc00115 	stw	ra,4(sp)
   104ac:	d9800215 	stw	r6,8(sp)
   104b0:	d9c00315 	stw	r7,12(sp)
   104b4:	280d883a 	mov	r6,r5
   104b8:	21400217 	ldw	r5,8(r4)
   104bc:	d8c00204 	addi	r3,sp,8
   104c0:	180f883a 	mov	r7,r3
   104c4:	d8c00015 	stw	r3,0(sp)
   104c8:	00106580 	call	10658 <___vfprintf_internal_r>
   104cc:	dfc00117 	ldw	ra,4(sp)
   104d0:	dec00404 	addi	sp,sp,16
   104d4:	f800283a 	ret

000104d8 <_puts_r>:
   104d8:	defff604 	addi	sp,sp,-40
   104dc:	dc400715 	stw	r17,28(sp)
   104e0:	2023883a 	mov	r17,r4
   104e4:	2809883a 	mov	r4,r5
   104e8:	dfc00915 	stw	ra,36(sp)
   104ec:	dcc00815 	stw	r19,32(sp)
   104f0:	2827883a 	mov	r19,r5
   104f4:	001058c0 	call	1058c <strlen>
   104f8:	89400217 	ldw	r5,8(r17)
   104fc:	00c00134 	movhi	r3,4
   10500:	18e01504 	addi	r3,r3,-32684
   10504:	01c00044 	movi	r7,1
   10508:	12000044 	addi	r8,r2,1
   1050c:	d8c00515 	stw	r3,20(sp)
   10510:	d9c00615 	stw	r7,24(sp)
   10514:	d8c00304 	addi	r3,sp,12
   10518:	01c00084 	movi	r7,2
   1051c:	8809883a 	mov	r4,r17
   10520:	d80d883a 	mov	r6,sp
   10524:	d8c00015 	stw	r3,0(sp)
   10528:	dcc00315 	stw	r19,12(sp)
   1052c:	da000215 	stw	r8,8(sp)
   10530:	d9c00115 	stw	r7,4(sp)
   10534:	d8800415 	stw	r2,16(sp)
   10538:	00147d80 	call	147d8 <__sfvwrite_r>
   1053c:	00ffffc4 	movi	r3,-1
   10540:	10000626 	beq	r2,zero,1055c <_puts_r+0x84>
   10544:	1805883a 	mov	r2,r3
   10548:	dfc00917 	ldw	ra,36(sp)
   1054c:	dcc00817 	ldw	r19,32(sp)
   10550:	dc400717 	ldw	r17,28(sp)
   10554:	dec00a04 	addi	sp,sp,40
   10558:	f800283a 	ret
   1055c:	00c00284 	movi	r3,10
   10560:	1805883a 	mov	r2,r3
   10564:	dfc00917 	ldw	ra,36(sp)
   10568:	dcc00817 	ldw	r19,32(sp)
   1056c:	dc400717 	ldw	r17,28(sp)
   10570:	dec00a04 	addi	sp,sp,40
   10574:	f800283a 	ret

00010578 <puts>:
   10578:	00800134 	movhi	r2,4
   1057c:	10a76b04 	addi	r2,r2,-25172
   10580:	200b883a 	mov	r5,r4
   10584:	11000017 	ldw	r4,0(r2)
   10588:	00104d81 	jmpi	104d8 <_puts_r>

0001058c <strlen>:
   1058c:	208000cc 	andi	r2,r4,3
   10590:	2011883a 	mov	r8,r4
   10594:	1000161e 	bne	r2,zero,105f0 <strlen+0x64>
   10598:	20c00017 	ldw	r3,0(r4)
   1059c:	017fbff4 	movhi	r5,65279
   105a0:	297fbfc4 	addi	r5,r5,-257
   105a4:	01e02074 	movhi	r7,32897
   105a8:	39e02004 	addi	r7,r7,-32640
   105ac:	1945883a 	add	r2,r3,r5
   105b0:	11c4703a 	and	r2,r2,r7
   105b4:	00c6303a 	nor	r3,zero,r3
   105b8:	1886703a 	and	r3,r3,r2
   105bc:	18000c1e 	bne	r3,zero,105f0 <strlen+0x64>
   105c0:	280d883a 	mov	r6,r5
   105c4:	380b883a 	mov	r5,r7
   105c8:	21000104 	addi	r4,r4,4
   105cc:	20800017 	ldw	r2,0(r4)
   105d0:	1187883a 	add	r3,r2,r6
   105d4:	1946703a 	and	r3,r3,r5
   105d8:	0084303a 	nor	r2,zero,r2
   105dc:	10c4703a 	and	r2,r2,r3
   105e0:	103ff926 	beq	r2,zero,105c8 <strlen+0x3c>
   105e4:	20800007 	ldb	r2,0(r4)
   105e8:	10000326 	beq	r2,zero,105f8 <strlen+0x6c>
   105ec:	21000044 	addi	r4,r4,1
   105f0:	20800007 	ldb	r2,0(r4)
   105f4:	103ffd1e 	bne	r2,zero,105ec <strlen+0x60>
   105f8:	2205c83a 	sub	r2,r4,r8
   105fc:	f800283a 	ret

00010600 <__sprint_r>:
   10600:	30800217 	ldw	r2,8(r6)
   10604:	defffe04 	addi	sp,sp,-8
   10608:	dc000015 	stw	r16,0(sp)
   1060c:	dfc00115 	stw	ra,4(sp)
   10610:	3021883a 	mov	r16,r6
   10614:	0007883a 	mov	r3,zero
   10618:	1000061e 	bne	r2,zero,10634 <__sprint_r+0x34>
   1061c:	1805883a 	mov	r2,r3
   10620:	30000115 	stw	zero,4(r6)
   10624:	dfc00117 	ldw	ra,4(sp)
   10628:	dc000017 	ldw	r16,0(sp)
   1062c:	dec00204 	addi	sp,sp,8
   10630:	f800283a 	ret
   10634:	00147d80 	call	147d8 <__sfvwrite_r>
   10638:	1007883a 	mov	r3,r2
   1063c:	1805883a 	mov	r2,r3
   10640:	80000115 	stw	zero,4(r16)
   10644:	80000215 	stw	zero,8(r16)
   10648:	dfc00117 	ldw	ra,4(sp)
   1064c:	dc000017 	ldw	r16,0(sp)
   10650:	dec00204 	addi	sp,sp,8
   10654:	f800283a 	ret

00010658 <___vfprintf_internal_r>:
   10658:	defea404 	addi	sp,sp,-1392
   1065c:	dd815815 	stw	r22,1376(sp)
   10660:	dc015215 	stw	r16,1352(sp)
   10664:	d9c15115 	stw	r7,1348(sp)
   10668:	dfc15b15 	stw	ra,1388(sp)
   1066c:	df015a15 	stw	fp,1384(sp)
   10670:	ddc15915 	stw	r23,1380(sp)
   10674:	dd415715 	stw	r21,1372(sp)
   10678:	dd015615 	stw	r20,1368(sp)
   1067c:	dcc15515 	stw	r19,1364(sp)
   10680:	dc815415 	stw	r18,1360(sp)
   10684:	dc415315 	stw	r17,1356(sp)
   10688:	282d883a 	mov	r22,r5
   1068c:	3021883a 	mov	r16,r6
   10690:	d9014f15 	stw	r4,1340(sp)
   10694:	0014dfc0 	call	14dfc <_localeconv_r>
   10698:	10800017 	ldw	r2,0(r2)
   1069c:	d9c15117 	ldw	r7,1348(sp)
   106a0:	d8814915 	stw	r2,1316(sp)
   106a4:	d8814f17 	ldw	r2,1340(sp)
   106a8:	10000226 	beq	r2,zero,106b4 <___vfprintf_internal_r+0x5c>
   106ac:	10800e17 	ldw	r2,56(r2)
   106b0:	10020d26 	beq	r2,zero,10ee8 <___vfprintf_internal_r+0x890>
   106b4:	b080030b 	ldhu	r2,12(r22)
   106b8:	1080020c 	andi	r2,r2,8
   106bc:	10020e26 	beq	r2,zero,10ef8 <___vfprintf_internal_r+0x8a0>
   106c0:	b0800417 	ldw	r2,16(r22)
   106c4:	10020c26 	beq	r2,zero,10ef8 <___vfprintf_internal_r+0x8a0>
   106c8:	b200030b 	ldhu	r8,12(r22)
   106cc:	00800284 	movi	r2,10
   106d0:	40c0068c 	andi	r3,r8,26
   106d4:	18802f1e 	bne	r3,r2,10794 <___vfprintf_internal_r+0x13c>
   106d8:	b080038f 	ldh	r2,14(r22)
   106dc:	10002d16 	blt	r2,zero,10794 <___vfprintf_internal_r+0x13c>
   106e0:	b240038b 	ldhu	r9,14(r22)
   106e4:	b2800717 	ldw	r10,28(r22)
   106e8:	b2c00917 	ldw	r11,36(r22)
   106ec:	d9014f17 	ldw	r4,1340(sp)
   106f0:	dc402904 	addi	r17,sp,164
   106f4:	d8804004 	addi	r2,sp,256
   106f8:	00c10004 	movi	r3,1024
   106fc:	423fff4c 	andi	r8,r8,65533
   10700:	800d883a 	mov	r6,r16
   10704:	880b883a 	mov	r5,r17
   10708:	da002c0d 	sth	r8,176(sp)
   1070c:	da402c8d 	sth	r9,178(sp)
   10710:	da803015 	stw	r10,192(sp)
   10714:	dac03215 	stw	r11,200(sp)
   10718:	d8802d15 	stw	r2,180(sp)
   1071c:	d8c02e15 	stw	r3,184(sp)
   10720:	d8802915 	stw	r2,164(sp)
   10724:	d8c02b15 	stw	r3,172(sp)
   10728:	d8002f15 	stw	zero,188(sp)
   1072c:	00106580 	call	10658 <___vfprintf_internal_r>
   10730:	d8814b15 	stw	r2,1324(sp)
   10734:	10000416 	blt	r2,zero,10748 <___vfprintf_internal_r+0xf0>
   10738:	d9014f17 	ldw	r4,1340(sp)
   1073c:	880b883a 	mov	r5,r17
   10740:	0013e740 	call	13e74 <_fflush_r>
   10744:	1002321e 	bne	r2,zero,11010 <___vfprintf_internal_r+0x9b8>
   10748:	d8802c0b 	ldhu	r2,176(sp)
   1074c:	1080100c 	andi	r2,r2,64
   10750:	10000326 	beq	r2,zero,10760 <___vfprintf_internal_r+0x108>
   10754:	b080030b 	ldhu	r2,12(r22)
   10758:	10801014 	ori	r2,r2,64
   1075c:	b080030d 	sth	r2,12(r22)
   10760:	d8814b17 	ldw	r2,1324(sp)
   10764:	dfc15b17 	ldw	ra,1388(sp)
   10768:	df015a17 	ldw	fp,1384(sp)
   1076c:	ddc15917 	ldw	r23,1380(sp)
   10770:	dd815817 	ldw	r22,1376(sp)
   10774:	dd415717 	ldw	r21,1372(sp)
   10778:	dd015617 	ldw	r20,1368(sp)
   1077c:	dcc15517 	ldw	r19,1364(sp)
   10780:	dc815417 	ldw	r18,1360(sp)
   10784:	dc415317 	ldw	r17,1356(sp)
   10788:	dc015217 	ldw	r16,1352(sp)
   1078c:	dec15c04 	addi	sp,sp,1392
   10790:	f800283a 	ret
   10794:	0005883a 	mov	r2,zero
   10798:	0007883a 	mov	r3,zero
   1079c:	dd401904 	addi	r21,sp,100
   107a0:	d8814215 	stw	r2,1288(sp)
   107a4:	802f883a 	mov	r23,r16
   107a8:	d8c14315 	stw	r3,1292(sp)
   107ac:	d8014b15 	stw	zero,1324(sp)
   107b0:	d8014815 	stw	zero,1312(sp)
   107b4:	d8014415 	stw	zero,1296(sp)
   107b8:	d8014715 	stw	zero,1308(sp)
   107bc:	dd400c15 	stw	r21,48(sp)
   107c0:	d8000e15 	stw	zero,56(sp)
   107c4:	d8000d15 	stw	zero,52(sp)
   107c8:	b8800007 	ldb	r2,0(r23)
   107cc:	10001926 	beq	r2,zero,10834 <___vfprintf_internal_r+0x1dc>
   107d0:	00c00944 	movi	r3,37
   107d4:	10c01726 	beq	r2,r3,10834 <___vfprintf_internal_r+0x1dc>
   107d8:	b821883a 	mov	r16,r23
   107dc:	00000106 	br	107e4 <___vfprintf_internal_r+0x18c>
   107e0:	10c00326 	beq	r2,r3,107f0 <___vfprintf_internal_r+0x198>
   107e4:	84000044 	addi	r16,r16,1
   107e8:	80800007 	ldb	r2,0(r16)
   107ec:	103ffc1e 	bne	r2,zero,107e0 <___vfprintf_internal_r+0x188>
   107f0:	85e7c83a 	sub	r19,r16,r23
   107f4:	98000e26 	beq	r19,zero,10830 <___vfprintf_internal_r+0x1d8>
   107f8:	dc800e17 	ldw	r18,56(sp)
   107fc:	dc400d17 	ldw	r17,52(sp)
   10800:	008001c4 	movi	r2,7
   10804:	94e5883a 	add	r18,r18,r19
   10808:	8c400044 	addi	r17,r17,1
   1080c:	adc00015 	stw	r23,0(r21)
   10810:	dc800e15 	stw	r18,56(sp)
   10814:	acc00115 	stw	r19,4(r21)
   10818:	dc400d15 	stw	r17,52(sp)
   1081c:	14428b16 	blt	r2,r17,1124c <___vfprintf_internal_r+0xbf4>
   10820:	ad400204 	addi	r21,r21,8
   10824:	d9014b17 	ldw	r4,1324(sp)
   10828:	24c9883a 	add	r4,r4,r19
   1082c:	d9014b15 	stw	r4,1324(sp)
   10830:	802f883a 	mov	r23,r16
   10834:	b8800007 	ldb	r2,0(r23)
   10838:	10013c26 	beq	r2,zero,10d2c <___vfprintf_internal_r+0x6d4>
   1083c:	bdc00044 	addi	r23,r23,1
   10840:	d8000405 	stb	zero,16(sp)
   10844:	b8c00007 	ldb	r3,0(r23)
   10848:	04ffffc4 	movi	r19,-1
   1084c:	d8014c15 	stw	zero,1328(sp)
   10850:	d8014a15 	stw	zero,1320(sp)
   10854:	d8c14d15 	stw	r3,1332(sp)
   10858:	bdc00044 	addi	r23,r23,1
   1085c:	d9414d17 	ldw	r5,1332(sp)
   10860:	00801604 	movi	r2,88
   10864:	28fff804 	addi	r3,r5,-32
   10868:	10c06036 	bltu	r2,r3,109ec <___vfprintf_internal_r+0x394>
   1086c:	18c5883a 	add	r2,r3,r3
   10870:	1085883a 	add	r2,r2,r2
   10874:	00c00074 	movhi	r3,1
   10878:	18c22204 	addi	r3,r3,2184
   1087c:	10c5883a 	add	r2,r2,r3
   10880:	11000017 	ldw	r4,0(r2)
   10884:	2000683a 	jmp	r4
   10888:	000117fc 	xorhi	zero,zero,1119
   1088c:	000109ec 	andhi	zero,zero,1063
   10890:	000109ec 	andhi	zero,zero,1063
   10894:	000117e8 	cmpgeui	zero,zero,1119
   10898:	000109ec 	andhi	zero,zero,1063
   1089c:	000109ec 	andhi	zero,zero,1063
   108a0:	000109ec 	andhi	zero,zero,1063
   108a4:	000109ec 	andhi	zero,zero,1063
   108a8:	000109ec 	andhi	zero,zero,1063
   108ac:	000109ec 	andhi	zero,zero,1063
   108b0:	000115c8 	cmpgei	zero,zero,1111
   108b4:	000117d8 	cmpnei	zero,zero,1119
   108b8:	000109ec 	andhi	zero,zero,1063
   108bc:	000115e0 	cmpeqi	zero,zero,1111
   108c0:	00011880 	call	1188 <__alt_mem_onchip_mem1-0xee78>
   108c4:	000109ec 	andhi	zero,zero,1063
   108c8:	0001186c 	andhi	zero,zero,1121
   108cc:	00011828 	cmpgeui	zero,zero,1120
   108d0:	00011828 	cmpgeui	zero,zero,1120
   108d4:	00011828 	cmpgeui	zero,zero,1120
   108d8:	00011828 	cmpgeui	zero,zero,1120
   108dc:	00011828 	cmpgeui	zero,zero,1120
   108e0:	00011828 	cmpgeui	zero,zero,1120
   108e4:	00011828 	cmpgeui	zero,zero,1120
   108e8:	00011828 	cmpgeui	zero,zero,1120
   108ec:	00011828 	cmpgeui	zero,zero,1120
   108f0:	000109ec 	andhi	zero,zero,1063
   108f4:	000109ec 	andhi	zero,zero,1063
   108f8:	000109ec 	andhi	zero,zero,1063
   108fc:	000109ec 	andhi	zero,zero,1063
   10900:	000109ec 	andhi	zero,zero,1063
   10904:	000109ec 	andhi	zero,zero,1063
   10908:	000109ec 	andhi	zero,zero,1063
   1090c:	000109ec 	andhi	zero,zero,1063
   10910:	000109ec 	andhi	zero,zero,1063
   10914:	000109ec 	andhi	zero,zero,1063
   10918:	00011044 	movi	zero,1089
   1091c:	000116b0 	cmpltui	zero,zero,1114
   10920:	000109ec 	andhi	zero,zero,1063
   10924:	000116b0 	cmpltui	zero,zero,1114
   10928:	000109ec 	andhi	zero,zero,1063
   1092c:	000109ec 	andhi	zero,zero,1063
   10930:	000109ec 	andhi	zero,zero,1063
   10934:	000109ec 	andhi	zero,zero,1063
   10938:	00011814 	movui	zero,1120
   1093c:	000109ec 	andhi	zero,zero,1063
   10940:	000109ec 	andhi	zero,zero,1063
   10944:	000110f8 	rdprs	zero,zero,1091
   10948:	000109ec 	andhi	zero,zero,1063
   1094c:	000109ec 	andhi	zero,zero,1063
   10950:	000109ec 	andhi	zero,zero,1063
   10954:	000109ec 	andhi	zero,zero,1063
   10958:	000109ec 	andhi	zero,zero,1063
   1095c:	00011144 	movi	zero,1093
   10960:	000109ec 	andhi	zero,zero,1063
   10964:	000109ec 	andhi	zero,zero,1063
   10968:	00011764 	muli	zero,zero,1117
   1096c:	000109ec 	andhi	zero,zero,1063
   10970:	000109ec 	andhi	zero,zero,1063
   10974:	000109ec 	andhi	zero,zero,1063
   10978:	000109ec 	andhi	zero,zero,1063
   1097c:	000109ec 	andhi	zero,zero,1063
   10980:	000109ec 	andhi	zero,zero,1063
   10984:	000109ec 	andhi	zero,zero,1063
   10988:	000109ec 	andhi	zero,zero,1063
   1098c:	000109ec 	andhi	zero,zero,1063
   10990:	000109ec 	andhi	zero,zero,1063
   10994:	00011738 	rdprs	zero,zero,1116
   10998:	00011050 	cmplti	zero,zero,1089
   1099c:	000116b0 	cmpltui	zero,zero,1114
   109a0:	000116b0 	cmpltui	zero,zero,1114
   109a4:	000116b0 	cmpltui	zero,zero,1114
   109a8:	0001169c 	xori	zero,zero,1114
   109ac:	00011050 	cmplti	zero,zero,1089
   109b0:	000109ec 	andhi	zero,zero,1063
   109b4:	000109ec 	andhi	zero,zero,1063
   109b8:	00011624 	muli	zero,zero,1112
   109bc:	000109ec 	andhi	zero,zero,1063
   109c0:	000115f4 	movhi	zero,1111
   109c4:	00011104 	movi	zero,1092
   109c8:	00011654 	movui	zero,1113
   109cc:	00011640 	call	1164 <__alt_mem_onchip_mem1-0xee9c>
   109d0:	000109ec 	andhi	zero,zero,1063
   109d4:	000118e8 	cmpgeui	zero,zero,1123
   109d8:	000109ec 	andhi	zero,zero,1063
   109dc:	00011150 	cmplti	zero,zero,1093
   109e0:	000109ec 	andhi	zero,zero,1063
   109e4:	000109ec 	andhi	zero,zero,1063
   109e8:	000117c8 	cmpgei	zero,zero,1119
   109ec:	d9014d17 	ldw	r4,1332(sp)
   109f0:	2000ce26 	beq	r4,zero,10d2c <___vfprintf_internal_r+0x6d4>
   109f4:	01400044 	movi	r5,1
   109f8:	d9800f04 	addi	r6,sp,60
   109fc:	d9c14015 	stw	r7,1280(sp)
   10a00:	d9414515 	stw	r5,1300(sp)
   10a04:	d9814115 	stw	r6,1284(sp)
   10a08:	280f883a 	mov	r7,r5
   10a0c:	d9000f05 	stb	r4,60(sp)
   10a10:	d8000405 	stb	zero,16(sp)
   10a14:	d8014615 	stw	zero,1304(sp)
   10a18:	d8c14c17 	ldw	r3,1328(sp)
   10a1c:	1880008c 	andi	r2,r3,2
   10a20:	1005003a 	cmpeq	r2,r2,zero
   10a24:	d8815015 	stw	r2,1344(sp)
   10a28:	1000031e 	bne	r2,zero,10a38 <___vfprintf_internal_r+0x3e0>
   10a2c:	d9014517 	ldw	r4,1300(sp)
   10a30:	21000084 	addi	r4,r4,2
   10a34:	d9014515 	stw	r4,1300(sp)
   10a38:	d9414c17 	ldw	r5,1328(sp)
   10a3c:	2940210c 	andi	r5,r5,132
   10a40:	d9414e15 	stw	r5,1336(sp)
   10a44:	28002d1e 	bne	r5,zero,10afc <___vfprintf_internal_r+0x4a4>
   10a48:	d9814a17 	ldw	r6,1320(sp)
   10a4c:	d8814517 	ldw	r2,1300(sp)
   10a50:	30a1c83a 	sub	r16,r6,r2
   10a54:	0400290e 	bge	zero,r16,10afc <___vfprintf_internal_r+0x4a4>
   10a58:	00800404 	movi	r2,16
   10a5c:	14045e0e 	bge	r2,r16,11bd8 <___vfprintf_internal_r+0x1580>
   10a60:	dc800e17 	ldw	r18,56(sp)
   10a64:	dc400d17 	ldw	r17,52(sp)
   10a68:	1027883a 	mov	r19,r2
   10a6c:	07000134 	movhi	fp,4
   10a70:	e7203184 	addi	fp,fp,-32570
   10a74:	050001c4 	movi	r20,7
   10a78:	00000306 	br	10a88 <___vfprintf_internal_r+0x430>
   10a7c:	843ffc04 	addi	r16,r16,-16
   10a80:	ad400204 	addi	r21,r21,8
   10a84:	9c00130e 	bge	r19,r16,10ad4 <___vfprintf_internal_r+0x47c>
   10a88:	94800404 	addi	r18,r18,16
   10a8c:	8c400044 	addi	r17,r17,1
   10a90:	af000015 	stw	fp,0(r21)
   10a94:	acc00115 	stw	r19,4(r21)
   10a98:	dc800e15 	stw	r18,56(sp)
   10a9c:	dc400d15 	stw	r17,52(sp)
   10aa0:	a47ff60e 	bge	r20,r17,10a7c <___vfprintf_internal_r+0x424>
   10aa4:	d9014f17 	ldw	r4,1340(sp)
   10aa8:	b00b883a 	mov	r5,r22
   10aac:	d9800c04 	addi	r6,sp,48
   10ab0:	d9c15115 	stw	r7,1348(sp)
   10ab4:	00106000 	call	10600 <__sprint_r>
   10ab8:	d9c15117 	ldw	r7,1348(sp)
   10abc:	10009e1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   10ac0:	843ffc04 	addi	r16,r16,-16
   10ac4:	dc800e17 	ldw	r18,56(sp)
   10ac8:	dc400d17 	ldw	r17,52(sp)
   10acc:	dd401904 	addi	r21,sp,100
   10ad0:	9c3fed16 	blt	r19,r16,10a88 <___vfprintf_internal_r+0x430>
   10ad4:	9425883a 	add	r18,r18,r16
   10ad8:	8c400044 	addi	r17,r17,1
   10adc:	008001c4 	movi	r2,7
   10ae0:	af000015 	stw	fp,0(r21)
   10ae4:	ac000115 	stw	r16,4(r21)
   10ae8:	dc800e15 	stw	r18,56(sp)
   10aec:	dc400d15 	stw	r17,52(sp)
   10af0:	1441f516 	blt	r2,r17,112c8 <___vfprintf_internal_r+0xc70>
   10af4:	ad400204 	addi	r21,r21,8
   10af8:	00000206 	br	10b04 <___vfprintf_internal_r+0x4ac>
   10afc:	dc800e17 	ldw	r18,56(sp)
   10b00:	dc400d17 	ldw	r17,52(sp)
   10b04:	d8800407 	ldb	r2,16(sp)
   10b08:	10000b26 	beq	r2,zero,10b38 <___vfprintf_internal_r+0x4e0>
   10b0c:	00800044 	movi	r2,1
   10b10:	94800044 	addi	r18,r18,1
   10b14:	8c400044 	addi	r17,r17,1
   10b18:	a8800115 	stw	r2,4(r21)
   10b1c:	d8c00404 	addi	r3,sp,16
   10b20:	008001c4 	movi	r2,7
   10b24:	a8c00015 	stw	r3,0(r21)
   10b28:	dc800e15 	stw	r18,56(sp)
   10b2c:	dc400d15 	stw	r17,52(sp)
   10b30:	1441da16 	blt	r2,r17,1129c <___vfprintf_internal_r+0xc44>
   10b34:	ad400204 	addi	r21,r21,8
   10b38:	d9015017 	ldw	r4,1344(sp)
   10b3c:	20000b1e 	bne	r4,zero,10b6c <___vfprintf_internal_r+0x514>
   10b40:	d8800444 	addi	r2,sp,17
   10b44:	94800084 	addi	r18,r18,2
   10b48:	8c400044 	addi	r17,r17,1
   10b4c:	a8800015 	stw	r2,0(r21)
   10b50:	00c00084 	movi	r3,2
   10b54:	008001c4 	movi	r2,7
   10b58:	a8c00115 	stw	r3,4(r21)
   10b5c:	dc800e15 	stw	r18,56(sp)
   10b60:	dc400d15 	stw	r17,52(sp)
   10b64:	1441c216 	blt	r2,r17,11270 <___vfprintf_internal_r+0xc18>
   10b68:	ad400204 	addi	r21,r21,8
   10b6c:	d9414e17 	ldw	r5,1336(sp)
   10b70:	00802004 	movi	r2,128
   10b74:	2880b126 	beq	r5,r2,10e3c <___vfprintf_internal_r+0x7e4>
   10b78:	d8c14617 	ldw	r3,1304(sp)
   10b7c:	19e1c83a 	sub	r16,r3,r7
   10b80:	0400260e 	bge	zero,r16,10c1c <___vfprintf_internal_r+0x5c4>
   10b84:	00800404 	movi	r2,16
   10b88:	1403cf0e 	bge	r2,r16,11ac8 <___vfprintf_internal_r+0x1470>
   10b8c:	1027883a 	mov	r19,r2
   10b90:	07000134 	movhi	fp,4
   10b94:	e7202d84 	addi	fp,fp,-32586
   10b98:	050001c4 	movi	r20,7
   10b9c:	00000306 	br	10bac <___vfprintf_internal_r+0x554>
   10ba0:	843ffc04 	addi	r16,r16,-16
   10ba4:	ad400204 	addi	r21,r21,8
   10ba8:	9c00130e 	bge	r19,r16,10bf8 <___vfprintf_internal_r+0x5a0>
   10bac:	94800404 	addi	r18,r18,16
   10bb0:	8c400044 	addi	r17,r17,1
   10bb4:	af000015 	stw	fp,0(r21)
   10bb8:	acc00115 	stw	r19,4(r21)
   10bbc:	dc800e15 	stw	r18,56(sp)
   10bc0:	dc400d15 	stw	r17,52(sp)
   10bc4:	a47ff60e 	bge	r20,r17,10ba0 <___vfprintf_internal_r+0x548>
   10bc8:	d9014f17 	ldw	r4,1340(sp)
   10bcc:	b00b883a 	mov	r5,r22
   10bd0:	d9800c04 	addi	r6,sp,48
   10bd4:	d9c15115 	stw	r7,1348(sp)
   10bd8:	00106000 	call	10600 <__sprint_r>
   10bdc:	d9c15117 	ldw	r7,1348(sp)
   10be0:	1000551e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   10be4:	843ffc04 	addi	r16,r16,-16
   10be8:	dc800e17 	ldw	r18,56(sp)
   10bec:	dc400d17 	ldw	r17,52(sp)
   10bf0:	dd401904 	addi	r21,sp,100
   10bf4:	9c3fed16 	blt	r19,r16,10bac <___vfprintf_internal_r+0x554>
   10bf8:	9425883a 	add	r18,r18,r16
   10bfc:	8c400044 	addi	r17,r17,1
   10c00:	008001c4 	movi	r2,7
   10c04:	af000015 	stw	fp,0(r21)
   10c08:	ac000115 	stw	r16,4(r21)
   10c0c:	dc800e15 	stw	r18,56(sp)
   10c10:	dc400d15 	stw	r17,52(sp)
   10c14:	14418216 	blt	r2,r17,11220 <___vfprintf_internal_r+0xbc8>
   10c18:	ad400204 	addi	r21,r21,8
   10c1c:	d9014c17 	ldw	r4,1328(sp)
   10c20:	2080400c 	andi	r2,r4,256
   10c24:	10004a1e 	bne	r2,zero,10d50 <___vfprintf_internal_r+0x6f8>
   10c28:	d9414117 	ldw	r5,1284(sp)
   10c2c:	91e5883a 	add	r18,r18,r7
   10c30:	8c400044 	addi	r17,r17,1
   10c34:	008001c4 	movi	r2,7
   10c38:	a9400015 	stw	r5,0(r21)
   10c3c:	a9c00115 	stw	r7,4(r21)
   10c40:	dc800e15 	stw	r18,56(sp)
   10c44:	dc400d15 	stw	r17,52(sp)
   10c48:	14416716 	blt	r2,r17,111e8 <___vfprintf_internal_r+0xb90>
   10c4c:	a8c00204 	addi	r3,r21,8
   10c50:	d9814c17 	ldw	r6,1328(sp)
   10c54:	3080010c 	andi	r2,r6,4
   10c58:	10002826 	beq	r2,zero,10cfc <___vfprintf_internal_r+0x6a4>
   10c5c:	d8814a17 	ldw	r2,1320(sp)
   10c60:	d9014517 	ldw	r4,1300(sp)
   10c64:	1121c83a 	sub	r16,r2,r4
   10c68:	0400240e 	bge	zero,r16,10cfc <___vfprintf_internal_r+0x6a4>
   10c6c:	00800404 	movi	r2,16
   10c70:	1404550e 	bge	r2,r16,11dc8 <___vfprintf_internal_r+0x1770>
   10c74:	dc400d17 	ldw	r17,52(sp)
   10c78:	1027883a 	mov	r19,r2
   10c7c:	07000134 	movhi	fp,4
   10c80:	e7203184 	addi	fp,fp,-32570
   10c84:	050001c4 	movi	r20,7
   10c88:	00000306 	br	10c98 <___vfprintf_internal_r+0x640>
   10c8c:	843ffc04 	addi	r16,r16,-16
   10c90:	18c00204 	addi	r3,r3,8
   10c94:	9c00110e 	bge	r19,r16,10cdc <___vfprintf_internal_r+0x684>
   10c98:	94800404 	addi	r18,r18,16
   10c9c:	8c400044 	addi	r17,r17,1
   10ca0:	1f000015 	stw	fp,0(r3)
   10ca4:	1cc00115 	stw	r19,4(r3)
   10ca8:	dc800e15 	stw	r18,56(sp)
   10cac:	dc400d15 	stw	r17,52(sp)
   10cb0:	a47ff60e 	bge	r20,r17,10c8c <___vfprintf_internal_r+0x634>
   10cb4:	d9014f17 	ldw	r4,1340(sp)
   10cb8:	b00b883a 	mov	r5,r22
   10cbc:	d9800c04 	addi	r6,sp,48
   10cc0:	00106000 	call	10600 <__sprint_r>
   10cc4:	10001c1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   10cc8:	843ffc04 	addi	r16,r16,-16
   10ccc:	dc800e17 	ldw	r18,56(sp)
   10cd0:	dc400d17 	ldw	r17,52(sp)
   10cd4:	d8c01904 	addi	r3,sp,100
   10cd8:	9c3fef16 	blt	r19,r16,10c98 <___vfprintf_internal_r+0x640>
   10cdc:	9425883a 	add	r18,r18,r16
   10ce0:	8c400044 	addi	r17,r17,1
   10ce4:	008001c4 	movi	r2,7
   10ce8:	1f000015 	stw	fp,0(r3)
   10cec:	1c000115 	stw	r16,4(r3)
   10cf0:	dc800e15 	stw	r18,56(sp)
   10cf4:	dc400d15 	stw	r17,52(sp)
   10cf8:	1440cb16 	blt	r2,r17,11028 <___vfprintf_internal_r+0x9d0>
   10cfc:	d8814a17 	ldw	r2,1320(sp)
   10d00:	d9414517 	ldw	r5,1300(sp)
   10d04:	1140010e 	bge	r2,r5,10d0c <___vfprintf_internal_r+0x6b4>
   10d08:	2805883a 	mov	r2,r5
   10d0c:	d9814b17 	ldw	r6,1324(sp)
   10d10:	308d883a 	add	r6,r6,r2
   10d14:	d9814b15 	stw	r6,1324(sp)
   10d18:	90013b1e 	bne	r18,zero,11208 <___vfprintf_internal_r+0xbb0>
   10d1c:	d9c14017 	ldw	r7,1280(sp)
   10d20:	dd401904 	addi	r21,sp,100
   10d24:	d8000d15 	stw	zero,52(sp)
   10d28:	003ea706 	br	107c8 <___vfprintf_internal_r+0x170>
   10d2c:	d8800e17 	ldw	r2,56(sp)
   10d30:	1005451e 	bne	r2,zero,12248 <___vfprintf_internal_r+0x1bf0>
   10d34:	d8000d15 	stw	zero,52(sp)
   10d38:	b080030b 	ldhu	r2,12(r22)
   10d3c:	1080100c 	andi	r2,r2,64
   10d40:	103e8726 	beq	r2,zero,10760 <___vfprintf_internal_r+0x108>
   10d44:	00bfffc4 	movi	r2,-1
   10d48:	d8814b15 	stw	r2,1324(sp)
   10d4c:	003e8406 	br	10760 <___vfprintf_internal_r+0x108>
   10d50:	d9814d17 	ldw	r6,1332(sp)
   10d54:	00801944 	movi	r2,101
   10d58:	11806e16 	blt	r2,r6,10f14 <___vfprintf_internal_r+0x8bc>
   10d5c:	d9414717 	ldw	r5,1308(sp)
   10d60:	00c00044 	movi	r3,1
   10d64:	1943490e 	bge	r3,r5,11a8c <___vfprintf_internal_r+0x1434>
   10d68:	d8814117 	ldw	r2,1284(sp)
   10d6c:	94800044 	addi	r18,r18,1
   10d70:	8c400044 	addi	r17,r17,1
   10d74:	a8800015 	stw	r2,0(r21)
   10d78:	008001c4 	movi	r2,7
   10d7c:	a8c00115 	stw	r3,4(r21)
   10d80:	dc800e15 	stw	r18,56(sp)
   10d84:	dc400d15 	stw	r17,52(sp)
   10d88:	1441ca16 	blt	r2,r17,114b4 <___vfprintf_internal_r+0xe5c>
   10d8c:	a8c00204 	addi	r3,r21,8
   10d90:	d9014917 	ldw	r4,1316(sp)
   10d94:	00800044 	movi	r2,1
   10d98:	94800044 	addi	r18,r18,1
   10d9c:	8c400044 	addi	r17,r17,1
   10da0:	18800115 	stw	r2,4(r3)
   10da4:	008001c4 	movi	r2,7
   10da8:	19000015 	stw	r4,0(r3)
   10dac:	dc800e15 	stw	r18,56(sp)
   10db0:	dc400d15 	stw	r17,52(sp)
   10db4:	1441b616 	blt	r2,r17,11490 <___vfprintf_internal_r+0xe38>
   10db8:	1cc00204 	addi	r19,r3,8
   10dbc:	d9014217 	ldw	r4,1288(sp)
   10dc0:	d9414317 	ldw	r5,1292(sp)
   10dc4:	000d883a 	mov	r6,zero
   10dc8:	000f883a 	mov	r7,zero
   10dcc:	001910c0 	call	1910c <__nedf2>
   10dd0:	10017426 	beq	r2,zero,113a4 <___vfprintf_internal_r+0xd4c>
   10dd4:	d9414717 	ldw	r5,1308(sp)
   10dd8:	d9814117 	ldw	r6,1284(sp)
   10ddc:	8c400044 	addi	r17,r17,1
   10de0:	2c85883a 	add	r2,r5,r18
   10de4:	14bfffc4 	addi	r18,r2,-1
   10de8:	28bfffc4 	addi	r2,r5,-1
   10dec:	30c00044 	addi	r3,r6,1
   10df0:	98800115 	stw	r2,4(r19)
   10df4:	008001c4 	movi	r2,7
   10df8:	98c00015 	stw	r3,0(r19)
   10dfc:	dc800e15 	stw	r18,56(sp)
   10e00:	dc400d15 	stw	r17,52(sp)
   10e04:	14418e16 	blt	r2,r17,11440 <___vfprintf_internal_r+0xde8>
   10e08:	9cc00204 	addi	r19,r19,8
   10e0c:	d9414817 	ldw	r5,1312(sp)
   10e10:	d8800804 	addi	r2,sp,32
   10e14:	8c400044 	addi	r17,r17,1
   10e18:	9165883a 	add	r18,r18,r5
   10e1c:	98800015 	stw	r2,0(r19)
   10e20:	008001c4 	movi	r2,7
   10e24:	99400115 	stw	r5,4(r19)
   10e28:	dc800e15 	stw	r18,56(sp)
   10e2c:	dc400d15 	stw	r17,52(sp)
   10e30:	1440ed16 	blt	r2,r17,111e8 <___vfprintf_internal_r+0xb90>
   10e34:	98c00204 	addi	r3,r19,8
   10e38:	003f8506 	br	10c50 <___vfprintf_internal_r+0x5f8>
   10e3c:	d9814a17 	ldw	r6,1320(sp)
   10e40:	d8814517 	ldw	r2,1300(sp)
   10e44:	30a1c83a 	sub	r16,r6,r2
   10e48:	043f4b0e 	bge	zero,r16,10b78 <___vfprintf_internal_r+0x520>
   10e4c:	00800404 	movi	r2,16
   10e50:	14043a0e 	bge	r2,r16,11f3c <___vfprintf_internal_r+0x18e4>
   10e54:	1027883a 	mov	r19,r2
   10e58:	07000134 	movhi	fp,4
   10e5c:	e7202d84 	addi	fp,fp,-32586
   10e60:	050001c4 	movi	r20,7
   10e64:	00000306 	br	10e74 <___vfprintf_internal_r+0x81c>
   10e68:	843ffc04 	addi	r16,r16,-16
   10e6c:	ad400204 	addi	r21,r21,8
   10e70:	9c00130e 	bge	r19,r16,10ec0 <___vfprintf_internal_r+0x868>
   10e74:	94800404 	addi	r18,r18,16
   10e78:	8c400044 	addi	r17,r17,1
   10e7c:	af000015 	stw	fp,0(r21)
   10e80:	acc00115 	stw	r19,4(r21)
   10e84:	dc800e15 	stw	r18,56(sp)
   10e88:	dc400d15 	stw	r17,52(sp)
   10e8c:	a47ff60e 	bge	r20,r17,10e68 <___vfprintf_internal_r+0x810>
   10e90:	d9014f17 	ldw	r4,1340(sp)
   10e94:	b00b883a 	mov	r5,r22
   10e98:	d9800c04 	addi	r6,sp,48
   10e9c:	d9c15115 	stw	r7,1348(sp)
   10ea0:	00106000 	call	10600 <__sprint_r>
   10ea4:	d9c15117 	ldw	r7,1348(sp)
   10ea8:	103fa31e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   10eac:	843ffc04 	addi	r16,r16,-16
   10eb0:	dc800e17 	ldw	r18,56(sp)
   10eb4:	dc400d17 	ldw	r17,52(sp)
   10eb8:	dd401904 	addi	r21,sp,100
   10ebc:	9c3fed16 	blt	r19,r16,10e74 <___vfprintf_internal_r+0x81c>
   10ec0:	9425883a 	add	r18,r18,r16
   10ec4:	8c400044 	addi	r17,r17,1
   10ec8:	008001c4 	movi	r2,7
   10ecc:	af000015 	stw	fp,0(r21)
   10ed0:	ac000115 	stw	r16,4(r21)
   10ed4:	dc800e15 	stw	r18,56(sp)
   10ed8:	dc400d15 	stw	r17,52(sp)
   10edc:	14416116 	blt	r2,r17,11464 <___vfprintf_internal_r+0xe0c>
   10ee0:	ad400204 	addi	r21,r21,8
   10ee4:	003f2406 	br	10b78 <___vfprintf_internal_r+0x520>
   10ee8:	d9014f17 	ldw	r4,1340(sp)
   10eec:	001410c0 	call	1410c <__sinit>
   10ef0:	d9c15117 	ldw	r7,1348(sp)
   10ef4:	003def06 	br	106b4 <___vfprintf_internal_r+0x5c>
   10ef8:	d9014f17 	ldw	r4,1340(sp)
   10efc:	b00b883a 	mov	r5,r22
   10f00:	d9c15115 	stw	r7,1348(sp)
   10f04:	00125400 	call	12540 <__swsetup_r>
   10f08:	d9c15117 	ldw	r7,1348(sp)
   10f0c:	103dee26 	beq	r2,zero,106c8 <___vfprintf_internal_r+0x70>
   10f10:	003f8c06 	br	10d44 <___vfprintf_internal_r+0x6ec>
   10f14:	d9014217 	ldw	r4,1288(sp)
   10f18:	d9414317 	ldw	r5,1292(sp)
   10f1c:	000d883a 	mov	r6,zero
   10f20:	000f883a 	mov	r7,zero
   10f24:	00190840 	call	19084 <__eqdf2>
   10f28:	1000f21e 	bne	r2,zero,112f4 <___vfprintf_internal_r+0xc9c>
   10f2c:	00800134 	movhi	r2,4
   10f30:	10a02d04 	addi	r2,r2,-32588
   10f34:	94800044 	addi	r18,r18,1
   10f38:	8c400044 	addi	r17,r17,1
   10f3c:	a8800015 	stw	r2,0(r21)
   10f40:	00c00044 	movi	r3,1
   10f44:	008001c4 	movi	r2,7
   10f48:	a8c00115 	stw	r3,4(r21)
   10f4c:	dc800e15 	stw	r18,56(sp)
   10f50:	dc400d15 	stw	r17,52(sp)
   10f54:	14430016 	blt	r2,r17,11b58 <___vfprintf_internal_r+0x1500>
   10f58:	a8c00204 	addi	r3,r21,8
   10f5c:	d8800517 	ldw	r2,20(sp)
   10f60:	d9014717 	ldw	r4,1308(sp)
   10f64:	11015c0e 	bge	r2,r4,114d8 <___vfprintf_internal_r+0xe80>
   10f68:	dc400d17 	ldw	r17,52(sp)
   10f6c:	d9814917 	ldw	r6,1316(sp)
   10f70:	00800044 	movi	r2,1
   10f74:	94800044 	addi	r18,r18,1
   10f78:	8c400044 	addi	r17,r17,1
   10f7c:	18800115 	stw	r2,4(r3)
   10f80:	008001c4 	movi	r2,7
   10f84:	19800015 	stw	r6,0(r3)
   10f88:	dc800e15 	stw	r18,56(sp)
   10f8c:	dc400d15 	stw	r17,52(sp)
   10f90:	14431616 	blt	r2,r17,11bec <___vfprintf_internal_r+0x1594>
   10f94:	18c00204 	addi	r3,r3,8
   10f98:	d8814717 	ldw	r2,1308(sp)
   10f9c:	143fffc4 	addi	r16,r2,-1
   10fa0:	043f2b0e 	bge	zero,r16,10c50 <___vfprintf_internal_r+0x5f8>
   10fa4:	00800404 	movi	r2,16
   10fa8:	1402a80e 	bge	r2,r16,11a4c <___vfprintf_internal_r+0x13f4>
   10fac:	dc400d17 	ldw	r17,52(sp)
   10fb0:	1027883a 	mov	r19,r2
   10fb4:	07000134 	movhi	fp,4
   10fb8:	e7202d84 	addi	fp,fp,-32586
   10fbc:	050001c4 	movi	r20,7
   10fc0:	00000306 	br	10fd0 <___vfprintf_internal_r+0x978>
   10fc4:	18c00204 	addi	r3,r3,8
   10fc8:	843ffc04 	addi	r16,r16,-16
   10fcc:	9c02a20e 	bge	r19,r16,11a58 <___vfprintf_internal_r+0x1400>
   10fd0:	94800404 	addi	r18,r18,16
   10fd4:	8c400044 	addi	r17,r17,1
   10fd8:	1f000015 	stw	fp,0(r3)
   10fdc:	1cc00115 	stw	r19,4(r3)
   10fe0:	dc800e15 	stw	r18,56(sp)
   10fe4:	dc400d15 	stw	r17,52(sp)
   10fe8:	a47ff60e 	bge	r20,r17,10fc4 <___vfprintf_internal_r+0x96c>
   10fec:	d9014f17 	ldw	r4,1340(sp)
   10ff0:	b00b883a 	mov	r5,r22
   10ff4:	d9800c04 	addi	r6,sp,48
   10ff8:	00106000 	call	10600 <__sprint_r>
   10ffc:	103f4e1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11000:	dc800e17 	ldw	r18,56(sp)
   11004:	dc400d17 	ldw	r17,52(sp)
   11008:	d8c01904 	addi	r3,sp,100
   1100c:	003fee06 	br	10fc8 <___vfprintf_internal_r+0x970>
   11010:	d8802c0b 	ldhu	r2,176(sp)
   11014:	00ffffc4 	movi	r3,-1
   11018:	d8c14b15 	stw	r3,1324(sp)
   1101c:	1080100c 	andi	r2,r2,64
   11020:	103dcc1e 	bne	r2,zero,10754 <___vfprintf_internal_r+0xfc>
   11024:	003dce06 	br	10760 <___vfprintf_internal_r+0x108>
   11028:	d9014f17 	ldw	r4,1340(sp)
   1102c:	b00b883a 	mov	r5,r22
   11030:	d9800c04 	addi	r6,sp,48
   11034:	00106000 	call	10600 <__sprint_r>
   11038:	103f3f1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   1103c:	dc800e17 	ldw	r18,56(sp)
   11040:	003f2e06 	br	10cfc <___vfprintf_internal_r+0x6a4>
   11044:	d9414c17 	ldw	r5,1328(sp)
   11048:	29400414 	ori	r5,r5,16
   1104c:	d9414c15 	stw	r5,1328(sp)
   11050:	d9814c17 	ldw	r6,1328(sp)
   11054:	3080080c 	andi	r2,r6,32
   11058:	10014f1e 	bne	r2,zero,11598 <___vfprintf_internal_r+0xf40>
   1105c:	d8c14c17 	ldw	r3,1328(sp)
   11060:	1880040c 	andi	r2,r3,16
   11064:	1002f01e 	bne	r2,zero,11c28 <___vfprintf_internal_r+0x15d0>
   11068:	d9014c17 	ldw	r4,1328(sp)
   1106c:	2080100c 	andi	r2,r4,64
   11070:	1002ed26 	beq	r2,zero,11c28 <___vfprintf_internal_r+0x15d0>
   11074:	3880000f 	ldh	r2,0(r7)
   11078:	39c00104 	addi	r7,r7,4
   1107c:	d9c14015 	stw	r7,1280(sp)
   11080:	1023d7fa 	srai	r17,r2,31
   11084:	1021883a 	mov	r16,r2
   11088:	88037816 	blt	r17,zero,11e6c <___vfprintf_internal_r+0x1814>
   1108c:	01000044 	movi	r4,1
   11090:	98000416 	blt	r19,zero,110a4 <___vfprintf_internal_r+0xa4c>
   11094:	d8c14c17 	ldw	r3,1328(sp)
   11098:	00bfdfc4 	movi	r2,-129
   1109c:	1886703a 	and	r3,r3,r2
   110a0:	d8c14c15 	stw	r3,1328(sp)
   110a4:	8444b03a 	or	r2,r16,r17
   110a8:	10022c1e 	bne	r2,zero,1195c <___vfprintf_internal_r+0x1304>
   110ac:	98022b1e 	bne	r19,zero,1195c <___vfprintf_internal_r+0x1304>
   110b0:	20803fcc 	andi	r2,r4,255
   110b4:	1002a126 	beq	r2,zero,11b3c <___vfprintf_internal_r+0x14e4>
   110b8:	d8c01904 	addi	r3,sp,100
   110bc:	dd000f04 	addi	r20,sp,60
   110c0:	d8c14115 	stw	r3,1284(sp)
   110c4:	d8c14117 	ldw	r3,1284(sp)
   110c8:	dcc14515 	stw	r19,1300(sp)
   110cc:	a0c5c83a 	sub	r2,r20,r3
   110d0:	11c00a04 	addi	r7,r2,40
   110d4:	99c0010e 	bge	r19,r7,110dc <___vfprintf_internal_r+0xa84>
   110d8:	d9c14515 	stw	r7,1300(sp)
   110dc:	dcc14615 	stw	r19,1304(sp)
   110e0:	d8800407 	ldb	r2,16(sp)
   110e4:	103e4c26 	beq	r2,zero,10a18 <___vfprintf_internal_r+0x3c0>
   110e8:	d8814517 	ldw	r2,1300(sp)
   110ec:	10800044 	addi	r2,r2,1
   110f0:	d8814515 	stw	r2,1300(sp)
   110f4:	003e4806 	br	10a18 <___vfprintf_internal_r+0x3c0>
   110f8:	d9814c17 	ldw	r6,1328(sp)
   110fc:	31800414 	ori	r6,r6,16
   11100:	d9814c15 	stw	r6,1328(sp)
   11104:	d8c14c17 	ldw	r3,1328(sp)
   11108:	1880080c 	andi	r2,r3,32
   1110c:	1001271e 	bne	r2,zero,115ac <___vfprintf_internal_r+0xf54>
   11110:	d9414c17 	ldw	r5,1328(sp)
   11114:	2880040c 	andi	r2,r5,16
   11118:	1002bc1e 	bne	r2,zero,11c0c <___vfprintf_internal_r+0x15b4>
   1111c:	d9814c17 	ldw	r6,1328(sp)
   11120:	3080100c 	andi	r2,r6,64
   11124:	1002b926 	beq	r2,zero,11c0c <___vfprintf_internal_r+0x15b4>
   11128:	3c00000b 	ldhu	r16,0(r7)
   1112c:	0009883a 	mov	r4,zero
   11130:	39c00104 	addi	r7,r7,4
   11134:	0023883a 	mov	r17,zero
   11138:	d9c14015 	stw	r7,1280(sp)
   1113c:	d8000405 	stb	zero,16(sp)
   11140:	003fd306 	br	11090 <___vfprintf_internal_r+0xa38>
   11144:	d9014c17 	ldw	r4,1328(sp)
   11148:	21000414 	ori	r4,r4,16
   1114c:	d9014c15 	stw	r4,1328(sp)
   11150:	d9414c17 	ldw	r5,1328(sp)
   11154:	2880080c 	andi	r2,r5,32
   11158:	1001081e 	bne	r2,zero,1157c <___vfprintf_internal_r+0xf24>
   1115c:	d8c14c17 	ldw	r3,1328(sp)
   11160:	1880040c 	andi	r2,r3,16
   11164:	1002b61e 	bne	r2,zero,11c40 <___vfprintf_internal_r+0x15e8>
   11168:	d9014c17 	ldw	r4,1328(sp)
   1116c:	2080100c 	andi	r2,r4,64
   11170:	1002b326 	beq	r2,zero,11c40 <___vfprintf_internal_r+0x15e8>
   11174:	3c00000b 	ldhu	r16,0(r7)
   11178:	01000044 	movi	r4,1
   1117c:	39c00104 	addi	r7,r7,4
   11180:	0023883a 	mov	r17,zero
   11184:	d9c14015 	stw	r7,1280(sp)
   11188:	d8000405 	stb	zero,16(sp)
   1118c:	003fc006 	br	11090 <___vfprintf_internal_r+0xa38>
   11190:	d9014f17 	ldw	r4,1340(sp)
   11194:	b00b883a 	mov	r5,r22
   11198:	d9800c04 	addi	r6,sp,48
   1119c:	00106000 	call	10600 <__sprint_r>
   111a0:	103ee51e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   111a4:	dc800e17 	ldw	r18,56(sp)
   111a8:	d8c01904 	addi	r3,sp,100
   111ac:	d9814c17 	ldw	r6,1328(sp)
   111b0:	3080004c 	andi	r2,r6,1
   111b4:	1005003a 	cmpeq	r2,r2,zero
   111b8:	103ea51e 	bne	r2,zero,10c50 <___vfprintf_internal_r+0x5f8>
   111bc:	00800044 	movi	r2,1
   111c0:	dc400d17 	ldw	r17,52(sp)
   111c4:	18800115 	stw	r2,4(r3)
   111c8:	d8814917 	ldw	r2,1316(sp)
   111cc:	94800044 	addi	r18,r18,1
   111d0:	8c400044 	addi	r17,r17,1
   111d4:	18800015 	stw	r2,0(r3)
   111d8:	008001c4 	movi	r2,7
   111dc:	dc800e15 	stw	r18,56(sp)
   111e0:	dc400d15 	stw	r17,52(sp)
   111e4:	1442240e 	bge	r2,r17,11a78 <___vfprintf_internal_r+0x1420>
   111e8:	d9014f17 	ldw	r4,1340(sp)
   111ec:	b00b883a 	mov	r5,r22
   111f0:	d9800c04 	addi	r6,sp,48
   111f4:	00106000 	call	10600 <__sprint_r>
   111f8:	103ecf1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   111fc:	dc800e17 	ldw	r18,56(sp)
   11200:	d8c01904 	addi	r3,sp,100
   11204:	003e9206 	br	10c50 <___vfprintf_internal_r+0x5f8>
   11208:	d9014f17 	ldw	r4,1340(sp)
   1120c:	b00b883a 	mov	r5,r22
   11210:	d9800c04 	addi	r6,sp,48
   11214:	00106000 	call	10600 <__sprint_r>
   11218:	103ec026 	beq	r2,zero,10d1c <___vfprintf_internal_r+0x6c4>
   1121c:	003ec606 	br	10d38 <___vfprintf_internal_r+0x6e0>
   11220:	d9014f17 	ldw	r4,1340(sp)
   11224:	b00b883a 	mov	r5,r22
   11228:	d9800c04 	addi	r6,sp,48
   1122c:	d9c15115 	stw	r7,1348(sp)
   11230:	00106000 	call	10600 <__sprint_r>
   11234:	d9c15117 	ldw	r7,1348(sp)
   11238:	103ebf1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   1123c:	dc800e17 	ldw	r18,56(sp)
   11240:	dc400d17 	ldw	r17,52(sp)
   11244:	dd401904 	addi	r21,sp,100
   11248:	003e7406 	br	10c1c <___vfprintf_internal_r+0x5c4>
   1124c:	d9014f17 	ldw	r4,1340(sp)
   11250:	b00b883a 	mov	r5,r22
   11254:	d9800c04 	addi	r6,sp,48
   11258:	d9c15115 	stw	r7,1348(sp)
   1125c:	00106000 	call	10600 <__sprint_r>
   11260:	d9c15117 	ldw	r7,1348(sp)
   11264:	103eb41e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11268:	dd401904 	addi	r21,sp,100
   1126c:	003d6d06 	br	10824 <___vfprintf_internal_r+0x1cc>
   11270:	d9014f17 	ldw	r4,1340(sp)
   11274:	b00b883a 	mov	r5,r22
   11278:	d9800c04 	addi	r6,sp,48
   1127c:	d9c15115 	stw	r7,1348(sp)
   11280:	00106000 	call	10600 <__sprint_r>
   11284:	d9c15117 	ldw	r7,1348(sp)
   11288:	103eab1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   1128c:	dc800e17 	ldw	r18,56(sp)
   11290:	dc400d17 	ldw	r17,52(sp)
   11294:	dd401904 	addi	r21,sp,100
   11298:	003e3406 	br	10b6c <___vfprintf_internal_r+0x514>
   1129c:	d9014f17 	ldw	r4,1340(sp)
   112a0:	b00b883a 	mov	r5,r22
   112a4:	d9800c04 	addi	r6,sp,48
   112a8:	d9c15115 	stw	r7,1348(sp)
   112ac:	00106000 	call	10600 <__sprint_r>
   112b0:	d9c15117 	ldw	r7,1348(sp)
   112b4:	103ea01e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   112b8:	dc800e17 	ldw	r18,56(sp)
   112bc:	dc400d17 	ldw	r17,52(sp)
   112c0:	dd401904 	addi	r21,sp,100
   112c4:	003e1c06 	br	10b38 <___vfprintf_internal_r+0x4e0>
   112c8:	d9014f17 	ldw	r4,1340(sp)
   112cc:	b00b883a 	mov	r5,r22
   112d0:	d9800c04 	addi	r6,sp,48
   112d4:	d9c15115 	stw	r7,1348(sp)
   112d8:	00106000 	call	10600 <__sprint_r>
   112dc:	d9c15117 	ldw	r7,1348(sp)
   112e0:	103e951e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   112e4:	dc800e17 	ldw	r18,56(sp)
   112e8:	dc400d17 	ldw	r17,52(sp)
   112ec:	dd401904 	addi	r21,sp,100
   112f0:	003e0406 	br	10b04 <___vfprintf_internal_r+0x4ac>
   112f4:	d9000517 	ldw	r4,20(sp)
   112f8:	0102580e 	bge	zero,r4,11c5c <___vfprintf_internal_r+0x1604>
   112fc:	d9814717 	ldw	r6,1308(sp)
   11300:	21807a16 	blt	r4,r6,114ec <___vfprintf_internal_r+0xe94>
   11304:	d8814117 	ldw	r2,1284(sp)
   11308:	91a5883a 	add	r18,r18,r6
   1130c:	8c400044 	addi	r17,r17,1
   11310:	a8800015 	stw	r2,0(r21)
   11314:	008001c4 	movi	r2,7
   11318:	a9800115 	stw	r6,4(r21)
   1131c:	dc800e15 	stw	r18,56(sp)
   11320:	dc400d15 	stw	r17,52(sp)
   11324:	1442fc16 	blt	r2,r17,11f18 <___vfprintf_internal_r+0x18c0>
   11328:	a8c00204 	addi	r3,r21,8
   1132c:	d9414717 	ldw	r5,1308(sp)
   11330:	2161c83a 	sub	r16,r4,r5
   11334:	043f9d0e 	bge	zero,r16,111ac <___vfprintf_internal_r+0xb54>
   11338:	00800404 	movi	r2,16
   1133c:	1402190e 	bge	r2,r16,11ba4 <___vfprintf_internal_r+0x154c>
   11340:	dc400d17 	ldw	r17,52(sp)
   11344:	1027883a 	mov	r19,r2
   11348:	07000134 	movhi	fp,4
   1134c:	e7202d84 	addi	fp,fp,-32586
   11350:	050001c4 	movi	r20,7
   11354:	00000306 	br	11364 <___vfprintf_internal_r+0xd0c>
   11358:	18c00204 	addi	r3,r3,8
   1135c:	843ffc04 	addi	r16,r16,-16
   11360:	9c02130e 	bge	r19,r16,11bb0 <___vfprintf_internal_r+0x1558>
   11364:	94800404 	addi	r18,r18,16
   11368:	8c400044 	addi	r17,r17,1
   1136c:	1f000015 	stw	fp,0(r3)
   11370:	1cc00115 	stw	r19,4(r3)
   11374:	dc800e15 	stw	r18,56(sp)
   11378:	dc400d15 	stw	r17,52(sp)
   1137c:	a47ff60e 	bge	r20,r17,11358 <___vfprintf_internal_r+0xd00>
   11380:	d9014f17 	ldw	r4,1340(sp)
   11384:	b00b883a 	mov	r5,r22
   11388:	d9800c04 	addi	r6,sp,48
   1138c:	00106000 	call	10600 <__sprint_r>
   11390:	103e691e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11394:	dc800e17 	ldw	r18,56(sp)
   11398:	dc400d17 	ldw	r17,52(sp)
   1139c:	d8c01904 	addi	r3,sp,100
   113a0:	003fee06 	br	1135c <___vfprintf_internal_r+0xd04>
   113a4:	d8814717 	ldw	r2,1308(sp)
   113a8:	143fffc4 	addi	r16,r2,-1
   113ac:	043e970e 	bge	zero,r16,10e0c <___vfprintf_internal_r+0x7b4>
   113b0:	00800404 	movi	r2,16
   113b4:	1400180e 	bge	r2,r16,11418 <___vfprintf_internal_r+0xdc0>
   113b8:	1029883a 	mov	r20,r2
   113bc:	07000134 	movhi	fp,4
   113c0:	e7202d84 	addi	fp,fp,-32586
   113c4:	054001c4 	movi	r21,7
   113c8:	00000306 	br	113d8 <___vfprintf_internal_r+0xd80>
   113cc:	9cc00204 	addi	r19,r19,8
   113d0:	843ffc04 	addi	r16,r16,-16
   113d4:	a400120e 	bge	r20,r16,11420 <___vfprintf_internal_r+0xdc8>
   113d8:	94800404 	addi	r18,r18,16
   113dc:	8c400044 	addi	r17,r17,1
   113e0:	9f000015 	stw	fp,0(r19)
   113e4:	9d000115 	stw	r20,4(r19)
   113e8:	dc800e15 	stw	r18,56(sp)
   113ec:	dc400d15 	stw	r17,52(sp)
   113f0:	ac7ff60e 	bge	r21,r17,113cc <___vfprintf_internal_r+0xd74>
   113f4:	d9014f17 	ldw	r4,1340(sp)
   113f8:	b00b883a 	mov	r5,r22
   113fc:	d9800c04 	addi	r6,sp,48
   11400:	00106000 	call	10600 <__sprint_r>
   11404:	103e4c1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11408:	dc800e17 	ldw	r18,56(sp)
   1140c:	dc400d17 	ldw	r17,52(sp)
   11410:	dcc01904 	addi	r19,sp,100
   11414:	003fee06 	br	113d0 <___vfprintf_internal_r+0xd78>
   11418:	07000134 	movhi	fp,4
   1141c:	e7202d84 	addi	fp,fp,-32586
   11420:	9425883a 	add	r18,r18,r16
   11424:	8c400044 	addi	r17,r17,1
   11428:	008001c4 	movi	r2,7
   1142c:	9f000015 	stw	fp,0(r19)
   11430:	9c000115 	stw	r16,4(r19)
   11434:	dc800e15 	stw	r18,56(sp)
   11438:	dc400d15 	stw	r17,52(sp)
   1143c:	147e720e 	bge	r2,r17,10e08 <___vfprintf_internal_r+0x7b0>
   11440:	d9014f17 	ldw	r4,1340(sp)
   11444:	b00b883a 	mov	r5,r22
   11448:	d9800c04 	addi	r6,sp,48
   1144c:	00106000 	call	10600 <__sprint_r>
   11450:	103e391e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11454:	dc800e17 	ldw	r18,56(sp)
   11458:	dc400d17 	ldw	r17,52(sp)
   1145c:	dcc01904 	addi	r19,sp,100
   11460:	003e6a06 	br	10e0c <___vfprintf_internal_r+0x7b4>
   11464:	d9014f17 	ldw	r4,1340(sp)
   11468:	b00b883a 	mov	r5,r22
   1146c:	d9800c04 	addi	r6,sp,48
   11470:	d9c15115 	stw	r7,1348(sp)
   11474:	00106000 	call	10600 <__sprint_r>
   11478:	d9c15117 	ldw	r7,1348(sp)
   1147c:	103e2e1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11480:	dc800e17 	ldw	r18,56(sp)
   11484:	dc400d17 	ldw	r17,52(sp)
   11488:	dd401904 	addi	r21,sp,100
   1148c:	003dba06 	br	10b78 <___vfprintf_internal_r+0x520>
   11490:	d9014f17 	ldw	r4,1340(sp)
   11494:	b00b883a 	mov	r5,r22
   11498:	d9800c04 	addi	r6,sp,48
   1149c:	00106000 	call	10600 <__sprint_r>
   114a0:	103e251e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   114a4:	dc800e17 	ldw	r18,56(sp)
   114a8:	dc400d17 	ldw	r17,52(sp)
   114ac:	dcc01904 	addi	r19,sp,100
   114b0:	003e4206 	br	10dbc <___vfprintf_internal_r+0x764>
   114b4:	d9014f17 	ldw	r4,1340(sp)
   114b8:	b00b883a 	mov	r5,r22
   114bc:	d9800c04 	addi	r6,sp,48
   114c0:	00106000 	call	10600 <__sprint_r>
   114c4:	103e1c1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   114c8:	dc800e17 	ldw	r18,56(sp)
   114cc:	dc400d17 	ldw	r17,52(sp)
   114d0:	d8c01904 	addi	r3,sp,100
   114d4:	003e2e06 	br	10d90 <___vfprintf_internal_r+0x738>
   114d8:	d9414c17 	ldw	r5,1328(sp)
   114dc:	2880004c 	andi	r2,r5,1
   114e0:	1005003a 	cmpeq	r2,r2,zero
   114e4:	103dda1e 	bne	r2,zero,10c50 <___vfprintf_internal_r+0x5f8>
   114e8:	003e9f06 	br	10f68 <___vfprintf_internal_r+0x910>
   114ec:	d8c14117 	ldw	r3,1284(sp)
   114f0:	9125883a 	add	r18,r18,r4
   114f4:	8c400044 	addi	r17,r17,1
   114f8:	008001c4 	movi	r2,7
   114fc:	a8c00015 	stw	r3,0(r21)
   11500:	a9000115 	stw	r4,4(r21)
   11504:	dc800e15 	stw	r18,56(sp)
   11508:	dc400d15 	stw	r17,52(sp)
   1150c:	14426c16 	blt	r2,r17,11ec0 <___vfprintf_internal_r+0x1868>
   11510:	a8c00204 	addi	r3,r21,8
   11514:	d9414917 	ldw	r5,1316(sp)
   11518:	00800044 	movi	r2,1
   1151c:	94800044 	addi	r18,r18,1
   11520:	8c400044 	addi	r17,r17,1
   11524:	18800115 	stw	r2,4(r3)
   11528:	008001c4 	movi	r2,7
   1152c:	19400015 	stw	r5,0(r3)
   11530:	dc800e15 	stw	r18,56(sp)
   11534:	dc400d15 	stw	r17,52(sp)
   11538:	2021883a 	mov	r16,r4
   1153c:	14425616 	blt	r2,r17,11e98 <___vfprintf_internal_r+0x1840>
   11540:	19400204 	addi	r5,r3,8
   11544:	d9814717 	ldw	r6,1308(sp)
   11548:	8c400044 	addi	r17,r17,1
   1154c:	dc400d15 	stw	r17,52(sp)
   11550:	3107c83a 	sub	r3,r6,r4
   11554:	d9014117 	ldw	r4,1284(sp)
   11558:	90e5883a 	add	r18,r18,r3
   1155c:	28c00115 	stw	r3,4(r5)
   11560:	8105883a 	add	r2,r16,r4
   11564:	28800015 	stw	r2,0(r5)
   11568:	008001c4 	movi	r2,7
   1156c:	dc800e15 	stw	r18,56(sp)
   11570:	147f1d16 	blt	r2,r17,111e8 <___vfprintf_internal_r+0xb90>
   11574:	28c00204 	addi	r3,r5,8
   11578:	003db506 	br	10c50 <___vfprintf_internal_r+0x5f8>
   1157c:	3c000017 	ldw	r16,0(r7)
   11580:	3c400117 	ldw	r17,4(r7)
   11584:	39800204 	addi	r6,r7,8
   11588:	01000044 	movi	r4,1
   1158c:	d9814015 	stw	r6,1280(sp)
   11590:	d8000405 	stb	zero,16(sp)
   11594:	003ebe06 	br	11090 <___vfprintf_internal_r+0xa38>
   11598:	3c000017 	ldw	r16,0(r7)
   1159c:	3c400117 	ldw	r17,4(r7)
   115a0:	38800204 	addi	r2,r7,8
   115a4:	d8814015 	stw	r2,1280(sp)
   115a8:	003eb706 	br	11088 <___vfprintf_internal_r+0xa30>
   115ac:	3c000017 	ldw	r16,0(r7)
   115b0:	3c400117 	ldw	r17,4(r7)
   115b4:	39000204 	addi	r4,r7,8
   115b8:	d9014015 	stw	r4,1280(sp)
   115bc:	0009883a 	mov	r4,zero
   115c0:	d8000405 	stb	zero,16(sp)
   115c4:	003eb206 	br	11090 <___vfprintf_internal_r+0xa38>
   115c8:	38c00017 	ldw	r3,0(r7)
   115cc:	39c00104 	addi	r7,r7,4
   115d0:	d8c14a15 	stw	r3,1320(sp)
   115d4:	1800d70e 	bge	r3,zero,11934 <___vfprintf_internal_r+0x12dc>
   115d8:	00c7c83a 	sub	r3,zero,r3
   115dc:	d8c14a15 	stw	r3,1320(sp)
   115e0:	d9014c17 	ldw	r4,1328(sp)
   115e4:	b8c00007 	ldb	r3,0(r23)
   115e8:	21000114 	ori	r4,r4,4
   115ec:	d9014c15 	stw	r4,1328(sp)
   115f0:	003c9806 	br	10854 <___vfprintf_internal_r+0x1fc>
   115f4:	d9814c17 	ldw	r6,1328(sp)
   115f8:	3080080c 	andi	r2,r6,32
   115fc:	1001f626 	beq	r2,zero,11dd8 <___vfprintf_internal_r+0x1780>
   11600:	d9014b17 	ldw	r4,1324(sp)
   11604:	38800017 	ldw	r2,0(r7)
   11608:	39c00104 	addi	r7,r7,4
   1160c:	d9c14015 	stw	r7,1280(sp)
   11610:	2007d7fa 	srai	r3,r4,31
   11614:	d9c14017 	ldw	r7,1280(sp)
   11618:	11000015 	stw	r4,0(r2)
   1161c:	10c00115 	stw	r3,4(r2)
   11620:	003c6906 	br	107c8 <___vfprintf_internal_r+0x170>
   11624:	b8c00007 	ldb	r3,0(r23)
   11628:	00801b04 	movi	r2,108
   1162c:	18825526 	beq	r3,r2,11f84 <___vfprintf_internal_r+0x192c>
   11630:	d9414c17 	ldw	r5,1328(sp)
   11634:	29400414 	ori	r5,r5,16
   11638:	d9414c15 	stw	r5,1328(sp)
   1163c:	003c8506 	br	10854 <___vfprintf_internal_r+0x1fc>
   11640:	d9814c17 	ldw	r6,1328(sp)
   11644:	b8c00007 	ldb	r3,0(r23)
   11648:	31800814 	ori	r6,r6,32
   1164c:	d9814c15 	stw	r6,1328(sp)
   11650:	003c8006 	br	10854 <___vfprintf_internal_r+0x1fc>
   11654:	d8814c17 	ldw	r2,1328(sp)
   11658:	3c000017 	ldw	r16,0(r7)
   1165c:	00c01e04 	movi	r3,120
   11660:	10800094 	ori	r2,r2,2
   11664:	d8814c15 	stw	r2,1328(sp)
   11668:	39c00104 	addi	r7,r7,4
   1166c:	01400134 	movhi	r5,4
   11670:	29601604 	addi	r5,r5,-32680
   11674:	00800c04 	movi	r2,48
   11678:	0023883a 	mov	r17,zero
   1167c:	01000084 	movi	r4,2
   11680:	d9c14015 	stw	r7,1280(sp)
   11684:	d8c14d15 	stw	r3,1332(sp)
   11688:	d9414415 	stw	r5,1296(sp)
   1168c:	d8800445 	stb	r2,17(sp)
   11690:	d8c00485 	stb	r3,18(sp)
   11694:	d8000405 	stb	zero,16(sp)
   11698:	003e7d06 	br	11090 <___vfprintf_internal_r+0xa38>
   1169c:	d8814c17 	ldw	r2,1328(sp)
   116a0:	b8c00007 	ldb	r3,0(r23)
   116a4:	10801014 	ori	r2,r2,64
   116a8:	d8814c15 	stw	r2,1328(sp)
   116ac:	003c6906 	br	10854 <___vfprintf_internal_r+0x1fc>
   116b0:	d9414c17 	ldw	r5,1328(sp)
   116b4:	2880020c 	andi	r2,r5,8
   116b8:	1001e526 	beq	r2,zero,11e50 <___vfprintf_internal_r+0x17f8>
   116bc:	39800017 	ldw	r6,0(r7)
   116c0:	38800204 	addi	r2,r7,8
   116c4:	d8814015 	stw	r2,1280(sp)
   116c8:	d9814215 	stw	r6,1288(sp)
   116cc:	39c00117 	ldw	r7,4(r7)
   116d0:	d9c14315 	stw	r7,1292(sp)
   116d4:	d9014217 	ldw	r4,1288(sp)
   116d8:	d9414317 	ldw	r5,1292(sp)
   116dc:	00171080 	call	17108 <__isinfd>
   116e0:	10021d26 	beq	r2,zero,11f58 <___vfprintf_internal_r+0x1900>
   116e4:	d9014217 	ldw	r4,1288(sp)
   116e8:	d9414317 	ldw	r5,1292(sp)
   116ec:	000d883a 	mov	r6,zero
   116f0:	000f883a 	mov	r7,zero
   116f4:	00192a40 	call	192a4 <__ltdf2>
   116f8:	1002d016 	blt	r2,zero,1223c <___vfprintf_internal_r+0x1be4>
   116fc:	d9414d17 	ldw	r5,1332(sp)
   11700:	008011c4 	movi	r2,71
   11704:	11421016 	blt	r2,r5,11f48 <___vfprintf_internal_r+0x18f0>
   11708:	01800134 	movhi	r6,4
   1170c:	31a01b04 	addi	r6,r6,-32660
   11710:	d9814115 	stw	r6,1284(sp)
   11714:	d9014c17 	ldw	r4,1328(sp)
   11718:	00c000c4 	movi	r3,3
   1171c:	00bfdfc4 	movi	r2,-129
   11720:	2088703a 	and	r4,r4,r2
   11724:	180f883a 	mov	r7,r3
   11728:	d8c14515 	stw	r3,1300(sp)
   1172c:	d9014c15 	stw	r4,1328(sp)
   11730:	d8014615 	stw	zero,1304(sp)
   11734:	003e6a06 	br	110e0 <___vfprintf_internal_r+0xa88>
   11738:	38800017 	ldw	r2,0(r7)
   1173c:	00c00044 	movi	r3,1
   11740:	39c00104 	addi	r7,r7,4
   11744:	d9c14015 	stw	r7,1280(sp)
   11748:	d9000f04 	addi	r4,sp,60
   1174c:	180f883a 	mov	r7,r3
   11750:	d8c14515 	stw	r3,1300(sp)
   11754:	d9014115 	stw	r4,1284(sp)
   11758:	d8800f05 	stb	r2,60(sp)
   1175c:	d8000405 	stb	zero,16(sp)
   11760:	003cac06 	br	10a14 <___vfprintf_internal_r+0x3bc>
   11764:	01400134 	movhi	r5,4
   11768:	29602104 	addi	r5,r5,-32636
   1176c:	d9414415 	stw	r5,1296(sp)
   11770:	d9814c17 	ldw	r6,1328(sp)
   11774:	3080080c 	andi	r2,r6,32
   11778:	1000ff26 	beq	r2,zero,11b78 <___vfprintf_internal_r+0x1520>
   1177c:	3c000017 	ldw	r16,0(r7)
   11780:	3c400117 	ldw	r17,4(r7)
   11784:	38800204 	addi	r2,r7,8
   11788:	d8814015 	stw	r2,1280(sp)
   1178c:	d9414c17 	ldw	r5,1328(sp)
   11790:	2880004c 	andi	r2,r5,1
   11794:	1005003a 	cmpeq	r2,r2,zero
   11798:	1000b91e 	bne	r2,zero,11a80 <___vfprintf_internal_r+0x1428>
   1179c:	8444b03a 	or	r2,r16,r17
   117a0:	1000b726 	beq	r2,zero,11a80 <___vfprintf_internal_r+0x1428>
   117a4:	d9814d17 	ldw	r6,1332(sp)
   117a8:	29400094 	ori	r5,r5,2
   117ac:	00800c04 	movi	r2,48
   117b0:	01000084 	movi	r4,2
   117b4:	d9414c15 	stw	r5,1328(sp)
   117b8:	d8800445 	stb	r2,17(sp)
   117bc:	d9800485 	stb	r6,18(sp)
   117c0:	d8000405 	stb	zero,16(sp)
   117c4:	003e3206 	br	11090 <___vfprintf_internal_r+0xa38>
   117c8:	01800134 	movhi	r6,4
   117cc:	31a01604 	addi	r6,r6,-32680
   117d0:	d9814415 	stw	r6,1296(sp)
   117d4:	003fe606 	br	11770 <___vfprintf_internal_r+0x1118>
   117d8:	00800ac4 	movi	r2,43
   117dc:	d8800405 	stb	r2,16(sp)
   117e0:	b8c00007 	ldb	r3,0(r23)
   117e4:	003c1b06 	br	10854 <___vfprintf_internal_r+0x1fc>
   117e8:	d8814c17 	ldw	r2,1328(sp)
   117ec:	b8c00007 	ldb	r3,0(r23)
   117f0:	10800054 	ori	r2,r2,1
   117f4:	d8814c15 	stw	r2,1328(sp)
   117f8:	003c1606 	br	10854 <___vfprintf_internal_r+0x1fc>
   117fc:	d8800407 	ldb	r2,16(sp)
   11800:	10004c1e 	bne	r2,zero,11934 <___vfprintf_internal_r+0x12dc>
   11804:	00800804 	movi	r2,32
   11808:	d8800405 	stb	r2,16(sp)
   1180c:	b8c00007 	ldb	r3,0(r23)
   11810:	003c1006 	br	10854 <___vfprintf_internal_r+0x1fc>
   11814:	d9814c17 	ldw	r6,1328(sp)
   11818:	b8c00007 	ldb	r3,0(r23)
   1181c:	31800214 	ori	r6,r6,8
   11820:	d9814c15 	stw	r6,1328(sp)
   11824:	003c0b06 	br	10854 <___vfprintf_internal_r+0x1fc>
   11828:	0009883a 	mov	r4,zero
   1182c:	04000244 	movi	r16,9
   11830:	01400284 	movi	r5,10
   11834:	d9c15115 	stw	r7,1348(sp)
   11838:	00197dc0 	call	197dc <__mulsi3>
   1183c:	b9000007 	ldb	r4,0(r23)
   11840:	d8c14d17 	ldw	r3,1332(sp)
   11844:	bdc00044 	addi	r23,r23,1
   11848:	d9014d15 	stw	r4,1332(sp)
   1184c:	d9414d17 	ldw	r5,1332(sp)
   11850:	1885883a 	add	r2,r3,r2
   11854:	113ff404 	addi	r4,r2,-48
   11858:	28bff404 	addi	r2,r5,-48
   1185c:	d9c15117 	ldw	r7,1348(sp)
   11860:	80bff32e 	bgeu	r16,r2,11830 <___vfprintf_internal_r+0x11d8>
   11864:	d9014a15 	stw	r4,1320(sp)
   11868:	003bfc06 	br	1085c <___vfprintf_internal_r+0x204>
   1186c:	d8814c17 	ldw	r2,1328(sp)
   11870:	b8c00007 	ldb	r3,0(r23)
   11874:	10802014 	ori	r2,r2,128
   11878:	d8814c15 	stw	r2,1328(sp)
   1187c:	003bf506 	br	10854 <___vfprintf_internal_r+0x1fc>
   11880:	b8c00007 	ldb	r3,0(r23)
   11884:	00800a84 	movi	r2,42
   11888:	bdc00044 	addi	r23,r23,1
   1188c:	18831826 	beq	r3,r2,124f0 <___vfprintf_internal_r+0x1e98>
   11890:	d8c14d15 	stw	r3,1332(sp)
   11894:	18bff404 	addi	r2,r3,-48
   11898:	00c00244 	movi	r3,9
   1189c:	18827b36 	bltu	r3,r2,1228c <___vfprintf_internal_r+0x1c34>
   118a0:	1821883a 	mov	r16,r3
   118a4:	0009883a 	mov	r4,zero
   118a8:	01400284 	movi	r5,10
   118ac:	d9c15115 	stw	r7,1348(sp)
   118b0:	00197dc0 	call	197dc <__mulsi3>
   118b4:	d9414d17 	ldw	r5,1332(sp)
   118b8:	b9800007 	ldb	r6,0(r23)
   118bc:	d9c15117 	ldw	r7,1348(sp)
   118c0:	1145883a 	add	r2,r2,r5
   118c4:	113ff404 	addi	r4,r2,-48
   118c8:	30bff404 	addi	r2,r6,-48
   118cc:	d9814d15 	stw	r6,1332(sp)
   118d0:	bdc00044 	addi	r23,r23,1
   118d4:	80bff42e 	bgeu	r16,r2,118a8 <___vfprintf_internal_r+0x1250>
   118d8:	2027883a 	mov	r19,r4
   118dc:	203bdf0e 	bge	r4,zero,1085c <___vfprintf_internal_r+0x204>
   118e0:	04ffffc4 	movi	r19,-1
   118e4:	003bdd06 	br	1085c <___vfprintf_internal_r+0x204>
   118e8:	d8000405 	stb	zero,16(sp)
   118ec:	39800017 	ldw	r6,0(r7)
   118f0:	39c00104 	addi	r7,r7,4
   118f4:	d9c14015 	stw	r7,1280(sp)
   118f8:	d9814115 	stw	r6,1284(sp)
   118fc:	3001c926 	beq	r6,zero,12024 <___vfprintf_internal_r+0x19cc>
   11900:	98000e16 	blt	r19,zero,1193c <___vfprintf_internal_r+0x12e4>
   11904:	d9014117 	ldw	r4,1284(sp)
   11908:	000b883a 	mov	r5,zero
   1190c:	980d883a 	mov	r6,r19
   11910:	001578c0 	call	1578c <memchr>
   11914:	10025926 	beq	r2,zero,1227c <___vfprintf_internal_r+0x1c24>
   11918:	d8c14117 	ldw	r3,1284(sp)
   1191c:	10cfc83a 	sub	r7,r2,r3
   11920:	99c19e16 	blt	r19,r7,11f9c <___vfprintf_internal_r+0x1944>
   11924:	d9c14515 	stw	r7,1300(sp)
   11928:	38000916 	blt	r7,zero,11950 <___vfprintf_internal_r+0x12f8>
   1192c:	d8014615 	stw	zero,1304(sp)
   11930:	003deb06 	br	110e0 <___vfprintf_internal_r+0xa88>
   11934:	b8c00007 	ldb	r3,0(r23)
   11938:	003bc606 	br	10854 <___vfprintf_internal_r+0x1fc>
   1193c:	d9014117 	ldw	r4,1284(sp)
   11940:	001058c0 	call	1058c <strlen>
   11944:	d8814515 	stw	r2,1300(sp)
   11948:	100f883a 	mov	r7,r2
   1194c:	103ff70e 	bge	r2,zero,1192c <___vfprintf_internal_r+0x12d4>
   11950:	d8014515 	stw	zero,1300(sp)
   11954:	d8014615 	stw	zero,1304(sp)
   11958:	003de106 	br	110e0 <___vfprintf_internal_r+0xa88>
   1195c:	20c03fcc 	andi	r3,r4,255
   11960:	00800044 	movi	r2,1
   11964:	18802d26 	beq	r3,r2,11a1c <___vfprintf_internal_r+0x13c4>
   11968:	18800e36 	bltu	r3,r2,119a4 <___vfprintf_internal_r+0x134c>
   1196c:	00800084 	movi	r2,2
   11970:	1880fa26 	beq	r3,r2,11d5c <___vfprintf_internal_r+0x1704>
   11974:	01000134 	movhi	r4,4
   11978:	21202604 	addi	r4,r4,-32616
   1197c:	001058c0 	call	1058c <strlen>
   11980:	100f883a 	mov	r7,r2
   11984:	dcc14515 	stw	r19,1300(sp)
   11988:	9880010e 	bge	r19,r2,11990 <___vfprintf_internal_r+0x1338>
   1198c:	d8814515 	stw	r2,1300(sp)
   11990:	00800134 	movhi	r2,4
   11994:	10a02604 	addi	r2,r2,-32616
   11998:	dcc14615 	stw	r19,1304(sp)
   1199c:	d8814115 	stw	r2,1284(sp)
   119a0:	003dcf06 	br	110e0 <___vfprintf_internal_r+0xa88>
   119a4:	d9401904 	addi	r5,sp,100
   119a8:	dd000f04 	addi	r20,sp,60
   119ac:	d9414115 	stw	r5,1284(sp)
   119b0:	880a977a 	slli	r5,r17,29
   119b4:	d9814117 	ldw	r6,1284(sp)
   119b8:	8004d0fa 	srli	r2,r16,3
   119bc:	8806d0fa 	srli	r3,r17,3
   119c0:	810001cc 	andi	r4,r16,7
   119c4:	2884b03a 	or	r2,r5,r2
   119c8:	31bfffc4 	addi	r6,r6,-1
   119cc:	21000c04 	addi	r4,r4,48
   119d0:	d9814115 	stw	r6,1284(sp)
   119d4:	10cab03a 	or	r5,r2,r3
   119d8:	31000005 	stb	r4,0(r6)
   119dc:	1021883a 	mov	r16,r2
   119e0:	1823883a 	mov	r17,r3
   119e4:	283ff21e 	bne	r5,zero,119b0 <___vfprintf_internal_r+0x1358>
   119e8:	d8c14c17 	ldw	r3,1328(sp)
   119ec:	1880004c 	andi	r2,r3,1
   119f0:	1005003a 	cmpeq	r2,r2,zero
   119f4:	103db31e 	bne	r2,zero,110c4 <___vfprintf_internal_r+0xa6c>
   119f8:	20803fcc 	andi	r2,r4,255
   119fc:	1080201c 	xori	r2,r2,128
   11a00:	10bfe004 	addi	r2,r2,-128
   11a04:	00c00c04 	movi	r3,48
   11a08:	10fdae26 	beq	r2,r3,110c4 <___vfprintf_internal_r+0xa6c>
   11a0c:	31bfffc4 	addi	r6,r6,-1
   11a10:	d9814115 	stw	r6,1284(sp)
   11a14:	30c00005 	stb	r3,0(r6)
   11a18:	003daa06 	br	110c4 <___vfprintf_internal_r+0xa6c>
   11a1c:	88800068 	cmpgeui	r2,r17,1
   11a20:	10002c1e 	bne	r2,zero,11ad4 <___vfprintf_internal_r+0x147c>
   11a24:	8800021e 	bne	r17,zero,11a30 <___vfprintf_internal_r+0x13d8>
   11a28:	00800244 	movi	r2,9
   11a2c:	14002936 	bltu	r2,r16,11ad4 <___vfprintf_internal_r+0x147c>
   11a30:	d90018c4 	addi	r4,sp,99
   11a34:	dd000f04 	addi	r20,sp,60
   11a38:	d9014115 	stw	r4,1284(sp)
   11a3c:	d9014117 	ldw	r4,1284(sp)
   11a40:	80800c04 	addi	r2,r16,48
   11a44:	20800005 	stb	r2,0(r4)
   11a48:	003d9e06 	br	110c4 <___vfprintf_internal_r+0xa6c>
   11a4c:	dc400d17 	ldw	r17,52(sp)
   11a50:	07000134 	movhi	fp,4
   11a54:	e7202d84 	addi	fp,fp,-32586
   11a58:	9425883a 	add	r18,r18,r16
   11a5c:	8c400044 	addi	r17,r17,1
   11a60:	008001c4 	movi	r2,7
   11a64:	1f000015 	stw	fp,0(r3)
   11a68:	1c000115 	stw	r16,4(r3)
   11a6c:	dc800e15 	stw	r18,56(sp)
   11a70:	dc400d15 	stw	r17,52(sp)
   11a74:	147ddc16 	blt	r2,r17,111e8 <___vfprintf_internal_r+0xb90>
   11a78:	18c00204 	addi	r3,r3,8
   11a7c:	003c7406 	br	10c50 <___vfprintf_internal_r+0x5f8>
   11a80:	01000084 	movi	r4,2
   11a84:	d8000405 	stb	zero,16(sp)
   11a88:	003d8106 	br	11090 <___vfprintf_internal_r+0xa38>
   11a8c:	d9814c17 	ldw	r6,1328(sp)
   11a90:	30c4703a 	and	r2,r6,r3
   11a94:	1005003a 	cmpeq	r2,r2,zero
   11a98:	103cb326 	beq	r2,zero,10d68 <___vfprintf_internal_r+0x710>
   11a9c:	d9014117 	ldw	r4,1284(sp)
   11aa0:	94800044 	addi	r18,r18,1
   11aa4:	8c400044 	addi	r17,r17,1
   11aa8:	008001c4 	movi	r2,7
   11aac:	a9000015 	stw	r4,0(r21)
   11ab0:	a8c00115 	stw	r3,4(r21)
   11ab4:	dc800e15 	stw	r18,56(sp)
   11ab8:	dc400d15 	stw	r17,52(sp)
   11abc:	147e6016 	blt	r2,r17,11440 <___vfprintf_internal_r+0xde8>
   11ac0:	acc00204 	addi	r19,r21,8
   11ac4:	003cd106 	br	10e0c <___vfprintf_internal_r+0x7b4>
   11ac8:	07000134 	movhi	fp,4
   11acc:	e7202d84 	addi	fp,fp,-32586
   11ad0:	003c4906 	br	10bf8 <___vfprintf_internal_r+0x5a0>
   11ad4:	dd000f04 	addi	r20,sp,60
   11ad8:	dc801904 	addi	r18,sp,100
   11adc:	8009883a 	mov	r4,r16
   11ae0:	880b883a 	mov	r5,r17
   11ae4:	01800284 	movi	r6,10
   11ae8:	000f883a 	mov	r7,zero
   11aec:	0017f040 	call	17f04 <__umoddi3>
   11af0:	12000c04 	addi	r8,r2,48
   11af4:	94bfffc4 	addi	r18,r18,-1
   11af8:	8009883a 	mov	r4,r16
   11afc:	880b883a 	mov	r5,r17
   11b00:	01800284 	movi	r6,10
   11b04:	000f883a 	mov	r7,zero
   11b08:	92000005 	stb	r8,0(r18)
   11b0c:	00178980 	call	17898 <__udivdi3>
   11b10:	1009883a 	mov	r4,r2
   11b14:	1021883a 	mov	r16,r2
   11b18:	18800068 	cmpgeui	r2,r3,1
   11b1c:	1823883a 	mov	r17,r3
   11b20:	103fee1e 	bne	r2,zero,11adc <___vfprintf_internal_r+0x1484>
   11b24:	1800021e 	bne	r3,zero,11b30 <___vfprintf_internal_r+0x14d8>
   11b28:	00800244 	movi	r2,9
   11b2c:	113feb36 	bltu	r2,r4,11adc <___vfprintf_internal_r+0x1484>
   11b30:	94bfffc4 	addi	r18,r18,-1
   11b34:	dc814115 	stw	r18,1284(sp)
   11b38:	003fc006 	br	11a3c <___vfprintf_internal_r+0x13e4>
   11b3c:	d9014c17 	ldw	r4,1328(sp)
   11b40:	2080004c 	andi	r2,r4,1
   11b44:	10009a1e 	bne	r2,zero,11db0 <___vfprintf_internal_r+0x1758>
   11b48:	d9401904 	addi	r5,sp,100
   11b4c:	dd000f04 	addi	r20,sp,60
   11b50:	d9414115 	stw	r5,1284(sp)
   11b54:	003d5b06 	br	110c4 <___vfprintf_internal_r+0xa6c>
   11b58:	d9014f17 	ldw	r4,1340(sp)
   11b5c:	b00b883a 	mov	r5,r22
   11b60:	d9800c04 	addi	r6,sp,48
   11b64:	00106000 	call	10600 <__sprint_r>
   11b68:	103c731e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11b6c:	dc800e17 	ldw	r18,56(sp)
   11b70:	d8c01904 	addi	r3,sp,100
   11b74:	003cf906 	br	10f5c <___vfprintf_internal_r+0x904>
   11b78:	d8c14c17 	ldw	r3,1328(sp)
   11b7c:	1880040c 	andi	r2,r3,16
   11b80:	1000711e 	bne	r2,zero,11d48 <___vfprintf_internal_r+0x16f0>
   11b84:	d9014c17 	ldw	r4,1328(sp)
   11b88:	2080100c 	andi	r2,r4,64
   11b8c:	10006e26 	beq	r2,zero,11d48 <___vfprintf_internal_r+0x16f0>
   11b90:	3c00000b 	ldhu	r16,0(r7)
   11b94:	0023883a 	mov	r17,zero
   11b98:	39c00104 	addi	r7,r7,4
   11b9c:	d9c14015 	stw	r7,1280(sp)
   11ba0:	003efa06 	br	1178c <___vfprintf_internal_r+0x1134>
   11ba4:	dc400d17 	ldw	r17,52(sp)
   11ba8:	07000134 	movhi	fp,4
   11bac:	e7202d84 	addi	fp,fp,-32586
   11bb0:	9425883a 	add	r18,r18,r16
   11bb4:	8c400044 	addi	r17,r17,1
   11bb8:	008001c4 	movi	r2,7
   11bbc:	1f000015 	stw	fp,0(r3)
   11bc0:	1c000115 	stw	r16,4(r3)
   11bc4:	dc800e15 	stw	r18,56(sp)
   11bc8:	dc400d15 	stw	r17,52(sp)
   11bcc:	147d7016 	blt	r2,r17,11190 <___vfprintf_internal_r+0xb38>
   11bd0:	18c00204 	addi	r3,r3,8
   11bd4:	003d7506 	br	111ac <___vfprintf_internal_r+0xb54>
   11bd8:	dc800e17 	ldw	r18,56(sp)
   11bdc:	dc400d17 	ldw	r17,52(sp)
   11be0:	07000134 	movhi	fp,4
   11be4:	e7203184 	addi	fp,fp,-32570
   11be8:	003bba06 	br	10ad4 <___vfprintf_internal_r+0x47c>
   11bec:	d9014f17 	ldw	r4,1340(sp)
   11bf0:	b00b883a 	mov	r5,r22
   11bf4:	d9800c04 	addi	r6,sp,48
   11bf8:	00106000 	call	10600 <__sprint_r>
   11bfc:	103c4e1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11c00:	dc800e17 	ldw	r18,56(sp)
   11c04:	d8c01904 	addi	r3,sp,100
   11c08:	003ce306 	br	10f98 <___vfprintf_internal_r+0x940>
   11c0c:	3c000017 	ldw	r16,0(r7)
   11c10:	0009883a 	mov	r4,zero
   11c14:	39c00104 	addi	r7,r7,4
   11c18:	0023883a 	mov	r17,zero
   11c1c:	d9c14015 	stw	r7,1280(sp)
   11c20:	d8000405 	stb	zero,16(sp)
   11c24:	003d1a06 	br	11090 <___vfprintf_internal_r+0xa38>
   11c28:	38800017 	ldw	r2,0(r7)
   11c2c:	39c00104 	addi	r7,r7,4
   11c30:	d9c14015 	stw	r7,1280(sp)
   11c34:	1023d7fa 	srai	r17,r2,31
   11c38:	1021883a 	mov	r16,r2
   11c3c:	003d1206 	br	11088 <___vfprintf_internal_r+0xa30>
   11c40:	3c000017 	ldw	r16,0(r7)
   11c44:	01000044 	movi	r4,1
   11c48:	39c00104 	addi	r7,r7,4
   11c4c:	0023883a 	mov	r17,zero
   11c50:	d9c14015 	stw	r7,1280(sp)
   11c54:	d8000405 	stb	zero,16(sp)
   11c58:	003d0d06 	br	11090 <___vfprintf_internal_r+0xa38>
   11c5c:	00800134 	movhi	r2,4
   11c60:	10a02d04 	addi	r2,r2,-32588
   11c64:	94800044 	addi	r18,r18,1
   11c68:	8c400044 	addi	r17,r17,1
   11c6c:	a8800015 	stw	r2,0(r21)
   11c70:	00c00044 	movi	r3,1
   11c74:	008001c4 	movi	r2,7
   11c78:	a8c00115 	stw	r3,4(r21)
   11c7c:	dc800e15 	stw	r18,56(sp)
   11c80:	dc400d15 	stw	r17,52(sp)
   11c84:	1440ca16 	blt	r2,r17,11fb0 <___vfprintf_internal_r+0x1958>
   11c88:	a8c00204 	addi	r3,r21,8
   11c8c:	2000061e 	bne	r4,zero,11ca8 <___vfprintf_internal_r+0x1650>
   11c90:	d9414717 	ldw	r5,1308(sp)
   11c94:	2800041e 	bne	r5,zero,11ca8 <___vfprintf_internal_r+0x1650>
   11c98:	d9814c17 	ldw	r6,1328(sp)
   11c9c:	3080004c 	andi	r2,r6,1
   11ca0:	1005003a 	cmpeq	r2,r2,zero
   11ca4:	103bea1e 	bne	r2,zero,10c50 <___vfprintf_internal_r+0x5f8>
   11ca8:	00800044 	movi	r2,1
   11cac:	dc400d17 	ldw	r17,52(sp)
   11cb0:	18800115 	stw	r2,4(r3)
   11cb4:	d8814917 	ldw	r2,1316(sp)
   11cb8:	94800044 	addi	r18,r18,1
   11cbc:	8c400044 	addi	r17,r17,1
   11cc0:	18800015 	stw	r2,0(r3)
   11cc4:	008001c4 	movi	r2,7
   11cc8:	dc800e15 	stw	r18,56(sp)
   11ccc:	dc400d15 	stw	r17,52(sp)
   11cd0:	1440ca16 	blt	r2,r17,11ffc <___vfprintf_internal_r+0x19a4>
   11cd4:	18c00204 	addi	r3,r3,8
   11cd8:	0121c83a 	sub	r16,zero,r4
   11cdc:	0400500e 	bge	zero,r16,11e20 <___vfprintf_internal_r+0x17c8>
   11ce0:	00800404 	movi	r2,16
   11ce4:	1400800e 	bge	r2,r16,11ee8 <___vfprintf_internal_r+0x1890>
   11ce8:	1027883a 	mov	r19,r2
   11cec:	07000134 	movhi	fp,4
   11cf0:	e7202d84 	addi	fp,fp,-32586
   11cf4:	050001c4 	movi	r20,7
   11cf8:	00000306 	br	11d08 <___vfprintf_internal_r+0x16b0>
   11cfc:	18c00204 	addi	r3,r3,8
   11d00:	843ffc04 	addi	r16,r16,-16
   11d04:	9c007a0e 	bge	r19,r16,11ef0 <___vfprintf_internal_r+0x1898>
   11d08:	94800404 	addi	r18,r18,16
   11d0c:	8c400044 	addi	r17,r17,1
   11d10:	1f000015 	stw	fp,0(r3)
   11d14:	1cc00115 	stw	r19,4(r3)
   11d18:	dc800e15 	stw	r18,56(sp)
   11d1c:	dc400d15 	stw	r17,52(sp)
   11d20:	a47ff60e 	bge	r20,r17,11cfc <___vfprintf_internal_r+0x16a4>
   11d24:	d9014f17 	ldw	r4,1340(sp)
   11d28:	b00b883a 	mov	r5,r22
   11d2c:	d9800c04 	addi	r6,sp,48
   11d30:	00106000 	call	10600 <__sprint_r>
   11d34:	103c001e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11d38:	dc800e17 	ldw	r18,56(sp)
   11d3c:	dc400d17 	ldw	r17,52(sp)
   11d40:	d8c01904 	addi	r3,sp,100
   11d44:	003fee06 	br	11d00 <___vfprintf_internal_r+0x16a8>
   11d48:	3c000017 	ldw	r16,0(r7)
   11d4c:	0023883a 	mov	r17,zero
   11d50:	39c00104 	addi	r7,r7,4
   11d54:	d9c14015 	stw	r7,1280(sp)
   11d58:	003e8c06 	br	1178c <___vfprintf_internal_r+0x1134>
   11d5c:	d9401904 	addi	r5,sp,100
   11d60:	dd000f04 	addi	r20,sp,60
   11d64:	d9414115 	stw	r5,1284(sp)
   11d68:	d9814417 	ldw	r6,1296(sp)
   11d6c:	880a973a 	slli	r5,r17,28
   11d70:	8004d13a 	srli	r2,r16,4
   11d74:	810003cc 	andi	r4,r16,15
   11d78:	3109883a 	add	r4,r6,r4
   11d7c:	2884b03a 	or	r2,r5,r2
   11d80:	21400003 	ldbu	r5,0(r4)
   11d84:	d9014117 	ldw	r4,1284(sp)
   11d88:	8806d13a 	srli	r3,r17,4
   11d8c:	1021883a 	mov	r16,r2
   11d90:	213fffc4 	addi	r4,r4,-1
   11d94:	d9014115 	stw	r4,1284(sp)
   11d98:	d9814117 	ldw	r6,1284(sp)
   11d9c:	10c8b03a 	or	r4,r2,r3
   11da0:	1823883a 	mov	r17,r3
   11da4:	31400005 	stb	r5,0(r6)
   11da8:	203fef1e 	bne	r4,zero,11d68 <___vfprintf_internal_r+0x1710>
   11dac:	003cc506 	br	110c4 <___vfprintf_internal_r+0xa6c>
   11db0:	00800c04 	movi	r2,48
   11db4:	d98018c4 	addi	r6,sp,99
   11db8:	dd000f04 	addi	r20,sp,60
   11dbc:	d88018c5 	stb	r2,99(sp)
   11dc0:	d9814115 	stw	r6,1284(sp)
   11dc4:	003cbf06 	br	110c4 <___vfprintf_internal_r+0xa6c>
   11dc8:	dc400d17 	ldw	r17,52(sp)
   11dcc:	07000134 	movhi	fp,4
   11dd0:	e7203184 	addi	fp,fp,-32570
   11dd4:	003bc106 	br	10cdc <___vfprintf_internal_r+0x684>
   11dd8:	d9414c17 	ldw	r5,1328(sp)
   11ddc:	2880040c 	andi	r2,r5,16
   11de0:	10007c26 	beq	r2,zero,11fd4 <___vfprintf_internal_r+0x197c>
   11de4:	38800017 	ldw	r2,0(r7)
   11de8:	39c00104 	addi	r7,r7,4
   11dec:	d9c14015 	stw	r7,1280(sp)
   11df0:	d9814b17 	ldw	r6,1324(sp)
   11df4:	d9c14017 	ldw	r7,1280(sp)
   11df8:	11800015 	stw	r6,0(r2)
   11dfc:	003a7206 	br	107c8 <___vfprintf_internal_r+0x170>
   11e00:	d9014f17 	ldw	r4,1340(sp)
   11e04:	b00b883a 	mov	r5,r22
   11e08:	d9800c04 	addi	r6,sp,48
   11e0c:	00106000 	call	10600 <__sprint_r>
   11e10:	103bc91e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11e14:	dc800e17 	ldw	r18,56(sp)
   11e18:	dc400d17 	ldw	r17,52(sp)
   11e1c:	d8c01904 	addi	r3,sp,100
   11e20:	d9014717 	ldw	r4,1308(sp)
   11e24:	d9414117 	ldw	r5,1284(sp)
   11e28:	8c400044 	addi	r17,r17,1
   11e2c:	9125883a 	add	r18,r18,r4
   11e30:	008001c4 	movi	r2,7
   11e34:	19400015 	stw	r5,0(r3)
   11e38:	19000115 	stw	r4,4(r3)
   11e3c:	dc800e15 	stw	r18,56(sp)
   11e40:	dc400d15 	stw	r17,52(sp)
   11e44:	147ce816 	blt	r2,r17,111e8 <___vfprintf_internal_r+0xb90>
   11e48:	18c00204 	addi	r3,r3,8
   11e4c:	003b8006 	br	10c50 <___vfprintf_internal_r+0x5f8>
   11e50:	38c00017 	ldw	r3,0(r7)
   11e54:	39000204 	addi	r4,r7,8
   11e58:	d9014015 	stw	r4,1280(sp)
   11e5c:	d8c14215 	stw	r3,1288(sp)
   11e60:	39c00117 	ldw	r7,4(r7)
   11e64:	d9c14315 	stw	r7,1292(sp)
   11e68:	003e1a06 	br	116d4 <___vfprintf_internal_r+0x107c>
   11e6c:	0005883a 	mov	r2,zero
   11e70:	1409c83a 	sub	r4,r2,r16
   11e74:	1105803a 	cmpltu	r2,r2,r4
   11e78:	044bc83a 	sub	r5,zero,r17
   11e7c:	2885c83a 	sub	r2,r5,r2
   11e80:	2021883a 	mov	r16,r4
   11e84:	1023883a 	mov	r17,r2
   11e88:	01000044 	movi	r4,1
   11e8c:	00800b44 	movi	r2,45
   11e90:	d8800405 	stb	r2,16(sp)
   11e94:	003c7e06 	br	11090 <___vfprintf_internal_r+0xa38>
   11e98:	d9014f17 	ldw	r4,1340(sp)
   11e9c:	b00b883a 	mov	r5,r22
   11ea0:	d9800c04 	addi	r6,sp,48
   11ea4:	00106000 	call	10600 <__sprint_r>
   11ea8:	103ba31e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11eac:	dc800e17 	ldw	r18,56(sp)
   11eb0:	dc400d17 	ldw	r17,52(sp)
   11eb4:	d9000517 	ldw	r4,20(sp)
   11eb8:	d9401904 	addi	r5,sp,100
   11ebc:	003da106 	br	11544 <___vfprintf_internal_r+0xeec>
   11ec0:	d9014f17 	ldw	r4,1340(sp)
   11ec4:	b00b883a 	mov	r5,r22
   11ec8:	d9800c04 	addi	r6,sp,48
   11ecc:	00106000 	call	10600 <__sprint_r>
   11ed0:	103b991e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11ed4:	dc800e17 	ldw	r18,56(sp)
   11ed8:	dc400d17 	ldw	r17,52(sp)
   11edc:	d9000517 	ldw	r4,20(sp)
   11ee0:	d8c01904 	addi	r3,sp,100
   11ee4:	003d8b06 	br	11514 <___vfprintf_internal_r+0xebc>
   11ee8:	07000134 	movhi	fp,4
   11eec:	e7202d84 	addi	fp,fp,-32586
   11ef0:	9425883a 	add	r18,r18,r16
   11ef4:	8c400044 	addi	r17,r17,1
   11ef8:	008001c4 	movi	r2,7
   11efc:	1f000015 	stw	fp,0(r3)
   11f00:	1c000115 	stw	r16,4(r3)
   11f04:	dc800e15 	stw	r18,56(sp)
   11f08:	dc400d15 	stw	r17,52(sp)
   11f0c:	147fbc16 	blt	r2,r17,11e00 <___vfprintf_internal_r+0x17a8>
   11f10:	18c00204 	addi	r3,r3,8
   11f14:	003fc206 	br	11e20 <___vfprintf_internal_r+0x17c8>
   11f18:	d9014f17 	ldw	r4,1340(sp)
   11f1c:	b00b883a 	mov	r5,r22
   11f20:	d9800c04 	addi	r6,sp,48
   11f24:	00106000 	call	10600 <__sprint_r>
   11f28:	103b831e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11f2c:	dc800e17 	ldw	r18,56(sp)
   11f30:	d9000517 	ldw	r4,20(sp)
   11f34:	d8c01904 	addi	r3,sp,100
   11f38:	003cfc06 	br	1132c <___vfprintf_internal_r+0xcd4>
   11f3c:	07000134 	movhi	fp,4
   11f40:	e7202d84 	addi	fp,fp,-32586
   11f44:	003bde06 	br	10ec0 <___vfprintf_internal_r+0x868>
   11f48:	00800134 	movhi	r2,4
   11f4c:	10a01c04 	addi	r2,r2,-32656
   11f50:	d8814115 	stw	r2,1284(sp)
   11f54:	003def06 	br	11714 <___vfprintf_internal_r+0x10bc>
   11f58:	d9014217 	ldw	r4,1288(sp)
   11f5c:	d9414317 	ldw	r5,1292(sp)
   11f60:	00171480 	call	17148 <__isnand>
   11f64:	10003926 	beq	r2,zero,1204c <___vfprintf_internal_r+0x19f4>
   11f68:	d9414d17 	ldw	r5,1332(sp)
   11f6c:	008011c4 	movi	r2,71
   11f70:	1140ce16 	blt	r2,r5,122ac <___vfprintf_internal_r+0x1c54>
   11f74:	01800134 	movhi	r6,4
   11f78:	31a01d04 	addi	r6,r6,-32652
   11f7c:	d9814115 	stw	r6,1284(sp)
   11f80:	003de406 	br	11714 <___vfprintf_internal_r+0x10bc>
   11f84:	d9014c17 	ldw	r4,1328(sp)
   11f88:	bdc00044 	addi	r23,r23,1
   11f8c:	b8c00007 	ldb	r3,0(r23)
   11f90:	21000814 	ori	r4,r4,32
   11f94:	d9014c15 	stw	r4,1328(sp)
   11f98:	003a2e06 	br	10854 <___vfprintf_internal_r+0x1fc>
   11f9c:	dcc14515 	stw	r19,1300(sp)
   11fa0:	98011016 	blt	r19,zero,123e4 <___vfprintf_internal_r+0x1d8c>
   11fa4:	980f883a 	mov	r7,r19
   11fa8:	d8014615 	stw	zero,1304(sp)
   11fac:	003c4c06 	br	110e0 <___vfprintf_internal_r+0xa88>
   11fb0:	d9014f17 	ldw	r4,1340(sp)
   11fb4:	b00b883a 	mov	r5,r22
   11fb8:	d9800c04 	addi	r6,sp,48
   11fbc:	00106000 	call	10600 <__sprint_r>
   11fc0:	103b5d1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   11fc4:	dc800e17 	ldw	r18,56(sp)
   11fc8:	d9000517 	ldw	r4,20(sp)
   11fcc:	d8c01904 	addi	r3,sp,100
   11fd0:	003f2e06 	br	11c8c <___vfprintf_internal_r+0x1634>
   11fd4:	d8c14c17 	ldw	r3,1328(sp)
   11fd8:	1880100c 	andi	r2,r3,64
   11fdc:	1000a026 	beq	r2,zero,12260 <___vfprintf_internal_r+0x1c08>
   11fe0:	38800017 	ldw	r2,0(r7)
   11fe4:	39c00104 	addi	r7,r7,4
   11fe8:	d9c14015 	stw	r7,1280(sp)
   11fec:	d9014b17 	ldw	r4,1324(sp)
   11ff0:	d9c14017 	ldw	r7,1280(sp)
   11ff4:	1100000d 	sth	r4,0(r2)
   11ff8:	0039f306 	br	107c8 <___vfprintf_internal_r+0x170>
   11ffc:	d9014f17 	ldw	r4,1340(sp)
   12000:	b00b883a 	mov	r5,r22
   12004:	d9800c04 	addi	r6,sp,48
   12008:	00106000 	call	10600 <__sprint_r>
   1200c:	103b4a1e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   12010:	dc800e17 	ldw	r18,56(sp)
   12014:	dc400d17 	ldw	r17,52(sp)
   12018:	d9000517 	ldw	r4,20(sp)
   1201c:	d8c01904 	addi	r3,sp,100
   12020:	003f2d06 	br	11cd8 <___vfprintf_internal_r+0x1680>
   12024:	00800184 	movi	r2,6
   12028:	14c09a36 	bltu	r2,r19,12294 <___vfprintf_internal_r+0x1c3c>
   1202c:	dcc14515 	stw	r19,1300(sp)
   12030:	9800010e 	bge	r19,zero,12038 <___vfprintf_internal_r+0x19e0>
   12034:	d8014515 	stw	zero,1300(sp)
   12038:	00800134 	movhi	r2,4
   1203c:	10a01f04 	addi	r2,r2,-32644
   12040:	980f883a 	mov	r7,r19
   12044:	d8814115 	stw	r2,1284(sp)
   12048:	003a7206 	br	10a14 <___vfprintf_internal_r+0x3bc>
   1204c:	00bfffc4 	movi	r2,-1
   12050:	9880e226 	beq	r19,r2,123dc <___vfprintf_internal_r+0x1d84>
   12054:	d9414d17 	ldw	r5,1332(sp)
   12058:	008019c4 	movi	r2,103
   1205c:	2880dc26 	beq	r5,r2,123d0 <___vfprintf_internal_r+0x1d78>
   12060:	008011c4 	movi	r2,71
   12064:	2880da26 	beq	r5,r2,123d0 <___vfprintf_internal_r+0x1d78>
   12068:	d9414c17 	ldw	r5,1328(sp)
   1206c:	d9014317 	ldw	r4,1292(sp)
   12070:	d9814217 	ldw	r6,1288(sp)
   12074:	29404014 	ori	r5,r5,256
   12078:	d9414c15 	stw	r5,1328(sp)
   1207c:	2000cc16 	blt	r4,zero,123b0 <___vfprintf_internal_r+0x1d58>
   12080:	3021883a 	mov	r16,r6
   12084:	2023883a 	mov	r17,r4
   12088:	0039883a 	mov	fp,zero
   1208c:	d9414d17 	ldw	r5,1332(sp)
   12090:	00801984 	movi	r2,102
   12094:	2880b726 	beq	r5,r2,12374 <___vfprintf_internal_r+0x1d1c>
   12098:	00801184 	movi	r2,70
   1209c:	2880b526 	beq	r5,r2,12374 <___vfprintf_internal_r+0x1d1c>
   120a0:	00801944 	movi	r2,101
   120a4:	2880c826 	beq	r5,r2,123c8 <___vfprintf_internal_r+0x1d70>
   120a8:	00801144 	movi	r2,69
   120ac:	2880c626 	beq	r5,r2,123c8 <___vfprintf_internal_r+0x1d70>
   120b0:	9829883a 	mov	r20,r19
   120b4:	d9014f17 	ldw	r4,1340(sp)
   120b8:	d8800504 	addi	r2,sp,20
   120bc:	880d883a 	mov	r6,r17
   120c0:	d8800115 	stw	r2,4(sp)
   120c4:	d8c00604 	addi	r3,sp,24
   120c8:	d8800704 	addi	r2,sp,28
   120cc:	800b883a 	mov	r5,r16
   120d0:	01c00084 	movi	r7,2
   120d4:	d8c00215 	stw	r3,8(sp)
   120d8:	d8800315 	stw	r2,12(sp)
   120dc:	dd000015 	stw	r20,0(sp)
   120e0:	00128c00 	call	128c0 <_dtoa_r>
   120e4:	d9814d17 	ldw	r6,1332(sp)
   120e8:	d8814115 	stw	r2,1284(sp)
   120ec:	008019c4 	movi	r2,103
   120f0:	30809526 	beq	r6,r2,12348 <___vfprintf_internal_r+0x1cf0>
   120f4:	d8c14d17 	ldw	r3,1332(sp)
   120f8:	008011c4 	movi	r2,71
   120fc:	18809226 	beq	r3,r2,12348 <___vfprintf_internal_r+0x1cf0>
   12100:	d9414117 	ldw	r5,1284(sp)
   12104:	d9814d17 	ldw	r6,1332(sp)
   12108:	00801984 	movi	r2,102
   1210c:	2d25883a 	add	r18,r5,r20
   12110:	30808626 	beq	r6,r2,1232c <___vfprintf_internal_r+0x1cd4>
   12114:	00801184 	movi	r2,70
   12118:	30808426 	beq	r6,r2,1232c <___vfprintf_internal_r+0x1cd4>
   1211c:	000d883a 	mov	r6,zero
   12120:	000f883a 	mov	r7,zero
   12124:	880b883a 	mov	r5,r17
   12128:	8009883a 	mov	r4,r16
   1212c:	00190840 	call	19084 <__eqdf2>
   12130:	1000751e 	bne	r2,zero,12308 <___vfprintf_internal_r+0x1cb0>
   12134:	9005883a 	mov	r2,r18
   12138:	dc800715 	stw	r18,28(sp)
   1213c:	d9014117 	ldw	r4,1284(sp)
   12140:	d9414d17 	ldw	r5,1332(sp)
   12144:	00c019c4 	movi	r3,103
   12148:	1125c83a 	sub	r18,r2,r4
   1214c:	28c06826 	beq	r5,r3,122f0 <___vfprintf_internal_r+0x1c98>
   12150:	008011c4 	movi	r2,71
   12154:	28806626 	beq	r5,r2,122f0 <___vfprintf_internal_r+0x1c98>
   12158:	d9000517 	ldw	r4,20(sp)
   1215c:	d8c14d17 	ldw	r3,1332(sp)
   12160:	00801944 	movi	r2,101
   12164:	10c05516 	blt	r2,r3,122bc <___vfprintf_internal_r+0x1c64>
   12168:	213fffc4 	addi	r4,r4,-1
   1216c:	d9000515 	stw	r4,20(sp)
   12170:	d8c00805 	stb	r3,32(sp)
   12174:	2021883a 	mov	r16,r4
   12178:	2000c116 	blt	r4,zero,12480 <___vfprintf_internal_r+0x1e28>
   1217c:	00800ac4 	movi	r2,43
   12180:	d8800845 	stb	r2,33(sp)
   12184:	00800244 	movi	r2,9
   12188:	1400af0e 	bge	r2,r16,12448 <___vfprintf_internal_r+0x1df0>
   1218c:	1027883a 	mov	r19,r2
   12190:	dc400b84 	addi	r17,sp,46
   12194:	8009883a 	mov	r4,r16
   12198:	01400284 	movi	r5,10
   1219c:	001976c0 	call	1976c <__modsi3>
   121a0:	10800c04 	addi	r2,r2,48
   121a4:	8c7fffc4 	addi	r17,r17,-1
   121a8:	8009883a 	mov	r4,r16
   121ac:	01400284 	movi	r5,10
   121b0:	88800005 	stb	r2,0(r17)
   121b4:	001970c0 	call	1970c <__divsi3>
   121b8:	1021883a 	mov	r16,r2
   121bc:	98bff516 	blt	r19,r2,12194 <___vfprintf_internal_r+0x1b3c>
   121c0:	10c00c04 	addi	r3,r2,48
   121c4:	d88009c4 	addi	r2,sp,39
   121c8:	108001c4 	addi	r2,r2,7
   121cc:	897fffc4 	addi	r5,r17,-1
   121d0:	88ffffc5 	stb	r3,-1(r17)
   121d4:	2880a72e 	bgeu	r5,r2,12474 <___vfprintf_internal_r+0x1e1c>
   121d8:	1009883a 	mov	r4,r2
   121dc:	d9800804 	addi	r6,sp,32
   121e0:	d8c00884 	addi	r3,sp,34
   121e4:	28800003 	ldbu	r2,0(r5)
   121e8:	29400044 	addi	r5,r5,1
   121ec:	18800005 	stb	r2,0(r3)
   121f0:	18c00044 	addi	r3,r3,1
   121f4:	293ffb36 	bltu	r5,r4,121e4 <___vfprintf_internal_r+0x1b8c>
   121f8:	1987c83a 	sub	r3,r3,r6
   121fc:	00800044 	movi	r2,1
   12200:	d8c14815 	stw	r3,1312(sp)
   12204:	90cf883a 	add	r7,r18,r3
   12208:	1480960e 	bge	r2,r18,12464 <___vfprintf_internal_r+0x1e0c>
   1220c:	39c00044 	addi	r7,r7,1
   12210:	d9c14515 	stw	r7,1300(sp)
   12214:	38003416 	blt	r7,zero,122e8 <___vfprintf_internal_r+0x1c90>
   12218:	e0803fcc 	andi	r2,fp,255
   1221c:	1080201c 	xori	r2,r2,128
   12220:	10bfe004 	addi	r2,r2,-128
   12224:	10004e26 	beq	r2,zero,12360 <___vfprintf_internal_r+0x1d08>
   12228:	00800b44 	movi	r2,45
   1222c:	dc814715 	stw	r18,1308(sp)
   12230:	d8014615 	stw	zero,1304(sp)
   12234:	d8800405 	stb	r2,16(sp)
   12238:	003bab06 	br	110e8 <___vfprintf_internal_r+0xa90>
   1223c:	00800b44 	movi	r2,45
   12240:	d8800405 	stb	r2,16(sp)
   12244:	003d2d06 	br	116fc <___vfprintf_internal_r+0x10a4>
   12248:	d9014f17 	ldw	r4,1340(sp)
   1224c:	b00b883a 	mov	r5,r22
   12250:	d9800c04 	addi	r6,sp,48
   12254:	00106000 	call	10600 <__sprint_r>
   12258:	103ab71e 	bne	r2,zero,10d38 <___vfprintf_internal_r+0x6e0>
   1225c:	003ab506 	br	10d34 <___vfprintf_internal_r+0x6dc>
   12260:	38800017 	ldw	r2,0(r7)
   12264:	39c00104 	addi	r7,r7,4
   12268:	d9c14015 	stw	r7,1280(sp)
   1226c:	d9414b17 	ldw	r5,1324(sp)
   12270:	d9c14017 	ldw	r7,1280(sp)
   12274:	11400015 	stw	r5,0(r2)
   12278:	00395306 	br	107c8 <___vfprintf_internal_r+0x170>
   1227c:	980f883a 	mov	r7,r19
   12280:	dcc14515 	stw	r19,1300(sp)
   12284:	d8014615 	stw	zero,1304(sp)
   12288:	003b9506 	br	110e0 <___vfprintf_internal_r+0xa88>
   1228c:	0027883a 	mov	r19,zero
   12290:	00397206 	br	1085c <___vfprintf_internal_r+0x204>
   12294:	00c00134 	movhi	r3,4
   12298:	18e01f04 	addi	r3,r3,-32644
   1229c:	100f883a 	mov	r7,r2
   122a0:	d8814515 	stw	r2,1300(sp)
   122a4:	d8c14115 	stw	r3,1284(sp)
   122a8:	0039da06 	br	10a14 <___vfprintf_internal_r+0x3bc>
   122ac:	00800134 	movhi	r2,4
   122b0:	10a01e04 	addi	r2,r2,-32648
   122b4:	d8814115 	stw	r2,1284(sp)
   122b8:	003d1606 	br	11714 <___vfprintf_internal_r+0x10bc>
   122bc:	d9414d17 	ldw	r5,1332(sp)
   122c0:	00801984 	movi	r2,102
   122c4:	28804926 	beq	r5,r2,123ec <___vfprintf_internal_r+0x1d94>
   122c8:	200f883a 	mov	r7,r4
   122cc:	24805716 	blt	r4,r18,1242c <___vfprintf_internal_r+0x1dd4>
   122d0:	d9414c17 	ldw	r5,1328(sp)
   122d4:	2880004c 	andi	r2,r5,1
   122d8:	10000126 	beq	r2,zero,122e0 <___vfprintf_internal_r+0x1c88>
   122dc:	21c00044 	addi	r7,r4,1
   122e0:	d9c14515 	stw	r7,1300(sp)
   122e4:	383fcc0e 	bge	r7,zero,12218 <___vfprintf_internal_r+0x1bc0>
   122e8:	d8014515 	stw	zero,1300(sp)
   122ec:	003fca06 	br	12218 <___vfprintf_internal_r+0x1bc0>
   122f0:	d9000517 	ldw	r4,20(sp)
   122f4:	00bfff04 	movi	r2,-4
   122f8:	1100480e 	bge	r2,r4,1241c <___vfprintf_internal_r+0x1dc4>
   122fc:	99004716 	blt	r19,r4,1241c <___vfprintf_internal_r+0x1dc4>
   12300:	d8c14d15 	stw	r3,1332(sp)
   12304:	003ff006 	br	122c8 <___vfprintf_internal_r+0x1c70>
   12308:	d8800717 	ldw	r2,28(sp)
   1230c:	14bf8b2e 	bgeu	r2,r18,1213c <___vfprintf_internal_r+0x1ae4>
   12310:	9007883a 	mov	r3,r18
   12314:	01000c04 	movi	r4,48
   12318:	11000005 	stb	r4,0(r2)
   1231c:	10800044 	addi	r2,r2,1
   12320:	d8800715 	stw	r2,28(sp)
   12324:	18bffc1e 	bne	r3,r2,12318 <___vfprintf_internal_r+0x1cc0>
   12328:	003f8406 	br	1213c <___vfprintf_internal_r+0x1ae4>
   1232c:	d8814117 	ldw	r2,1284(sp)
   12330:	10c00007 	ldb	r3,0(r2)
   12334:	00800c04 	movi	r2,48
   12338:	18805b26 	beq	r3,r2,124a8 <___vfprintf_internal_r+0x1e50>
   1233c:	d9000517 	ldw	r4,20(sp)
   12340:	9125883a 	add	r18,r18,r4
   12344:	003f7506 	br	1211c <___vfprintf_internal_r+0x1ac4>
   12348:	d9014c17 	ldw	r4,1328(sp)
   1234c:	2080004c 	andi	r2,r4,1
   12350:	1005003a 	cmpeq	r2,r2,zero
   12354:	103f6a26 	beq	r2,zero,12100 <___vfprintf_internal_r+0x1aa8>
   12358:	d8800717 	ldw	r2,28(sp)
   1235c:	003f7706 	br	1213c <___vfprintf_internal_r+0x1ae4>
   12360:	d9c14515 	stw	r7,1300(sp)
   12364:	38004d16 	blt	r7,zero,1249c <___vfprintf_internal_r+0x1e44>
   12368:	dc814715 	stw	r18,1308(sp)
   1236c:	d8014615 	stw	zero,1304(sp)
   12370:	003b5b06 	br	110e0 <___vfprintf_internal_r+0xa88>
   12374:	d9014f17 	ldw	r4,1340(sp)
   12378:	d8800504 	addi	r2,sp,20
   1237c:	d8800115 	stw	r2,4(sp)
   12380:	d8c00604 	addi	r3,sp,24
   12384:	d8800704 	addi	r2,sp,28
   12388:	800b883a 	mov	r5,r16
   1238c:	880d883a 	mov	r6,r17
   12390:	01c000c4 	movi	r7,3
   12394:	d8c00215 	stw	r3,8(sp)
   12398:	d8800315 	stw	r2,12(sp)
   1239c:	dcc00015 	stw	r19,0(sp)
   123a0:	9829883a 	mov	r20,r19
   123a4:	00128c00 	call	128c0 <_dtoa_r>
   123a8:	d8814115 	stw	r2,1284(sp)
   123ac:	003f5106 	br	120f4 <___vfprintf_internal_r+0x1a9c>
   123b0:	d8c14217 	ldw	r3,1288(sp)
   123b4:	d9014317 	ldw	r4,1292(sp)
   123b8:	07000b44 	movi	fp,45
   123bc:	1821883a 	mov	r16,r3
   123c0:	2460003c 	xorhi	r17,r4,32768
   123c4:	003f3106 	br	1208c <___vfprintf_internal_r+0x1a34>
   123c8:	9d000044 	addi	r20,r19,1
   123cc:	003f3906 	br	120b4 <___vfprintf_internal_r+0x1a5c>
   123d0:	983f251e 	bne	r19,zero,12068 <___vfprintf_internal_r+0x1a10>
   123d4:	04c00044 	movi	r19,1
   123d8:	003f2306 	br	12068 <___vfprintf_internal_r+0x1a10>
   123dc:	04c00184 	movi	r19,6
   123e0:	003f2106 	br	12068 <___vfprintf_internal_r+0x1a10>
   123e4:	d8014515 	stw	zero,1300(sp)
   123e8:	003eee06 	br	11fa4 <___vfprintf_internal_r+0x194c>
   123ec:	200f883a 	mov	r7,r4
   123f0:	0100370e 	bge	zero,r4,124d0 <___vfprintf_internal_r+0x1e78>
   123f4:	9800031e 	bne	r19,zero,12404 <___vfprintf_internal_r+0x1dac>
   123f8:	d9814c17 	ldw	r6,1328(sp)
   123fc:	3080004c 	andi	r2,r6,1
   12400:	103fb726 	beq	r2,zero,122e0 <___vfprintf_internal_r+0x1c88>
   12404:	20800044 	addi	r2,r4,1
   12408:	98a7883a 	add	r19,r19,r2
   1240c:	dcc14515 	stw	r19,1300(sp)
   12410:	980f883a 	mov	r7,r19
   12414:	983f800e 	bge	r19,zero,12218 <___vfprintf_internal_r+0x1bc0>
   12418:	003fb306 	br	122e8 <___vfprintf_internal_r+0x1c90>
   1241c:	d9814d17 	ldw	r6,1332(sp)
   12420:	31bfff84 	addi	r6,r6,-2
   12424:	d9814d15 	stw	r6,1332(sp)
   12428:	003f4c06 	br	1215c <___vfprintf_internal_r+0x1b04>
   1242c:	0100180e 	bge	zero,r4,12490 <___vfprintf_internal_r+0x1e38>
   12430:	00800044 	movi	r2,1
   12434:	1485883a 	add	r2,r2,r18
   12438:	d8814515 	stw	r2,1300(sp)
   1243c:	100f883a 	mov	r7,r2
   12440:	103f750e 	bge	r2,zero,12218 <___vfprintf_internal_r+0x1bc0>
   12444:	003fa806 	br	122e8 <___vfprintf_internal_r+0x1c90>
   12448:	80c00c04 	addi	r3,r16,48
   1244c:	00800c04 	movi	r2,48
   12450:	d8c008c5 	stb	r3,35(sp)
   12454:	d9800804 	addi	r6,sp,32
   12458:	d8c00904 	addi	r3,sp,36
   1245c:	d8800885 	stb	r2,34(sp)
   12460:	003f6506 	br	121f8 <___vfprintf_internal_r+0x1ba0>
   12464:	d9014c17 	ldw	r4,1328(sp)
   12468:	2084703a 	and	r2,r4,r2
   1246c:	103f9c26 	beq	r2,zero,122e0 <___vfprintf_internal_r+0x1c88>
   12470:	003f6606 	br	1220c <___vfprintf_internal_r+0x1bb4>
   12474:	d9800804 	addi	r6,sp,32
   12478:	d8c00884 	addi	r3,sp,34
   1247c:	003f5e06 	br	121f8 <___vfprintf_internal_r+0x1ba0>
   12480:	00800b44 	movi	r2,45
   12484:	0121c83a 	sub	r16,zero,r4
   12488:	d8800845 	stb	r2,33(sp)
   1248c:	003f3d06 	br	12184 <___vfprintf_internal_r+0x1b2c>
   12490:	00800084 	movi	r2,2
   12494:	1105c83a 	sub	r2,r2,r4
   12498:	003fe606 	br	12434 <___vfprintf_internal_r+0x1ddc>
   1249c:	d8014515 	stw	zero,1300(sp)
   124a0:	dc814715 	stw	r18,1308(sp)
   124a4:	003fb106 	br	1236c <___vfprintf_internal_r+0x1d14>
   124a8:	000d883a 	mov	r6,zero
   124ac:	000f883a 	mov	r7,zero
   124b0:	8009883a 	mov	r4,r16
   124b4:	880b883a 	mov	r5,r17
   124b8:	001910c0 	call	1910c <__nedf2>
   124bc:	103f9f26 	beq	r2,zero,1233c <___vfprintf_internal_r+0x1ce4>
   124c0:	00800044 	movi	r2,1
   124c4:	1509c83a 	sub	r4,r2,r20
   124c8:	d9000515 	stw	r4,20(sp)
   124cc:	003f9b06 	br	1233c <___vfprintf_internal_r+0x1ce4>
   124d0:	98000d1e 	bne	r19,zero,12508 <___vfprintf_internal_r+0x1eb0>
   124d4:	d8c14c17 	ldw	r3,1328(sp)
   124d8:	1880004c 	andi	r2,r3,1
   124dc:	10000a1e 	bne	r2,zero,12508 <___vfprintf_internal_r+0x1eb0>
   124e0:	01000044 	movi	r4,1
   124e4:	200f883a 	mov	r7,r4
   124e8:	d9014515 	stw	r4,1300(sp)
   124ec:	003f4a06 	br	12218 <___vfprintf_internal_r+0x1bc0>
   124f0:	3cc00017 	ldw	r19,0(r7)
   124f4:	39c00104 	addi	r7,r7,4
   124f8:	983d0e0e 	bge	r19,zero,11934 <___vfprintf_internal_r+0x12dc>
   124fc:	b8c00007 	ldb	r3,0(r23)
   12500:	04ffffc4 	movi	r19,-1
   12504:	0038d306 	br	10854 <___vfprintf_internal_r+0x1fc>
   12508:	9cc00084 	addi	r19,r19,2
   1250c:	dcc14515 	stw	r19,1300(sp)
   12510:	980f883a 	mov	r7,r19
   12514:	983f400e 	bge	r19,zero,12218 <___vfprintf_internal_r+0x1bc0>
   12518:	003f7306 	br	122e8 <___vfprintf_internal_r+0x1c90>

0001251c <__vfprintf_internal>:
   1251c:	00800134 	movhi	r2,4
   12520:	10a76b04 	addi	r2,r2,-25172
   12524:	2013883a 	mov	r9,r4
   12528:	11000017 	ldw	r4,0(r2)
   1252c:	2805883a 	mov	r2,r5
   12530:	300f883a 	mov	r7,r6
   12534:	480b883a 	mov	r5,r9
   12538:	100d883a 	mov	r6,r2
   1253c:	00106581 	jmpi	10658 <___vfprintf_internal_r>

00012540 <__swsetup_r>:
   12540:	00800134 	movhi	r2,4
   12544:	10a76b04 	addi	r2,r2,-25172
   12548:	10c00017 	ldw	r3,0(r2)
   1254c:	defffd04 	addi	sp,sp,-12
   12550:	dc400115 	stw	r17,4(sp)
   12554:	dc000015 	stw	r16,0(sp)
   12558:	dfc00215 	stw	ra,8(sp)
   1255c:	2023883a 	mov	r17,r4
   12560:	2821883a 	mov	r16,r5
   12564:	18000226 	beq	r3,zero,12570 <__swsetup_r+0x30>
   12568:	18800e17 	ldw	r2,56(r3)
   1256c:	10001f26 	beq	r2,zero,125ec <__swsetup_r+0xac>
   12570:	8100030b 	ldhu	r4,12(r16)
   12574:	2080020c 	andi	r2,r4,8
   12578:	10002826 	beq	r2,zero,1261c <__swsetup_r+0xdc>
   1257c:	81400417 	ldw	r5,16(r16)
   12580:	28001d26 	beq	r5,zero,125f8 <__swsetup_r+0xb8>
   12584:	2080004c 	andi	r2,r4,1
   12588:	1005003a 	cmpeq	r2,r2,zero
   1258c:	10000b26 	beq	r2,zero,125bc <__swsetup_r+0x7c>
   12590:	2080008c 	andi	r2,r4,2
   12594:	10001226 	beq	r2,zero,125e0 <__swsetup_r+0xa0>
   12598:	0005883a 	mov	r2,zero
   1259c:	80800215 	stw	r2,8(r16)
   125a0:	28000b26 	beq	r5,zero,125d0 <__swsetup_r+0x90>
   125a4:	0005883a 	mov	r2,zero
   125a8:	dfc00217 	ldw	ra,8(sp)
   125ac:	dc400117 	ldw	r17,4(sp)
   125b0:	dc000017 	ldw	r16,0(sp)
   125b4:	dec00304 	addi	sp,sp,12
   125b8:	f800283a 	ret
   125bc:	80800517 	ldw	r2,20(r16)
   125c0:	80000215 	stw	zero,8(r16)
   125c4:	0085c83a 	sub	r2,zero,r2
   125c8:	80800615 	stw	r2,24(r16)
   125cc:	283ff51e 	bne	r5,zero,125a4 <__swsetup_r+0x64>
   125d0:	2080200c 	andi	r2,r4,128
   125d4:	103ff326 	beq	r2,zero,125a4 <__swsetup_r+0x64>
   125d8:	00bfffc4 	movi	r2,-1
   125dc:	003ff206 	br	125a8 <__swsetup_r+0x68>
   125e0:	80800517 	ldw	r2,20(r16)
   125e4:	80800215 	stw	r2,8(r16)
   125e8:	003fed06 	br	125a0 <__swsetup_r+0x60>
   125ec:	1809883a 	mov	r4,r3
   125f0:	001410c0 	call	1410c <__sinit>
   125f4:	003fde06 	br	12570 <__swsetup_r+0x30>
   125f8:	20c0a00c 	andi	r3,r4,640
   125fc:	00808004 	movi	r2,512
   12600:	18bfe026 	beq	r3,r2,12584 <__swsetup_r+0x44>
   12604:	8809883a 	mov	r4,r17
   12608:	800b883a 	mov	r5,r16
   1260c:	0014eb80 	call	14eb8 <__smakebuf_r>
   12610:	8100030b 	ldhu	r4,12(r16)
   12614:	81400417 	ldw	r5,16(r16)
   12618:	003fda06 	br	12584 <__swsetup_r+0x44>
   1261c:	2080040c 	andi	r2,r4,16
   12620:	103fed26 	beq	r2,zero,125d8 <__swsetup_r+0x98>
   12624:	2080010c 	andi	r2,r4,4
   12628:	10001226 	beq	r2,zero,12674 <__swsetup_r+0x134>
   1262c:	81400c17 	ldw	r5,48(r16)
   12630:	28000526 	beq	r5,zero,12648 <__swsetup_r+0x108>
   12634:	80801004 	addi	r2,r16,64
   12638:	28800226 	beq	r5,r2,12644 <__swsetup_r+0x104>
   1263c:	8809883a 	mov	r4,r17
   12640:	00144c40 	call	144c4 <_free_r>
   12644:	80000c15 	stw	zero,48(r16)
   12648:	8080030b 	ldhu	r2,12(r16)
   1264c:	81400417 	ldw	r5,16(r16)
   12650:	80000115 	stw	zero,4(r16)
   12654:	10bff6cc 	andi	r2,r2,65499
   12658:	8080030d 	sth	r2,12(r16)
   1265c:	81400015 	stw	r5,0(r16)
   12660:	8080030b 	ldhu	r2,12(r16)
   12664:	10800214 	ori	r2,r2,8
   12668:	113fffcc 	andi	r4,r2,65535
   1266c:	8080030d 	sth	r2,12(r16)
   12670:	003fc306 	br	12580 <__swsetup_r+0x40>
   12674:	81400417 	ldw	r5,16(r16)
   12678:	003ff906 	br	12660 <__swsetup_r+0x120>

0001267c <quorem>:
   1267c:	28c00417 	ldw	r3,16(r5)
   12680:	20800417 	ldw	r2,16(r4)
   12684:	defff104 	addi	sp,sp,-60
   12688:	dfc00e15 	stw	ra,56(sp)
   1268c:	df000d15 	stw	fp,52(sp)
   12690:	ddc00c15 	stw	r23,48(sp)
   12694:	dd800b15 	stw	r22,44(sp)
   12698:	dd400a15 	stw	r21,40(sp)
   1269c:	dd000915 	stw	r20,36(sp)
   126a0:	dcc00815 	stw	r19,32(sp)
   126a4:	dc800715 	stw	r18,28(sp)
   126a8:	dc400615 	stw	r17,24(sp)
   126ac:	dc000515 	stw	r16,20(sp)
   126b0:	d9000315 	stw	r4,12(sp)
   126b4:	d9400415 	stw	r5,16(sp)
   126b8:	10c07f16 	blt	r2,r3,128b8 <quorem+0x23c>
   126bc:	1d3fffc4 	addi	r20,r3,-1
   126c0:	d8c00417 	ldw	r3,16(sp)
   126c4:	d9000317 	ldw	r4,12(sp)
   126c8:	a505883a 	add	r2,r20,r20
   126cc:	1085883a 	add	r2,r2,r2
   126d0:	1cc00504 	addi	r19,r3,20
   126d4:	25c00504 	addi	r23,r4,20
   126d8:	98ad883a 	add	r22,r19,r2
   126dc:	15c7883a 	add	r3,r2,r23
   126e0:	b1400017 	ldw	r5,0(r22)
   126e4:	19000017 	ldw	r4,0(r3)
   126e8:	d8c00015 	stw	r3,0(sp)
   126ec:	29400044 	addi	r5,r5,1
   126f0:	d9000215 	stw	r4,8(sp)
   126f4:	00197cc0 	call	197cc <__udivsi3>
   126f8:	1039883a 	mov	fp,r2
   126fc:	10003d1e 	bne	r2,zero,127f4 <quorem+0x178>
   12700:	d9400417 	ldw	r5,16(sp)
   12704:	d9000317 	ldw	r4,12(sp)
   12708:	0015be40 	call	15be4 <__mcmp>
   1270c:	10002c16 	blt	r2,zero,127c0 <quorem+0x144>
   12710:	e7000044 	addi	fp,fp,1
   12714:	b80f883a 	mov	r7,r23
   12718:	0011883a 	mov	r8,zero
   1271c:	0009883a 	mov	r4,zero
   12720:	99400017 	ldw	r5,0(r19)
   12724:	38c00017 	ldw	r3,0(r7)
   12728:	9cc00104 	addi	r19,r19,4
   1272c:	28bfffcc 	andi	r2,r5,65535
   12730:	2085883a 	add	r2,r4,r2
   12734:	11bfffcc 	andi	r6,r2,65535
   12738:	193fffcc 	andi	r4,r3,65535
   1273c:	1004d43a 	srli	r2,r2,16
   12740:	280ad43a 	srli	r5,r5,16
   12744:	2189c83a 	sub	r4,r4,r6
   12748:	2209883a 	add	r4,r4,r8
   1274c:	1806d43a 	srli	r3,r3,16
   12750:	288b883a 	add	r5,r5,r2
   12754:	200dd43a 	srai	r6,r4,16
   12758:	28bfffcc 	andi	r2,r5,65535
   1275c:	1887c83a 	sub	r3,r3,r2
   12760:	1987883a 	add	r3,r3,r6
   12764:	3900000d 	sth	r4,0(r7)
   12768:	38c0008d 	sth	r3,2(r7)
   1276c:	2808d43a 	srli	r4,r5,16
   12770:	39c00104 	addi	r7,r7,4
   12774:	1811d43a 	srai	r8,r3,16
   12778:	b4ffe92e 	bgeu	r22,r19,12720 <quorem+0xa4>
   1277c:	a505883a 	add	r2,r20,r20
   12780:	1085883a 	add	r2,r2,r2
   12784:	b885883a 	add	r2,r23,r2
   12788:	10c00017 	ldw	r3,0(r2)
   1278c:	18000c1e 	bne	r3,zero,127c0 <quorem+0x144>
   12790:	113fff04 	addi	r4,r2,-4
   12794:	b900082e 	bgeu	r23,r4,127b8 <quorem+0x13c>
   12798:	10bfff17 	ldw	r2,-4(r2)
   1279c:	10000326 	beq	r2,zero,127ac <quorem+0x130>
   127a0:	00000506 	br	127b8 <quorem+0x13c>
   127a4:	20800017 	ldw	r2,0(r4)
   127a8:	1000031e 	bne	r2,zero,127b8 <quorem+0x13c>
   127ac:	213fff04 	addi	r4,r4,-4
   127b0:	a53fffc4 	addi	r20,r20,-1
   127b4:	b93ffb36 	bltu	r23,r4,127a4 <quorem+0x128>
   127b8:	d9000317 	ldw	r4,12(sp)
   127bc:	25000415 	stw	r20,16(r4)
   127c0:	e005883a 	mov	r2,fp
   127c4:	dfc00e17 	ldw	ra,56(sp)
   127c8:	df000d17 	ldw	fp,52(sp)
   127cc:	ddc00c17 	ldw	r23,48(sp)
   127d0:	dd800b17 	ldw	r22,44(sp)
   127d4:	dd400a17 	ldw	r21,40(sp)
   127d8:	dd000917 	ldw	r20,36(sp)
   127dc:	dcc00817 	ldw	r19,32(sp)
   127e0:	dc800717 	ldw	r18,28(sp)
   127e4:	dc400617 	ldw	r17,24(sp)
   127e8:	dc000517 	ldw	r16,20(sp)
   127ec:	dec00f04 	addi	sp,sp,60
   127f0:	f800283a 	ret
   127f4:	b823883a 	mov	r17,r23
   127f8:	9825883a 	mov	r18,r19
   127fc:	d8000115 	stw	zero,4(sp)
   12800:	002b883a 	mov	r21,zero
   12804:	94000017 	ldw	r16,0(r18)
   12808:	e009883a 	mov	r4,fp
   1280c:	94800104 	addi	r18,r18,4
   12810:	817fffcc 	andi	r5,r16,65535
   12814:	00197dc0 	call	197dc <__mulsi3>
   12818:	800ad43a 	srli	r5,r16,16
   1281c:	e009883a 	mov	r4,fp
   12820:	a8a1883a 	add	r16,r21,r2
   12824:	00197dc0 	call	197dc <__mulsi3>
   12828:	89000017 	ldw	r4,0(r17)
   1282c:	80ffffcc 	andi	r3,r16,65535
   12830:	8020d43a 	srli	r16,r16,16
   12834:	217fffcc 	andi	r5,r4,65535
   12838:	28cbc83a 	sub	r5,r5,r3
   1283c:	d8c00117 	ldw	r3,4(sp)
   12840:	2008d43a 	srli	r4,r4,16
   12844:	1405883a 	add	r2,r2,r16
   12848:	28cb883a 	add	r5,r5,r3
   1284c:	280dd43a 	srai	r6,r5,16
   12850:	10ffffcc 	andi	r3,r2,65535
   12854:	20c9c83a 	sub	r4,r4,r3
   12858:	2189883a 	add	r4,r4,r6
   1285c:	8900008d 	sth	r4,2(r17)
   12860:	2009d43a 	srai	r4,r4,16
   12864:	8940000d 	sth	r5,0(r17)
   12868:	102ad43a 	srli	r21,r2,16
   1286c:	8c400104 	addi	r17,r17,4
   12870:	d9000115 	stw	r4,4(sp)
   12874:	b4bfe32e 	bgeu	r22,r18,12804 <quorem+0x188>
   12878:	d9000217 	ldw	r4,8(sp)
   1287c:	203fa01e 	bne	r4,zero,12700 <quorem+0x84>
   12880:	d8800017 	ldw	r2,0(sp)
   12884:	10ffff04 	addi	r3,r2,-4
   12888:	b8c0082e 	bgeu	r23,r3,128ac <quorem+0x230>
   1288c:	10bfff17 	ldw	r2,-4(r2)
   12890:	10000326 	beq	r2,zero,128a0 <quorem+0x224>
   12894:	00000506 	br	128ac <quorem+0x230>
   12898:	18800017 	ldw	r2,0(r3)
   1289c:	1000031e 	bne	r2,zero,128ac <quorem+0x230>
   128a0:	18ffff04 	addi	r3,r3,-4
   128a4:	a53fffc4 	addi	r20,r20,-1
   128a8:	b8fffb36 	bltu	r23,r3,12898 <quorem+0x21c>
   128ac:	d8c00317 	ldw	r3,12(sp)
   128b0:	1d000415 	stw	r20,16(r3)
   128b4:	003f9206 	br	12700 <quorem+0x84>
   128b8:	0005883a 	mov	r2,zero
   128bc:	003fc106 	br	127c4 <quorem+0x148>

000128c0 <_dtoa_r>:
   128c0:	22001017 	ldw	r8,64(r4)
   128c4:	deffda04 	addi	sp,sp,-152
   128c8:	dd402115 	stw	r21,132(sp)
   128cc:	dd002015 	stw	r20,128(sp)
   128d0:	dc801e15 	stw	r18,120(sp)
   128d4:	dc401d15 	stw	r17,116(sp)
   128d8:	dfc02515 	stw	ra,148(sp)
   128dc:	df002415 	stw	fp,144(sp)
   128e0:	ddc02315 	stw	r23,140(sp)
   128e4:	dd802215 	stw	r22,136(sp)
   128e8:	dcc01f15 	stw	r19,124(sp)
   128ec:	dc001c15 	stw	r16,112(sp)
   128f0:	d9001615 	stw	r4,88(sp)
   128f4:	3023883a 	mov	r17,r6
   128f8:	2829883a 	mov	r20,r5
   128fc:	d9c01715 	stw	r7,92(sp)
   12900:	dc802817 	ldw	r18,160(sp)
   12904:	302b883a 	mov	r21,r6
   12908:	40000a26 	beq	r8,zero,12934 <_dtoa_r+0x74>
   1290c:	20801117 	ldw	r2,68(r4)
   12910:	400b883a 	mov	r5,r8
   12914:	40800115 	stw	r2,4(r8)
   12918:	20c01117 	ldw	r3,68(r4)
   1291c:	00800044 	movi	r2,1
   12920:	10c4983a 	sll	r2,r2,r3
   12924:	40800215 	stw	r2,8(r8)
   12928:	0015a880 	call	15a88 <_Bfree>
   1292c:	d8c01617 	ldw	r3,88(sp)
   12930:	18001015 	stw	zero,64(r3)
   12934:	8800a316 	blt	r17,zero,12bc4 <_dtoa_r+0x304>
   12938:	90000015 	stw	zero,0(r18)
   1293c:	a8dffc2c 	andhi	r3,r21,32752
   12940:	009ffc34 	movhi	r2,32752
   12944:	18809126 	beq	r3,r2,12b8c <_dtoa_r+0x2cc>
   12948:	000d883a 	mov	r6,zero
   1294c:	000f883a 	mov	r7,zero
   12950:	a009883a 	mov	r4,r20
   12954:	a80b883a 	mov	r5,r21
   12958:	dd001215 	stw	r20,72(sp)
   1295c:	dd401315 	stw	r21,76(sp)
   12960:	001910c0 	call	1910c <__nedf2>
   12964:	1000171e 	bne	r2,zero,129c4 <_dtoa_r+0x104>
   12968:	d9802717 	ldw	r6,156(sp)
   1296c:	00800044 	movi	r2,1
   12970:	30800015 	stw	r2,0(r6)
   12974:	d8802917 	ldw	r2,164(sp)
   12978:	10029b26 	beq	r2,zero,133e8 <_dtoa_r+0xb28>
   1297c:	d9002917 	ldw	r4,164(sp)
   12980:	00800134 	movhi	r2,4
   12984:	10a02d44 	addi	r2,r2,-32587
   12988:	10ffffc4 	addi	r3,r2,-1
   1298c:	20800015 	stw	r2,0(r4)
   12990:	1805883a 	mov	r2,r3
   12994:	dfc02517 	ldw	ra,148(sp)
   12998:	df002417 	ldw	fp,144(sp)
   1299c:	ddc02317 	ldw	r23,140(sp)
   129a0:	dd802217 	ldw	r22,136(sp)
   129a4:	dd402117 	ldw	r21,132(sp)
   129a8:	dd002017 	ldw	r20,128(sp)
   129ac:	dcc01f17 	ldw	r19,124(sp)
   129b0:	dc801e17 	ldw	r18,120(sp)
   129b4:	dc401d17 	ldw	r17,116(sp)
   129b8:	dc001c17 	ldw	r16,112(sp)
   129bc:	dec02604 	addi	sp,sp,152
   129c0:	f800283a 	ret
   129c4:	d9001617 	ldw	r4,88(sp)
   129c8:	d9401217 	ldw	r5,72(sp)
   129cc:	d8800104 	addi	r2,sp,4
   129d0:	a80d883a 	mov	r6,r21
   129d4:	d9c00204 	addi	r7,sp,8
   129d8:	d8800015 	stw	r2,0(sp)
   129dc:	00160c40 	call	160c4 <__d2b>
   129e0:	d8800715 	stw	r2,28(sp)
   129e4:	a804d53a 	srli	r2,r21,20
   129e8:	1101ffcc 	andi	r4,r2,2047
   129ec:	20008626 	beq	r4,zero,12c08 <_dtoa_r+0x348>
   129f0:	d8c01217 	ldw	r3,72(sp)
   129f4:	00800434 	movhi	r2,16
   129f8:	10bfffc4 	addi	r2,r2,-1
   129fc:	ddc00117 	ldw	r23,4(sp)
   12a00:	a884703a 	and	r2,r21,r2
   12a04:	1811883a 	mov	r8,r3
   12a08:	124ffc34 	orhi	r9,r2,16368
   12a0c:	25bf0044 	addi	r22,r4,-1023
   12a10:	d8000815 	stw	zero,32(sp)
   12a14:	0005883a 	mov	r2,zero
   12a18:	00cffe34 	movhi	r3,16376
   12a1c:	480b883a 	mov	r5,r9
   12a20:	4009883a 	mov	r4,r8
   12a24:	180f883a 	mov	r7,r3
   12a28:	100d883a 	mov	r6,r2
   12a2c:	00189740 	call	18974 <__subdf3>
   12a30:	0218dbf4 	movhi	r8,25455
   12a34:	4210d844 	addi	r8,r8,17249
   12a38:	024ff4f4 	movhi	r9,16339
   12a3c:	4a61e9c4 	addi	r9,r9,-30809
   12a40:	480f883a 	mov	r7,r9
   12a44:	400d883a 	mov	r6,r8
   12a48:	180b883a 	mov	r5,r3
   12a4c:	1009883a 	mov	r4,r2
   12a50:	0018a680 	call	18a68 <__muldf3>
   12a54:	0222d874 	movhi	r8,35681
   12a58:	42322cc4 	addi	r8,r8,-14157
   12a5c:	024ff1f4 	movhi	r9,16327
   12a60:	4a628a04 	addi	r9,r9,-30168
   12a64:	480f883a 	mov	r7,r9
   12a68:	400d883a 	mov	r6,r8
   12a6c:	180b883a 	mov	r5,r3
   12a70:	1009883a 	mov	r4,r2
   12a74:	00189f40 	call	189f4 <__adddf3>
   12a78:	b009883a 	mov	r4,r22
   12a7c:	1021883a 	mov	r16,r2
   12a80:	1823883a 	mov	r17,r3
   12a84:	001932c0 	call	1932c <__floatsidf>
   12a88:	021427f4 	movhi	r8,20639
   12a8c:	421e7ec4 	addi	r8,r8,31227
   12a90:	024ff4f4 	movhi	r9,16339
   12a94:	4a5104c4 	addi	r9,r9,17427
   12a98:	480f883a 	mov	r7,r9
   12a9c:	400d883a 	mov	r6,r8
   12aa0:	180b883a 	mov	r5,r3
   12aa4:	1009883a 	mov	r4,r2
   12aa8:	0018a680 	call	18a68 <__muldf3>
   12aac:	180f883a 	mov	r7,r3
   12ab0:	880b883a 	mov	r5,r17
   12ab4:	100d883a 	mov	r6,r2
   12ab8:	8009883a 	mov	r4,r16
   12abc:	00189f40 	call	189f4 <__adddf3>
   12ac0:	1009883a 	mov	r4,r2
   12ac4:	180b883a 	mov	r5,r3
   12ac8:	1021883a 	mov	r16,r2
   12acc:	1823883a 	mov	r17,r3
   12ad0:	00194240 	call	19424 <__fixdfsi>
   12ad4:	000d883a 	mov	r6,zero
   12ad8:	000f883a 	mov	r7,zero
   12adc:	8009883a 	mov	r4,r16
   12ae0:	880b883a 	mov	r5,r17
   12ae4:	d8800d15 	stw	r2,52(sp)
   12ae8:	00192a40 	call	192a4 <__ltdf2>
   12aec:	10031716 	blt	r2,zero,1374c <_dtoa_r+0xe8c>
   12af0:	d8c00d17 	ldw	r3,52(sp)
   12af4:	00800584 	movi	r2,22
   12af8:	10c1482e 	bgeu	r2,r3,1301c <_dtoa_r+0x75c>
   12afc:	01000044 	movi	r4,1
   12b00:	d9000c15 	stw	r4,48(sp)
   12b04:	bd85c83a 	sub	r2,r23,r22
   12b08:	11bfffc4 	addi	r6,r2,-1
   12b0c:	30030b16 	blt	r6,zero,1373c <_dtoa_r+0xe7c>
   12b10:	d9800a15 	stw	r6,40(sp)
   12b14:	d8001115 	stw	zero,68(sp)
   12b18:	d8c00d17 	ldw	r3,52(sp)
   12b1c:	1802ff16 	blt	r3,zero,1371c <_dtoa_r+0xe5c>
   12b20:	d9000a17 	ldw	r4,40(sp)
   12b24:	d8c00915 	stw	r3,36(sp)
   12b28:	d8001015 	stw	zero,64(sp)
   12b2c:	20c9883a 	add	r4,r4,r3
   12b30:	d9000a15 	stw	r4,40(sp)
   12b34:	d9001717 	ldw	r4,92(sp)
   12b38:	00800244 	movi	r2,9
   12b3c:	11004636 	bltu	r2,r4,12c58 <_dtoa_r+0x398>
   12b40:	00800144 	movi	r2,5
   12b44:	11020416 	blt	r2,r4,13358 <_dtoa_r+0xa98>
   12b48:	04400044 	movi	r17,1
   12b4c:	d8c01717 	ldw	r3,92(sp)
   12b50:	00800144 	movi	r2,5
   12b54:	10c1ed36 	bltu	r2,r3,1330c <_dtoa_r+0xa4c>
   12b58:	18c5883a 	add	r2,r3,r3
   12b5c:	1085883a 	add	r2,r2,r2
   12b60:	00c00074 	movhi	r3,1
   12b64:	18cadd04 	addi	r3,r3,11124
   12b68:	10c5883a 	add	r2,r2,r3
   12b6c:	11000017 	ldw	r4,0(r2)
   12b70:	2000683a 	jmp	r4
   12b74:	00012c60 	cmpeqi	zero,zero,1201
   12b78:	00012c60 	cmpeqi	zero,zero,1201
   12b7c:	00013660 	cmpeqi	zero,zero,1241
   12b80:	00013638 	rdprs	zero,zero,1240
   12b84:	0001367c 	xorhi	zero,zero,1241
   12b88:	00013688 	cmpgei	zero,zero,1242
   12b8c:	d9002717 	ldw	r4,156(sp)
   12b90:	0089c3c4 	movi	r2,9999
   12b94:	20800015 	stw	r2,0(r4)
   12b98:	a0001026 	beq	r20,zero,12bdc <_dtoa_r+0x31c>
   12b9c:	00c00134 	movhi	r3,4
   12ba0:	18e03904 	addi	r3,r3,-32540
   12ba4:	d9802917 	ldw	r6,164(sp)
   12ba8:	303f7926 	beq	r6,zero,12990 <_dtoa_r+0xd0>
   12bac:	188000c7 	ldb	r2,3(r3)
   12bb0:	190000c4 	addi	r4,r3,3
   12bb4:	1000101e 	bne	r2,zero,12bf8 <_dtoa_r+0x338>
   12bb8:	d8802917 	ldw	r2,164(sp)
   12bbc:	11000015 	stw	r4,0(r2)
   12bc0:	003f7306 	br	12990 <_dtoa_r+0xd0>
   12bc4:	00a00034 	movhi	r2,32768
   12bc8:	10bfffc4 	addi	r2,r2,-1
   12bcc:	00c00044 	movi	r3,1
   12bd0:	88aa703a 	and	r21,r17,r2
   12bd4:	90c00015 	stw	r3,0(r18)
   12bd8:	003f5806 	br	1293c <_dtoa_r+0x7c>
   12bdc:	00800434 	movhi	r2,16
   12be0:	10bfffc4 	addi	r2,r2,-1
   12be4:	a884703a 	and	r2,r21,r2
   12be8:	103fec1e 	bne	r2,zero,12b9c <_dtoa_r+0x2dc>
   12bec:	00c00134 	movhi	r3,4
   12bf0:	18e03604 	addi	r3,r3,-32552
   12bf4:	003feb06 	br	12ba4 <_dtoa_r+0x2e4>
   12bf8:	d8802917 	ldw	r2,164(sp)
   12bfc:	19000204 	addi	r4,r3,8
   12c00:	11000015 	stw	r4,0(r2)
   12c04:	003f6206 	br	12990 <_dtoa_r+0xd0>
   12c08:	ddc00117 	ldw	r23,4(sp)
   12c0c:	d8800217 	ldw	r2,8(sp)
   12c10:	01000804 	movi	r4,32
   12c14:	b8c10c84 	addi	r3,r23,1074
   12c18:	18a3883a 	add	r17,r3,r2
   12c1c:	2441b80e 	bge	r4,r17,13300 <_dtoa_r+0xa40>
   12c20:	00c01004 	movi	r3,64
   12c24:	1c47c83a 	sub	r3,r3,r17
   12c28:	88bff804 	addi	r2,r17,-32
   12c2c:	a8c6983a 	sll	r3,r21,r3
   12c30:	a084d83a 	srl	r2,r20,r2
   12c34:	1888b03a 	or	r4,r3,r2
   12c38:	00194fc0 	call	194fc <__floatunsidf>
   12c3c:	1011883a 	mov	r8,r2
   12c40:	00bf8434 	movhi	r2,65040
   12c44:	01000044 	movi	r4,1
   12c48:	10d3883a 	add	r9,r2,r3
   12c4c:	8dbef344 	addi	r22,r17,-1075
   12c50:	d9000815 	stw	r4,32(sp)
   12c54:	003f6f06 	br	12a14 <_dtoa_r+0x154>
   12c58:	d8001715 	stw	zero,92(sp)
   12c5c:	04400044 	movi	r17,1
   12c60:	00bfffc4 	movi	r2,-1
   12c64:	00c00044 	movi	r3,1
   12c68:	d8800e15 	stw	r2,56(sp)
   12c6c:	d8002615 	stw	zero,152(sp)
   12c70:	d8800f15 	stw	r2,60(sp)
   12c74:	d8c00b15 	stw	r3,44(sp)
   12c78:	1021883a 	mov	r16,r2
   12c7c:	d8801617 	ldw	r2,88(sp)
   12c80:	10001115 	stw	zero,68(r2)
   12c84:	d8801617 	ldw	r2,88(sp)
   12c88:	11401117 	ldw	r5,68(r2)
   12c8c:	1009883a 	mov	r4,r2
   12c90:	00160080 	call	16008 <_Balloc>
   12c94:	d8c01617 	ldw	r3,88(sp)
   12c98:	d8800515 	stw	r2,20(sp)
   12c9c:	18801015 	stw	r2,64(r3)
   12ca0:	00800384 	movi	r2,14
   12ca4:	14006836 	bltu	r2,r16,12e48 <_dtoa_r+0x588>
   12ca8:	8805003a 	cmpeq	r2,r17,zero
   12cac:	1000661e 	bne	r2,zero,12e48 <_dtoa_r+0x588>
   12cb0:	d9000d17 	ldw	r4,52(sp)
   12cb4:	0102300e 	bge	zero,r4,13578 <_dtoa_r+0xcb8>
   12cb8:	208003cc 	andi	r2,r4,15
   12cbc:	100490fa 	slli	r2,r2,3
   12cc0:	2025d13a 	srai	r18,r4,4
   12cc4:	00c00134 	movhi	r3,4
   12cc8:	18e04b04 	addi	r3,r3,-32468
   12ccc:	10c5883a 	add	r2,r2,r3
   12cd0:	90c0040c 	andi	r3,r18,16
   12cd4:	14000017 	ldw	r16,0(r2)
   12cd8:	14400117 	ldw	r17,4(r2)
   12cdc:	18036a1e 	bne	r3,zero,13a88 <_dtoa_r+0x11c8>
   12ce0:	05800084 	movi	r22,2
   12ce4:	90001026 	beq	r18,zero,12d28 <_dtoa_r+0x468>
   12ce8:	04c00134 	movhi	r19,4
   12cec:	9ce07d04 	addi	r19,r19,-32268
   12cf0:	9080004c 	andi	r2,r18,1
   12cf4:	1005003a 	cmpeq	r2,r2,zero
   12cf8:	1000081e 	bne	r2,zero,12d1c <_dtoa_r+0x45c>
   12cfc:	99800017 	ldw	r6,0(r19)
   12d00:	99c00117 	ldw	r7,4(r19)
   12d04:	880b883a 	mov	r5,r17
   12d08:	8009883a 	mov	r4,r16
   12d0c:	0018a680 	call	18a68 <__muldf3>
   12d10:	1021883a 	mov	r16,r2
   12d14:	b5800044 	addi	r22,r22,1
   12d18:	1823883a 	mov	r17,r3
   12d1c:	9025d07a 	srai	r18,r18,1
   12d20:	9cc00204 	addi	r19,r19,8
   12d24:	903ff21e 	bne	r18,zero,12cf0 <_dtoa_r+0x430>
   12d28:	a80b883a 	mov	r5,r21
   12d2c:	a009883a 	mov	r4,r20
   12d30:	880f883a 	mov	r7,r17
   12d34:	800d883a 	mov	r6,r16
   12d38:	0018e2c0 	call	18e2c <__divdf3>
   12d3c:	1029883a 	mov	r20,r2
   12d40:	182b883a 	mov	r21,r3
   12d44:	d8c00c17 	ldw	r3,48(sp)
   12d48:	1805003a 	cmpeq	r2,r3,zero
   12d4c:	1000081e 	bne	r2,zero,12d70 <_dtoa_r+0x4b0>
   12d50:	0005883a 	mov	r2,zero
   12d54:	00cffc34 	movhi	r3,16368
   12d58:	180f883a 	mov	r7,r3
   12d5c:	a009883a 	mov	r4,r20
   12d60:	a80b883a 	mov	r5,r21
   12d64:	100d883a 	mov	r6,r2
   12d68:	00192a40 	call	192a4 <__ltdf2>
   12d6c:	1003fe16 	blt	r2,zero,13d68 <_dtoa_r+0x14a8>
   12d70:	b009883a 	mov	r4,r22
   12d74:	001932c0 	call	1932c <__floatsidf>
   12d78:	180b883a 	mov	r5,r3
   12d7c:	1009883a 	mov	r4,r2
   12d80:	a00d883a 	mov	r6,r20
   12d84:	a80f883a 	mov	r7,r21
   12d88:	0018a680 	call	18a68 <__muldf3>
   12d8c:	0011883a 	mov	r8,zero
   12d90:	02500734 	movhi	r9,16412
   12d94:	1009883a 	mov	r4,r2
   12d98:	180b883a 	mov	r5,r3
   12d9c:	480f883a 	mov	r7,r9
   12da0:	400d883a 	mov	r6,r8
   12da4:	00189f40 	call	189f4 <__adddf3>
   12da8:	d9000f17 	ldw	r4,60(sp)
   12dac:	102d883a 	mov	r22,r2
   12db0:	00bf3034 	movhi	r2,64704
   12db4:	18b9883a 	add	fp,r3,r2
   12db8:	e02f883a 	mov	r23,fp
   12dbc:	20028f1e 	bne	r4,zero,137fc <_dtoa_r+0xf3c>
   12dc0:	0005883a 	mov	r2,zero
   12dc4:	00d00534 	movhi	r3,16404
   12dc8:	a009883a 	mov	r4,r20
   12dcc:	a80b883a 	mov	r5,r21
   12dd0:	180f883a 	mov	r7,r3
   12dd4:	100d883a 	mov	r6,r2
   12dd8:	00189740 	call	18974 <__subdf3>
   12ddc:	1009883a 	mov	r4,r2
   12de0:	e00f883a 	mov	r7,fp
   12de4:	180b883a 	mov	r5,r3
   12de8:	b00d883a 	mov	r6,r22
   12dec:	1025883a 	mov	r18,r2
   12df0:	1827883a 	mov	r19,r3
   12df4:	00191940 	call	19194 <__gtdf2>
   12df8:	00834f16 	blt	zero,r2,13b38 <_dtoa_r+0x1278>
   12dfc:	e0e0003c 	xorhi	r3,fp,32768
   12e00:	9009883a 	mov	r4,r18
   12e04:	980b883a 	mov	r5,r19
   12e08:	180f883a 	mov	r7,r3
   12e0c:	b00d883a 	mov	r6,r22
   12e10:	00192a40 	call	192a4 <__ltdf2>
   12e14:	1000080e 	bge	r2,zero,12e38 <_dtoa_r+0x578>
   12e18:	0027883a 	mov	r19,zero
   12e1c:	0025883a 	mov	r18,zero
   12e20:	d8802617 	ldw	r2,152(sp)
   12e24:	df000517 	ldw	fp,20(sp)
   12e28:	d8000615 	stw	zero,24(sp)
   12e2c:	0084303a 	nor	r2,zero,r2
   12e30:	d8800d15 	stw	r2,52(sp)
   12e34:	00019b06 	br	134a4 <_dtoa_r+0xbe4>
   12e38:	d9801217 	ldw	r6,72(sp)
   12e3c:	d8801317 	ldw	r2,76(sp)
   12e40:	3029883a 	mov	r20,r6
   12e44:	102b883a 	mov	r21,r2
   12e48:	d8c00217 	ldw	r3,8(sp)
   12e4c:	18008516 	blt	r3,zero,13064 <_dtoa_r+0x7a4>
   12e50:	d9000d17 	ldw	r4,52(sp)
   12e54:	00800384 	movi	r2,14
   12e58:	11008216 	blt	r2,r4,13064 <_dtoa_r+0x7a4>
   12e5c:	200490fa 	slli	r2,r4,3
   12e60:	d9802617 	ldw	r6,152(sp)
   12e64:	00c00134 	movhi	r3,4
   12e68:	18e04b04 	addi	r3,r3,-32468
   12e6c:	10c5883a 	add	r2,r2,r3
   12e70:	14800017 	ldw	r18,0(r2)
   12e74:	14c00117 	ldw	r19,4(r2)
   12e78:	30031e16 	blt	r6,zero,13af4 <_dtoa_r+0x1234>
   12e7c:	d9000517 	ldw	r4,20(sp)
   12e80:	d8c00f17 	ldw	r3,60(sp)
   12e84:	a823883a 	mov	r17,r21
   12e88:	a021883a 	mov	r16,r20
   12e8c:	192b883a 	add	r21,r3,r4
   12e90:	2039883a 	mov	fp,r4
   12e94:	00000f06 	br	12ed4 <_dtoa_r+0x614>
   12e98:	0005883a 	mov	r2,zero
   12e9c:	00d00934 	movhi	r3,16420
   12ea0:	5009883a 	mov	r4,r10
   12ea4:	580b883a 	mov	r5,r11
   12ea8:	180f883a 	mov	r7,r3
   12eac:	100d883a 	mov	r6,r2
   12eb0:	0018a680 	call	18a68 <__muldf3>
   12eb4:	180b883a 	mov	r5,r3
   12eb8:	000d883a 	mov	r6,zero
   12ebc:	000f883a 	mov	r7,zero
   12ec0:	1009883a 	mov	r4,r2
   12ec4:	1021883a 	mov	r16,r2
   12ec8:	1823883a 	mov	r17,r3
   12ecc:	001910c0 	call	1910c <__nedf2>
   12ed0:	10004526 	beq	r2,zero,12fe8 <_dtoa_r+0x728>
   12ed4:	900d883a 	mov	r6,r18
   12ed8:	980f883a 	mov	r7,r19
   12edc:	8009883a 	mov	r4,r16
   12ee0:	880b883a 	mov	r5,r17
   12ee4:	0018e2c0 	call	18e2c <__divdf3>
   12ee8:	180b883a 	mov	r5,r3
   12eec:	1009883a 	mov	r4,r2
   12ef0:	00194240 	call	19424 <__fixdfsi>
   12ef4:	1009883a 	mov	r4,r2
   12ef8:	1029883a 	mov	r20,r2
   12efc:	001932c0 	call	1932c <__floatsidf>
   12f00:	180f883a 	mov	r7,r3
   12f04:	9009883a 	mov	r4,r18
   12f08:	980b883a 	mov	r5,r19
   12f0c:	100d883a 	mov	r6,r2
   12f10:	0018a680 	call	18a68 <__muldf3>
   12f14:	180f883a 	mov	r7,r3
   12f18:	880b883a 	mov	r5,r17
   12f1c:	8009883a 	mov	r4,r16
   12f20:	100d883a 	mov	r6,r2
   12f24:	00189740 	call	18974 <__subdf3>
   12f28:	1015883a 	mov	r10,r2
   12f2c:	a0800c04 	addi	r2,r20,48
   12f30:	e0800005 	stb	r2,0(fp)
   12f34:	e7000044 	addi	fp,fp,1
   12f38:	1817883a 	mov	r11,r3
   12f3c:	e57fd61e 	bne	fp,r21,12e98 <_dtoa_r+0x5d8>
   12f40:	500d883a 	mov	r6,r10
   12f44:	180f883a 	mov	r7,r3
   12f48:	5009883a 	mov	r4,r10
   12f4c:	180b883a 	mov	r5,r3
   12f50:	00189f40 	call	189f4 <__adddf3>
   12f54:	100d883a 	mov	r6,r2
   12f58:	9009883a 	mov	r4,r18
   12f5c:	980b883a 	mov	r5,r19
   12f60:	180f883a 	mov	r7,r3
   12f64:	1021883a 	mov	r16,r2
   12f68:	1823883a 	mov	r17,r3
   12f6c:	00192a40 	call	192a4 <__ltdf2>
   12f70:	10000816 	blt	r2,zero,12f94 <_dtoa_r+0x6d4>
   12f74:	980b883a 	mov	r5,r19
   12f78:	800d883a 	mov	r6,r16
   12f7c:	880f883a 	mov	r7,r17
   12f80:	9009883a 	mov	r4,r18
   12f84:	00190840 	call	19084 <__eqdf2>
   12f88:	1000171e 	bne	r2,zero,12fe8 <_dtoa_r+0x728>
   12f8c:	a080004c 	andi	r2,r20,1
   12f90:	10001526 	beq	r2,zero,12fe8 <_dtoa_r+0x728>
   12f94:	d8800d17 	ldw	r2,52(sp)
   12f98:	d8800415 	stw	r2,16(sp)
   12f9c:	e009883a 	mov	r4,fp
   12fa0:	213fffc4 	addi	r4,r4,-1
   12fa4:	20c00007 	ldb	r3,0(r4)
   12fa8:	00800e44 	movi	r2,57
   12fac:	1880081e 	bne	r3,r2,12fd0 <_dtoa_r+0x710>
   12fb0:	d8800517 	ldw	r2,20(sp)
   12fb4:	113ffa1e 	bne	r2,r4,12fa0 <_dtoa_r+0x6e0>
   12fb8:	d8c00417 	ldw	r3,16(sp)
   12fbc:	d9800517 	ldw	r6,20(sp)
   12fc0:	00800c04 	movi	r2,48
   12fc4:	18c00044 	addi	r3,r3,1
   12fc8:	d8c00415 	stw	r3,16(sp)
   12fcc:	30800005 	stb	r2,0(r6)
   12fd0:	20800003 	ldbu	r2,0(r4)
   12fd4:	d8c00417 	ldw	r3,16(sp)
   12fd8:	27000044 	addi	fp,r4,1
   12fdc:	10800044 	addi	r2,r2,1
   12fe0:	d8c00d15 	stw	r3,52(sp)
   12fe4:	20800005 	stb	r2,0(r4)
   12fe8:	d9001617 	ldw	r4,88(sp)
   12fec:	d9400717 	ldw	r5,28(sp)
   12ff0:	0015a880 	call	15a88 <_Bfree>
   12ff4:	e0000005 	stb	zero,0(fp)
   12ff8:	d9800d17 	ldw	r6,52(sp)
   12ffc:	d8c02717 	ldw	r3,156(sp)
   13000:	d9002917 	ldw	r4,164(sp)
   13004:	30800044 	addi	r2,r6,1
   13008:	18800015 	stw	r2,0(r3)
   1300c:	20029c26 	beq	r4,zero,13a80 <_dtoa_r+0x11c0>
   13010:	d8c00517 	ldw	r3,20(sp)
   13014:	27000015 	stw	fp,0(r4)
   13018:	003e5d06 	br	12990 <_dtoa_r+0xd0>
   1301c:	d9800d17 	ldw	r6,52(sp)
   13020:	00c00134 	movhi	r3,4
   13024:	18e04b04 	addi	r3,r3,-32468
   13028:	d9001217 	ldw	r4,72(sp)
   1302c:	300490fa 	slli	r2,r6,3
   13030:	d9401317 	ldw	r5,76(sp)
   13034:	10c5883a 	add	r2,r2,r3
   13038:	12000017 	ldw	r8,0(r2)
   1303c:	12400117 	ldw	r9,4(r2)
   13040:	400d883a 	mov	r6,r8
   13044:	480f883a 	mov	r7,r9
   13048:	00192a40 	call	192a4 <__ltdf2>
   1304c:	1000030e 	bge	r2,zero,1305c <_dtoa_r+0x79c>
   13050:	d8800d17 	ldw	r2,52(sp)
   13054:	10bfffc4 	addi	r2,r2,-1
   13058:	d8800d15 	stw	r2,52(sp)
   1305c:	d8000c15 	stw	zero,48(sp)
   13060:	003ea806 	br	12b04 <_dtoa_r+0x244>
   13064:	d9000b17 	ldw	r4,44(sp)
   13068:	202cc03a 	cmpne	r22,r4,zero
   1306c:	b000c71e 	bne	r22,zero,1338c <_dtoa_r+0xacc>
   13070:	dc001117 	ldw	r16,68(sp)
   13074:	dc801017 	ldw	r18,64(sp)
   13078:	0027883a 	mov	r19,zero
   1307c:	04000b0e 	bge	zero,r16,130ac <_dtoa_r+0x7ec>
   13080:	d8c00a17 	ldw	r3,40(sp)
   13084:	00c0090e 	bge	zero,r3,130ac <_dtoa_r+0x7ec>
   13088:	8005883a 	mov	r2,r16
   1308c:	1c011316 	blt	r3,r16,134dc <_dtoa_r+0xc1c>
   13090:	d9000a17 	ldw	r4,40(sp)
   13094:	d9801117 	ldw	r6,68(sp)
   13098:	80a1c83a 	sub	r16,r16,r2
   1309c:	2089c83a 	sub	r4,r4,r2
   130a0:	308dc83a 	sub	r6,r6,r2
   130a4:	d9000a15 	stw	r4,40(sp)
   130a8:	d9801115 	stw	r6,68(sp)
   130ac:	d8801017 	ldw	r2,64(sp)
   130b0:	0080150e 	bge	zero,r2,13108 <_dtoa_r+0x848>
   130b4:	d8c00b17 	ldw	r3,44(sp)
   130b8:	1805003a 	cmpeq	r2,r3,zero
   130bc:	1001c91e 	bne	r2,zero,137e4 <_dtoa_r+0xf24>
   130c0:	04800e0e 	bge	zero,r18,130fc <_dtoa_r+0x83c>
   130c4:	d9001617 	ldw	r4,88(sp)
   130c8:	980b883a 	mov	r5,r19
   130cc:	900d883a 	mov	r6,r18
   130d0:	00168d40 	call	168d4 <__pow5mult>
   130d4:	d9001617 	ldw	r4,88(sp)
   130d8:	d9800717 	ldw	r6,28(sp)
   130dc:	100b883a 	mov	r5,r2
   130e0:	1027883a 	mov	r19,r2
   130e4:	00165180 	call	16518 <__multiply>
   130e8:	d9001617 	ldw	r4,88(sp)
   130ec:	d9400717 	ldw	r5,28(sp)
   130f0:	1023883a 	mov	r17,r2
   130f4:	0015a880 	call	15a88 <_Bfree>
   130f8:	dc400715 	stw	r17,28(sp)
   130fc:	d9001017 	ldw	r4,64(sp)
   13100:	248dc83a 	sub	r6,r4,r18
   13104:	30010e1e 	bne	r6,zero,13540 <_dtoa_r+0xc80>
   13108:	d9001617 	ldw	r4,88(sp)
   1310c:	04400044 	movi	r17,1
   13110:	880b883a 	mov	r5,r17
   13114:	001676c0 	call	1676c <__i2b>
   13118:	d9800917 	ldw	r6,36(sp)
   1311c:	1025883a 	mov	r18,r2
   13120:	0180040e 	bge	zero,r6,13134 <_dtoa_r+0x874>
   13124:	d9001617 	ldw	r4,88(sp)
   13128:	100b883a 	mov	r5,r2
   1312c:	00168d40 	call	168d4 <__pow5mult>
   13130:	1025883a 	mov	r18,r2
   13134:	d8801717 	ldw	r2,92(sp)
   13138:	8880f30e 	bge	r17,r2,13508 <_dtoa_r+0xc48>
   1313c:	0023883a 	mov	r17,zero
   13140:	d9800917 	ldw	r6,36(sp)
   13144:	30019e1e 	bne	r6,zero,137c0 <_dtoa_r+0xf00>
   13148:	00c00044 	movi	r3,1
   1314c:	d9000a17 	ldw	r4,40(sp)
   13150:	20c5883a 	add	r2,r4,r3
   13154:	10c007cc 	andi	r3,r2,31
   13158:	1800841e 	bne	r3,zero,1336c <_dtoa_r+0xaac>
   1315c:	00800704 	movi	r2,28
   13160:	d9000a17 	ldw	r4,40(sp)
   13164:	d9801117 	ldw	r6,68(sp)
   13168:	80a1883a 	add	r16,r16,r2
   1316c:	2089883a 	add	r4,r4,r2
   13170:	308d883a 	add	r6,r6,r2
   13174:	d9000a15 	stw	r4,40(sp)
   13178:	d9801115 	stw	r6,68(sp)
   1317c:	d8801117 	ldw	r2,68(sp)
   13180:	0080050e 	bge	zero,r2,13198 <_dtoa_r+0x8d8>
   13184:	d9400717 	ldw	r5,28(sp)
   13188:	d9001617 	ldw	r4,88(sp)
   1318c:	100d883a 	mov	r6,r2
   13190:	00163cc0 	call	163cc <__lshift>
   13194:	d8800715 	stw	r2,28(sp)
   13198:	d8c00a17 	ldw	r3,40(sp)
   1319c:	00c0050e 	bge	zero,r3,131b4 <_dtoa_r+0x8f4>
   131a0:	d9001617 	ldw	r4,88(sp)
   131a4:	900b883a 	mov	r5,r18
   131a8:	180d883a 	mov	r6,r3
   131ac:	00163cc0 	call	163cc <__lshift>
   131b0:	1025883a 	mov	r18,r2
   131b4:	d9000c17 	ldw	r4,48(sp)
   131b8:	2005003a 	cmpeq	r2,r4,zero
   131bc:	10016f26 	beq	r2,zero,1377c <_dtoa_r+0xebc>
   131c0:	d9000f17 	ldw	r4,60(sp)
   131c4:	0102170e 	bge	zero,r4,13a24 <_dtoa_r+0x1164>
   131c8:	d9800b17 	ldw	r6,44(sp)
   131cc:	3005003a 	cmpeq	r2,r6,zero
   131d0:	1000881e 	bne	r2,zero,133f4 <_dtoa_r+0xb34>
   131d4:	0400050e 	bge	zero,r16,131ec <_dtoa_r+0x92c>
   131d8:	d9001617 	ldw	r4,88(sp)
   131dc:	980b883a 	mov	r5,r19
   131e0:	800d883a 	mov	r6,r16
   131e4:	00163cc0 	call	163cc <__lshift>
   131e8:	1027883a 	mov	r19,r2
   131ec:	8804c03a 	cmpne	r2,r17,zero
   131f0:	1002541e 	bne	r2,zero,13b44 <_dtoa_r+0x1284>
   131f4:	980b883a 	mov	r5,r19
   131f8:	dd800517 	ldw	r22,20(sp)
   131fc:	dcc00615 	stw	r19,24(sp)
   13200:	a700004c 	andi	fp,r20,1
   13204:	2827883a 	mov	r19,r5
   13208:	d9000717 	ldw	r4,28(sp)
   1320c:	900b883a 	mov	r5,r18
   13210:	001267c0 	call	1267c <quorem>
   13214:	d9000717 	ldw	r4,28(sp)
   13218:	d9400617 	ldw	r5,24(sp)
   1321c:	1023883a 	mov	r17,r2
   13220:	8dc00c04 	addi	r23,r17,48
   13224:	0015be40 	call	15be4 <__mcmp>
   13228:	d9001617 	ldw	r4,88(sp)
   1322c:	900b883a 	mov	r5,r18
   13230:	980d883a 	mov	r6,r19
   13234:	1029883a 	mov	r20,r2
   13238:	00162400 	call	16240 <__mdiff>
   1323c:	102b883a 	mov	r21,r2
   13240:	10800317 	ldw	r2,12(r2)
   13244:	1001281e 	bne	r2,zero,136e8 <_dtoa_r+0xe28>
   13248:	d9000717 	ldw	r4,28(sp)
   1324c:	a80b883a 	mov	r5,r21
   13250:	0015be40 	call	15be4 <__mcmp>
   13254:	d9001617 	ldw	r4,88(sp)
   13258:	1021883a 	mov	r16,r2
   1325c:	a80b883a 	mov	r5,r21
   13260:	0015a880 	call	15a88 <_Bfree>
   13264:	8000041e 	bne	r16,zero,13278 <_dtoa_r+0x9b8>
   13268:	d8801717 	ldw	r2,92(sp)
   1326c:	1000021e 	bne	r2,zero,13278 <_dtoa_r+0x9b8>
   13270:	e004c03a 	cmpne	r2,fp,zero
   13274:	10011726 	beq	r2,zero,136d4 <_dtoa_r+0xe14>
   13278:	a0010616 	blt	r20,zero,13694 <_dtoa_r+0xdd4>
   1327c:	a000041e 	bne	r20,zero,13290 <_dtoa_r+0x9d0>
   13280:	d8c01717 	ldw	r3,92(sp)
   13284:	1800021e 	bne	r3,zero,13290 <_dtoa_r+0x9d0>
   13288:	e004c03a 	cmpne	r2,fp,zero
   1328c:	10010126 	beq	r2,zero,13694 <_dtoa_r+0xdd4>
   13290:	04023d16 	blt	zero,r16,13b88 <_dtoa_r+0x12c8>
   13294:	b5c00005 	stb	r23,0(r22)
   13298:	d9800517 	ldw	r6,20(sp)
   1329c:	d9000f17 	ldw	r4,60(sp)
   132a0:	b5800044 	addi	r22,r22,1
   132a4:	3105883a 	add	r2,r6,r4
   132a8:	b0806526 	beq	r22,r2,13440 <_dtoa_r+0xb80>
   132ac:	d9400717 	ldw	r5,28(sp)
   132b0:	d9001617 	ldw	r4,88(sp)
   132b4:	01800284 	movi	r6,10
   132b8:	000f883a 	mov	r7,zero
   132bc:	00167a80 	call	167a8 <__multadd>
   132c0:	d8800715 	stw	r2,28(sp)
   132c4:	d8800617 	ldw	r2,24(sp)
   132c8:	14c10c26 	beq	r2,r19,136fc <_dtoa_r+0xe3c>
   132cc:	d9400617 	ldw	r5,24(sp)
   132d0:	d9001617 	ldw	r4,88(sp)
   132d4:	01800284 	movi	r6,10
   132d8:	000f883a 	mov	r7,zero
   132dc:	00167a80 	call	167a8 <__multadd>
   132e0:	d9001617 	ldw	r4,88(sp)
   132e4:	980b883a 	mov	r5,r19
   132e8:	01800284 	movi	r6,10
   132ec:	000f883a 	mov	r7,zero
   132f0:	d8800615 	stw	r2,24(sp)
   132f4:	00167a80 	call	167a8 <__multadd>
   132f8:	1027883a 	mov	r19,r2
   132fc:	003fc206 	br	13208 <_dtoa_r+0x948>
   13300:	2445c83a 	sub	r2,r4,r17
   13304:	a088983a 	sll	r4,r20,r2
   13308:	003e4b06 	br	12c38 <_dtoa_r+0x378>
   1330c:	01bfffc4 	movi	r6,-1
   13310:	00800044 	movi	r2,1
   13314:	d9800e15 	stw	r6,56(sp)
   13318:	d9800f15 	stw	r6,60(sp)
   1331c:	d8800b15 	stw	r2,44(sp)
   13320:	d8c01617 	ldw	r3,88(sp)
   13324:	008005c4 	movi	r2,23
   13328:	18001115 	stw	zero,68(r3)
   1332c:	1580082e 	bgeu	r2,r22,13350 <_dtoa_r+0xa90>
   13330:	00c00104 	movi	r3,4
   13334:	0009883a 	mov	r4,zero
   13338:	18c7883a 	add	r3,r3,r3
   1333c:	18800504 	addi	r2,r3,20
   13340:	21000044 	addi	r4,r4,1
   13344:	b0bffc2e 	bgeu	r22,r2,13338 <_dtoa_r+0xa78>
   13348:	d9801617 	ldw	r6,88(sp)
   1334c:	31001115 	stw	r4,68(r6)
   13350:	dc000f17 	ldw	r16,60(sp)
   13354:	003e4b06 	br	12c84 <_dtoa_r+0x3c4>
   13358:	d9801717 	ldw	r6,92(sp)
   1335c:	0023883a 	mov	r17,zero
   13360:	31bfff04 	addi	r6,r6,-4
   13364:	d9801715 	stw	r6,92(sp)
   13368:	003df806 	br	12b4c <_dtoa_r+0x28c>
   1336c:	00800804 	movi	r2,32
   13370:	10c9c83a 	sub	r4,r2,r3
   13374:	00c00104 	movi	r3,4
   13378:	19005a16 	blt	r3,r4,134e4 <_dtoa_r+0xc24>
   1337c:	008000c4 	movi	r2,3
   13380:	113f7e16 	blt	r2,r4,1317c <_dtoa_r+0x8bc>
   13384:	20800704 	addi	r2,r4,28
   13388:	003f7506 	br	13160 <_dtoa_r+0x8a0>
   1338c:	d9801717 	ldw	r6,92(sp)
   13390:	00800044 	movi	r2,1
   13394:	1180a10e 	bge	r2,r6,1361c <_dtoa_r+0xd5c>
   13398:	d9800f17 	ldw	r6,60(sp)
   1339c:	d8c01017 	ldw	r3,64(sp)
   133a0:	30bfffc4 	addi	r2,r6,-1
   133a4:	1881c616 	blt	r3,r2,13ac0 <_dtoa_r+0x1200>
   133a8:	18a5c83a 	sub	r18,r3,r2
   133ac:	d8800f17 	ldw	r2,60(sp)
   133b0:	10026216 	blt	r2,zero,13d3c <_dtoa_r+0x147c>
   133b4:	dc001117 	ldw	r16,68(sp)
   133b8:	1007883a 	mov	r3,r2
   133bc:	d9800a17 	ldw	r6,40(sp)
   133c0:	d8801117 	ldw	r2,68(sp)
   133c4:	d9001617 	ldw	r4,88(sp)
   133c8:	30cd883a 	add	r6,r6,r3
   133cc:	10c5883a 	add	r2,r2,r3
   133d0:	01400044 	movi	r5,1
   133d4:	d9800a15 	stw	r6,40(sp)
   133d8:	d8801115 	stw	r2,68(sp)
   133dc:	001676c0 	call	1676c <__i2b>
   133e0:	1027883a 	mov	r19,r2
   133e4:	003f2506 	br	1307c <_dtoa_r+0x7bc>
   133e8:	00c00134 	movhi	r3,4
   133ec:	18e02d04 	addi	r3,r3,-32588
   133f0:	003d6706 	br	12990 <_dtoa_r+0xd0>
   133f4:	dd800517 	ldw	r22,20(sp)
   133f8:	04000044 	movi	r16,1
   133fc:	00000706 	br	1341c <_dtoa_r+0xb5c>
   13400:	d9400717 	ldw	r5,28(sp)
   13404:	d9001617 	ldw	r4,88(sp)
   13408:	01800284 	movi	r6,10
   1340c:	000f883a 	mov	r7,zero
   13410:	00167a80 	call	167a8 <__multadd>
   13414:	d8800715 	stw	r2,28(sp)
   13418:	84000044 	addi	r16,r16,1
   1341c:	d9000717 	ldw	r4,28(sp)
   13420:	900b883a 	mov	r5,r18
   13424:	001267c0 	call	1267c <quorem>
   13428:	15c00c04 	addi	r23,r2,48
   1342c:	b5c00005 	stb	r23,0(r22)
   13430:	d8c00f17 	ldw	r3,60(sp)
   13434:	b5800044 	addi	r22,r22,1
   13438:	80fff116 	blt	r16,r3,13400 <_dtoa_r+0xb40>
   1343c:	d8000615 	stw	zero,24(sp)
   13440:	d9400717 	ldw	r5,28(sp)
   13444:	d9001617 	ldw	r4,88(sp)
   13448:	01800044 	movi	r6,1
   1344c:	00163cc0 	call	163cc <__lshift>
   13450:	1009883a 	mov	r4,r2
   13454:	900b883a 	mov	r5,r18
   13458:	d8800715 	stw	r2,28(sp)
   1345c:	0015be40 	call	15be4 <__mcmp>
   13460:	00803c0e 	bge	zero,r2,13554 <_dtoa_r+0xc94>
   13464:	b009883a 	mov	r4,r22
   13468:	213fffc4 	addi	r4,r4,-1
   1346c:	21400003 	ldbu	r5,0(r4)
   13470:	00800e44 	movi	r2,57
   13474:	28c03fcc 	andi	r3,r5,255
   13478:	18c0201c 	xori	r3,r3,128
   1347c:	18ffe004 	addi	r3,r3,-128
   13480:	1881981e 	bne	r3,r2,13ae4 <_dtoa_r+0x1224>
   13484:	d9800517 	ldw	r6,20(sp)
   13488:	21bff71e 	bne	r4,r6,13468 <_dtoa_r+0xba8>
   1348c:	d8800d17 	ldw	r2,52(sp)
   13490:	37000044 	addi	fp,r6,1
   13494:	10800044 	addi	r2,r2,1
   13498:	d8800d15 	stw	r2,52(sp)
   1349c:	00800c44 	movi	r2,49
   134a0:	30800005 	stb	r2,0(r6)
   134a4:	d9001617 	ldw	r4,88(sp)
   134a8:	900b883a 	mov	r5,r18
   134ac:	0015a880 	call	15a88 <_Bfree>
   134b0:	983ecd26 	beq	r19,zero,12fe8 <_dtoa_r+0x728>
   134b4:	d8c00617 	ldw	r3,24(sp)
   134b8:	18000426 	beq	r3,zero,134cc <_dtoa_r+0xc0c>
   134bc:	1cc00326 	beq	r3,r19,134cc <_dtoa_r+0xc0c>
   134c0:	d9001617 	ldw	r4,88(sp)
   134c4:	180b883a 	mov	r5,r3
   134c8:	0015a880 	call	15a88 <_Bfree>
   134cc:	d9001617 	ldw	r4,88(sp)
   134d0:	980b883a 	mov	r5,r19
   134d4:	0015a880 	call	15a88 <_Bfree>
   134d8:	003ec306 	br	12fe8 <_dtoa_r+0x728>
   134dc:	1805883a 	mov	r2,r3
   134e0:	003eeb06 	br	13090 <_dtoa_r+0x7d0>
   134e4:	d9800a17 	ldw	r6,40(sp)
   134e8:	d8c01117 	ldw	r3,68(sp)
   134ec:	20bfff04 	addi	r2,r4,-4
   134f0:	308d883a 	add	r6,r6,r2
   134f4:	1887883a 	add	r3,r3,r2
   134f8:	80a1883a 	add	r16,r16,r2
   134fc:	d9800a15 	stw	r6,40(sp)
   13500:	d8c01115 	stw	r3,68(sp)
   13504:	003f1d06 	br	1317c <_dtoa_r+0x8bc>
   13508:	a03f0c1e 	bne	r20,zero,1313c <_dtoa_r+0x87c>
   1350c:	00800434 	movhi	r2,16
   13510:	10bfffc4 	addi	r2,r2,-1
   13514:	a884703a 	and	r2,r21,r2
   13518:	103f081e 	bne	r2,zero,1313c <_dtoa_r+0x87c>
   1351c:	a89ffc2c 	andhi	r2,r21,32752
   13520:	103f0626 	beq	r2,zero,1313c <_dtoa_r+0x87c>
   13524:	d8c01117 	ldw	r3,68(sp)
   13528:	d9000a17 	ldw	r4,40(sp)
   1352c:	18c00044 	addi	r3,r3,1
   13530:	21000044 	addi	r4,r4,1
   13534:	d8c01115 	stw	r3,68(sp)
   13538:	d9000a15 	stw	r4,40(sp)
   1353c:	003f0006 	br	13140 <_dtoa_r+0x880>
   13540:	d9400717 	ldw	r5,28(sp)
   13544:	d9001617 	ldw	r4,88(sp)
   13548:	00168d40 	call	168d4 <__pow5mult>
   1354c:	d8800715 	stw	r2,28(sp)
   13550:	003eed06 	br	13108 <_dtoa_r+0x848>
   13554:	1000021e 	bne	r2,zero,13560 <_dtoa_r+0xca0>
   13558:	b880004c 	andi	r2,r23,1
   1355c:	103fc11e 	bne	r2,zero,13464 <_dtoa_r+0xba4>
   13560:	b5bfffc4 	addi	r22,r22,-1
   13564:	b0c00007 	ldb	r3,0(r22)
   13568:	00800c04 	movi	r2,48
   1356c:	18bffc26 	beq	r3,r2,13560 <_dtoa_r+0xca0>
   13570:	b7000044 	addi	fp,r22,1
   13574:	003fcb06 	br	134a4 <_dtoa_r+0xbe4>
   13578:	d9800d17 	ldw	r6,52(sp)
   1357c:	018fc83a 	sub	r7,zero,r6
   13580:	3801f726 	beq	r7,zero,13d60 <_dtoa_r+0x14a0>
   13584:	398003cc 	andi	r6,r7,15
   13588:	300c90fa 	slli	r6,r6,3
   1358c:	01400134 	movhi	r5,4
   13590:	29604b04 	addi	r5,r5,-32468
   13594:	d9001217 	ldw	r4,72(sp)
   13598:	314d883a 	add	r6,r6,r5
   1359c:	30c00117 	ldw	r3,4(r6)
   135a0:	30800017 	ldw	r2,0(r6)
   135a4:	d9401317 	ldw	r5,76(sp)
   135a8:	3821d13a 	srai	r16,r7,4
   135ac:	100d883a 	mov	r6,r2
   135b0:	180f883a 	mov	r7,r3
   135b4:	0018a680 	call	18a68 <__muldf3>
   135b8:	1011883a 	mov	r8,r2
   135bc:	1813883a 	mov	r9,r3
   135c0:	1029883a 	mov	r20,r2
   135c4:	182b883a 	mov	r21,r3
   135c8:	8001e526 	beq	r16,zero,13d60 <_dtoa_r+0x14a0>
   135cc:	05800084 	movi	r22,2
   135d0:	04400134 	movhi	r17,4
   135d4:	8c607d04 	addi	r17,r17,-32268
   135d8:	8080004c 	andi	r2,r16,1
   135dc:	1005003a 	cmpeq	r2,r2,zero
   135e0:	1000081e 	bne	r2,zero,13604 <_dtoa_r+0xd44>
   135e4:	89800017 	ldw	r6,0(r17)
   135e8:	89c00117 	ldw	r7,4(r17)
   135ec:	480b883a 	mov	r5,r9
   135f0:	4009883a 	mov	r4,r8
   135f4:	0018a680 	call	18a68 <__muldf3>
   135f8:	1011883a 	mov	r8,r2
   135fc:	b5800044 	addi	r22,r22,1
   13600:	1813883a 	mov	r9,r3
   13604:	8021d07a 	srai	r16,r16,1
   13608:	8c400204 	addi	r17,r17,8
   1360c:	803ff21e 	bne	r16,zero,135d8 <_dtoa_r+0xd18>
   13610:	4029883a 	mov	r20,r8
   13614:	482b883a 	mov	r21,r9
   13618:	003dca06 	br	12d44 <_dtoa_r+0x484>
   1361c:	d9000817 	ldw	r4,32(sp)
   13620:	2005003a 	cmpeq	r2,r4,zero
   13624:	1001f61e 	bne	r2,zero,13e00 <_dtoa_r+0x1540>
   13628:	dc001117 	ldw	r16,68(sp)
   1362c:	dc801017 	ldw	r18,64(sp)
   13630:	18c10cc4 	addi	r3,r3,1075
   13634:	003f6106 	br	133bc <_dtoa_r+0xafc>
   13638:	d8000b15 	stw	zero,44(sp)
   1363c:	d9802617 	ldw	r6,152(sp)
   13640:	d8c00d17 	ldw	r3,52(sp)
   13644:	30800044 	addi	r2,r6,1
   13648:	18ad883a 	add	r22,r3,r2
   1364c:	b13fffc4 	addi	r4,r22,-1
   13650:	d9000e15 	stw	r4,56(sp)
   13654:	0581f60e 	bge	zero,r22,13e30 <_dtoa_r+0x1570>
   13658:	dd800f15 	stw	r22,60(sp)
   1365c:	003f3006 	br	13320 <_dtoa_r+0xa60>
   13660:	d8000b15 	stw	zero,44(sp)
   13664:	d9002617 	ldw	r4,152(sp)
   13668:	0101eb0e 	bge	zero,r4,13e18 <_dtoa_r+0x1558>
   1366c:	202d883a 	mov	r22,r4
   13670:	d9000e15 	stw	r4,56(sp)
   13674:	d9000f15 	stw	r4,60(sp)
   13678:	003f2906 	br	13320 <_dtoa_r+0xa60>
   1367c:	01800044 	movi	r6,1
   13680:	d9800b15 	stw	r6,44(sp)
   13684:	003ff706 	br	13664 <_dtoa_r+0xda4>
   13688:	01000044 	movi	r4,1
   1368c:	d9000b15 	stw	r4,44(sp)
   13690:	003fea06 	br	1363c <_dtoa_r+0xd7c>
   13694:	04000c0e 	bge	zero,r16,136c8 <_dtoa_r+0xe08>
   13698:	d9400717 	ldw	r5,28(sp)
   1369c:	d9001617 	ldw	r4,88(sp)
   136a0:	01800044 	movi	r6,1
   136a4:	00163cc0 	call	163cc <__lshift>
   136a8:	1009883a 	mov	r4,r2
   136ac:	900b883a 	mov	r5,r18
   136b0:	d8800715 	stw	r2,28(sp)
   136b4:	0015be40 	call	15be4 <__mcmp>
   136b8:	0081e00e 	bge	zero,r2,13e3c <_dtoa_r+0x157c>
   136bc:	bdc00044 	addi	r23,r23,1
   136c0:	00800e84 	movi	r2,58
   136c4:	b881a226 	beq	r23,r2,13d50 <_dtoa_r+0x1490>
   136c8:	b7000044 	addi	fp,r22,1
   136cc:	b5c00005 	stb	r23,0(r22)
   136d0:	003f7406 	br	134a4 <_dtoa_r+0xbe4>
   136d4:	00800e44 	movi	r2,57
   136d8:	b8819d26 	beq	r23,r2,13d50 <_dtoa_r+0x1490>
   136dc:	053ffa0e 	bge	zero,r20,136c8 <_dtoa_r+0xe08>
   136e0:	8dc00c44 	addi	r23,r17,49
   136e4:	003ff806 	br	136c8 <_dtoa_r+0xe08>
   136e8:	d9001617 	ldw	r4,88(sp)
   136ec:	a80b883a 	mov	r5,r21
   136f0:	04000044 	movi	r16,1
   136f4:	0015a880 	call	15a88 <_Bfree>
   136f8:	003edf06 	br	13278 <_dtoa_r+0x9b8>
   136fc:	d9001617 	ldw	r4,88(sp)
   13700:	980b883a 	mov	r5,r19
   13704:	01800284 	movi	r6,10
   13708:	000f883a 	mov	r7,zero
   1370c:	00167a80 	call	167a8 <__multadd>
   13710:	1027883a 	mov	r19,r2
   13714:	d8800615 	stw	r2,24(sp)
   13718:	003ebb06 	br	13208 <_dtoa_r+0x948>
   1371c:	d9801117 	ldw	r6,68(sp)
   13720:	d8800d17 	ldw	r2,52(sp)
   13724:	d8000915 	stw	zero,36(sp)
   13728:	308dc83a 	sub	r6,r6,r2
   1372c:	0087c83a 	sub	r3,zero,r2
   13730:	d9801115 	stw	r6,68(sp)
   13734:	d8c01015 	stw	r3,64(sp)
   13738:	003cfe06 	br	12b34 <_dtoa_r+0x274>
   1373c:	018dc83a 	sub	r6,zero,r6
   13740:	d9801115 	stw	r6,68(sp)
   13744:	d8000a15 	stw	zero,40(sp)
   13748:	003cf306 	br	12b18 <_dtoa_r+0x258>
   1374c:	d9000d17 	ldw	r4,52(sp)
   13750:	001932c0 	call	1932c <__floatsidf>
   13754:	880b883a 	mov	r5,r17
   13758:	8009883a 	mov	r4,r16
   1375c:	180f883a 	mov	r7,r3
   13760:	100d883a 	mov	r6,r2
   13764:	001910c0 	call	1910c <__nedf2>
   13768:	103ce126 	beq	r2,zero,12af0 <_dtoa_r+0x230>
   1376c:	d9800d17 	ldw	r6,52(sp)
   13770:	31bfffc4 	addi	r6,r6,-1
   13774:	d9800d15 	stw	r6,52(sp)
   13778:	003cdd06 	br	12af0 <_dtoa_r+0x230>
   1377c:	d9000717 	ldw	r4,28(sp)
   13780:	900b883a 	mov	r5,r18
   13784:	0015be40 	call	15be4 <__mcmp>
   13788:	103e8d0e 	bge	r2,zero,131c0 <_dtoa_r+0x900>
   1378c:	d9400717 	ldw	r5,28(sp)
   13790:	d9001617 	ldw	r4,88(sp)
   13794:	01800284 	movi	r6,10
   13798:	000f883a 	mov	r7,zero
   1379c:	00167a80 	call	167a8 <__multadd>
   137a0:	d9800d17 	ldw	r6,52(sp)
   137a4:	d8800715 	stw	r2,28(sp)
   137a8:	31bfffc4 	addi	r6,r6,-1
   137ac:	d9800d15 	stw	r6,52(sp)
   137b0:	b001a71e 	bne	r22,zero,13e50 <_dtoa_r+0x1590>
   137b4:	d8800e17 	ldw	r2,56(sp)
   137b8:	d8800f15 	stw	r2,60(sp)
   137bc:	003e8006 	br	131c0 <_dtoa_r+0x900>
   137c0:	90800417 	ldw	r2,16(r18)
   137c4:	1085883a 	add	r2,r2,r2
   137c8:	1085883a 	add	r2,r2,r2
   137cc:	1485883a 	add	r2,r2,r18
   137d0:	11000417 	ldw	r4,16(r2)
   137d4:	0015ab00 	call	15ab0 <__hi0bits>
   137d8:	00c00804 	movi	r3,32
   137dc:	1887c83a 	sub	r3,r3,r2
   137e0:	003e5a06 	br	1314c <_dtoa_r+0x88c>
   137e4:	d9400717 	ldw	r5,28(sp)
   137e8:	d9801017 	ldw	r6,64(sp)
   137ec:	d9001617 	ldw	r4,88(sp)
   137f0:	00168d40 	call	168d4 <__pow5mult>
   137f4:	d8800715 	stw	r2,28(sp)
   137f8:	003e4306 	br	13108 <_dtoa_r+0x848>
   137fc:	d9800f17 	ldw	r6,60(sp)
   13800:	d8800d17 	ldw	r2,52(sp)
   13804:	d9800315 	stw	r6,12(sp)
   13808:	d8800415 	stw	r2,16(sp)
   1380c:	d8c00b17 	ldw	r3,44(sp)
   13810:	1805003a 	cmpeq	r2,r3,zero
   13814:	1000e21e 	bne	r2,zero,13ba0 <_dtoa_r+0x12e0>
   13818:	d9000317 	ldw	r4,12(sp)
   1381c:	0005883a 	mov	r2,zero
   13820:	00cff834 	movhi	r3,16352
   13824:	200c90fa 	slli	r6,r4,3
   13828:	01000134 	movhi	r4,4
   1382c:	21204b04 	addi	r4,r4,-32468
   13830:	180b883a 	mov	r5,r3
   13834:	310d883a 	add	r6,r6,r4
   13838:	327fff17 	ldw	r9,-4(r6)
   1383c:	323ffe17 	ldw	r8,-8(r6)
   13840:	1009883a 	mov	r4,r2
   13844:	480f883a 	mov	r7,r9
   13848:	400d883a 	mov	r6,r8
   1384c:	0018e2c0 	call	18e2c <__divdf3>
   13850:	180b883a 	mov	r5,r3
   13854:	b00d883a 	mov	r6,r22
   13858:	b80f883a 	mov	r7,r23
   1385c:	1009883a 	mov	r4,r2
   13860:	00189740 	call	18974 <__subdf3>
   13864:	a80b883a 	mov	r5,r21
   13868:	a009883a 	mov	r4,r20
   1386c:	d8c01915 	stw	r3,100(sp)
   13870:	d8801815 	stw	r2,96(sp)
   13874:	00194240 	call	19424 <__fixdfsi>
   13878:	1009883a 	mov	r4,r2
   1387c:	1027883a 	mov	r19,r2
   13880:	001932c0 	call	1932c <__floatsidf>
   13884:	a80b883a 	mov	r5,r21
   13888:	a009883a 	mov	r4,r20
   1388c:	180f883a 	mov	r7,r3
   13890:	100d883a 	mov	r6,r2
   13894:	00189740 	call	18974 <__subdf3>
   13898:	d9801817 	ldw	r6,96(sp)
   1389c:	1823883a 	mov	r17,r3
   138a0:	d8801415 	stw	r2,80(sp)
   138a4:	302d883a 	mov	r22,r6
   138a8:	d9800517 	ldw	r6,20(sp)
   138ac:	9cc00c04 	addi	r19,r19,48
   138b0:	dc401515 	stw	r17,84(sp)
   138b4:	d8c01917 	ldw	r3,100(sp)
   138b8:	34c00005 	stb	r19,0(r6)
   138bc:	d8800517 	ldw	r2,20(sp)
   138c0:	d9401917 	ldw	r5,100(sp)
   138c4:	d9801417 	ldw	r6,80(sp)
   138c8:	b009883a 	mov	r4,r22
   138cc:	880f883a 	mov	r7,r17
   138d0:	182f883a 	mov	r23,r3
   138d4:	17000044 	addi	fp,r2,1
   138d8:	00191940 	call	19194 <__gtdf2>
   138dc:	00804e16 	blt	zero,r2,13a18 <_dtoa_r+0x1158>
   138e0:	d9801417 	ldw	r6,80(sp)
   138e4:	0005883a 	mov	r2,zero
   138e8:	00cffc34 	movhi	r3,16368
   138ec:	180b883a 	mov	r5,r3
   138f0:	880f883a 	mov	r7,r17
   138f4:	1009883a 	mov	r4,r2
   138f8:	00189740 	call	18974 <__subdf3>
   138fc:	d9401917 	ldw	r5,100(sp)
   13900:	180f883a 	mov	r7,r3
   13904:	b009883a 	mov	r4,r22
   13908:	100d883a 	mov	r6,r2
   1390c:	00191940 	call	19194 <__gtdf2>
   13910:	00bda216 	blt	zero,r2,12f9c <_dtoa_r+0x6dc>
   13914:	d8c00317 	ldw	r3,12(sp)
   13918:	00800044 	movi	r2,1
   1391c:	10c01216 	blt	r2,r3,13968 <_dtoa_r+0x10a8>
   13920:	003d4506 	br	12e38 <_dtoa_r+0x578>
   13924:	d9801417 	ldw	r6,80(sp)
   13928:	0005883a 	mov	r2,zero
   1392c:	00cffc34 	movhi	r3,16368
   13930:	180b883a 	mov	r5,r3
   13934:	880f883a 	mov	r7,r17
   13938:	1009883a 	mov	r4,r2
   1393c:	00189740 	call	18974 <__subdf3>
   13940:	d9c01b17 	ldw	r7,108(sp)
   13944:	180b883a 	mov	r5,r3
   13948:	1009883a 	mov	r4,r2
   1394c:	b00d883a 	mov	r6,r22
   13950:	00192a40 	call	192a4 <__ltdf2>
   13954:	103d9116 	blt	r2,zero,12f9c <_dtoa_r+0x6dc>
   13958:	d9800517 	ldw	r6,20(sp)
   1395c:	d9000317 	ldw	r4,12(sp)
   13960:	3105883a 	add	r2,r6,r4
   13964:	e0bd3426 	beq	fp,r2,12e38 <_dtoa_r+0x578>
   13968:	04500934 	movhi	r17,16420
   1396c:	0021883a 	mov	r16,zero
   13970:	b80b883a 	mov	r5,r23
   13974:	b009883a 	mov	r4,r22
   13978:	800d883a 	mov	r6,r16
   1397c:	880f883a 	mov	r7,r17
   13980:	0018a680 	call	18a68 <__muldf3>
   13984:	d9401517 	ldw	r5,84(sp)
   13988:	d9001417 	ldw	r4,80(sp)
   1398c:	880f883a 	mov	r7,r17
   13990:	000d883a 	mov	r6,zero
   13994:	d8801a15 	stw	r2,104(sp)
   13998:	d8c01b15 	stw	r3,108(sp)
   1399c:	0018a680 	call	18a68 <__muldf3>
   139a0:	180b883a 	mov	r5,r3
   139a4:	1009883a 	mov	r4,r2
   139a8:	1823883a 	mov	r17,r3
   139ac:	1021883a 	mov	r16,r2
   139b0:	00194240 	call	19424 <__fixdfsi>
   139b4:	1009883a 	mov	r4,r2
   139b8:	102b883a 	mov	r21,r2
   139bc:	001932c0 	call	1932c <__floatsidf>
   139c0:	880b883a 	mov	r5,r17
   139c4:	8009883a 	mov	r4,r16
   139c8:	180f883a 	mov	r7,r3
   139cc:	100d883a 	mov	r6,r2
   139d0:	00189740 	call	18974 <__subdf3>
   139d4:	1021883a 	mov	r16,r2
   139d8:	d9001b17 	ldw	r4,108(sp)
   139dc:	1823883a 	mov	r17,r3
   139e0:	dc001415 	stw	r16,80(sp)
   139e4:	ad400c04 	addi	r21,r21,48
   139e8:	dc401515 	stw	r17,84(sp)
   139ec:	d8801a17 	ldw	r2,104(sp)
   139f0:	e5400005 	stb	r21,0(fp)
   139f4:	202f883a 	mov	r23,r4
   139f8:	d9c01b17 	ldw	r7,108(sp)
   139fc:	d9001417 	ldw	r4,80(sp)
   13a00:	880b883a 	mov	r5,r17
   13a04:	100d883a 	mov	r6,r2
   13a08:	102d883a 	mov	r22,r2
   13a0c:	e7000044 	addi	fp,fp,1
   13a10:	00192a40 	call	192a4 <__ltdf2>
   13a14:	103fc30e 	bge	r2,zero,13924 <_dtoa_r+0x1064>
   13a18:	d9000417 	ldw	r4,16(sp)
   13a1c:	d9000d15 	stw	r4,52(sp)
   13a20:	003d7106 	br	12fe8 <_dtoa_r+0x728>
   13a24:	d9801717 	ldw	r6,92(sp)
   13a28:	00800084 	movi	r2,2
   13a2c:	11bde60e 	bge	r2,r6,131c8 <_dtoa_r+0x908>
   13a30:	203cfb1e 	bne	r4,zero,12e20 <_dtoa_r+0x560>
   13a34:	d9001617 	ldw	r4,88(sp)
   13a38:	900b883a 	mov	r5,r18
   13a3c:	01800144 	movi	r6,5
   13a40:	000f883a 	mov	r7,zero
   13a44:	00167a80 	call	167a8 <__multadd>
   13a48:	d9000717 	ldw	r4,28(sp)
   13a4c:	100b883a 	mov	r5,r2
   13a50:	1025883a 	mov	r18,r2
   13a54:	0015be40 	call	15be4 <__mcmp>
   13a58:	00bcf10e 	bge	zero,r2,12e20 <_dtoa_r+0x560>
   13a5c:	d8c00d17 	ldw	r3,52(sp)
   13a60:	d9000517 	ldw	r4,20(sp)
   13a64:	d8000615 	stw	zero,24(sp)
   13a68:	18c00044 	addi	r3,r3,1
   13a6c:	d8c00d15 	stw	r3,52(sp)
   13a70:	00800c44 	movi	r2,49
   13a74:	27000044 	addi	fp,r4,1
   13a78:	20800005 	stb	r2,0(r4)
   13a7c:	003e8906 	br	134a4 <_dtoa_r+0xbe4>
   13a80:	d8c00517 	ldw	r3,20(sp)
   13a84:	003bc206 	br	12990 <_dtoa_r+0xd0>
   13a88:	01800134 	movhi	r6,4
   13a8c:	31a07d04 	addi	r6,r6,-32268
   13a90:	30c00917 	ldw	r3,36(r6)
   13a94:	30800817 	ldw	r2,32(r6)
   13a98:	d9001217 	ldw	r4,72(sp)
   13a9c:	d9401317 	ldw	r5,76(sp)
   13aa0:	180f883a 	mov	r7,r3
   13aa4:	100d883a 	mov	r6,r2
   13aa8:	0018e2c0 	call	18e2c <__divdf3>
   13aac:	948003cc 	andi	r18,r18,15
   13ab0:	058000c4 	movi	r22,3
   13ab4:	1029883a 	mov	r20,r2
   13ab8:	182b883a 	mov	r21,r3
   13abc:	003c8906 	br	12ce4 <_dtoa_r+0x424>
   13ac0:	d9001017 	ldw	r4,64(sp)
   13ac4:	d9800917 	ldw	r6,36(sp)
   13ac8:	0025883a 	mov	r18,zero
   13acc:	1105c83a 	sub	r2,r2,r4
   13ad0:	2089883a 	add	r4,r4,r2
   13ad4:	308d883a 	add	r6,r6,r2
   13ad8:	d9001015 	stw	r4,64(sp)
   13adc:	d9800915 	stw	r6,36(sp)
   13ae0:	003e3206 	br	133ac <_dtoa_r+0xaec>
   13ae4:	28800044 	addi	r2,r5,1
   13ae8:	27000044 	addi	fp,r4,1
   13aec:	20800005 	stb	r2,0(r4)
   13af0:	003e6c06 	br	134a4 <_dtoa_r+0xbe4>
   13af4:	d8800f17 	ldw	r2,60(sp)
   13af8:	00bce016 	blt	zero,r2,12e7c <_dtoa_r+0x5bc>
   13afc:	d9800f17 	ldw	r6,60(sp)
   13b00:	303cc51e 	bne	r6,zero,12e18 <_dtoa_r+0x558>
   13b04:	0005883a 	mov	r2,zero
   13b08:	00d00534 	movhi	r3,16404
   13b0c:	980b883a 	mov	r5,r19
   13b10:	180f883a 	mov	r7,r3
   13b14:	9009883a 	mov	r4,r18
   13b18:	100d883a 	mov	r6,r2
   13b1c:	0018a680 	call	18a68 <__muldf3>
   13b20:	180b883a 	mov	r5,r3
   13b24:	a80f883a 	mov	r7,r21
   13b28:	1009883a 	mov	r4,r2
   13b2c:	a00d883a 	mov	r6,r20
   13b30:	001921c0 	call	1921c <__gedf2>
   13b34:	103cb80e 	bge	r2,zero,12e18 <_dtoa_r+0x558>
   13b38:	0027883a 	mov	r19,zero
   13b3c:	0025883a 	mov	r18,zero
   13b40:	003fc606 	br	13a5c <_dtoa_r+0x119c>
   13b44:	99400117 	ldw	r5,4(r19)
   13b48:	d9001617 	ldw	r4,88(sp)
   13b4c:	00160080 	call	16008 <_Balloc>
   13b50:	99800417 	ldw	r6,16(r19)
   13b54:	11000304 	addi	r4,r2,12
   13b58:	99400304 	addi	r5,r19,12
   13b5c:	318d883a 	add	r6,r6,r6
   13b60:	318d883a 	add	r6,r6,r6
   13b64:	31800204 	addi	r6,r6,8
   13b68:	1023883a 	mov	r17,r2
   13b6c:	00158700 	call	15870 <memcpy>
   13b70:	d9001617 	ldw	r4,88(sp)
   13b74:	880b883a 	mov	r5,r17
   13b78:	01800044 	movi	r6,1
   13b7c:	00163cc0 	call	163cc <__lshift>
   13b80:	100b883a 	mov	r5,r2
   13b84:	003d9c06 	br	131f8 <_dtoa_r+0x938>
   13b88:	00800e44 	movi	r2,57
   13b8c:	b8807026 	beq	r23,r2,13d50 <_dtoa_r+0x1490>
   13b90:	b8800044 	addi	r2,r23,1
   13b94:	b7000044 	addi	fp,r22,1
   13b98:	b0800005 	stb	r2,0(r22)
   13b9c:	003e4106 	br	134a4 <_dtoa_r+0xbe4>
   13ba0:	d8800317 	ldw	r2,12(sp)
   13ba4:	01800134 	movhi	r6,4
   13ba8:	31a04b04 	addi	r6,r6,-32468
   13bac:	b009883a 	mov	r4,r22
   13bb0:	100e90fa 	slli	r7,r2,3
   13bb4:	b80b883a 	mov	r5,r23
   13bb8:	398f883a 	add	r7,r7,r6
   13bbc:	38bffe17 	ldw	r2,-8(r7)
   13bc0:	d9800517 	ldw	r6,20(sp)
   13bc4:	38ffff17 	ldw	r3,-4(r7)
   13bc8:	37000044 	addi	fp,r6,1
   13bcc:	180f883a 	mov	r7,r3
   13bd0:	100d883a 	mov	r6,r2
   13bd4:	0018a680 	call	18a68 <__muldf3>
   13bd8:	a80b883a 	mov	r5,r21
   13bdc:	a009883a 	mov	r4,r20
   13be0:	182f883a 	mov	r23,r3
   13be4:	102d883a 	mov	r22,r2
   13be8:	00194240 	call	19424 <__fixdfsi>
   13bec:	1009883a 	mov	r4,r2
   13bf0:	1027883a 	mov	r19,r2
   13bf4:	001932c0 	call	1932c <__floatsidf>
   13bf8:	a80b883a 	mov	r5,r21
   13bfc:	a009883a 	mov	r4,r20
   13c00:	180f883a 	mov	r7,r3
   13c04:	100d883a 	mov	r6,r2
   13c08:	00189740 	call	18974 <__subdf3>
   13c0c:	180b883a 	mov	r5,r3
   13c10:	d8c00517 	ldw	r3,20(sp)
   13c14:	9cc00c04 	addi	r19,r19,48
   13c18:	1009883a 	mov	r4,r2
   13c1c:	1cc00005 	stb	r19,0(r3)
   13c20:	2021883a 	mov	r16,r4
   13c24:	d9000317 	ldw	r4,12(sp)
   13c28:	00800044 	movi	r2,1
   13c2c:	2823883a 	mov	r17,r5
   13c30:	20802226 	beq	r4,r2,13cbc <_dtoa_r+0x13fc>
   13c34:	1029883a 	mov	r20,r2
   13c38:	0005883a 	mov	r2,zero
   13c3c:	00d00934 	movhi	r3,16420
   13c40:	180f883a 	mov	r7,r3
   13c44:	100d883a 	mov	r6,r2
   13c48:	880b883a 	mov	r5,r17
   13c4c:	8009883a 	mov	r4,r16
   13c50:	0018a680 	call	18a68 <__muldf3>
   13c54:	180b883a 	mov	r5,r3
   13c58:	1009883a 	mov	r4,r2
   13c5c:	1823883a 	mov	r17,r3
   13c60:	1021883a 	mov	r16,r2
   13c64:	00194240 	call	19424 <__fixdfsi>
   13c68:	1009883a 	mov	r4,r2
   13c6c:	102b883a 	mov	r21,r2
   13c70:	001932c0 	call	1932c <__floatsidf>
   13c74:	880b883a 	mov	r5,r17
   13c78:	8009883a 	mov	r4,r16
   13c7c:	180f883a 	mov	r7,r3
   13c80:	100d883a 	mov	r6,r2
   13c84:	00189740 	call	18974 <__subdf3>
   13c88:	180b883a 	mov	r5,r3
   13c8c:	d8c00517 	ldw	r3,20(sp)
   13c90:	1009883a 	mov	r4,r2
   13c94:	ad400c04 	addi	r21,r21,48
   13c98:	1d05883a 	add	r2,r3,r20
   13c9c:	15400005 	stb	r21,0(r2)
   13ca0:	2021883a 	mov	r16,r4
   13ca4:	d9000317 	ldw	r4,12(sp)
   13ca8:	a5000044 	addi	r20,r20,1
   13cac:	2823883a 	mov	r17,r5
   13cb0:	a13fe11e 	bne	r20,r4,13c38 <_dtoa_r+0x1378>
   13cb4:	e505883a 	add	r2,fp,r20
   13cb8:	173fffc4 	addi	fp,r2,-1
   13cbc:	0025883a 	mov	r18,zero
   13cc0:	04cff834 	movhi	r19,16352
   13cc4:	b009883a 	mov	r4,r22
   13cc8:	b80b883a 	mov	r5,r23
   13ccc:	900d883a 	mov	r6,r18
   13cd0:	980f883a 	mov	r7,r19
   13cd4:	00189f40 	call	189f4 <__adddf3>
   13cd8:	180b883a 	mov	r5,r3
   13cdc:	1009883a 	mov	r4,r2
   13ce0:	800d883a 	mov	r6,r16
   13ce4:	880f883a 	mov	r7,r17
   13ce8:	00192a40 	call	192a4 <__ltdf2>
   13cec:	103cab16 	blt	r2,zero,12f9c <_dtoa_r+0x6dc>
   13cf0:	0009883a 	mov	r4,zero
   13cf4:	980b883a 	mov	r5,r19
   13cf8:	b80f883a 	mov	r7,r23
   13cfc:	b00d883a 	mov	r6,r22
   13d00:	00189740 	call	18974 <__subdf3>
   13d04:	180b883a 	mov	r5,r3
   13d08:	880f883a 	mov	r7,r17
   13d0c:	1009883a 	mov	r4,r2
   13d10:	800d883a 	mov	r6,r16
   13d14:	00191940 	call	19194 <__gtdf2>
   13d18:	00bc470e 	bge	zero,r2,12e38 <_dtoa_r+0x578>
   13d1c:	00c00c04 	movi	r3,48
   13d20:	e73fffc4 	addi	fp,fp,-1
   13d24:	e0800007 	ldb	r2,0(fp)
   13d28:	10fffd26 	beq	r2,r3,13d20 <_dtoa_r+0x1460>
   13d2c:	d9800417 	ldw	r6,16(sp)
   13d30:	e7000044 	addi	fp,fp,1
   13d34:	d9800d15 	stw	r6,52(sp)
   13d38:	003cab06 	br	12fe8 <_dtoa_r+0x728>
   13d3c:	d8c00f17 	ldw	r3,60(sp)
   13d40:	d9001117 	ldw	r4,68(sp)
   13d44:	20e1c83a 	sub	r16,r4,r3
   13d48:	0007883a 	mov	r3,zero
   13d4c:	003d9b06 	br	133bc <_dtoa_r+0xafc>
   13d50:	00800e44 	movi	r2,57
   13d54:	b0800005 	stb	r2,0(r22)
   13d58:	b5800044 	addi	r22,r22,1
   13d5c:	003dc106 	br	13464 <_dtoa_r+0xba4>
   13d60:	05800084 	movi	r22,2
   13d64:	003bf706 	br	12d44 <_dtoa_r+0x484>
   13d68:	d9000f17 	ldw	r4,60(sp)
   13d6c:	013c000e 	bge	zero,r4,12d70 <_dtoa_r+0x4b0>
   13d70:	d9800e17 	ldw	r6,56(sp)
   13d74:	01bc300e 	bge	zero,r6,12e38 <_dtoa_r+0x578>
   13d78:	0005883a 	mov	r2,zero
   13d7c:	00d00934 	movhi	r3,16420
   13d80:	a80b883a 	mov	r5,r21
   13d84:	180f883a 	mov	r7,r3
   13d88:	a009883a 	mov	r4,r20
   13d8c:	100d883a 	mov	r6,r2
   13d90:	0018a680 	call	18a68 <__muldf3>
   13d94:	b1000044 	addi	r4,r22,1
   13d98:	1021883a 	mov	r16,r2
   13d9c:	1823883a 	mov	r17,r3
   13da0:	001932c0 	call	1932c <__floatsidf>
   13da4:	880b883a 	mov	r5,r17
   13da8:	8009883a 	mov	r4,r16
   13dac:	180f883a 	mov	r7,r3
   13db0:	100d883a 	mov	r6,r2
   13db4:	0018a680 	call	18a68 <__muldf3>
   13db8:	0011883a 	mov	r8,zero
   13dbc:	02500734 	movhi	r9,16412
   13dc0:	180b883a 	mov	r5,r3
   13dc4:	480f883a 	mov	r7,r9
   13dc8:	1009883a 	mov	r4,r2
   13dcc:	400d883a 	mov	r6,r8
   13dd0:	00189f40 	call	189f4 <__adddf3>
   13dd4:	102d883a 	mov	r22,r2
   13dd8:	00bf3034 	movhi	r2,64704
   13ddc:	10ef883a 	add	r23,r2,r3
   13de0:	d8800d17 	ldw	r2,52(sp)
   13de4:	d8c00e17 	ldw	r3,56(sp)
   13de8:	8029883a 	mov	r20,r16
   13dec:	10bfffc4 	addi	r2,r2,-1
   13df0:	882b883a 	mov	r21,r17
   13df4:	d8800415 	stw	r2,16(sp)
   13df8:	d8c00315 	stw	r3,12(sp)
   13dfc:	003e8306 	br	1380c <_dtoa_r+0xf4c>
   13e00:	d8800117 	ldw	r2,4(sp)
   13e04:	dc001117 	ldw	r16,68(sp)
   13e08:	dc801017 	ldw	r18,64(sp)
   13e0c:	00c00d84 	movi	r3,54
   13e10:	1887c83a 	sub	r3,r3,r2
   13e14:	003d6906 	br	133bc <_dtoa_r+0xafc>
   13e18:	01800044 	movi	r6,1
   13e1c:	3021883a 	mov	r16,r6
   13e20:	d9800f15 	stw	r6,60(sp)
   13e24:	d9802615 	stw	r6,152(sp)
   13e28:	d9800e15 	stw	r6,56(sp)
   13e2c:	003b9306 	br	12c7c <_dtoa_r+0x3bc>
   13e30:	b021883a 	mov	r16,r22
   13e34:	dd800f15 	stw	r22,60(sp)
   13e38:	003b9006 	br	12c7c <_dtoa_r+0x3bc>
   13e3c:	103e221e 	bne	r2,zero,136c8 <_dtoa_r+0xe08>
   13e40:	b880004c 	andi	r2,r23,1
   13e44:	1005003a 	cmpeq	r2,r2,zero
   13e48:	103e1f1e 	bne	r2,zero,136c8 <_dtoa_r+0xe08>
   13e4c:	003e1b06 	br	136bc <_dtoa_r+0xdfc>
   13e50:	d9001617 	ldw	r4,88(sp)
   13e54:	980b883a 	mov	r5,r19
   13e58:	01800284 	movi	r6,10
   13e5c:	000f883a 	mov	r7,zero
   13e60:	00167a80 	call	167a8 <__multadd>
   13e64:	d8c00e17 	ldw	r3,56(sp)
   13e68:	1027883a 	mov	r19,r2
   13e6c:	d8c00f15 	stw	r3,60(sp)
   13e70:	003cd306 	br	131c0 <_dtoa_r+0x900>

00013e74 <_fflush_r>:
   13e74:	defffb04 	addi	sp,sp,-20
   13e78:	dcc00315 	stw	r19,12(sp)
   13e7c:	dc800215 	stw	r18,8(sp)
   13e80:	dfc00415 	stw	ra,16(sp)
   13e84:	dc400115 	stw	r17,4(sp)
   13e88:	dc000015 	stw	r16,0(sp)
   13e8c:	2027883a 	mov	r19,r4
   13e90:	2825883a 	mov	r18,r5
   13e94:	20000226 	beq	r4,zero,13ea0 <_fflush_r+0x2c>
   13e98:	20800e17 	ldw	r2,56(r4)
   13e9c:	10005626 	beq	r2,zero,13ff8 <_fflush_r+0x184>
   13ea0:	9100030b 	ldhu	r4,12(r18)
   13ea4:	20ffffcc 	andi	r3,r4,65535
   13ea8:	18e0001c 	xori	r3,r3,32768
   13eac:	18e00004 	addi	r3,r3,-32768
   13eb0:	1880020c 	andi	r2,r3,8
   13eb4:	1000261e 	bne	r2,zero,13f50 <_fflush_r+0xdc>
   13eb8:	90c00117 	ldw	r3,4(r18)
   13ebc:	20820014 	ori	r2,r4,2048
   13ec0:	9080030d 	sth	r2,12(r18)
   13ec4:	1009883a 	mov	r4,r2
   13ec8:	00c0400e 	bge	zero,r3,13fcc <_fflush_r+0x158>
   13ecc:	92000a17 	ldw	r8,40(r18)
   13ed0:	40004026 	beq	r8,zero,13fd4 <_fflush_r+0x160>
   13ed4:	2084000c 	andi	r2,r4,4096
   13ed8:	10005326 	beq	r2,zero,14028 <_fflush_r+0x1b4>
   13edc:	94001417 	ldw	r16,80(r18)
   13ee0:	9080030b 	ldhu	r2,12(r18)
   13ee4:	1080010c 	andi	r2,r2,4
   13ee8:	1000481e 	bne	r2,zero,1400c <_fflush_r+0x198>
   13eec:	91400717 	ldw	r5,28(r18)
   13ef0:	9809883a 	mov	r4,r19
   13ef4:	800d883a 	mov	r6,r16
   13ef8:	000f883a 	mov	r7,zero
   13efc:	403ee83a 	callr	r8
   13f00:	8080261e 	bne	r16,r2,13f9c <_fflush_r+0x128>
   13f04:	9080030b 	ldhu	r2,12(r18)
   13f08:	91000417 	ldw	r4,16(r18)
   13f0c:	90000115 	stw	zero,4(r18)
   13f10:	10bdffcc 	andi	r2,r2,63487
   13f14:	10ffffcc 	andi	r3,r2,65535
   13f18:	18c4000c 	andi	r3,r3,4096
   13f1c:	9080030d 	sth	r2,12(r18)
   13f20:	91000015 	stw	r4,0(r18)
   13f24:	18002b26 	beq	r3,zero,13fd4 <_fflush_r+0x160>
   13f28:	0007883a 	mov	r3,zero
   13f2c:	1805883a 	mov	r2,r3
   13f30:	94001415 	stw	r16,80(r18)
   13f34:	dfc00417 	ldw	ra,16(sp)
   13f38:	dcc00317 	ldw	r19,12(sp)
   13f3c:	dc800217 	ldw	r18,8(sp)
   13f40:	dc400117 	ldw	r17,4(sp)
   13f44:	dc000017 	ldw	r16,0(sp)
   13f48:	dec00504 	addi	sp,sp,20
   13f4c:	f800283a 	ret
   13f50:	94400417 	ldw	r17,16(r18)
   13f54:	88001f26 	beq	r17,zero,13fd4 <_fflush_r+0x160>
   13f58:	90800017 	ldw	r2,0(r18)
   13f5c:	18c000cc 	andi	r3,r3,3
   13f60:	94400015 	stw	r17,0(r18)
   13f64:	1461c83a 	sub	r16,r2,r17
   13f68:	18002526 	beq	r3,zero,14000 <_fflush_r+0x18c>
   13f6c:	0005883a 	mov	r2,zero
   13f70:	90800215 	stw	r2,8(r18)
   13f74:	0400170e 	bge	zero,r16,13fd4 <_fflush_r+0x160>
   13f78:	90c00917 	ldw	r3,36(r18)
   13f7c:	91400717 	ldw	r5,28(r18)
   13f80:	880d883a 	mov	r6,r17
   13f84:	800f883a 	mov	r7,r16
   13f88:	9809883a 	mov	r4,r19
   13f8c:	183ee83a 	callr	r3
   13f90:	88a3883a 	add	r17,r17,r2
   13f94:	80a1c83a 	sub	r16,r16,r2
   13f98:	00bff616 	blt	zero,r2,13f74 <_fflush_r+0x100>
   13f9c:	9080030b 	ldhu	r2,12(r18)
   13fa0:	00ffffc4 	movi	r3,-1
   13fa4:	10801014 	ori	r2,r2,64
   13fa8:	9080030d 	sth	r2,12(r18)
   13fac:	1805883a 	mov	r2,r3
   13fb0:	dfc00417 	ldw	ra,16(sp)
   13fb4:	dcc00317 	ldw	r19,12(sp)
   13fb8:	dc800217 	ldw	r18,8(sp)
   13fbc:	dc400117 	ldw	r17,4(sp)
   13fc0:	dc000017 	ldw	r16,0(sp)
   13fc4:	dec00504 	addi	sp,sp,20
   13fc8:	f800283a 	ret
   13fcc:	90800f17 	ldw	r2,60(r18)
   13fd0:	00bfbe16 	blt	zero,r2,13ecc <_fflush_r+0x58>
   13fd4:	0007883a 	mov	r3,zero
   13fd8:	1805883a 	mov	r2,r3
   13fdc:	dfc00417 	ldw	ra,16(sp)
   13fe0:	dcc00317 	ldw	r19,12(sp)
   13fe4:	dc800217 	ldw	r18,8(sp)
   13fe8:	dc400117 	ldw	r17,4(sp)
   13fec:	dc000017 	ldw	r16,0(sp)
   13ff0:	dec00504 	addi	sp,sp,20
   13ff4:	f800283a 	ret
   13ff8:	001410c0 	call	1410c <__sinit>
   13ffc:	003fa806 	br	13ea0 <_fflush_r+0x2c>
   14000:	90800517 	ldw	r2,20(r18)
   14004:	90800215 	stw	r2,8(r18)
   14008:	003fda06 	br	13f74 <_fflush_r+0x100>
   1400c:	90800117 	ldw	r2,4(r18)
   14010:	90c00c17 	ldw	r3,48(r18)
   14014:	80a1c83a 	sub	r16,r16,r2
   14018:	183fb426 	beq	r3,zero,13eec <_fflush_r+0x78>
   1401c:	90800f17 	ldw	r2,60(r18)
   14020:	80a1c83a 	sub	r16,r16,r2
   14024:	003fb106 	br	13eec <_fflush_r+0x78>
   14028:	91400717 	ldw	r5,28(r18)
   1402c:	9809883a 	mov	r4,r19
   14030:	000d883a 	mov	r6,zero
   14034:	01c00044 	movi	r7,1
   14038:	403ee83a 	callr	r8
   1403c:	1021883a 	mov	r16,r2
   14040:	00bfffc4 	movi	r2,-1
   14044:	80800226 	beq	r16,r2,14050 <_fflush_r+0x1dc>
   14048:	92000a17 	ldw	r8,40(r18)
   1404c:	003fa406 	br	13ee0 <_fflush_r+0x6c>
   14050:	98c00017 	ldw	r3,0(r19)
   14054:	00800744 	movi	r2,29
   14058:	18bfde26 	beq	r3,r2,13fd4 <_fflush_r+0x160>
   1405c:	9080030b 	ldhu	r2,12(r18)
   14060:	8007883a 	mov	r3,r16
   14064:	10801014 	ori	r2,r2,64
   14068:	9080030d 	sth	r2,12(r18)
   1406c:	003fcf06 	br	13fac <_fflush_r+0x138>

00014070 <fflush>:
   14070:	01400074 	movhi	r5,1
   14074:	294f9d04 	addi	r5,r5,15988
   14078:	2007883a 	mov	r3,r4
   1407c:	20000526 	beq	r4,zero,14094 <fflush+0x24>
   14080:	00800134 	movhi	r2,4
   14084:	10a76b04 	addi	r2,r2,-25172
   14088:	11000017 	ldw	r4,0(r2)
   1408c:	180b883a 	mov	r5,r3
   14090:	0013e741 	jmpi	13e74 <_fflush_r>
   14094:	00800134 	movhi	r2,4
   14098:	10a76c04 	addi	r2,r2,-25168
   1409c:	11000017 	ldw	r4,0(r2)
   140a0:	0014c741 	jmpi	14c74 <_fwalk_reent>

000140a4 <std>:
   140a4:	00800074 	movhi	r2,1
   140a8:	109c7a04 	addi	r2,r2,29160
   140ac:	20800b15 	stw	r2,44(r4)
   140b0:	00800074 	movhi	r2,1
   140b4:	109cb504 	addi	r2,r2,29396
   140b8:	20800815 	stw	r2,32(r4)
   140bc:	00c00074 	movhi	r3,1
   140c0:	18dc9604 	addi	r3,r3,29272
   140c4:	00800074 	movhi	r2,1
   140c8:	109c7c04 	addi	r2,r2,29168
   140cc:	2140030d 	sth	r5,12(r4)
   140d0:	2180038d 	sth	r6,14(r4)
   140d4:	20c00915 	stw	r3,36(r4)
   140d8:	20800a15 	stw	r2,40(r4)
   140dc:	20000015 	stw	zero,0(r4)
   140e0:	20000115 	stw	zero,4(r4)
   140e4:	20000215 	stw	zero,8(r4)
   140e8:	20000415 	stw	zero,16(r4)
   140ec:	20000515 	stw	zero,20(r4)
   140f0:	20000615 	stw	zero,24(r4)
   140f4:	21000715 	stw	r4,28(r4)
   140f8:	f800283a 	ret

000140fc <__sfp_lock_acquire>:
   140fc:	f800283a 	ret

00014100 <__sfp_lock_release>:
   14100:	f800283a 	ret

00014104 <__sinit_lock_acquire>:
   14104:	f800283a 	ret

00014108 <__sinit_lock_release>:
   14108:	f800283a 	ret

0001410c <__sinit>:
   1410c:	20800e17 	ldw	r2,56(r4)
   14110:	defffd04 	addi	sp,sp,-12
   14114:	dc400115 	stw	r17,4(sp)
   14118:	dc000015 	stw	r16,0(sp)
   1411c:	dfc00215 	stw	ra,8(sp)
   14120:	04400044 	movi	r17,1
   14124:	01400104 	movi	r5,4
   14128:	000d883a 	mov	r6,zero
   1412c:	2021883a 	mov	r16,r4
   14130:	2200bb04 	addi	r8,r4,748
   14134:	200f883a 	mov	r7,r4
   14138:	10000526 	beq	r2,zero,14150 <__sinit+0x44>
   1413c:	dfc00217 	ldw	ra,8(sp)
   14140:	dc400117 	ldw	r17,4(sp)
   14144:	dc000017 	ldw	r16,0(sp)
   14148:	dec00304 	addi	sp,sp,12
   1414c:	f800283a 	ret
   14150:	21000117 	ldw	r4,4(r4)
   14154:	00800074 	movhi	r2,1
   14158:	10907c04 	addi	r2,r2,16880
   1415c:	00c000c4 	movi	r3,3
   14160:	80800f15 	stw	r2,60(r16)
   14164:	80c0b915 	stw	r3,740(r16)
   14168:	8200ba15 	stw	r8,744(r16)
   1416c:	84400e15 	stw	r17,56(r16)
   14170:	8000b815 	stw	zero,736(r16)
   14174:	00140a40 	call	140a4 <std>
   14178:	81000217 	ldw	r4,8(r16)
   1417c:	880d883a 	mov	r6,r17
   14180:	800f883a 	mov	r7,r16
   14184:	01400284 	movi	r5,10
   14188:	00140a40 	call	140a4 <std>
   1418c:	81000317 	ldw	r4,12(r16)
   14190:	800f883a 	mov	r7,r16
   14194:	01400484 	movi	r5,18
   14198:	01800084 	movi	r6,2
   1419c:	dfc00217 	ldw	ra,8(sp)
   141a0:	dc400117 	ldw	r17,4(sp)
   141a4:	dc000017 	ldw	r16,0(sp)
   141a8:	dec00304 	addi	sp,sp,12
   141ac:	00140a41 	jmpi	140a4 <std>

000141b0 <__fp_lock>:
   141b0:	0005883a 	mov	r2,zero
   141b4:	f800283a 	ret

000141b8 <__fp_unlock>:
   141b8:	0005883a 	mov	r2,zero
   141bc:	f800283a 	ret

000141c0 <__fp_unlock_all>:
   141c0:	00800134 	movhi	r2,4
   141c4:	10a76b04 	addi	r2,r2,-25172
   141c8:	11000017 	ldw	r4,0(r2)
   141cc:	01400074 	movhi	r5,1
   141d0:	29506e04 	addi	r5,r5,16824
   141d4:	0014d3c1 	jmpi	14d3c <_fwalk>

000141d8 <__fp_lock_all>:
   141d8:	00800134 	movhi	r2,4
   141dc:	10a76b04 	addi	r2,r2,-25172
   141e0:	11000017 	ldw	r4,0(r2)
   141e4:	01400074 	movhi	r5,1
   141e8:	29506c04 	addi	r5,r5,16816
   141ec:	0014d3c1 	jmpi	14d3c <_fwalk>

000141f0 <_cleanup_r>:
   141f0:	01400074 	movhi	r5,1
   141f4:	295dac04 	addi	r5,r5,30384
   141f8:	0014d3c1 	jmpi	14d3c <_fwalk>

000141fc <_cleanup>:
   141fc:	00800134 	movhi	r2,4
   14200:	10a76c04 	addi	r2,r2,-25168
   14204:	11000017 	ldw	r4,0(r2)
   14208:	00141f01 	jmpi	141f0 <_cleanup_r>

0001420c <__sfmoreglue>:
   1420c:	defffc04 	addi	sp,sp,-16
   14210:	dc000015 	stw	r16,0(sp)
   14214:	2821883a 	mov	r16,r5
   14218:	dc400115 	stw	r17,4(sp)
   1421c:	01401704 	movi	r5,92
   14220:	2023883a 	mov	r17,r4
   14224:	8009883a 	mov	r4,r16
   14228:	dfc00315 	stw	ra,12(sp)
   1422c:	dcc00215 	stw	r19,8(sp)
   14230:	00197dc0 	call	197dc <__mulsi3>
   14234:	11400304 	addi	r5,r2,12
   14238:	8809883a 	mov	r4,r17
   1423c:	1027883a 	mov	r19,r2
   14240:	001504c0 	call	1504c <_malloc_r>
   14244:	10c00304 	addi	r3,r2,12
   14248:	1023883a 	mov	r17,r2
   1424c:	1809883a 	mov	r4,r3
   14250:	980d883a 	mov	r6,r19
   14254:	000b883a 	mov	r5,zero
   14258:	10000b26 	beq	r2,zero,14288 <__sfmoreglue+0x7c>
   1425c:	14000115 	stw	r16,4(r2)
   14260:	10c00215 	stw	r3,8(r2)
   14264:	10000015 	stw	zero,0(r2)
   14268:	00159f00 	call	159f0 <memset>
   1426c:	8805883a 	mov	r2,r17
   14270:	dfc00317 	ldw	ra,12(sp)
   14274:	dcc00217 	ldw	r19,8(sp)
   14278:	dc400117 	ldw	r17,4(sp)
   1427c:	dc000017 	ldw	r16,0(sp)
   14280:	dec00404 	addi	sp,sp,16
   14284:	f800283a 	ret
   14288:	0023883a 	mov	r17,zero
   1428c:	8805883a 	mov	r2,r17
   14290:	dfc00317 	ldw	ra,12(sp)
   14294:	dcc00217 	ldw	r19,8(sp)
   14298:	dc400117 	ldw	r17,4(sp)
   1429c:	dc000017 	ldw	r16,0(sp)
   142a0:	dec00404 	addi	sp,sp,16
   142a4:	f800283a 	ret

000142a8 <__sfp>:
   142a8:	defffd04 	addi	sp,sp,-12
   142ac:	00800134 	movhi	r2,4
   142b0:	10a76c04 	addi	r2,r2,-25168
   142b4:	dc000015 	stw	r16,0(sp)
   142b8:	14000017 	ldw	r16,0(r2)
   142bc:	dc400115 	stw	r17,4(sp)
   142c0:	dfc00215 	stw	ra,8(sp)
   142c4:	80800e17 	ldw	r2,56(r16)
   142c8:	2023883a 	mov	r17,r4
   142cc:	10002626 	beq	r2,zero,14368 <__sfp+0xc0>
   142d0:	8400b804 	addi	r16,r16,736
   142d4:	80800117 	ldw	r2,4(r16)
   142d8:	81000217 	ldw	r4,8(r16)
   142dc:	10ffffc4 	addi	r3,r2,-1
   142e0:	18000916 	blt	r3,zero,14308 <__sfp+0x60>
   142e4:	2080030f 	ldh	r2,12(r4)
   142e8:	10000b26 	beq	r2,zero,14318 <__sfp+0x70>
   142ec:	017fffc4 	movi	r5,-1
   142f0:	00000206 	br	142fc <__sfp+0x54>
   142f4:	2080030f 	ldh	r2,12(r4)
   142f8:	10000726 	beq	r2,zero,14318 <__sfp+0x70>
   142fc:	18ffffc4 	addi	r3,r3,-1
   14300:	21001704 	addi	r4,r4,92
   14304:	197ffb1e 	bne	r3,r5,142f4 <__sfp+0x4c>
   14308:	80800017 	ldw	r2,0(r16)
   1430c:	10001926 	beq	r2,zero,14374 <__sfp+0xcc>
   14310:	1021883a 	mov	r16,r2
   14314:	003fef06 	br	142d4 <__sfp+0x2c>
   14318:	00bfffc4 	movi	r2,-1
   1431c:	00c00044 	movi	r3,1
   14320:	2080038d 	sth	r2,14(r4)
   14324:	20c0030d 	sth	r3,12(r4)
   14328:	20000015 	stw	zero,0(r4)
   1432c:	20000215 	stw	zero,8(r4)
   14330:	20000115 	stw	zero,4(r4)
   14334:	20000415 	stw	zero,16(r4)
   14338:	20000515 	stw	zero,20(r4)
   1433c:	20000615 	stw	zero,24(r4)
   14340:	20000c15 	stw	zero,48(r4)
   14344:	20000d15 	stw	zero,52(r4)
   14348:	20001115 	stw	zero,68(r4)
   1434c:	20001215 	stw	zero,72(r4)
   14350:	2005883a 	mov	r2,r4
   14354:	dfc00217 	ldw	ra,8(sp)
   14358:	dc400117 	ldw	r17,4(sp)
   1435c:	dc000017 	ldw	r16,0(sp)
   14360:	dec00304 	addi	sp,sp,12
   14364:	f800283a 	ret
   14368:	8009883a 	mov	r4,r16
   1436c:	001410c0 	call	1410c <__sinit>
   14370:	003fd706 	br	142d0 <__sfp+0x28>
   14374:	8809883a 	mov	r4,r17
   14378:	01400104 	movi	r5,4
   1437c:	001420c0 	call	1420c <__sfmoreglue>
   14380:	80800015 	stw	r2,0(r16)
   14384:	103fe21e 	bne	r2,zero,14310 <__sfp+0x68>
   14388:	00800304 	movi	r2,12
   1438c:	0009883a 	mov	r4,zero
   14390:	88800015 	stw	r2,0(r17)
   14394:	003fee06 	br	14350 <__sfp+0xa8>

00014398 <_malloc_trim_r>:
   14398:	defffb04 	addi	sp,sp,-20
   1439c:	dcc00315 	stw	r19,12(sp)
   143a0:	04c00134 	movhi	r19,4
   143a4:	9ce1e704 	addi	r19,r19,-30820
   143a8:	dc800215 	stw	r18,8(sp)
   143ac:	dc400115 	stw	r17,4(sp)
   143b0:	dc000015 	stw	r16,0(sp)
   143b4:	2823883a 	mov	r17,r5
   143b8:	2025883a 	mov	r18,r4
   143bc:	dfc00415 	stw	ra,16(sp)
   143c0:	001a5600 	call	1a560 <__malloc_lock>
   143c4:	98800217 	ldw	r2,8(r19)
   143c8:	9009883a 	mov	r4,r18
   143cc:	000b883a 	mov	r5,zero
   143d0:	10c00117 	ldw	r3,4(r2)
   143d4:	00bfff04 	movi	r2,-4
   143d8:	18a0703a 	and	r16,r3,r2
   143dc:	8463c83a 	sub	r17,r16,r17
   143e0:	8c43fbc4 	addi	r17,r17,4079
   143e4:	8822d33a 	srli	r17,r17,12
   143e8:	0083ffc4 	movi	r2,4095
   143ec:	8c7fffc4 	addi	r17,r17,-1
   143f0:	8822933a 	slli	r17,r17,12
   143f4:	1440060e 	bge	r2,r17,14410 <_malloc_trim_r+0x78>
   143f8:	00171780 	call	17178 <_sbrk_r>
   143fc:	98c00217 	ldw	r3,8(r19)
   14400:	9009883a 	mov	r4,r18
   14404:	044bc83a 	sub	r5,zero,r17
   14408:	80c7883a 	add	r3,r16,r3
   1440c:	10c00926 	beq	r2,r3,14434 <_malloc_trim_r+0x9c>
   14410:	001a5800 	call	1a580 <__malloc_unlock>
   14414:	0005883a 	mov	r2,zero
   14418:	dfc00417 	ldw	ra,16(sp)
   1441c:	dcc00317 	ldw	r19,12(sp)
   14420:	dc800217 	ldw	r18,8(sp)
   14424:	dc400117 	ldw	r17,4(sp)
   14428:	dc000017 	ldw	r16,0(sp)
   1442c:	dec00504 	addi	sp,sp,20
   14430:	f800283a 	ret
   14434:	9009883a 	mov	r4,r18
   14438:	00171780 	call	17178 <_sbrk_r>
   1443c:	844dc83a 	sub	r6,r16,r17
   14440:	00ffffc4 	movi	r3,-1
   14444:	9009883a 	mov	r4,r18
   14448:	000b883a 	mov	r5,zero
   1444c:	01c00134 	movhi	r7,4
   14450:	39e78d04 	addi	r7,r7,-25036
   14454:	31800054 	ori	r6,r6,1
   14458:	10c00926 	beq	r2,r3,14480 <_malloc_trim_r+0xe8>
   1445c:	38800017 	ldw	r2,0(r7)
   14460:	98c00217 	ldw	r3,8(r19)
   14464:	9009883a 	mov	r4,r18
   14468:	1445c83a 	sub	r2,r2,r17
   1446c:	38800015 	stw	r2,0(r7)
   14470:	19800115 	stw	r6,4(r3)
   14474:	001a5800 	call	1a580 <__malloc_unlock>
   14478:	00800044 	movi	r2,1
   1447c:	003fe606 	br	14418 <_malloc_trim_r+0x80>
   14480:	00171780 	call	17178 <_sbrk_r>
   14484:	99800217 	ldw	r6,8(r19)
   14488:	100f883a 	mov	r7,r2
   1448c:	9009883a 	mov	r4,r18
   14490:	1187c83a 	sub	r3,r2,r6
   14494:	008003c4 	movi	r2,15
   14498:	19400054 	ori	r5,r3,1
   1449c:	10ffdc0e 	bge	r2,r3,14410 <_malloc_trim_r+0x78>
   144a0:	00800134 	movhi	r2,4
   144a4:	10a77004 	addi	r2,r2,-25152
   144a8:	10c00017 	ldw	r3,0(r2)
   144ac:	00800134 	movhi	r2,4
   144b0:	10a78d04 	addi	r2,r2,-25036
   144b4:	31400115 	stw	r5,4(r6)
   144b8:	38c7c83a 	sub	r3,r7,r3
   144bc:	10c00015 	stw	r3,0(r2)
   144c0:	003fd306 	br	14410 <_malloc_trim_r+0x78>

000144c4 <_free_r>:
   144c4:	defffd04 	addi	sp,sp,-12
   144c8:	dc400115 	stw	r17,4(sp)
   144cc:	dc000015 	stw	r16,0(sp)
   144d0:	dfc00215 	stw	ra,8(sp)
   144d4:	2821883a 	mov	r16,r5
   144d8:	2023883a 	mov	r17,r4
   144dc:	28005a26 	beq	r5,zero,14648 <_free_r+0x184>
   144e0:	001a5600 	call	1a560 <__malloc_lock>
   144e4:	823ffe04 	addi	r8,r16,-8
   144e8:	41400117 	ldw	r5,4(r8)
   144ec:	00bfff84 	movi	r2,-2
   144f0:	02800134 	movhi	r10,4
   144f4:	52a1e704 	addi	r10,r10,-30820
   144f8:	288e703a 	and	r7,r5,r2
   144fc:	41cd883a 	add	r6,r8,r7
   14500:	30c00117 	ldw	r3,4(r6)
   14504:	51000217 	ldw	r4,8(r10)
   14508:	00bfff04 	movi	r2,-4
   1450c:	1892703a 	and	r9,r3,r2
   14510:	5017883a 	mov	r11,r10
   14514:	31006726 	beq	r6,r4,146b4 <_free_r+0x1f0>
   14518:	2880004c 	andi	r2,r5,1
   1451c:	1005003a 	cmpeq	r2,r2,zero
   14520:	32400115 	stw	r9,4(r6)
   14524:	10001a1e 	bne	r2,zero,14590 <_free_r+0xcc>
   14528:	000b883a 	mov	r5,zero
   1452c:	3247883a 	add	r3,r6,r9
   14530:	18800117 	ldw	r2,4(r3)
   14534:	1080004c 	andi	r2,r2,1
   14538:	1000231e 	bne	r2,zero,145c8 <_free_r+0x104>
   1453c:	280ac03a 	cmpne	r5,r5,zero
   14540:	3a4f883a 	add	r7,r7,r9
   14544:	2800451e 	bne	r5,zero,1465c <_free_r+0x198>
   14548:	31000217 	ldw	r4,8(r6)
   1454c:	00800134 	movhi	r2,4
   14550:	10a1e904 	addi	r2,r2,-30812
   14554:	20807b26 	beq	r4,r2,14744 <_free_r+0x280>
   14558:	30800317 	ldw	r2,12(r6)
   1455c:	3a07883a 	add	r3,r7,r8
   14560:	19c00015 	stw	r7,0(r3)
   14564:	11000215 	stw	r4,8(r2)
   14568:	20800315 	stw	r2,12(r4)
   1456c:	38800054 	ori	r2,r7,1
   14570:	40800115 	stw	r2,4(r8)
   14574:	28001a26 	beq	r5,zero,145e0 <_free_r+0x11c>
   14578:	8809883a 	mov	r4,r17
   1457c:	dfc00217 	ldw	ra,8(sp)
   14580:	dc400117 	ldw	r17,4(sp)
   14584:	dc000017 	ldw	r16,0(sp)
   14588:	dec00304 	addi	sp,sp,12
   1458c:	001a5801 	jmpi	1a580 <__malloc_unlock>
   14590:	80bffe17 	ldw	r2,-8(r16)
   14594:	50c00204 	addi	r3,r10,8
   14598:	4091c83a 	sub	r8,r8,r2
   1459c:	41000217 	ldw	r4,8(r8)
   145a0:	388f883a 	add	r7,r7,r2
   145a4:	20c06126 	beq	r4,r3,1472c <_free_r+0x268>
   145a8:	40800317 	ldw	r2,12(r8)
   145ac:	3247883a 	add	r3,r6,r9
   145b0:	000b883a 	mov	r5,zero
   145b4:	11000215 	stw	r4,8(r2)
   145b8:	20800315 	stw	r2,12(r4)
   145bc:	18800117 	ldw	r2,4(r3)
   145c0:	1080004c 	andi	r2,r2,1
   145c4:	103fdd26 	beq	r2,zero,1453c <_free_r+0x78>
   145c8:	38800054 	ori	r2,r7,1
   145cc:	3a07883a 	add	r3,r7,r8
   145d0:	280ac03a 	cmpne	r5,r5,zero
   145d4:	40800115 	stw	r2,4(r8)
   145d8:	19c00015 	stw	r7,0(r3)
   145dc:	283fe61e 	bne	r5,zero,14578 <_free_r+0xb4>
   145e0:	00807fc4 	movi	r2,511
   145e4:	11c01f2e 	bgeu	r2,r7,14664 <_free_r+0x1a0>
   145e8:	3806d27a 	srli	r3,r7,9
   145ec:	1800481e 	bne	r3,zero,14710 <_free_r+0x24c>
   145f0:	3804d0fa 	srli	r2,r7,3
   145f4:	100690fa 	slli	r3,r2,3
   145f8:	1acd883a 	add	r6,r3,r11
   145fc:	31400217 	ldw	r5,8(r6)
   14600:	31405926 	beq	r6,r5,14768 <_free_r+0x2a4>
   14604:	28800117 	ldw	r2,4(r5)
   14608:	00ffff04 	movi	r3,-4
   1460c:	10c4703a 	and	r2,r2,r3
   14610:	3880022e 	bgeu	r7,r2,1461c <_free_r+0x158>
   14614:	29400217 	ldw	r5,8(r5)
   14618:	317ffa1e 	bne	r6,r5,14604 <_free_r+0x140>
   1461c:	29800317 	ldw	r6,12(r5)
   14620:	41800315 	stw	r6,12(r8)
   14624:	41400215 	stw	r5,8(r8)
   14628:	8809883a 	mov	r4,r17
   1462c:	2a000315 	stw	r8,12(r5)
   14630:	32000215 	stw	r8,8(r6)
   14634:	dfc00217 	ldw	ra,8(sp)
   14638:	dc400117 	ldw	r17,4(sp)
   1463c:	dc000017 	ldw	r16,0(sp)
   14640:	dec00304 	addi	sp,sp,12
   14644:	001a5801 	jmpi	1a580 <__malloc_unlock>
   14648:	dfc00217 	ldw	ra,8(sp)
   1464c:	dc400117 	ldw	r17,4(sp)
   14650:	dc000017 	ldw	r16,0(sp)
   14654:	dec00304 	addi	sp,sp,12
   14658:	f800283a 	ret
   1465c:	31000217 	ldw	r4,8(r6)
   14660:	003fbd06 	br	14558 <_free_r+0x94>
   14664:	3806d0fa 	srli	r3,r7,3
   14668:	00800044 	movi	r2,1
   1466c:	51400117 	ldw	r5,4(r10)
   14670:	180890fa 	slli	r4,r3,3
   14674:	1807d0ba 	srai	r3,r3,2
   14678:	22c9883a 	add	r4,r4,r11
   1467c:	21800217 	ldw	r6,8(r4)
   14680:	10c4983a 	sll	r2,r2,r3
   14684:	41000315 	stw	r4,12(r8)
   14688:	41800215 	stw	r6,8(r8)
   1468c:	288ab03a 	or	r5,r5,r2
   14690:	22000215 	stw	r8,8(r4)
   14694:	8809883a 	mov	r4,r17
   14698:	51400115 	stw	r5,4(r10)
   1469c:	32000315 	stw	r8,12(r6)
   146a0:	dfc00217 	ldw	ra,8(sp)
   146a4:	dc400117 	ldw	r17,4(sp)
   146a8:	dc000017 	ldw	r16,0(sp)
   146ac:	dec00304 	addi	sp,sp,12
   146b0:	001a5801 	jmpi	1a580 <__malloc_unlock>
   146b4:	2880004c 	andi	r2,r5,1
   146b8:	3a4d883a 	add	r6,r7,r9
   146bc:	1000071e 	bne	r2,zero,146dc <_free_r+0x218>
   146c0:	80bffe17 	ldw	r2,-8(r16)
   146c4:	4091c83a 	sub	r8,r8,r2
   146c8:	41000317 	ldw	r4,12(r8)
   146cc:	40c00217 	ldw	r3,8(r8)
   146d0:	308d883a 	add	r6,r6,r2
   146d4:	20c00215 	stw	r3,8(r4)
   146d8:	19000315 	stw	r4,12(r3)
   146dc:	00800134 	movhi	r2,4
   146e0:	10a76f04 	addi	r2,r2,-25156
   146e4:	11000017 	ldw	r4,0(r2)
   146e8:	30c00054 	ori	r3,r6,1
   146ec:	52000215 	stw	r8,8(r10)
   146f0:	40c00115 	stw	r3,4(r8)
   146f4:	313fa036 	bltu	r6,r4,14578 <_free_r+0xb4>
   146f8:	00800134 	movhi	r2,4
   146fc:	10a78304 	addi	r2,r2,-25076
   14700:	11400017 	ldw	r5,0(r2)
   14704:	8809883a 	mov	r4,r17
   14708:	00143980 	call	14398 <_malloc_trim_r>
   1470c:	003f9a06 	br	14578 <_free_r+0xb4>
   14710:	00800104 	movi	r2,4
   14714:	10c0072e 	bgeu	r2,r3,14734 <_free_r+0x270>
   14718:	00800504 	movi	r2,20
   1471c:	10c01936 	bltu	r2,r3,14784 <_free_r+0x2c0>
   14720:	188016c4 	addi	r2,r3,91
   14724:	100690fa 	slli	r3,r2,3
   14728:	003fb306 	br	145f8 <_free_r+0x134>
   1472c:	01400044 	movi	r5,1
   14730:	003f7e06 	br	1452c <_free_r+0x68>
   14734:	3804d1ba 	srli	r2,r7,6
   14738:	10800e04 	addi	r2,r2,56
   1473c:	100690fa 	slli	r3,r2,3
   14740:	003fad06 	br	145f8 <_free_r+0x134>
   14744:	22000315 	stw	r8,12(r4)
   14748:	22000215 	stw	r8,8(r4)
   1474c:	3a05883a 	add	r2,r7,r8
   14750:	38c00054 	ori	r3,r7,1
   14754:	11c00015 	stw	r7,0(r2)
   14758:	41000215 	stw	r4,8(r8)
   1475c:	40c00115 	stw	r3,4(r8)
   14760:	41000315 	stw	r4,12(r8)
   14764:	003f8406 	br	14578 <_free_r+0xb4>
   14768:	1005d0ba 	srai	r2,r2,2
   1476c:	00c00044 	movi	r3,1
   14770:	51000117 	ldw	r4,4(r10)
   14774:	1886983a 	sll	r3,r3,r2
   14778:	20c8b03a 	or	r4,r4,r3
   1477c:	51000115 	stw	r4,4(r10)
   14780:	003fa706 	br	14620 <_free_r+0x15c>
   14784:	00801504 	movi	r2,84
   14788:	10c00436 	bltu	r2,r3,1479c <_free_r+0x2d8>
   1478c:	3804d33a 	srli	r2,r7,12
   14790:	10801b84 	addi	r2,r2,110
   14794:	100690fa 	slli	r3,r2,3
   14798:	003f9706 	br	145f8 <_free_r+0x134>
   1479c:	00805504 	movi	r2,340
   147a0:	10c00436 	bltu	r2,r3,147b4 <_free_r+0x2f0>
   147a4:	3804d3fa 	srli	r2,r7,15
   147a8:	10801dc4 	addi	r2,r2,119
   147ac:	100690fa 	slli	r3,r2,3
   147b0:	003f9106 	br	145f8 <_free_r+0x134>
   147b4:	00815504 	movi	r2,1364
   147b8:	10c0032e 	bgeu	r2,r3,147c8 <_free_r+0x304>
   147bc:	00801f84 	movi	r2,126
   147c0:	00c0fc04 	movi	r3,1008
   147c4:	003f8c06 	br	145f8 <_free_r+0x134>
   147c8:	3804d4ba 	srli	r2,r7,18
   147cc:	10801f04 	addi	r2,r2,124
   147d0:	100690fa 	slli	r3,r2,3
   147d4:	003f8806 	br	145f8 <_free_r+0x134>

000147d8 <__sfvwrite_r>:
   147d8:	30800217 	ldw	r2,8(r6)
   147dc:	defff504 	addi	sp,sp,-44
   147e0:	df000915 	stw	fp,36(sp)
   147e4:	dd800715 	stw	r22,28(sp)
   147e8:	dc800315 	stw	r18,12(sp)
   147ec:	dfc00a15 	stw	ra,40(sp)
   147f0:	ddc00815 	stw	r23,32(sp)
   147f4:	dd400615 	stw	r21,24(sp)
   147f8:	dd000515 	stw	r20,20(sp)
   147fc:	dcc00415 	stw	r19,16(sp)
   14800:	dc400215 	stw	r17,8(sp)
   14804:	dc000115 	stw	r16,4(sp)
   14808:	302d883a 	mov	r22,r6
   1480c:	2039883a 	mov	fp,r4
   14810:	2825883a 	mov	r18,r5
   14814:	10001c26 	beq	r2,zero,14888 <__sfvwrite_r+0xb0>
   14818:	29c0030b 	ldhu	r7,12(r5)
   1481c:	3880020c 	andi	r2,r7,8
   14820:	10002726 	beq	r2,zero,148c0 <__sfvwrite_r+0xe8>
   14824:	28800417 	ldw	r2,16(r5)
   14828:	10002526 	beq	r2,zero,148c0 <__sfvwrite_r+0xe8>
   1482c:	3880008c 	andi	r2,r7,2
   14830:	b5400017 	ldw	r21,0(r22)
   14834:	10002826 	beq	r2,zero,148d8 <__sfvwrite_r+0x100>
   14838:	0021883a 	mov	r16,zero
   1483c:	0023883a 	mov	r17,zero
   14840:	880d883a 	mov	r6,r17
   14844:	e009883a 	mov	r4,fp
   14848:	00810004 	movi	r2,1024
   1484c:	80006e26 	beq	r16,zero,14a08 <__sfvwrite_r+0x230>
   14850:	800f883a 	mov	r7,r16
   14854:	91400717 	ldw	r5,28(r18)
   14858:	1400012e 	bgeu	r2,r16,14860 <__sfvwrite_r+0x88>
   1485c:	100f883a 	mov	r7,r2
   14860:	90c00917 	ldw	r3,36(r18)
   14864:	183ee83a 	callr	r3
   14868:	1007883a 	mov	r3,r2
   1486c:	80a1c83a 	sub	r16,r16,r2
   14870:	88a3883a 	add	r17,r17,r2
   14874:	00806d0e 	bge	zero,r2,14a2c <__sfvwrite_r+0x254>
   14878:	b0800217 	ldw	r2,8(r22)
   1487c:	10c5c83a 	sub	r2,r2,r3
   14880:	b0800215 	stw	r2,8(r22)
   14884:	103fee1e 	bne	r2,zero,14840 <__sfvwrite_r+0x68>
   14888:	0009883a 	mov	r4,zero
   1488c:	2005883a 	mov	r2,r4
   14890:	dfc00a17 	ldw	ra,40(sp)
   14894:	df000917 	ldw	fp,36(sp)
   14898:	ddc00817 	ldw	r23,32(sp)
   1489c:	dd800717 	ldw	r22,28(sp)
   148a0:	dd400617 	ldw	r21,24(sp)
   148a4:	dd000517 	ldw	r20,20(sp)
   148a8:	dcc00417 	ldw	r19,16(sp)
   148ac:	dc800317 	ldw	r18,12(sp)
   148b0:	dc400217 	ldw	r17,8(sp)
   148b4:	dc000117 	ldw	r16,4(sp)
   148b8:	dec00b04 	addi	sp,sp,44
   148bc:	f800283a 	ret
   148c0:	00125400 	call	12540 <__swsetup_r>
   148c4:	1000e41e 	bne	r2,zero,14c58 <__sfvwrite_r+0x480>
   148c8:	91c0030b 	ldhu	r7,12(r18)
   148cc:	b5400017 	ldw	r21,0(r22)
   148d0:	3880008c 	andi	r2,r7,2
   148d4:	103fd81e 	bne	r2,zero,14838 <__sfvwrite_r+0x60>
   148d8:	3880004c 	andi	r2,r7,1
   148dc:	1005003a 	cmpeq	r2,r2,zero
   148e0:	10005726 	beq	r2,zero,14a40 <__sfvwrite_r+0x268>
   148e4:	0029883a 	mov	r20,zero
   148e8:	002f883a 	mov	r23,zero
   148ec:	a0004226 	beq	r20,zero,149f8 <__sfvwrite_r+0x220>
   148f0:	3880800c 	andi	r2,r7,512
   148f4:	94000217 	ldw	r16,8(r18)
   148f8:	10008b26 	beq	r2,zero,14b28 <__sfvwrite_r+0x350>
   148fc:	800d883a 	mov	r6,r16
   14900:	a400a536 	bltu	r20,r16,14b98 <__sfvwrite_r+0x3c0>
   14904:	3881200c 	andi	r2,r7,1152
   14908:	10002726 	beq	r2,zero,149a8 <__sfvwrite_r+0x1d0>
   1490c:	90800517 	ldw	r2,20(r18)
   14910:	92000417 	ldw	r8,16(r18)
   14914:	91400017 	ldw	r5,0(r18)
   14918:	1087883a 	add	r3,r2,r2
   1491c:	1887883a 	add	r3,r3,r2
   14920:	1808d7fa 	srli	r4,r3,31
   14924:	2a21c83a 	sub	r16,r5,r8
   14928:	80800044 	addi	r2,r16,1
   1492c:	20c9883a 	add	r4,r4,r3
   14930:	2027d07a 	srai	r19,r4,1
   14934:	a085883a 	add	r2,r20,r2
   14938:	980d883a 	mov	r6,r19
   1493c:	9880022e 	bgeu	r19,r2,14948 <__sfvwrite_r+0x170>
   14940:	1027883a 	mov	r19,r2
   14944:	100d883a 	mov	r6,r2
   14948:	3881000c 	andi	r2,r7,1024
   1494c:	1000b826 	beq	r2,zero,14c30 <__sfvwrite_r+0x458>
   14950:	300b883a 	mov	r5,r6
   14954:	e009883a 	mov	r4,fp
   14958:	001504c0 	call	1504c <_malloc_r>
   1495c:	10003126 	beq	r2,zero,14a24 <__sfvwrite_r+0x24c>
   14960:	91400417 	ldw	r5,16(r18)
   14964:	1009883a 	mov	r4,r2
   14968:	800d883a 	mov	r6,r16
   1496c:	1023883a 	mov	r17,r2
   14970:	00158700 	call	15870 <memcpy>
   14974:	90c0030b 	ldhu	r3,12(r18)
   14978:	00beffc4 	movi	r2,-1025
   1497c:	1886703a 	and	r3,r3,r2
   14980:	18c02014 	ori	r3,r3,128
   14984:	90c0030d 	sth	r3,12(r18)
   14988:	9c07c83a 	sub	r3,r19,r16
   1498c:	8c05883a 	add	r2,r17,r16
   14990:	a00d883a 	mov	r6,r20
   14994:	a021883a 	mov	r16,r20
   14998:	90800015 	stw	r2,0(r18)
   1499c:	90c00215 	stw	r3,8(r18)
   149a0:	94400415 	stw	r17,16(r18)
   149a4:	94c00515 	stw	r19,20(r18)
   149a8:	91000017 	ldw	r4,0(r18)
   149ac:	b80b883a 	mov	r5,r23
   149b0:	a023883a 	mov	r17,r20
   149b4:	00159100 	call	15910 <memmove>
   149b8:	90c00217 	ldw	r3,8(r18)
   149bc:	90800017 	ldw	r2,0(r18)
   149c0:	a027883a 	mov	r19,r20
   149c4:	1c07c83a 	sub	r3,r3,r16
   149c8:	1405883a 	add	r2,r2,r16
   149cc:	90c00215 	stw	r3,8(r18)
   149d0:	a021883a 	mov	r16,r20
   149d4:	90800015 	stw	r2,0(r18)
   149d8:	b0800217 	ldw	r2,8(r22)
   149dc:	1405c83a 	sub	r2,r2,r16
   149e0:	b0800215 	stw	r2,8(r22)
   149e4:	103fa826 	beq	r2,zero,14888 <__sfvwrite_r+0xb0>
   149e8:	a469c83a 	sub	r20,r20,r17
   149ec:	91c0030b 	ldhu	r7,12(r18)
   149f0:	bcef883a 	add	r23,r23,r19
   149f4:	a03fbe1e 	bne	r20,zero,148f0 <__sfvwrite_r+0x118>
   149f8:	adc00017 	ldw	r23,0(r21)
   149fc:	ad000117 	ldw	r20,4(r21)
   14a00:	ad400204 	addi	r21,r21,8
   14a04:	003fb906 	br	148ec <__sfvwrite_r+0x114>
   14a08:	ac400017 	ldw	r17,0(r21)
   14a0c:	ac000117 	ldw	r16,4(r21)
   14a10:	ad400204 	addi	r21,r21,8
   14a14:	003f8a06 	br	14840 <__sfvwrite_r+0x68>
   14a18:	91400417 	ldw	r5,16(r18)
   14a1c:	e009883a 	mov	r4,fp
   14a20:	00144c40 	call	144c4 <_free_r>
   14a24:	00800304 	movi	r2,12
   14a28:	e0800015 	stw	r2,0(fp)
   14a2c:	9080030b 	ldhu	r2,12(r18)
   14a30:	013fffc4 	movi	r4,-1
   14a34:	10801014 	ori	r2,r2,64
   14a38:	9080030d 	sth	r2,12(r18)
   14a3c:	003f9306 	br	1488c <__sfvwrite_r+0xb4>
   14a40:	0027883a 	mov	r19,zero
   14a44:	002f883a 	mov	r23,zero
   14a48:	d8000015 	stw	zero,0(sp)
   14a4c:	0029883a 	mov	r20,zero
   14a50:	98001e26 	beq	r19,zero,14acc <__sfvwrite_r+0x2f4>
   14a54:	d8c00017 	ldw	r3,0(sp)
   14a58:	1804c03a 	cmpne	r2,r3,zero
   14a5c:	10005e26 	beq	r2,zero,14bd8 <__sfvwrite_r+0x400>
   14a60:	9821883a 	mov	r16,r19
   14a64:	a4c0012e 	bgeu	r20,r19,14a6c <__sfvwrite_r+0x294>
   14a68:	a021883a 	mov	r16,r20
   14a6c:	91000017 	ldw	r4,0(r18)
   14a70:	90800417 	ldw	r2,16(r18)
   14a74:	91800217 	ldw	r6,8(r18)
   14a78:	91c00517 	ldw	r7,20(r18)
   14a7c:	1100022e 	bgeu	r2,r4,14a88 <__sfvwrite_r+0x2b0>
   14a80:	31e3883a 	add	r17,r6,r7
   14a84:	8c001616 	blt	r17,r16,14ae0 <__sfvwrite_r+0x308>
   14a88:	81c03816 	blt	r16,r7,14b6c <__sfvwrite_r+0x394>
   14a8c:	90c00917 	ldw	r3,36(r18)
   14a90:	91400717 	ldw	r5,28(r18)
   14a94:	e009883a 	mov	r4,fp
   14a98:	b80d883a 	mov	r6,r23
   14a9c:	183ee83a 	callr	r3
   14aa0:	1023883a 	mov	r17,r2
   14aa4:	00bfe10e 	bge	zero,r2,14a2c <__sfvwrite_r+0x254>
   14aa8:	a469c83a 	sub	r20,r20,r17
   14aac:	a0001826 	beq	r20,zero,14b10 <__sfvwrite_r+0x338>
   14ab0:	b0800217 	ldw	r2,8(r22)
   14ab4:	1445c83a 	sub	r2,r2,r17
   14ab8:	b0800215 	stw	r2,8(r22)
   14abc:	103f7226 	beq	r2,zero,14888 <__sfvwrite_r+0xb0>
   14ac0:	9c67c83a 	sub	r19,r19,r17
   14ac4:	bc6f883a 	add	r23,r23,r17
   14ac8:	983fe21e 	bne	r19,zero,14a54 <__sfvwrite_r+0x27c>
   14acc:	adc00017 	ldw	r23,0(r21)
   14ad0:	acc00117 	ldw	r19,4(r21)
   14ad4:	ad400204 	addi	r21,r21,8
   14ad8:	d8000015 	stw	zero,0(sp)
   14adc:	003fdc06 	br	14a50 <__sfvwrite_r+0x278>
   14ae0:	b80b883a 	mov	r5,r23
   14ae4:	880d883a 	mov	r6,r17
   14ae8:	00159100 	call	15910 <memmove>
   14aec:	90c00017 	ldw	r3,0(r18)
   14af0:	e009883a 	mov	r4,fp
   14af4:	900b883a 	mov	r5,r18
   14af8:	1c47883a 	add	r3,r3,r17
   14afc:	90c00015 	stw	r3,0(r18)
   14b00:	0013e740 	call	13e74 <_fflush_r>
   14b04:	103fc91e 	bne	r2,zero,14a2c <__sfvwrite_r+0x254>
   14b08:	a469c83a 	sub	r20,r20,r17
   14b0c:	a03fe81e 	bne	r20,zero,14ab0 <__sfvwrite_r+0x2d8>
   14b10:	e009883a 	mov	r4,fp
   14b14:	900b883a 	mov	r5,r18
   14b18:	0013e740 	call	13e74 <_fflush_r>
   14b1c:	103fc31e 	bne	r2,zero,14a2c <__sfvwrite_r+0x254>
   14b20:	d8000015 	stw	zero,0(sp)
   14b24:	003fe206 	br	14ab0 <__sfvwrite_r+0x2d8>
   14b28:	91000017 	ldw	r4,0(r18)
   14b2c:	90800417 	ldw	r2,16(r18)
   14b30:	1100022e 	bgeu	r2,r4,14b3c <__sfvwrite_r+0x364>
   14b34:	8023883a 	mov	r17,r16
   14b38:	85003136 	bltu	r16,r20,14c00 <__sfvwrite_r+0x428>
   14b3c:	91c00517 	ldw	r7,20(r18)
   14b40:	a1c01836 	bltu	r20,r7,14ba4 <__sfvwrite_r+0x3cc>
   14b44:	90c00917 	ldw	r3,36(r18)
   14b48:	91400717 	ldw	r5,28(r18)
   14b4c:	e009883a 	mov	r4,fp
   14b50:	b80d883a 	mov	r6,r23
   14b54:	183ee83a 	callr	r3
   14b58:	1021883a 	mov	r16,r2
   14b5c:	00bfb30e 	bge	zero,r2,14a2c <__sfvwrite_r+0x254>
   14b60:	1023883a 	mov	r17,r2
   14b64:	1027883a 	mov	r19,r2
   14b68:	003f9b06 	br	149d8 <__sfvwrite_r+0x200>
   14b6c:	b80b883a 	mov	r5,r23
   14b70:	800d883a 	mov	r6,r16
   14b74:	00159100 	call	15910 <memmove>
   14b78:	90c00217 	ldw	r3,8(r18)
   14b7c:	90800017 	ldw	r2,0(r18)
   14b80:	8023883a 	mov	r17,r16
   14b84:	1c07c83a 	sub	r3,r3,r16
   14b88:	1405883a 	add	r2,r2,r16
   14b8c:	90c00215 	stw	r3,8(r18)
   14b90:	90800015 	stw	r2,0(r18)
   14b94:	003fc406 	br	14aa8 <__sfvwrite_r+0x2d0>
   14b98:	a00d883a 	mov	r6,r20
   14b9c:	a021883a 	mov	r16,r20
   14ba0:	003f8106 	br	149a8 <__sfvwrite_r+0x1d0>
   14ba4:	b80b883a 	mov	r5,r23
   14ba8:	a00d883a 	mov	r6,r20
   14bac:	00159100 	call	15910 <memmove>
   14bb0:	90c00217 	ldw	r3,8(r18)
   14bb4:	90800017 	ldw	r2,0(r18)
   14bb8:	a021883a 	mov	r16,r20
   14bbc:	1d07c83a 	sub	r3,r3,r20
   14bc0:	1505883a 	add	r2,r2,r20
   14bc4:	a023883a 	mov	r17,r20
   14bc8:	a027883a 	mov	r19,r20
   14bcc:	90c00215 	stw	r3,8(r18)
   14bd0:	90800015 	stw	r2,0(r18)
   14bd4:	003f8006 	br	149d8 <__sfvwrite_r+0x200>
   14bd8:	b809883a 	mov	r4,r23
   14bdc:	01400284 	movi	r5,10
   14be0:	980d883a 	mov	r6,r19
   14be4:	001578c0 	call	1578c <memchr>
   14be8:	10001726 	beq	r2,zero,14c48 <__sfvwrite_r+0x470>
   14bec:	15c5c83a 	sub	r2,r2,r23
   14bf0:	15000044 	addi	r20,r2,1
   14bf4:	00800044 	movi	r2,1
   14bf8:	d8800015 	stw	r2,0(sp)
   14bfc:	003f9806 	br	14a60 <__sfvwrite_r+0x288>
   14c00:	b80b883a 	mov	r5,r23
   14c04:	800d883a 	mov	r6,r16
   14c08:	00159100 	call	15910 <memmove>
   14c0c:	90c00017 	ldw	r3,0(r18)
   14c10:	e009883a 	mov	r4,fp
   14c14:	900b883a 	mov	r5,r18
   14c18:	1c07883a 	add	r3,r3,r16
   14c1c:	90c00015 	stw	r3,0(r18)
   14c20:	8027883a 	mov	r19,r16
   14c24:	0013e740 	call	13e74 <_fflush_r>
   14c28:	103f6b26 	beq	r2,zero,149d8 <__sfvwrite_r+0x200>
   14c2c:	003f7f06 	br	14a2c <__sfvwrite_r+0x254>
   14c30:	400b883a 	mov	r5,r8
   14c34:	e009883a 	mov	r4,fp
   14c38:	0016b140 	call	16b14 <_realloc_r>
   14c3c:	103f7626 	beq	r2,zero,14a18 <__sfvwrite_r+0x240>
   14c40:	1023883a 	mov	r17,r2
   14c44:	003f5006 	br	14988 <__sfvwrite_r+0x1b0>
   14c48:	00c00044 	movi	r3,1
   14c4c:	9d000044 	addi	r20,r19,1
   14c50:	d8c00015 	stw	r3,0(sp)
   14c54:	003f8206 	br	14a60 <__sfvwrite_r+0x288>
   14c58:	9080030b 	ldhu	r2,12(r18)
   14c5c:	00c00244 	movi	r3,9
   14c60:	013fffc4 	movi	r4,-1
   14c64:	10801014 	ori	r2,r2,64
   14c68:	9080030d 	sth	r2,12(r18)
   14c6c:	e0c00015 	stw	r3,0(fp)
   14c70:	003f0606 	br	1488c <__sfvwrite_r+0xb4>

00014c74 <_fwalk_reent>:
   14c74:	defff704 	addi	sp,sp,-36
   14c78:	dcc00315 	stw	r19,12(sp)
   14c7c:	24c0b804 	addi	r19,r4,736
   14c80:	dd800615 	stw	r22,24(sp)
   14c84:	dd400515 	stw	r21,20(sp)
   14c88:	dfc00815 	stw	ra,32(sp)
   14c8c:	ddc00715 	stw	r23,28(sp)
   14c90:	dd000415 	stw	r20,16(sp)
   14c94:	dc800215 	stw	r18,8(sp)
   14c98:	dc400115 	stw	r17,4(sp)
   14c9c:	dc000015 	stw	r16,0(sp)
   14ca0:	202b883a 	mov	r21,r4
   14ca4:	282d883a 	mov	r22,r5
   14ca8:	00140fc0 	call	140fc <__sfp_lock_acquire>
   14cac:	98002126 	beq	r19,zero,14d34 <_fwalk_reent+0xc0>
   14cb0:	002f883a 	mov	r23,zero
   14cb4:	9c800117 	ldw	r18,4(r19)
   14cb8:	9c000217 	ldw	r16,8(r19)
   14cbc:	90bfffc4 	addi	r2,r18,-1
   14cc0:	10000d16 	blt	r2,zero,14cf8 <_fwalk_reent+0x84>
   14cc4:	0023883a 	mov	r17,zero
   14cc8:	053fffc4 	movi	r20,-1
   14ccc:	8080030f 	ldh	r2,12(r16)
   14cd0:	8c400044 	addi	r17,r17,1
   14cd4:	10000626 	beq	r2,zero,14cf0 <_fwalk_reent+0x7c>
   14cd8:	8080038f 	ldh	r2,14(r16)
   14cdc:	800b883a 	mov	r5,r16
   14ce0:	a809883a 	mov	r4,r21
   14ce4:	15000226 	beq	r2,r20,14cf0 <_fwalk_reent+0x7c>
   14ce8:	b03ee83a 	callr	r22
   14cec:	b8aeb03a 	or	r23,r23,r2
   14cf0:	84001704 	addi	r16,r16,92
   14cf4:	947ff51e 	bne	r18,r17,14ccc <_fwalk_reent+0x58>
   14cf8:	9cc00017 	ldw	r19,0(r19)
   14cfc:	983fed1e 	bne	r19,zero,14cb4 <_fwalk_reent+0x40>
   14d00:	00141000 	call	14100 <__sfp_lock_release>
   14d04:	b805883a 	mov	r2,r23
   14d08:	dfc00817 	ldw	ra,32(sp)
   14d0c:	ddc00717 	ldw	r23,28(sp)
   14d10:	dd800617 	ldw	r22,24(sp)
   14d14:	dd400517 	ldw	r21,20(sp)
   14d18:	dd000417 	ldw	r20,16(sp)
   14d1c:	dcc00317 	ldw	r19,12(sp)
   14d20:	dc800217 	ldw	r18,8(sp)
   14d24:	dc400117 	ldw	r17,4(sp)
   14d28:	dc000017 	ldw	r16,0(sp)
   14d2c:	dec00904 	addi	sp,sp,36
   14d30:	f800283a 	ret
   14d34:	002f883a 	mov	r23,zero
   14d38:	003ff106 	br	14d00 <_fwalk_reent+0x8c>

00014d3c <_fwalk>:
   14d3c:	defff804 	addi	sp,sp,-32
   14d40:	dcc00315 	stw	r19,12(sp)
   14d44:	24c0b804 	addi	r19,r4,736
   14d48:	dd400515 	stw	r21,20(sp)
   14d4c:	dfc00715 	stw	ra,28(sp)
   14d50:	dd800615 	stw	r22,24(sp)
   14d54:	dd000415 	stw	r20,16(sp)
   14d58:	dc800215 	stw	r18,8(sp)
   14d5c:	dc400115 	stw	r17,4(sp)
   14d60:	dc000015 	stw	r16,0(sp)
   14d64:	282b883a 	mov	r21,r5
   14d68:	00140fc0 	call	140fc <__sfp_lock_acquire>
   14d6c:	98001f26 	beq	r19,zero,14dec <_fwalk+0xb0>
   14d70:	002d883a 	mov	r22,zero
   14d74:	9c800117 	ldw	r18,4(r19)
   14d78:	9c000217 	ldw	r16,8(r19)
   14d7c:	90bfffc4 	addi	r2,r18,-1
   14d80:	10000c16 	blt	r2,zero,14db4 <_fwalk+0x78>
   14d84:	0023883a 	mov	r17,zero
   14d88:	053fffc4 	movi	r20,-1
   14d8c:	8080030f 	ldh	r2,12(r16)
   14d90:	8c400044 	addi	r17,r17,1
   14d94:	10000526 	beq	r2,zero,14dac <_fwalk+0x70>
   14d98:	8080038f 	ldh	r2,14(r16)
   14d9c:	8009883a 	mov	r4,r16
   14da0:	15000226 	beq	r2,r20,14dac <_fwalk+0x70>
   14da4:	a83ee83a 	callr	r21
   14da8:	b0acb03a 	or	r22,r22,r2
   14dac:	84001704 	addi	r16,r16,92
   14db0:	947ff61e 	bne	r18,r17,14d8c <_fwalk+0x50>
   14db4:	9cc00017 	ldw	r19,0(r19)
   14db8:	983fee1e 	bne	r19,zero,14d74 <_fwalk+0x38>
   14dbc:	00141000 	call	14100 <__sfp_lock_release>
   14dc0:	b005883a 	mov	r2,r22
   14dc4:	dfc00717 	ldw	ra,28(sp)
   14dc8:	dd800617 	ldw	r22,24(sp)
   14dcc:	dd400517 	ldw	r21,20(sp)
   14dd0:	dd000417 	ldw	r20,16(sp)
   14dd4:	dcc00317 	ldw	r19,12(sp)
   14dd8:	dc800217 	ldw	r18,8(sp)
   14ddc:	dc400117 	ldw	r17,4(sp)
   14de0:	dc000017 	ldw	r16,0(sp)
   14de4:	dec00804 	addi	sp,sp,32
   14de8:	f800283a 	ret
   14dec:	002d883a 	mov	r22,zero
   14df0:	003ff206 	br	14dbc <_fwalk+0x80>

00014df4 <__locale_charset>:
   14df4:	d0a00317 	ldw	r2,-32756(gp)
   14df8:	f800283a 	ret

00014dfc <_localeconv_r>:
   14dfc:	00800134 	movhi	r2,4
   14e00:	10a03f04 	addi	r2,r2,-32516
   14e04:	f800283a 	ret

00014e08 <localeconv>:
   14e08:	00800134 	movhi	r2,4
   14e0c:	10a76b04 	addi	r2,r2,-25172
   14e10:	11000017 	ldw	r4,0(r2)
   14e14:	0014dfc1 	jmpi	14dfc <_localeconv_r>

00014e18 <_setlocale_r>:
   14e18:	defffc04 	addi	sp,sp,-16
   14e1c:	00c00134 	movhi	r3,4
   14e20:	18e03a04 	addi	r3,r3,-32536
   14e24:	dc800215 	stw	r18,8(sp)
   14e28:	dc400115 	stw	r17,4(sp)
   14e2c:	dc000015 	stw	r16,0(sp)
   14e30:	2023883a 	mov	r17,r4
   14e34:	2825883a 	mov	r18,r5
   14e38:	dfc00315 	stw	ra,12(sp)
   14e3c:	3021883a 	mov	r16,r6
   14e40:	3009883a 	mov	r4,r6
   14e44:	180b883a 	mov	r5,r3
   14e48:	30000926 	beq	r6,zero,14e70 <_setlocale_r+0x58>
   14e4c:	00173340 	call	17334 <strcmp>
   14e50:	8009883a 	mov	r4,r16
   14e54:	01400134 	movhi	r5,4
   14e58:	29602504 	addi	r5,r5,-32620
   14e5c:	10000b1e 	bne	r2,zero,14e8c <_setlocale_r+0x74>
   14e60:	8c000d15 	stw	r16,52(r17)
   14e64:	8c800c15 	stw	r18,48(r17)
   14e68:	00c00134 	movhi	r3,4
   14e6c:	18e03a04 	addi	r3,r3,-32536
   14e70:	1805883a 	mov	r2,r3
   14e74:	dfc00317 	ldw	ra,12(sp)
   14e78:	dc800217 	ldw	r18,8(sp)
   14e7c:	dc400117 	ldw	r17,4(sp)
   14e80:	dc000017 	ldw	r16,0(sp)
   14e84:	dec00404 	addi	sp,sp,16
   14e88:	f800283a 	ret
   14e8c:	00173340 	call	17334 <strcmp>
   14e90:	0007883a 	mov	r3,zero
   14e94:	103ff226 	beq	r2,zero,14e60 <_setlocale_r+0x48>
   14e98:	003ff506 	br	14e70 <_setlocale_r+0x58>

00014e9c <setlocale>:
   14e9c:	01800134 	movhi	r6,4
   14ea0:	31a76b04 	addi	r6,r6,-25172
   14ea4:	2007883a 	mov	r3,r4
   14ea8:	31000017 	ldw	r4,0(r6)
   14eac:	280d883a 	mov	r6,r5
   14eb0:	180b883a 	mov	r5,r3
   14eb4:	0014e181 	jmpi	14e18 <_setlocale_r>

00014eb8 <__smakebuf_r>:
   14eb8:	2880030b 	ldhu	r2,12(r5)
   14ebc:	deffed04 	addi	sp,sp,-76
   14ec0:	dc401015 	stw	r17,64(sp)
   14ec4:	1080008c 	andi	r2,r2,2
   14ec8:	dc000f15 	stw	r16,60(sp)
   14ecc:	dfc01215 	stw	ra,72(sp)
   14ed0:	dc801115 	stw	r18,68(sp)
   14ed4:	2821883a 	mov	r16,r5
   14ed8:	2023883a 	mov	r17,r4
   14edc:	10000b26 	beq	r2,zero,14f0c <__smakebuf_r+0x54>
   14ee0:	28c010c4 	addi	r3,r5,67
   14ee4:	00800044 	movi	r2,1
   14ee8:	28800515 	stw	r2,20(r5)
   14eec:	28c00415 	stw	r3,16(r5)
   14ef0:	28c00015 	stw	r3,0(r5)
   14ef4:	dfc01217 	ldw	ra,72(sp)
   14ef8:	dc801117 	ldw	r18,68(sp)
   14efc:	dc401017 	ldw	r17,64(sp)
   14f00:	dc000f17 	ldw	r16,60(sp)
   14f04:	dec01304 	addi	sp,sp,76
   14f08:	f800283a 	ret
   14f0c:	2940038f 	ldh	r5,14(r5)
   14f10:	28002116 	blt	r5,zero,14f98 <__smakebuf_r+0xe0>
   14f14:	d80d883a 	mov	r6,sp
   14f18:	00176c40 	call	176c4 <_fstat_r>
   14f1c:	10001e16 	blt	r2,zero,14f98 <__smakebuf_r+0xe0>
   14f20:	d8800117 	ldw	r2,4(sp)
   14f24:	00e00014 	movui	r3,32768
   14f28:	113c000c 	andi	r4,r2,61440
   14f2c:	20c03126 	beq	r4,r3,14ff4 <__smakebuf_r+0x13c>
   14f30:	8080030b 	ldhu	r2,12(r16)
   14f34:	00c80004 	movi	r3,8192
   14f38:	10820014 	ori	r2,r2,2048
   14f3c:	8080030d 	sth	r2,12(r16)
   14f40:	20c01e26 	beq	r4,r3,14fbc <__smakebuf_r+0x104>
   14f44:	04810004 	movi	r18,1024
   14f48:	8809883a 	mov	r4,r17
   14f4c:	900b883a 	mov	r5,r18
   14f50:	001504c0 	call	1504c <_malloc_r>
   14f54:	1009883a 	mov	r4,r2
   14f58:	10003126 	beq	r2,zero,15020 <__smakebuf_r+0x168>
   14f5c:	80c0030b 	ldhu	r3,12(r16)
   14f60:	00800074 	movhi	r2,1
   14f64:	10907c04 	addi	r2,r2,16880
   14f68:	88800f15 	stw	r2,60(r17)
   14f6c:	18c02014 	ori	r3,r3,128
   14f70:	84800515 	stw	r18,20(r16)
   14f74:	80c0030d 	sth	r3,12(r16)
   14f78:	81000415 	stw	r4,16(r16)
   14f7c:	81000015 	stw	r4,0(r16)
   14f80:	dfc01217 	ldw	ra,72(sp)
   14f84:	dc801117 	ldw	r18,68(sp)
   14f88:	dc401017 	ldw	r17,64(sp)
   14f8c:	dc000f17 	ldw	r16,60(sp)
   14f90:	dec01304 	addi	sp,sp,76
   14f94:	f800283a 	ret
   14f98:	80c0030b 	ldhu	r3,12(r16)
   14f9c:	1880200c 	andi	r2,r3,128
   14fa0:	10000426 	beq	r2,zero,14fb4 <__smakebuf_r+0xfc>
   14fa4:	04801004 	movi	r18,64
   14fa8:	18820014 	ori	r2,r3,2048
   14fac:	8080030d 	sth	r2,12(r16)
   14fb0:	003fe506 	br	14f48 <__smakebuf_r+0x90>
   14fb4:	04810004 	movi	r18,1024
   14fb8:	003ffb06 	br	14fa8 <__smakebuf_r+0xf0>
   14fbc:	8140038f 	ldh	r5,14(r16)
   14fc0:	8809883a 	mov	r4,r17
   14fc4:	00177380 	call	17738 <_isatty_r>
   14fc8:	103fde26 	beq	r2,zero,14f44 <__smakebuf_r+0x8c>
   14fcc:	8080030b 	ldhu	r2,12(r16)
   14fd0:	80c010c4 	addi	r3,r16,67
   14fd4:	04810004 	movi	r18,1024
   14fd8:	10800054 	ori	r2,r2,1
   14fdc:	8080030d 	sth	r2,12(r16)
   14fe0:	00800044 	movi	r2,1
   14fe4:	80c00415 	stw	r3,16(r16)
   14fe8:	80800515 	stw	r2,20(r16)
   14fec:	80c00015 	stw	r3,0(r16)
   14ff0:	003fd506 	br	14f48 <__smakebuf_r+0x90>
   14ff4:	80c00a17 	ldw	r3,40(r16)
   14ff8:	00800074 	movhi	r2,1
   14ffc:	109c7c04 	addi	r2,r2,29168
   15000:	18bfcb1e 	bne	r3,r2,14f30 <__smakebuf_r+0x78>
   15004:	8080030b 	ldhu	r2,12(r16)
   15008:	00c10004 	movi	r3,1024
   1500c:	1825883a 	mov	r18,r3
   15010:	10c4b03a 	or	r2,r2,r3
   15014:	8080030d 	sth	r2,12(r16)
   15018:	80c01315 	stw	r3,76(r16)
   1501c:	003fca06 	br	14f48 <__smakebuf_r+0x90>
   15020:	8100030b 	ldhu	r4,12(r16)
   15024:	2080800c 	andi	r2,r4,512
   15028:	103fb21e 	bne	r2,zero,14ef4 <__smakebuf_r+0x3c>
   1502c:	80c010c4 	addi	r3,r16,67
   15030:	21000094 	ori	r4,r4,2
   15034:	00800044 	movi	r2,1
   15038:	80800515 	stw	r2,20(r16)
   1503c:	8100030d 	sth	r4,12(r16)
   15040:	80c00415 	stw	r3,16(r16)
   15044:	80c00015 	stw	r3,0(r16)
   15048:	003faa06 	br	14ef4 <__smakebuf_r+0x3c>

0001504c <_malloc_r>:
   1504c:	defff604 	addi	sp,sp,-40
   15050:	28c002c4 	addi	r3,r5,11
   15054:	00800584 	movi	r2,22
   15058:	dc800215 	stw	r18,8(sp)
   1505c:	dfc00915 	stw	ra,36(sp)
   15060:	df000815 	stw	fp,32(sp)
   15064:	ddc00715 	stw	r23,28(sp)
   15068:	dd800615 	stw	r22,24(sp)
   1506c:	dd400515 	stw	r21,20(sp)
   15070:	dd000415 	stw	r20,16(sp)
   15074:	dcc00315 	stw	r19,12(sp)
   15078:	dc400115 	stw	r17,4(sp)
   1507c:	dc000015 	stw	r16,0(sp)
   15080:	2025883a 	mov	r18,r4
   15084:	10c01236 	bltu	r2,r3,150d0 <_malloc_r+0x84>
   15088:	04400404 	movi	r17,16
   1508c:	8940142e 	bgeu	r17,r5,150e0 <_malloc_r+0x94>
   15090:	00800304 	movi	r2,12
   15094:	0007883a 	mov	r3,zero
   15098:	90800015 	stw	r2,0(r18)
   1509c:	1805883a 	mov	r2,r3
   150a0:	dfc00917 	ldw	ra,36(sp)
   150a4:	df000817 	ldw	fp,32(sp)
   150a8:	ddc00717 	ldw	r23,28(sp)
   150ac:	dd800617 	ldw	r22,24(sp)
   150b0:	dd400517 	ldw	r21,20(sp)
   150b4:	dd000417 	ldw	r20,16(sp)
   150b8:	dcc00317 	ldw	r19,12(sp)
   150bc:	dc800217 	ldw	r18,8(sp)
   150c0:	dc400117 	ldw	r17,4(sp)
   150c4:	dc000017 	ldw	r16,0(sp)
   150c8:	dec00a04 	addi	sp,sp,40
   150cc:	f800283a 	ret
   150d0:	00bffe04 	movi	r2,-8
   150d4:	18a2703a 	and	r17,r3,r2
   150d8:	883fed16 	blt	r17,zero,15090 <_malloc_r+0x44>
   150dc:	897fec36 	bltu	r17,r5,15090 <_malloc_r+0x44>
   150e0:	9009883a 	mov	r4,r18
   150e4:	001a5600 	call	1a560 <__malloc_lock>
   150e8:	00807dc4 	movi	r2,503
   150ec:	14402b2e 	bgeu	r2,r17,1519c <_malloc_r+0x150>
   150f0:	8806d27a 	srli	r3,r17,9
   150f4:	18003f1e 	bne	r3,zero,151f4 <_malloc_r+0x1a8>
   150f8:	880cd0fa 	srli	r6,r17,3
   150fc:	300490fa 	slli	r2,r6,3
   15100:	02c00134 	movhi	r11,4
   15104:	5ae1e704 	addi	r11,r11,-30820
   15108:	12cb883a 	add	r5,r2,r11
   1510c:	2c000317 	ldw	r16,12(r5)
   15110:	580f883a 	mov	r7,r11
   15114:	2c00041e 	bne	r5,r16,15128 <_malloc_r+0xdc>
   15118:	00000a06 	br	15144 <_malloc_r+0xf8>
   1511c:	1800860e 	bge	r3,zero,15338 <_malloc_r+0x2ec>
   15120:	84000317 	ldw	r16,12(r16)
   15124:	2c000726 	beq	r5,r16,15144 <_malloc_r+0xf8>
   15128:	80800117 	ldw	r2,4(r16)
   1512c:	00ffff04 	movi	r3,-4
   15130:	10c8703a 	and	r4,r2,r3
   15134:	2447c83a 	sub	r3,r4,r17
   15138:	008003c4 	movi	r2,15
   1513c:	10fff70e 	bge	r2,r3,1511c <_malloc_r+0xd0>
   15140:	31bfffc4 	addi	r6,r6,-1
   15144:	32400044 	addi	r9,r6,1
   15148:	02800134 	movhi	r10,4
   1514c:	52a1e904 	addi	r10,r10,-30812
   15150:	54000217 	ldw	r16,8(r10)
   15154:	8280a026 	beq	r16,r10,153d8 <_malloc_r+0x38c>
   15158:	80800117 	ldw	r2,4(r16)
   1515c:	00ffff04 	movi	r3,-4
   15160:	10ca703a 	and	r5,r2,r3
   15164:	2c4dc83a 	sub	r6,r5,r17
   15168:	008003c4 	movi	r2,15
   1516c:	11808316 	blt	r2,r6,1537c <_malloc_r+0x330>
   15170:	52800315 	stw	r10,12(r10)
   15174:	52800215 	stw	r10,8(r10)
   15178:	30002916 	blt	r6,zero,15220 <_malloc_r+0x1d4>
   1517c:	8147883a 	add	r3,r16,r5
   15180:	18800117 	ldw	r2,4(r3)
   15184:	9009883a 	mov	r4,r18
   15188:	10800054 	ori	r2,r2,1
   1518c:	18800115 	stw	r2,4(r3)
   15190:	001a5800 	call	1a580 <__malloc_unlock>
   15194:	80c00204 	addi	r3,r16,8
   15198:	003fc006 	br	1509c <_malloc_r+0x50>
   1519c:	02c00134 	movhi	r11,4
   151a0:	5ae1e704 	addi	r11,r11,-30820
   151a4:	8ac5883a 	add	r2,r17,r11
   151a8:	14000317 	ldw	r16,12(r2)
   151ac:	580f883a 	mov	r7,r11
   151b0:	8806d0fa 	srli	r3,r17,3
   151b4:	14006c26 	beq	r2,r16,15368 <_malloc_r+0x31c>
   151b8:	80c00117 	ldw	r3,4(r16)
   151bc:	00bfff04 	movi	r2,-4
   151c0:	81800317 	ldw	r6,12(r16)
   151c4:	1886703a 	and	r3,r3,r2
   151c8:	80c7883a 	add	r3,r16,r3
   151cc:	18800117 	ldw	r2,4(r3)
   151d0:	81400217 	ldw	r5,8(r16)
   151d4:	9009883a 	mov	r4,r18
   151d8:	10800054 	ori	r2,r2,1
   151dc:	18800115 	stw	r2,4(r3)
   151e0:	31400215 	stw	r5,8(r6)
   151e4:	29800315 	stw	r6,12(r5)
   151e8:	001a5800 	call	1a580 <__malloc_unlock>
   151ec:	80c00204 	addi	r3,r16,8
   151f0:	003faa06 	br	1509c <_malloc_r+0x50>
   151f4:	00800104 	movi	r2,4
   151f8:	10c0052e 	bgeu	r2,r3,15210 <_malloc_r+0x1c4>
   151fc:	00800504 	movi	r2,20
   15200:	10c07836 	bltu	r2,r3,153e4 <_malloc_r+0x398>
   15204:	198016c4 	addi	r6,r3,91
   15208:	300490fa 	slli	r2,r6,3
   1520c:	003fbc06 	br	15100 <_malloc_r+0xb4>
   15210:	8804d1ba 	srli	r2,r17,6
   15214:	11800e04 	addi	r6,r2,56
   15218:	300490fa 	slli	r2,r6,3
   1521c:	003fb806 	br	15100 <_malloc_r+0xb4>
   15220:	00807fc4 	movi	r2,511
   15224:	1140bb36 	bltu	r2,r5,15514 <_malloc_r+0x4c8>
   15228:	2806d0fa 	srli	r3,r5,3
   1522c:	573ffe04 	addi	fp,r10,-8
   15230:	00800044 	movi	r2,1
   15234:	180890fa 	slli	r4,r3,3
   15238:	1807d0ba 	srai	r3,r3,2
   1523c:	e1c00117 	ldw	r7,4(fp)
   15240:	5909883a 	add	r4,r11,r4
   15244:	21400217 	ldw	r5,8(r4)
   15248:	10c4983a 	sll	r2,r2,r3
   1524c:	81000315 	stw	r4,12(r16)
   15250:	81400215 	stw	r5,8(r16)
   15254:	388eb03a 	or	r7,r7,r2
   15258:	2c000315 	stw	r16,12(r5)
   1525c:	24000215 	stw	r16,8(r4)
   15260:	e1c00115 	stw	r7,4(fp)
   15264:	4807883a 	mov	r3,r9
   15268:	4800cd16 	blt	r9,zero,155a0 <_malloc_r+0x554>
   1526c:	1807d0ba 	srai	r3,r3,2
   15270:	00800044 	movi	r2,1
   15274:	10c8983a 	sll	r4,r2,r3
   15278:	39004436 	bltu	r7,r4,1538c <_malloc_r+0x340>
   1527c:	21c4703a 	and	r2,r4,r7
   15280:	10000a1e 	bne	r2,zero,152ac <_malloc_r+0x260>
   15284:	2109883a 	add	r4,r4,r4
   15288:	00bfff04 	movi	r2,-4
   1528c:	4884703a 	and	r2,r9,r2
   15290:	3906703a 	and	r3,r7,r4
   15294:	12400104 	addi	r9,r2,4
   15298:	1800041e 	bne	r3,zero,152ac <_malloc_r+0x260>
   1529c:	2109883a 	add	r4,r4,r4
   152a0:	3904703a 	and	r2,r7,r4
   152a4:	4a400104 	addi	r9,r9,4
   152a8:	103ffc26 	beq	r2,zero,1529c <_malloc_r+0x250>
   152ac:	480490fa 	slli	r2,r9,3
   152b0:	4819883a 	mov	r12,r9
   152b4:	023fff04 	movi	r8,-4
   152b8:	589b883a 	add	r13,r11,r2
   152bc:	6807883a 	mov	r3,r13
   152c0:	014003c4 	movi	r5,15
   152c4:	1c000317 	ldw	r16,12(r3)
   152c8:	1c00041e 	bne	r3,r16,152dc <_malloc_r+0x290>
   152cc:	0000a706 	br	1556c <_malloc_r+0x520>
   152d0:	3000ab0e 	bge	r6,zero,15580 <_malloc_r+0x534>
   152d4:	84000317 	ldw	r16,12(r16)
   152d8:	1c00a426 	beq	r3,r16,1556c <_malloc_r+0x520>
   152dc:	80800117 	ldw	r2,4(r16)
   152e0:	1204703a 	and	r2,r2,r8
   152e4:	144dc83a 	sub	r6,r2,r17
   152e8:	29bff90e 	bge	r5,r6,152d0 <_malloc_r+0x284>
   152ec:	81000317 	ldw	r4,12(r16)
   152f0:	80c00217 	ldw	r3,8(r16)
   152f4:	89400054 	ori	r5,r17,1
   152f8:	8445883a 	add	r2,r16,r17
   152fc:	20c00215 	stw	r3,8(r4)
   15300:	19000315 	stw	r4,12(r3)
   15304:	81400115 	stw	r5,4(r16)
   15308:	1187883a 	add	r3,r2,r6
   1530c:	31000054 	ori	r4,r6,1
   15310:	50800315 	stw	r2,12(r10)
   15314:	50800215 	stw	r2,8(r10)
   15318:	19800015 	stw	r6,0(r3)
   1531c:	11000115 	stw	r4,4(r2)
   15320:	12800215 	stw	r10,8(r2)
   15324:	12800315 	stw	r10,12(r2)
   15328:	9009883a 	mov	r4,r18
   1532c:	001a5800 	call	1a580 <__malloc_unlock>
   15330:	80c00204 	addi	r3,r16,8
   15334:	003f5906 	br	1509c <_malloc_r+0x50>
   15338:	8109883a 	add	r4,r16,r4
   1533c:	20800117 	ldw	r2,4(r4)
   15340:	80c00217 	ldw	r3,8(r16)
   15344:	81400317 	ldw	r5,12(r16)
   15348:	10800054 	ori	r2,r2,1
   1534c:	20800115 	stw	r2,4(r4)
   15350:	28c00215 	stw	r3,8(r5)
   15354:	19400315 	stw	r5,12(r3)
   15358:	9009883a 	mov	r4,r18
   1535c:	001a5800 	call	1a580 <__malloc_unlock>
   15360:	80c00204 	addi	r3,r16,8
   15364:	003f4d06 	br	1509c <_malloc_r+0x50>
   15368:	80800204 	addi	r2,r16,8
   1536c:	14000317 	ldw	r16,12(r2)
   15370:	143f911e 	bne	r2,r16,151b8 <_malloc_r+0x16c>
   15374:	1a400084 	addi	r9,r3,2
   15378:	003f7306 	br	15148 <_malloc_r+0xfc>
   1537c:	88c00054 	ori	r3,r17,1
   15380:	8445883a 	add	r2,r16,r17
   15384:	80c00115 	stw	r3,4(r16)
   15388:	003fdf06 	br	15308 <_malloc_r+0x2bc>
   1538c:	e4000217 	ldw	r16,8(fp)
   15390:	00bfff04 	movi	r2,-4
   15394:	80c00117 	ldw	r3,4(r16)
   15398:	802d883a 	mov	r22,r16
   1539c:	18aa703a 	and	r21,r3,r2
   153a0:	ac401636 	bltu	r21,r17,153fc <_malloc_r+0x3b0>
   153a4:	ac49c83a 	sub	r4,r21,r17
   153a8:	008003c4 	movi	r2,15
   153ac:	1100130e 	bge	r2,r4,153fc <_malloc_r+0x3b0>
   153b0:	88800054 	ori	r2,r17,1
   153b4:	8447883a 	add	r3,r16,r17
   153b8:	80800115 	stw	r2,4(r16)
   153bc:	20800054 	ori	r2,r4,1
   153c0:	18800115 	stw	r2,4(r3)
   153c4:	e0c00215 	stw	r3,8(fp)
   153c8:	9009883a 	mov	r4,r18
   153cc:	001a5800 	call	1a580 <__malloc_unlock>
   153d0:	80c00204 	addi	r3,r16,8
   153d4:	003f3106 	br	1509c <_malloc_r+0x50>
   153d8:	39c00117 	ldw	r7,4(r7)
   153dc:	573ffe04 	addi	fp,r10,-8
   153e0:	003fa006 	br	15264 <_malloc_r+0x218>
   153e4:	00801504 	movi	r2,84
   153e8:	10c06736 	bltu	r2,r3,15588 <_malloc_r+0x53c>
   153ec:	8804d33a 	srli	r2,r17,12
   153f0:	11801b84 	addi	r6,r2,110
   153f4:	300490fa 	slli	r2,r6,3
   153f8:	003f4106 	br	15100 <_malloc_r+0xb4>
   153fc:	d0a01817 	ldw	r2,-32672(gp)
   15400:	d0e00517 	ldw	r3,-32748(gp)
   15404:	053fffc4 	movi	r20,-1
   15408:	10800404 	addi	r2,r2,16
   1540c:	88a7883a 	add	r19,r17,r2
   15410:	1d000326 	beq	r3,r20,15420 <_malloc_r+0x3d4>
   15414:	98c3ffc4 	addi	r3,r19,4095
   15418:	00bc0004 	movi	r2,-4096
   1541c:	18a6703a 	and	r19,r3,r2
   15420:	9009883a 	mov	r4,r18
   15424:	980b883a 	mov	r5,r19
   15428:	00171780 	call	17178 <_sbrk_r>
   1542c:	1009883a 	mov	r4,r2
   15430:	15000426 	beq	r2,r20,15444 <_malloc_r+0x3f8>
   15434:	854b883a 	add	r5,r16,r21
   15438:	1029883a 	mov	r20,r2
   1543c:	11405a2e 	bgeu	r2,r5,155a8 <_malloc_r+0x55c>
   15440:	87000c26 	beq	r16,fp,15474 <_malloc_r+0x428>
   15444:	e4000217 	ldw	r16,8(fp)
   15448:	80c00117 	ldw	r3,4(r16)
   1544c:	00bfff04 	movi	r2,-4
   15450:	1884703a 	and	r2,r3,r2
   15454:	14400336 	bltu	r2,r17,15464 <_malloc_r+0x418>
   15458:	1449c83a 	sub	r4,r2,r17
   1545c:	008003c4 	movi	r2,15
   15460:	113fd316 	blt	r2,r4,153b0 <_malloc_r+0x364>
   15464:	9009883a 	mov	r4,r18
   15468:	001a5800 	call	1a580 <__malloc_unlock>
   1546c:	0007883a 	mov	r3,zero
   15470:	003f0a06 	br	1509c <_malloc_r+0x50>
   15474:	05c00134 	movhi	r23,4
   15478:	bde78d04 	addi	r23,r23,-25036
   1547c:	b8800017 	ldw	r2,0(r23)
   15480:	988d883a 	add	r6,r19,r2
   15484:	b9800015 	stw	r6,0(r23)
   15488:	d0e00517 	ldw	r3,-32748(gp)
   1548c:	00bfffc4 	movi	r2,-1
   15490:	18808e26 	beq	r3,r2,156cc <_malloc_r+0x680>
   15494:	2145c83a 	sub	r2,r4,r5
   15498:	3085883a 	add	r2,r6,r2
   1549c:	b8800015 	stw	r2,0(r23)
   154a0:	20c001cc 	andi	r3,r4,7
   154a4:	18005f1e 	bne	r3,zero,15624 <_malloc_r+0x5d8>
   154a8:	000b883a 	mov	r5,zero
   154ac:	a4c5883a 	add	r2,r20,r19
   154b0:	1083ffcc 	andi	r2,r2,4095
   154b4:	00c40004 	movi	r3,4096
   154b8:	1887c83a 	sub	r3,r3,r2
   154bc:	28e7883a 	add	r19,r5,r3
   154c0:	9009883a 	mov	r4,r18
   154c4:	980b883a 	mov	r5,r19
   154c8:	00171780 	call	17178 <_sbrk_r>
   154cc:	1007883a 	mov	r3,r2
   154d0:	00bfffc4 	movi	r2,-1
   154d4:	18807a26 	beq	r3,r2,156c0 <_malloc_r+0x674>
   154d8:	1d05c83a 	sub	r2,r3,r20
   154dc:	9885883a 	add	r2,r19,r2
   154e0:	10c00054 	ori	r3,r2,1
   154e4:	b8800017 	ldw	r2,0(r23)
   154e8:	a021883a 	mov	r16,r20
   154ec:	a0c00115 	stw	r3,4(r20)
   154f0:	9885883a 	add	r2,r19,r2
   154f4:	b8800015 	stw	r2,0(r23)
   154f8:	e5000215 	stw	r20,8(fp)
   154fc:	b7003626 	beq	r22,fp,155d8 <_malloc_r+0x58c>
   15500:	018003c4 	movi	r6,15
   15504:	35404b36 	bltu	r6,r21,15634 <_malloc_r+0x5e8>
   15508:	00800044 	movi	r2,1
   1550c:	a0800115 	stw	r2,4(r20)
   15510:	003fcd06 	br	15448 <_malloc_r+0x3fc>
   15514:	2808d27a 	srli	r4,r5,9
   15518:	2000371e 	bne	r4,zero,155f8 <_malloc_r+0x5ac>
   1551c:	2808d0fa 	srli	r4,r5,3
   15520:	200690fa 	slli	r3,r4,3
   15524:	1ad1883a 	add	r8,r3,r11
   15528:	41800217 	ldw	r6,8(r8)
   1552c:	41805b26 	beq	r8,r6,1569c <_malloc_r+0x650>
   15530:	30800117 	ldw	r2,4(r6)
   15534:	00ffff04 	movi	r3,-4
   15538:	10c4703a 	and	r2,r2,r3
   1553c:	2880022e 	bgeu	r5,r2,15548 <_malloc_r+0x4fc>
   15540:	31800217 	ldw	r6,8(r6)
   15544:	41bffa1e 	bne	r8,r6,15530 <_malloc_r+0x4e4>
   15548:	32000317 	ldw	r8,12(r6)
   1554c:	39c00117 	ldw	r7,4(r7)
   15550:	82000315 	stw	r8,12(r16)
   15554:	81800215 	stw	r6,8(r16)
   15558:	07000134 	movhi	fp,4
   1555c:	e721e704 	addi	fp,fp,-30820
   15560:	34000315 	stw	r16,12(r6)
   15564:	44000215 	stw	r16,8(r8)
   15568:	003f3e06 	br	15264 <_malloc_r+0x218>
   1556c:	63000044 	addi	r12,r12,1
   15570:	608000cc 	andi	r2,r12,3
   15574:	10005d26 	beq	r2,zero,156ec <_malloc_r+0x6a0>
   15578:	18c00204 	addi	r3,r3,8
   1557c:	003f5106 	br	152c4 <_malloc_r+0x278>
   15580:	8089883a 	add	r4,r16,r2
   15584:	003f6d06 	br	1533c <_malloc_r+0x2f0>
   15588:	00805504 	movi	r2,340
   1558c:	10c02036 	bltu	r2,r3,15610 <_malloc_r+0x5c4>
   15590:	8804d3fa 	srli	r2,r17,15
   15594:	11801dc4 	addi	r6,r2,119
   15598:	300490fa 	slli	r2,r6,3
   1559c:	003ed806 	br	15100 <_malloc_r+0xb4>
   155a0:	48c000c4 	addi	r3,r9,3
   155a4:	003f3106 	br	1526c <_malloc_r+0x220>
   155a8:	05c00134 	movhi	r23,4
   155ac:	bde78d04 	addi	r23,r23,-25036
   155b0:	b8800017 	ldw	r2,0(r23)
   155b4:	988d883a 	add	r6,r19,r2
   155b8:	b9800015 	stw	r6,0(r23)
   155bc:	293fb21e 	bne	r5,r4,15488 <_malloc_r+0x43c>
   155c0:	2083ffcc 	andi	r2,r4,4095
   155c4:	103fb01e 	bne	r2,zero,15488 <_malloc_r+0x43c>
   155c8:	e4000217 	ldw	r16,8(fp)
   155cc:	9d45883a 	add	r2,r19,r21
   155d0:	10800054 	ori	r2,r2,1
   155d4:	80800115 	stw	r2,4(r16)
   155d8:	b8c00017 	ldw	r3,0(r23)
   155dc:	d0a01917 	ldw	r2,-32668(gp)
   155e0:	10c0012e 	bgeu	r2,r3,155e8 <_malloc_r+0x59c>
   155e4:	d0e01915 	stw	r3,-32668(gp)
   155e8:	d0a01a17 	ldw	r2,-32664(gp)
   155ec:	10ff962e 	bgeu	r2,r3,15448 <_malloc_r+0x3fc>
   155f0:	d0e01a15 	stw	r3,-32664(gp)
   155f4:	003f9406 	br	15448 <_malloc_r+0x3fc>
   155f8:	00800104 	movi	r2,4
   155fc:	11001e36 	bltu	r2,r4,15678 <_malloc_r+0x62c>
   15600:	2804d1ba 	srli	r2,r5,6
   15604:	11000e04 	addi	r4,r2,56
   15608:	200690fa 	slli	r3,r4,3
   1560c:	003fc506 	br	15524 <_malloc_r+0x4d8>
   15610:	00815504 	movi	r2,1364
   15614:	10c01d2e 	bgeu	r2,r3,1568c <_malloc_r+0x640>
   15618:	01801f84 	movi	r6,126
   1561c:	0080fc04 	movi	r2,1008
   15620:	003eb706 	br	15100 <_malloc_r+0xb4>
   15624:	00800204 	movi	r2,8
   15628:	10cbc83a 	sub	r5,r2,r3
   1562c:	2169883a 	add	r20,r4,r5
   15630:	003f9e06 	br	154ac <_malloc_r+0x460>
   15634:	00bffe04 	movi	r2,-8
   15638:	a93ffd04 	addi	r4,r21,-12
   1563c:	2088703a 	and	r4,r4,r2
   15640:	b10b883a 	add	r5,r22,r4
   15644:	00c00144 	movi	r3,5
   15648:	28c00215 	stw	r3,8(r5)
   1564c:	28c00115 	stw	r3,4(r5)
   15650:	b0800117 	ldw	r2,4(r22)
   15654:	1080004c 	andi	r2,r2,1
   15658:	2084b03a 	or	r2,r4,r2
   1565c:	b0800115 	stw	r2,4(r22)
   15660:	313fdd2e 	bgeu	r6,r4,155d8 <_malloc_r+0x58c>
   15664:	b1400204 	addi	r5,r22,8
   15668:	9009883a 	mov	r4,r18
   1566c:	00144c40 	call	144c4 <_free_r>
   15670:	e4000217 	ldw	r16,8(fp)
   15674:	003fd806 	br	155d8 <_malloc_r+0x58c>
   15678:	00800504 	movi	r2,20
   1567c:	11001536 	bltu	r2,r4,156d4 <_malloc_r+0x688>
   15680:	210016c4 	addi	r4,r4,91
   15684:	200690fa 	slli	r3,r4,3
   15688:	003fa606 	br	15524 <_malloc_r+0x4d8>
   1568c:	8804d4ba 	srli	r2,r17,18
   15690:	11801f04 	addi	r6,r2,124
   15694:	300490fa 	slli	r2,r6,3
   15698:	003e9906 	br	15100 <_malloc_r+0xb4>
   1569c:	2009d0ba 	srai	r4,r4,2
   156a0:	01400134 	movhi	r5,4
   156a4:	2961e704 	addi	r5,r5,-30820
   156a8:	00c00044 	movi	r3,1
   156ac:	28800117 	ldw	r2,4(r5)
   156b0:	1906983a 	sll	r3,r3,r4
   156b4:	10c4b03a 	or	r2,r2,r3
   156b8:	28800115 	stw	r2,4(r5)
   156bc:	003fa306 	br	1554c <_malloc_r+0x500>
   156c0:	0027883a 	mov	r19,zero
   156c4:	00c00044 	movi	r3,1
   156c8:	003f8606 	br	154e4 <_malloc_r+0x498>
   156cc:	d1200515 	stw	r4,-32748(gp)
   156d0:	003f7306 	br	154a0 <_malloc_r+0x454>
   156d4:	00801504 	movi	r2,84
   156d8:	11001936 	bltu	r2,r4,15740 <_malloc_r+0x6f4>
   156dc:	2804d33a 	srli	r2,r5,12
   156e0:	11001b84 	addi	r4,r2,110
   156e4:	200690fa 	slli	r3,r4,3
   156e8:	003f8e06 	br	15524 <_malloc_r+0x4d8>
   156ec:	480b883a 	mov	r5,r9
   156f0:	6807883a 	mov	r3,r13
   156f4:	288000cc 	andi	r2,r5,3
   156f8:	18fffe04 	addi	r3,r3,-8
   156fc:	297fffc4 	addi	r5,r5,-1
   15700:	10001526 	beq	r2,zero,15758 <_malloc_r+0x70c>
   15704:	18800217 	ldw	r2,8(r3)
   15708:	10fffa26 	beq	r2,r3,156f4 <_malloc_r+0x6a8>
   1570c:	2109883a 	add	r4,r4,r4
   15710:	393f1e36 	bltu	r7,r4,1538c <_malloc_r+0x340>
   15714:	203f1d26 	beq	r4,zero,1538c <_malloc_r+0x340>
   15718:	21c4703a 	and	r2,r4,r7
   1571c:	10000226 	beq	r2,zero,15728 <_malloc_r+0x6dc>
   15720:	6013883a 	mov	r9,r12
   15724:	003ee106 	br	152ac <_malloc_r+0x260>
   15728:	2109883a 	add	r4,r4,r4
   1572c:	3904703a 	and	r2,r7,r4
   15730:	63000104 	addi	r12,r12,4
   15734:	103ffc26 	beq	r2,zero,15728 <_malloc_r+0x6dc>
   15738:	6013883a 	mov	r9,r12
   1573c:	003edb06 	br	152ac <_malloc_r+0x260>
   15740:	00805504 	movi	r2,340
   15744:	11000836 	bltu	r2,r4,15768 <_malloc_r+0x71c>
   15748:	2804d3fa 	srli	r2,r5,15
   1574c:	11001dc4 	addi	r4,r2,119
   15750:	200690fa 	slli	r3,r4,3
   15754:	003f7306 	br	15524 <_malloc_r+0x4d8>
   15758:	0104303a 	nor	r2,zero,r4
   1575c:	388e703a 	and	r7,r7,r2
   15760:	e1c00115 	stw	r7,4(fp)
   15764:	003fe906 	br	1570c <_malloc_r+0x6c0>
   15768:	00815504 	movi	r2,1364
   1576c:	1100032e 	bgeu	r2,r4,1577c <_malloc_r+0x730>
   15770:	01001f84 	movi	r4,126
   15774:	00c0fc04 	movi	r3,1008
   15778:	003f6a06 	br	15524 <_malloc_r+0x4d8>
   1577c:	2804d4ba 	srli	r2,r5,18
   15780:	11001f04 	addi	r4,r2,124
   15784:	200690fa 	slli	r3,r4,3
   15788:	003f6606 	br	15524 <_malloc_r+0x4d8>

0001578c <memchr>:
   1578c:	008000c4 	movi	r2,3
   15790:	29403fcc 	andi	r5,r5,255
   15794:	2007883a 	mov	r3,r4
   15798:	1180022e 	bgeu	r2,r6,157a4 <memchr+0x18>
   1579c:	2084703a 	and	r2,r4,r2
   157a0:	10000b26 	beq	r2,zero,157d0 <memchr+0x44>
   157a4:	313fffc4 	addi	r4,r6,-1
   157a8:	3000051e 	bne	r6,zero,157c0 <memchr+0x34>
   157ac:	00002c06 	br	15860 <memchr+0xd4>
   157b0:	213fffc4 	addi	r4,r4,-1
   157b4:	00bfffc4 	movi	r2,-1
   157b8:	18c00044 	addi	r3,r3,1
   157bc:	20802826 	beq	r4,r2,15860 <memchr+0xd4>
   157c0:	18800003 	ldbu	r2,0(r3)
   157c4:	28bffa1e 	bne	r5,r2,157b0 <memchr+0x24>
   157c8:	1805883a 	mov	r2,r3
   157cc:	f800283a 	ret
   157d0:	0011883a 	mov	r8,zero
   157d4:	0007883a 	mov	r3,zero
   157d8:	01c00104 	movi	r7,4
   157dc:	4004923a 	slli	r2,r8,8
   157e0:	18c00044 	addi	r3,r3,1
   157e4:	1151883a 	add	r8,r2,r5
   157e8:	19fffc1e 	bne	r3,r7,157dc <memchr+0x50>
   157ec:	02bfbff4 	movhi	r10,65279
   157f0:	52bfbfc4 	addi	r10,r10,-257
   157f4:	02602074 	movhi	r9,32897
   157f8:	4a602004 	addi	r9,r9,-32640
   157fc:	02c000c4 	movi	r11,3
   15800:	20800017 	ldw	r2,0(r4)
   15804:	31bfff04 	addi	r6,r6,-4
   15808:	200f883a 	mov	r7,r4
   1580c:	1204f03a 	xor	r2,r2,r8
   15810:	1287883a 	add	r3,r2,r10
   15814:	1a46703a 	and	r3,r3,r9
   15818:	0084303a 	nor	r2,zero,r2
   1581c:	10c4703a 	and	r2,r2,r3
   15820:	10000b26 	beq	r2,zero,15850 <memchr+0xc4>
   15824:	20800003 	ldbu	r2,0(r4)
   15828:	28800f26 	beq	r5,r2,15868 <memchr+0xdc>
   1582c:	20800043 	ldbu	r2,1(r4)
   15830:	21c00044 	addi	r7,r4,1
   15834:	28800c26 	beq	r5,r2,15868 <memchr+0xdc>
   15838:	20800083 	ldbu	r2,2(r4)
   1583c:	21c00084 	addi	r7,r4,2
   15840:	28800926 	beq	r5,r2,15868 <memchr+0xdc>
   15844:	208000c3 	ldbu	r2,3(r4)
   15848:	21c000c4 	addi	r7,r4,3
   1584c:	28800626 	beq	r5,r2,15868 <memchr+0xdc>
   15850:	21000104 	addi	r4,r4,4
   15854:	59bfea36 	bltu	r11,r6,15800 <memchr+0x74>
   15858:	2007883a 	mov	r3,r4
   1585c:	003fd106 	br	157a4 <memchr+0x18>
   15860:	0005883a 	mov	r2,zero
   15864:	f800283a 	ret
   15868:	3805883a 	mov	r2,r7
   1586c:	f800283a 	ret

00015870 <memcpy>:
   15870:	01c003c4 	movi	r7,15
   15874:	2007883a 	mov	r3,r4
   15878:	3980032e 	bgeu	r7,r6,15888 <memcpy+0x18>
   1587c:	2904b03a 	or	r2,r5,r4
   15880:	108000cc 	andi	r2,r2,3
   15884:	10000926 	beq	r2,zero,158ac <memcpy+0x3c>
   15888:	30000626 	beq	r6,zero,158a4 <memcpy+0x34>
   1588c:	30cd883a 	add	r6,r6,r3
   15890:	28800003 	ldbu	r2,0(r5)
   15894:	29400044 	addi	r5,r5,1
   15898:	18800005 	stb	r2,0(r3)
   1589c:	18c00044 	addi	r3,r3,1
   158a0:	30fffb1e 	bne	r6,r3,15890 <memcpy+0x20>
   158a4:	2005883a 	mov	r2,r4
   158a8:	f800283a 	ret
   158ac:	3811883a 	mov	r8,r7
   158b0:	200f883a 	mov	r7,r4
   158b4:	28c00017 	ldw	r3,0(r5)
   158b8:	31bffc04 	addi	r6,r6,-16
   158bc:	38c00015 	stw	r3,0(r7)
   158c0:	28800117 	ldw	r2,4(r5)
   158c4:	38800115 	stw	r2,4(r7)
   158c8:	28c00217 	ldw	r3,8(r5)
   158cc:	38c00215 	stw	r3,8(r7)
   158d0:	28800317 	ldw	r2,12(r5)
   158d4:	29400404 	addi	r5,r5,16
   158d8:	38800315 	stw	r2,12(r7)
   158dc:	39c00404 	addi	r7,r7,16
   158e0:	41bff436 	bltu	r8,r6,158b4 <memcpy+0x44>
   158e4:	008000c4 	movi	r2,3
   158e8:	1180072e 	bgeu	r2,r6,15908 <memcpy+0x98>
   158ec:	1007883a 	mov	r3,r2
   158f0:	28800017 	ldw	r2,0(r5)
   158f4:	31bfff04 	addi	r6,r6,-4
   158f8:	29400104 	addi	r5,r5,4
   158fc:	38800015 	stw	r2,0(r7)
   15900:	39c00104 	addi	r7,r7,4
   15904:	19bffa36 	bltu	r3,r6,158f0 <memcpy+0x80>
   15908:	3807883a 	mov	r3,r7
   1590c:	003fde06 	br	15888 <memcpy+0x18>

00015910 <memmove>:
   15910:	2807883a 	mov	r3,r5
   15914:	2011883a 	mov	r8,r4
   15918:	29000c2e 	bgeu	r5,r4,1594c <memmove+0x3c>
   1591c:	298f883a 	add	r7,r5,r6
   15920:	21c00a2e 	bgeu	r4,r7,1594c <memmove+0x3c>
   15924:	30000726 	beq	r6,zero,15944 <memmove+0x34>
   15928:	2187883a 	add	r3,r4,r6
   1592c:	198dc83a 	sub	r6,r3,r6
   15930:	39ffffc4 	addi	r7,r7,-1
   15934:	38800003 	ldbu	r2,0(r7)
   15938:	18ffffc4 	addi	r3,r3,-1
   1593c:	18800005 	stb	r2,0(r3)
   15940:	19bffb1e 	bne	r3,r6,15930 <memmove+0x20>
   15944:	2005883a 	mov	r2,r4
   15948:	f800283a 	ret
   1594c:	01c003c4 	movi	r7,15
   15950:	39800a36 	bltu	r7,r6,1597c <memmove+0x6c>
   15954:	303ffb26 	beq	r6,zero,15944 <memmove+0x34>
   15958:	400f883a 	mov	r7,r8
   1595c:	320d883a 	add	r6,r6,r8
   15960:	28800003 	ldbu	r2,0(r5)
   15964:	29400044 	addi	r5,r5,1
   15968:	38800005 	stb	r2,0(r7)
   1596c:	39c00044 	addi	r7,r7,1
   15970:	39bffb1e 	bne	r7,r6,15960 <memmove+0x50>
   15974:	2005883a 	mov	r2,r4
   15978:	f800283a 	ret
   1597c:	1904b03a 	or	r2,r3,r4
   15980:	108000cc 	andi	r2,r2,3
   15984:	103ff31e 	bne	r2,zero,15954 <memmove+0x44>
   15988:	3811883a 	mov	r8,r7
   1598c:	180b883a 	mov	r5,r3
   15990:	200f883a 	mov	r7,r4
   15994:	28c00017 	ldw	r3,0(r5)
   15998:	31bffc04 	addi	r6,r6,-16
   1599c:	38c00015 	stw	r3,0(r7)
   159a0:	28800117 	ldw	r2,4(r5)
   159a4:	38800115 	stw	r2,4(r7)
   159a8:	28c00217 	ldw	r3,8(r5)
   159ac:	38c00215 	stw	r3,8(r7)
   159b0:	28800317 	ldw	r2,12(r5)
   159b4:	29400404 	addi	r5,r5,16
   159b8:	38800315 	stw	r2,12(r7)
   159bc:	39c00404 	addi	r7,r7,16
   159c0:	41bff436 	bltu	r8,r6,15994 <memmove+0x84>
   159c4:	008000c4 	movi	r2,3
   159c8:	1180072e 	bgeu	r2,r6,159e8 <memmove+0xd8>
   159cc:	1007883a 	mov	r3,r2
   159d0:	28800017 	ldw	r2,0(r5)
   159d4:	31bfff04 	addi	r6,r6,-4
   159d8:	29400104 	addi	r5,r5,4
   159dc:	38800015 	stw	r2,0(r7)
   159e0:	39c00104 	addi	r7,r7,4
   159e4:	19bffa36 	bltu	r3,r6,159d0 <memmove+0xc0>
   159e8:	3811883a 	mov	r8,r7
   159ec:	003fd906 	br	15954 <memmove+0x44>

000159f0 <memset>:
   159f0:	008000c4 	movi	r2,3
   159f4:	29403fcc 	andi	r5,r5,255
   159f8:	2007883a 	mov	r3,r4
   159fc:	1180022e 	bgeu	r2,r6,15a08 <memset+0x18>
   15a00:	2084703a 	and	r2,r4,r2
   15a04:	10000826 	beq	r2,zero,15a28 <memset+0x38>
   15a08:	30000526 	beq	r6,zero,15a20 <memset+0x30>
   15a0c:	2805883a 	mov	r2,r5
   15a10:	30cd883a 	add	r6,r6,r3
   15a14:	18800005 	stb	r2,0(r3)
   15a18:	18c00044 	addi	r3,r3,1
   15a1c:	19bffd1e 	bne	r3,r6,15a14 <memset+0x24>
   15a20:	2005883a 	mov	r2,r4
   15a24:	f800283a 	ret
   15a28:	2804923a 	slli	r2,r5,8
   15a2c:	020003c4 	movi	r8,15
   15a30:	200f883a 	mov	r7,r4
   15a34:	2884b03a 	or	r2,r5,r2
   15a38:	1006943a 	slli	r3,r2,16
   15a3c:	10c6b03a 	or	r3,r2,r3
   15a40:	41800a2e 	bgeu	r8,r6,15a6c <memset+0x7c>
   15a44:	4005883a 	mov	r2,r8
   15a48:	31bffc04 	addi	r6,r6,-16
   15a4c:	38c00015 	stw	r3,0(r7)
   15a50:	38c00115 	stw	r3,4(r7)
   15a54:	38c00215 	stw	r3,8(r7)
   15a58:	38c00315 	stw	r3,12(r7)
   15a5c:	39c00404 	addi	r7,r7,16
   15a60:	11bff936 	bltu	r2,r6,15a48 <memset+0x58>
   15a64:	008000c4 	movi	r2,3
   15a68:	1180052e 	bgeu	r2,r6,15a80 <memset+0x90>
   15a6c:	31bfff04 	addi	r6,r6,-4
   15a70:	008000c4 	movi	r2,3
   15a74:	38c00015 	stw	r3,0(r7)
   15a78:	39c00104 	addi	r7,r7,4
   15a7c:	11bffb36 	bltu	r2,r6,15a6c <memset+0x7c>
   15a80:	3807883a 	mov	r3,r7
   15a84:	003fe006 	br	15a08 <memset+0x18>

00015a88 <_Bfree>:
   15a88:	28000826 	beq	r5,zero,15aac <_Bfree+0x24>
   15a8c:	28800117 	ldw	r2,4(r5)
   15a90:	21001317 	ldw	r4,76(r4)
   15a94:	1085883a 	add	r2,r2,r2
   15a98:	1085883a 	add	r2,r2,r2
   15a9c:	1105883a 	add	r2,r2,r4
   15aa0:	10c00017 	ldw	r3,0(r2)
   15aa4:	28c00015 	stw	r3,0(r5)
   15aa8:	11400015 	stw	r5,0(r2)
   15aac:	f800283a 	ret

00015ab0 <__hi0bits>:
   15ab0:	20bfffec 	andhi	r2,r4,65535
   15ab4:	10001426 	beq	r2,zero,15b08 <__hi0bits+0x58>
   15ab8:	0007883a 	mov	r3,zero
   15abc:	20bfc02c 	andhi	r2,r4,65280
   15ac0:	1000021e 	bne	r2,zero,15acc <__hi0bits+0x1c>
   15ac4:	2008923a 	slli	r4,r4,8
   15ac8:	18c00204 	addi	r3,r3,8
   15acc:	20bc002c 	andhi	r2,r4,61440
   15ad0:	1000021e 	bne	r2,zero,15adc <__hi0bits+0x2c>
   15ad4:	2008913a 	slli	r4,r4,4
   15ad8:	18c00104 	addi	r3,r3,4
   15adc:	20b0002c 	andhi	r2,r4,49152
   15ae0:	1000031e 	bne	r2,zero,15af0 <__hi0bits+0x40>
   15ae4:	2105883a 	add	r2,r4,r4
   15ae8:	18c00084 	addi	r3,r3,2
   15aec:	1089883a 	add	r4,r2,r2
   15af0:	20000316 	blt	r4,zero,15b00 <__hi0bits+0x50>
   15af4:	2090002c 	andhi	r2,r4,16384
   15af8:	10000626 	beq	r2,zero,15b14 <__hi0bits+0x64>
   15afc:	18c00044 	addi	r3,r3,1
   15b00:	1805883a 	mov	r2,r3
   15b04:	f800283a 	ret
   15b08:	2008943a 	slli	r4,r4,16
   15b0c:	00c00404 	movi	r3,16
   15b10:	003fea06 	br	15abc <__hi0bits+0xc>
   15b14:	00c00804 	movi	r3,32
   15b18:	1805883a 	mov	r2,r3
   15b1c:	f800283a 	ret

00015b20 <__lo0bits>:
   15b20:	20c00017 	ldw	r3,0(r4)
   15b24:	188001cc 	andi	r2,r3,7
   15b28:	10000a26 	beq	r2,zero,15b54 <__lo0bits+0x34>
   15b2c:	1880004c 	andi	r2,r3,1
   15b30:	1005003a 	cmpeq	r2,r2,zero
   15b34:	10002126 	beq	r2,zero,15bbc <__lo0bits+0x9c>
   15b38:	1880008c 	andi	r2,r3,2
   15b3c:	1000251e 	bne	r2,zero,15bd4 <__lo0bits+0xb4>
   15b40:	1804d0ba 	srli	r2,r3,2
   15b44:	01400084 	movi	r5,2
   15b48:	20800015 	stw	r2,0(r4)
   15b4c:	2805883a 	mov	r2,r5
   15b50:	f800283a 	ret
   15b54:	18bfffcc 	andi	r2,r3,65535
   15b58:	10001526 	beq	r2,zero,15bb0 <__lo0bits+0x90>
   15b5c:	000b883a 	mov	r5,zero
   15b60:	18803fcc 	andi	r2,r3,255
   15b64:	1000021e 	bne	r2,zero,15b70 <__lo0bits+0x50>
   15b68:	1806d23a 	srli	r3,r3,8
   15b6c:	29400204 	addi	r5,r5,8
   15b70:	188003cc 	andi	r2,r3,15
   15b74:	1000021e 	bne	r2,zero,15b80 <__lo0bits+0x60>
   15b78:	1806d13a 	srli	r3,r3,4
   15b7c:	29400104 	addi	r5,r5,4
   15b80:	188000cc 	andi	r2,r3,3
   15b84:	1000021e 	bne	r2,zero,15b90 <__lo0bits+0x70>
   15b88:	1806d0ba 	srli	r3,r3,2
   15b8c:	29400084 	addi	r5,r5,2
   15b90:	1880004c 	andi	r2,r3,1
   15b94:	1000031e 	bne	r2,zero,15ba4 <__lo0bits+0x84>
   15b98:	1806d07a 	srli	r3,r3,1
   15b9c:	18000a26 	beq	r3,zero,15bc8 <__lo0bits+0xa8>
   15ba0:	29400044 	addi	r5,r5,1
   15ba4:	2805883a 	mov	r2,r5
   15ba8:	20c00015 	stw	r3,0(r4)
   15bac:	f800283a 	ret
   15bb0:	1806d43a 	srli	r3,r3,16
   15bb4:	01400404 	movi	r5,16
   15bb8:	003fe906 	br	15b60 <__lo0bits+0x40>
   15bbc:	000b883a 	mov	r5,zero
   15bc0:	2805883a 	mov	r2,r5
   15bc4:	f800283a 	ret
   15bc8:	01400804 	movi	r5,32
   15bcc:	2805883a 	mov	r2,r5
   15bd0:	f800283a 	ret
   15bd4:	1804d07a 	srli	r2,r3,1
   15bd8:	01400044 	movi	r5,1
   15bdc:	20800015 	stw	r2,0(r4)
   15be0:	003fda06 	br	15b4c <__lo0bits+0x2c>

00015be4 <__mcmp>:
   15be4:	20800417 	ldw	r2,16(r4)
   15be8:	28c00417 	ldw	r3,16(r5)
   15bec:	10cfc83a 	sub	r7,r2,r3
   15bf0:	38000c1e 	bne	r7,zero,15c24 <__mcmp+0x40>
   15bf4:	18c5883a 	add	r2,r3,r3
   15bf8:	1085883a 	add	r2,r2,r2
   15bfc:	10c00504 	addi	r3,r2,20
   15c00:	21000504 	addi	r4,r4,20
   15c04:	28cb883a 	add	r5,r5,r3
   15c08:	2085883a 	add	r2,r4,r2
   15c0c:	10bfff04 	addi	r2,r2,-4
   15c10:	297fff04 	addi	r5,r5,-4
   15c14:	11800017 	ldw	r6,0(r2)
   15c18:	28c00017 	ldw	r3,0(r5)
   15c1c:	30c0031e 	bne	r6,r3,15c2c <__mcmp+0x48>
   15c20:	20bffa36 	bltu	r4,r2,15c0c <__mcmp+0x28>
   15c24:	3805883a 	mov	r2,r7
   15c28:	f800283a 	ret
   15c2c:	30c00336 	bltu	r6,r3,15c3c <__mcmp+0x58>
   15c30:	01c00044 	movi	r7,1
   15c34:	3805883a 	mov	r2,r7
   15c38:	f800283a 	ret
   15c3c:	01ffffc4 	movi	r7,-1
   15c40:	003ff806 	br	15c24 <__mcmp+0x40>

00015c44 <__ulp>:
   15c44:	295ffc2c 	andhi	r5,r5,32752
   15c48:	013f3034 	movhi	r4,64704
   15c4c:	290b883a 	add	r5,r5,r4
   15c50:	0145c83a 	sub	r2,zero,r5
   15c54:	1007d53a 	srai	r3,r2,20
   15c58:	000d883a 	mov	r6,zero
   15c5c:	0140040e 	bge	zero,r5,15c70 <__ulp+0x2c>
   15c60:	280f883a 	mov	r7,r5
   15c64:	3807883a 	mov	r3,r7
   15c68:	3005883a 	mov	r2,r6
   15c6c:	f800283a 	ret
   15c70:	008004c4 	movi	r2,19
   15c74:	193ffb04 	addi	r4,r3,-20
   15c78:	10c00c0e 	bge	r2,r3,15cac <__ulp+0x68>
   15c7c:	008007c4 	movi	r2,31
   15c80:	1107c83a 	sub	r3,r2,r4
   15c84:	00800784 	movi	r2,30
   15c88:	01400044 	movi	r5,1
   15c8c:	11000216 	blt	r2,r4,15c98 <__ulp+0x54>
   15c90:	00800044 	movi	r2,1
   15c94:	10ca983a 	sll	r5,r2,r3
   15c98:	000f883a 	mov	r7,zero
   15c9c:	280d883a 	mov	r6,r5
   15ca0:	3807883a 	mov	r3,r7
   15ca4:	3005883a 	mov	r2,r6
   15ca8:	f800283a 	ret
   15cac:	00800234 	movhi	r2,8
   15cb0:	10cfd83a 	sra	r7,r2,r3
   15cb4:	000d883a 	mov	r6,zero
   15cb8:	3005883a 	mov	r2,r6
   15cbc:	3807883a 	mov	r3,r7
   15cc0:	f800283a 	ret

00015cc4 <__b2d>:
   15cc4:	20800417 	ldw	r2,16(r4)
   15cc8:	defff904 	addi	sp,sp,-28
   15ccc:	dd000415 	stw	r20,16(sp)
   15cd0:	1085883a 	add	r2,r2,r2
   15cd4:	25000504 	addi	r20,r4,20
   15cd8:	1085883a 	add	r2,r2,r2
   15cdc:	dc000015 	stw	r16,0(sp)
   15ce0:	a0a1883a 	add	r16,r20,r2
   15ce4:	dd400515 	stw	r21,20(sp)
   15ce8:	857fff17 	ldw	r21,-4(r16)
   15cec:	dc400115 	stw	r17,4(sp)
   15cf0:	dfc00615 	stw	ra,24(sp)
   15cf4:	a809883a 	mov	r4,r21
   15cf8:	2823883a 	mov	r17,r5
   15cfc:	dcc00315 	stw	r19,12(sp)
   15d00:	dc800215 	stw	r18,8(sp)
   15d04:	0015ab00 	call	15ab0 <__hi0bits>
   15d08:	100b883a 	mov	r5,r2
   15d0c:	00800804 	movi	r2,32
   15d10:	1145c83a 	sub	r2,r2,r5
   15d14:	88800015 	stw	r2,0(r17)
   15d18:	00800284 	movi	r2,10
   15d1c:	80ffff04 	addi	r3,r16,-4
   15d20:	11401416 	blt	r2,r5,15d74 <__b2d+0xb0>
   15d24:	008002c4 	movi	r2,11
   15d28:	1149c83a 	sub	r4,r2,r5
   15d2c:	a0c02736 	bltu	r20,r3,15dcc <__b2d+0x108>
   15d30:	000d883a 	mov	r6,zero
   15d34:	28800544 	addi	r2,r5,21
   15d38:	a906d83a 	srl	r3,r21,r4
   15d3c:	a884983a 	sll	r2,r21,r2
   15d40:	1ccffc34 	orhi	r19,r3,16368
   15d44:	11a4b03a 	or	r18,r2,r6
   15d48:	9005883a 	mov	r2,r18
   15d4c:	9807883a 	mov	r3,r19
   15d50:	dfc00617 	ldw	ra,24(sp)
   15d54:	dd400517 	ldw	r21,20(sp)
   15d58:	dd000417 	ldw	r20,16(sp)
   15d5c:	dcc00317 	ldw	r19,12(sp)
   15d60:	dc800217 	ldw	r18,8(sp)
   15d64:	dc400117 	ldw	r17,4(sp)
   15d68:	dc000017 	ldw	r16,0(sp)
   15d6c:	dec00704 	addi	sp,sp,28
   15d70:	f800283a 	ret
   15d74:	a0c00e36 	bltu	r20,r3,15db0 <__b2d+0xec>
   15d78:	293ffd44 	addi	r4,r5,-11
   15d7c:	000d883a 	mov	r6,zero
   15d80:	20000f26 	beq	r4,zero,15dc0 <__b2d+0xfc>
   15d84:	00800804 	movi	r2,32
   15d88:	110bc83a 	sub	r5,r2,r4
   15d8c:	a0c01236 	bltu	r20,r3,15dd8 <__b2d+0x114>
   15d90:	000f883a 	mov	r7,zero
   15d94:	a904983a 	sll	r2,r21,r4
   15d98:	3146d83a 	srl	r3,r6,r5
   15d9c:	3108983a 	sll	r4,r6,r4
   15da0:	108ffc34 	orhi	r2,r2,16368
   15da4:	18a6b03a 	or	r19,r3,r2
   15da8:	3924b03a 	or	r18,r7,r4
   15dac:	003fe606 	br	15d48 <__b2d+0x84>
   15db0:	293ffd44 	addi	r4,r5,-11
   15db4:	81bffe17 	ldw	r6,-8(r16)
   15db8:	80fffe04 	addi	r3,r16,-8
   15dbc:	203ff11e 	bne	r4,zero,15d84 <__b2d+0xc0>
   15dc0:	accffc34 	orhi	r19,r21,16368
   15dc4:	3025883a 	mov	r18,r6
   15dc8:	003fdf06 	br	15d48 <__b2d+0x84>
   15dcc:	18bfff17 	ldw	r2,-4(r3)
   15dd0:	110cd83a 	srl	r6,r2,r4
   15dd4:	003fd706 	br	15d34 <__b2d+0x70>
   15dd8:	18bfff17 	ldw	r2,-4(r3)
   15ddc:	114ed83a 	srl	r7,r2,r5
   15de0:	003fec06 	br	15d94 <__b2d+0xd0>

00015de4 <__ratio>:
   15de4:	defff904 	addi	sp,sp,-28
   15de8:	dc400215 	stw	r17,8(sp)
   15dec:	2823883a 	mov	r17,r5
   15df0:	d80b883a 	mov	r5,sp
   15df4:	dfc00615 	stw	ra,24(sp)
   15df8:	dd000515 	stw	r20,20(sp)
   15dfc:	dcc00415 	stw	r19,16(sp)
   15e00:	dc800315 	stw	r18,12(sp)
   15e04:	2025883a 	mov	r18,r4
   15e08:	0015cc40 	call	15cc4 <__b2d>
   15e0c:	8809883a 	mov	r4,r17
   15e10:	d9400104 	addi	r5,sp,4
   15e14:	1027883a 	mov	r19,r2
   15e18:	1829883a 	mov	r20,r3
   15e1c:	0015cc40 	call	15cc4 <__b2d>
   15e20:	89000417 	ldw	r4,16(r17)
   15e24:	91c00417 	ldw	r7,16(r18)
   15e28:	d9800117 	ldw	r6,4(sp)
   15e2c:	180b883a 	mov	r5,r3
   15e30:	390fc83a 	sub	r7,r7,r4
   15e34:	1009883a 	mov	r4,r2
   15e38:	d8800017 	ldw	r2,0(sp)
   15e3c:	380e917a 	slli	r7,r7,5
   15e40:	2011883a 	mov	r8,r4
   15e44:	1185c83a 	sub	r2,r2,r6
   15e48:	11c5883a 	add	r2,r2,r7
   15e4c:	1006953a 	slli	r3,r2,20
   15e50:	2813883a 	mov	r9,r5
   15e54:	00800d0e 	bge	zero,r2,15e8c <__ratio+0xa8>
   15e58:	1d29883a 	add	r20,r3,r20
   15e5c:	a00b883a 	mov	r5,r20
   15e60:	480f883a 	mov	r7,r9
   15e64:	9809883a 	mov	r4,r19
   15e68:	400d883a 	mov	r6,r8
   15e6c:	0018e2c0 	call	18e2c <__divdf3>
   15e70:	dfc00617 	ldw	ra,24(sp)
   15e74:	dd000517 	ldw	r20,20(sp)
   15e78:	dcc00417 	ldw	r19,16(sp)
   15e7c:	dc800317 	ldw	r18,12(sp)
   15e80:	dc400217 	ldw	r17,8(sp)
   15e84:	dec00704 	addi	sp,sp,28
   15e88:	f800283a 	ret
   15e8c:	28d3c83a 	sub	r9,r5,r3
   15e90:	003ff206 	br	15e5c <__ratio+0x78>

00015e94 <_mprec_log10>:
   15e94:	defffe04 	addi	sp,sp,-8
   15e98:	008005c4 	movi	r2,23
   15e9c:	dc000015 	stw	r16,0(sp)
   15ea0:	dfc00115 	stw	ra,4(sp)
   15ea4:	2021883a 	mov	r16,r4
   15ea8:	11000c16 	blt	r2,r4,15edc <_mprec_log10+0x48>
   15eac:	200490fa 	slli	r2,r4,3
   15eb0:	00c00134 	movhi	r3,4
   15eb4:	18e04b04 	addi	r3,r3,-32468
   15eb8:	10c5883a 	add	r2,r2,r3
   15ebc:	12400117 	ldw	r9,4(r2)
   15ec0:	12000017 	ldw	r8,0(r2)
   15ec4:	4807883a 	mov	r3,r9
   15ec8:	4005883a 	mov	r2,r8
   15ecc:	dfc00117 	ldw	ra,4(sp)
   15ed0:	dc000017 	ldw	r16,0(sp)
   15ed4:	dec00204 	addi	sp,sp,8
   15ed8:	f800283a 	ret
   15edc:	0011883a 	mov	r8,zero
   15ee0:	024ffc34 	movhi	r9,16368
   15ee4:	0005883a 	mov	r2,zero
   15ee8:	00d00934 	movhi	r3,16420
   15eec:	480b883a 	mov	r5,r9
   15ef0:	4009883a 	mov	r4,r8
   15ef4:	180f883a 	mov	r7,r3
   15ef8:	100d883a 	mov	r6,r2
   15efc:	0018a680 	call	18a68 <__muldf3>
   15f00:	843fffc4 	addi	r16,r16,-1
   15f04:	1011883a 	mov	r8,r2
   15f08:	1813883a 	mov	r9,r3
   15f0c:	803ff51e 	bne	r16,zero,15ee4 <_mprec_log10+0x50>
   15f10:	4005883a 	mov	r2,r8
   15f14:	4807883a 	mov	r3,r9
   15f18:	dfc00117 	ldw	ra,4(sp)
   15f1c:	dc000017 	ldw	r16,0(sp)
   15f20:	dec00204 	addi	sp,sp,8
   15f24:	f800283a 	ret

00015f28 <__copybits>:
   15f28:	297fffc4 	addi	r5,r5,-1
   15f2c:	30800417 	ldw	r2,16(r6)
   15f30:	280bd17a 	srai	r5,r5,5
   15f34:	31800504 	addi	r6,r6,20
   15f38:	1085883a 	add	r2,r2,r2
   15f3c:	294b883a 	add	r5,r5,r5
   15f40:	294b883a 	add	r5,r5,r5
   15f44:	1085883a 	add	r2,r2,r2
   15f48:	290b883a 	add	r5,r5,r4
   15f4c:	3087883a 	add	r3,r6,r2
   15f50:	29400104 	addi	r5,r5,4
   15f54:	30c0052e 	bgeu	r6,r3,15f6c <__copybits+0x44>
   15f58:	30800017 	ldw	r2,0(r6)
   15f5c:	31800104 	addi	r6,r6,4
   15f60:	20800015 	stw	r2,0(r4)
   15f64:	21000104 	addi	r4,r4,4
   15f68:	30fffb36 	bltu	r6,r3,15f58 <__copybits+0x30>
   15f6c:	2140032e 	bgeu	r4,r5,15f7c <__copybits+0x54>
   15f70:	20000015 	stw	zero,0(r4)
   15f74:	21000104 	addi	r4,r4,4
   15f78:	217ffd36 	bltu	r4,r5,15f70 <__copybits+0x48>
   15f7c:	f800283a 	ret

00015f80 <__any_on>:
   15f80:	20800417 	ldw	r2,16(r4)
   15f84:	2807d17a 	srai	r3,r5,5
   15f88:	21000504 	addi	r4,r4,20
   15f8c:	10c00d0e 	bge	r2,r3,15fc4 <__any_on+0x44>
   15f90:	1085883a 	add	r2,r2,r2
   15f94:	1085883a 	add	r2,r2,r2
   15f98:	208d883a 	add	r6,r4,r2
   15f9c:	2180182e 	bgeu	r4,r6,16000 <__any_on+0x80>
   15fa0:	30bfff17 	ldw	r2,-4(r6)
   15fa4:	30ffff04 	addi	r3,r6,-4
   15fa8:	1000041e 	bne	r2,zero,15fbc <__any_on+0x3c>
   15fac:	20c0142e 	bgeu	r4,r3,16000 <__any_on+0x80>
   15fb0:	18ffff04 	addi	r3,r3,-4
   15fb4:	18800017 	ldw	r2,0(r3)
   15fb8:	103ffc26 	beq	r2,zero,15fac <__any_on+0x2c>
   15fbc:	00800044 	movi	r2,1
   15fc0:	f800283a 	ret
   15fc4:	18800a0e 	bge	r3,r2,15ff0 <__any_on+0x70>
   15fc8:	294007cc 	andi	r5,r5,31
   15fcc:	28000826 	beq	r5,zero,15ff0 <__any_on+0x70>
   15fd0:	18c5883a 	add	r2,r3,r3
   15fd4:	1085883a 	add	r2,r2,r2
   15fd8:	208d883a 	add	r6,r4,r2
   15fdc:	30c00017 	ldw	r3,0(r6)
   15fe0:	1944d83a 	srl	r2,r3,r5
   15fe4:	1144983a 	sll	r2,r2,r5
   15fe8:	18bff41e 	bne	r3,r2,15fbc <__any_on+0x3c>
   15fec:	003feb06 	br	15f9c <__any_on+0x1c>
   15ff0:	18c5883a 	add	r2,r3,r3
   15ff4:	1085883a 	add	r2,r2,r2
   15ff8:	208d883a 	add	r6,r4,r2
   15ffc:	003fe706 	br	15f9c <__any_on+0x1c>
   16000:	0005883a 	mov	r2,zero
   16004:	f800283a 	ret

00016008 <_Balloc>:
   16008:	20c01317 	ldw	r3,76(r4)
   1600c:	defffb04 	addi	sp,sp,-20
   16010:	dcc00315 	stw	r19,12(sp)
   16014:	dc800215 	stw	r18,8(sp)
   16018:	dfc00415 	stw	ra,16(sp)
   1601c:	2825883a 	mov	r18,r5
   16020:	dc400115 	stw	r17,4(sp)
   16024:	dc000015 	stw	r16,0(sp)
   16028:	2027883a 	mov	r19,r4
   1602c:	01800404 	movi	r6,16
   16030:	01400104 	movi	r5,4
   16034:	18001726 	beq	r3,zero,16094 <_Balloc+0x8c>
   16038:	01400044 	movi	r5,1
   1603c:	9485883a 	add	r2,r18,r18
   16040:	2ca2983a 	sll	r17,r5,r18
   16044:	1085883a 	add	r2,r2,r2
   16048:	10c7883a 	add	r3,r2,r3
   1604c:	1c000017 	ldw	r16,0(r3)
   16050:	8c4d883a 	add	r6,r17,r17
   16054:	318d883a 	add	r6,r6,r6
   16058:	9809883a 	mov	r4,r19
   1605c:	31800504 	addi	r6,r6,20
   16060:	80001226 	beq	r16,zero,160ac <_Balloc+0xa4>
   16064:	80800017 	ldw	r2,0(r16)
   16068:	18800015 	stw	r2,0(r3)
   1606c:	80000415 	stw	zero,16(r16)
   16070:	80000315 	stw	zero,12(r16)
   16074:	8005883a 	mov	r2,r16
   16078:	dfc00417 	ldw	ra,16(sp)
   1607c:	dcc00317 	ldw	r19,12(sp)
   16080:	dc800217 	ldw	r18,8(sp)
   16084:	dc400117 	ldw	r17,4(sp)
   16088:	dc000017 	ldw	r16,0(sp)
   1608c:	dec00504 	addi	sp,sp,20
   16090:	f800283a 	ret
   16094:	00174680 	call	17468 <_calloc_r>
   16098:	1007883a 	mov	r3,r2
   1609c:	0021883a 	mov	r16,zero
   160a0:	98801315 	stw	r2,76(r19)
   160a4:	103fe41e 	bne	r2,zero,16038 <_Balloc+0x30>
   160a8:	003ff206 	br	16074 <_Balloc+0x6c>
   160ac:	00174680 	call	17468 <_calloc_r>
   160b0:	103ff026 	beq	r2,zero,16074 <_Balloc+0x6c>
   160b4:	1021883a 	mov	r16,r2
   160b8:	14800115 	stw	r18,4(r2)
   160bc:	14400215 	stw	r17,8(r2)
   160c0:	003fea06 	br	1606c <_Balloc+0x64>

000160c4 <__d2b>:
   160c4:	defff504 	addi	sp,sp,-44
   160c8:	dcc00515 	stw	r19,20(sp)
   160cc:	04c00044 	movi	r19,1
   160d0:	dc000215 	stw	r16,8(sp)
   160d4:	2821883a 	mov	r16,r5
   160d8:	980b883a 	mov	r5,r19
   160dc:	ddc00915 	stw	r23,36(sp)
   160e0:	dd800815 	stw	r22,32(sp)
   160e4:	dd400715 	stw	r21,28(sp)
   160e8:	dd000615 	stw	r20,24(sp)
   160ec:	dc800415 	stw	r18,16(sp)
   160f0:	dc400315 	stw	r17,12(sp)
   160f4:	dfc00a15 	stw	ra,40(sp)
   160f8:	3023883a 	mov	r17,r6
   160fc:	382d883a 	mov	r22,r7
   16100:	ddc00b17 	ldw	r23,44(sp)
   16104:	00160080 	call	16008 <_Balloc>
   16108:	1025883a 	mov	r18,r2
   1610c:	00a00034 	movhi	r2,32768
   16110:	10bfffc4 	addi	r2,r2,-1
   16114:	8888703a 	and	r4,r17,r2
   16118:	202ad53a 	srli	r21,r4,20
   1611c:	00800434 	movhi	r2,16
   16120:	10bfffc4 	addi	r2,r2,-1
   16124:	8886703a 	and	r3,r17,r2
   16128:	a829003a 	cmpeq	r20,r21,zero
   1612c:	800b883a 	mov	r5,r16
   16130:	d8c00115 	stw	r3,4(sp)
   16134:	94000504 	addi	r16,r18,20
   16138:	a000021e 	bne	r20,zero,16144 <__d2b+0x80>
   1613c:	18c00434 	orhi	r3,r3,16
   16140:	d8c00115 	stw	r3,4(sp)
   16144:	28002726 	beq	r5,zero,161e4 <__d2b+0x120>
   16148:	d809883a 	mov	r4,sp
   1614c:	d9400015 	stw	r5,0(sp)
   16150:	0015b200 	call	15b20 <__lo0bits>
   16154:	100d883a 	mov	r6,r2
   16158:	10003526 	beq	r2,zero,16230 <__d2b+0x16c>
   1615c:	d8c00117 	ldw	r3,4(sp)
   16160:	00800804 	movi	r2,32
   16164:	1185c83a 	sub	r2,r2,r6
   16168:	d9000017 	ldw	r4,0(sp)
   1616c:	1886983a 	sll	r3,r3,r2
   16170:	1906b03a 	or	r3,r3,r4
   16174:	90c00515 	stw	r3,20(r18)
   16178:	d8c00117 	ldw	r3,4(sp)
   1617c:	1986d83a 	srl	r3,r3,r6
   16180:	d8c00115 	stw	r3,4(sp)
   16184:	180b003a 	cmpeq	r5,r3,zero
   16188:	00800084 	movi	r2,2
   1618c:	114bc83a 	sub	r5,r2,r5
   16190:	80c00115 	stw	r3,4(r16)
   16194:	91400415 	stw	r5,16(r18)
   16198:	a0001a1e 	bne	r20,zero,16204 <__d2b+0x140>
   1619c:	3545883a 	add	r2,r6,r21
   161a0:	10bef344 	addi	r2,r2,-1075
   161a4:	00c00d44 	movi	r3,53
   161a8:	b0800015 	stw	r2,0(r22)
   161ac:	1987c83a 	sub	r3,r3,r6
   161b0:	b8c00015 	stw	r3,0(r23)
   161b4:	9005883a 	mov	r2,r18
   161b8:	dfc00a17 	ldw	ra,40(sp)
   161bc:	ddc00917 	ldw	r23,36(sp)
   161c0:	dd800817 	ldw	r22,32(sp)
   161c4:	dd400717 	ldw	r21,28(sp)
   161c8:	dd000617 	ldw	r20,24(sp)
   161cc:	dcc00517 	ldw	r19,20(sp)
   161d0:	dc800417 	ldw	r18,16(sp)
   161d4:	dc400317 	ldw	r17,12(sp)
   161d8:	dc000217 	ldw	r16,8(sp)
   161dc:	dec00b04 	addi	sp,sp,44
   161e0:	f800283a 	ret
   161e4:	d9000104 	addi	r4,sp,4
   161e8:	0015b200 	call	15b20 <__lo0bits>
   161ec:	11800804 	addi	r6,r2,32
   161f0:	d8800117 	ldw	r2,4(sp)
   161f4:	94c00415 	stw	r19,16(r18)
   161f8:	980b883a 	mov	r5,r19
   161fc:	90800515 	stw	r2,20(r18)
   16200:	a03fe626 	beq	r20,zero,1619c <__d2b+0xd8>
   16204:	2945883a 	add	r2,r5,r5
   16208:	1085883a 	add	r2,r2,r2
   1620c:	1405883a 	add	r2,r2,r16
   16210:	113fff17 	ldw	r4,-4(r2)
   16214:	30fef384 	addi	r3,r6,-1074
   16218:	2820917a 	slli	r16,r5,5
   1621c:	b0c00015 	stw	r3,0(r22)
   16220:	0015ab00 	call	15ab0 <__hi0bits>
   16224:	80a1c83a 	sub	r16,r16,r2
   16228:	bc000015 	stw	r16,0(r23)
   1622c:	003fe106 	br	161b4 <__d2b+0xf0>
   16230:	d8800017 	ldw	r2,0(sp)
   16234:	90800515 	stw	r2,20(r18)
   16238:	d8c00117 	ldw	r3,4(sp)
   1623c:	003fd106 	br	16184 <__d2b+0xc0>

00016240 <__mdiff>:
   16240:	defffb04 	addi	sp,sp,-20
   16244:	dc000015 	stw	r16,0(sp)
   16248:	2821883a 	mov	r16,r5
   1624c:	dc800215 	stw	r18,8(sp)
   16250:	300b883a 	mov	r5,r6
   16254:	2025883a 	mov	r18,r4
   16258:	8009883a 	mov	r4,r16
   1625c:	dc400115 	stw	r17,4(sp)
   16260:	dfc00415 	stw	ra,16(sp)
   16264:	dcc00315 	stw	r19,12(sp)
   16268:	3023883a 	mov	r17,r6
   1626c:	0015be40 	call	15be4 <__mcmp>
   16270:	10004226 	beq	r2,zero,1637c <__mdiff+0x13c>
   16274:	10005016 	blt	r2,zero,163b8 <__mdiff+0x178>
   16278:	0027883a 	mov	r19,zero
   1627c:	81400117 	ldw	r5,4(r16)
   16280:	9009883a 	mov	r4,r18
   16284:	00160080 	call	16008 <_Balloc>
   16288:	1019883a 	mov	r12,r2
   1628c:	82800417 	ldw	r10,16(r16)
   16290:	88800417 	ldw	r2,16(r17)
   16294:	81800504 	addi	r6,r16,20
   16298:	5287883a 	add	r3,r10,r10
   1629c:	1085883a 	add	r2,r2,r2
   162a0:	18c7883a 	add	r3,r3,r3
   162a4:	1085883a 	add	r2,r2,r2
   162a8:	8a000504 	addi	r8,r17,20
   162ac:	64c00315 	stw	r19,12(r12)
   162b0:	30db883a 	add	r13,r6,r3
   162b4:	4097883a 	add	r11,r8,r2
   162b8:	61c00504 	addi	r7,r12,20
   162bc:	0013883a 	mov	r9,zero
   162c0:	31000017 	ldw	r4,0(r6)
   162c4:	41400017 	ldw	r5,0(r8)
   162c8:	42000104 	addi	r8,r8,4
   162cc:	20bfffcc 	andi	r2,r4,65535
   162d0:	28ffffcc 	andi	r3,r5,65535
   162d4:	10c5c83a 	sub	r2,r2,r3
   162d8:	1245883a 	add	r2,r2,r9
   162dc:	2008d43a 	srli	r4,r4,16
   162e0:	280ad43a 	srli	r5,r5,16
   162e4:	1007d43a 	srai	r3,r2,16
   162e8:	3880000d 	sth	r2,0(r7)
   162ec:	2149c83a 	sub	r4,r4,r5
   162f0:	20c9883a 	add	r4,r4,r3
   162f4:	3900008d 	sth	r4,2(r7)
   162f8:	31800104 	addi	r6,r6,4
   162fc:	39c00104 	addi	r7,r7,4
   16300:	2013d43a 	srai	r9,r4,16
   16304:	42ffee36 	bltu	r8,r11,162c0 <__mdiff+0x80>
   16308:	33400c2e 	bgeu	r6,r13,1633c <__mdiff+0xfc>
   1630c:	30800017 	ldw	r2,0(r6)
   16310:	31800104 	addi	r6,r6,4
   16314:	10ffffcc 	andi	r3,r2,65535
   16318:	1a47883a 	add	r3,r3,r9
   1631c:	1004d43a 	srli	r2,r2,16
   16320:	1809d43a 	srai	r4,r3,16
   16324:	38c0000d 	sth	r3,0(r7)
   16328:	1105883a 	add	r2,r2,r4
   1632c:	3880008d 	sth	r2,2(r7)
   16330:	1013d43a 	srai	r9,r2,16
   16334:	39c00104 	addi	r7,r7,4
   16338:	337ff436 	bltu	r6,r13,1630c <__mdiff+0xcc>
   1633c:	38bfff17 	ldw	r2,-4(r7)
   16340:	38ffff04 	addi	r3,r7,-4
   16344:	1000041e 	bne	r2,zero,16358 <__mdiff+0x118>
   16348:	18ffff04 	addi	r3,r3,-4
   1634c:	18800017 	ldw	r2,0(r3)
   16350:	52bfffc4 	addi	r10,r10,-1
   16354:	103ffc26 	beq	r2,zero,16348 <__mdiff+0x108>
   16358:	6005883a 	mov	r2,r12
   1635c:	62800415 	stw	r10,16(r12)
   16360:	dfc00417 	ldw	ra,16(sp)
   16364:	dcc00317 	ldw	r19,12(sp)
   16368:	dc800217 	ldw	r18,8(sp)
   1636c:	dc400117 	ldw	r17,4(sp)
   16370:	dc000017 	ldw	r16,0(sp)
   16374:	dec00504 	addi	sp,sp,20
   16378:	f800283a 	ret
   1637c:	9009883a 	mov	r4,r18
   16380:	000b883a 	mov	r5,zero
   16384:	00160080 	call	16008 <_Balloc>
   16388:	1019883a 	mov	r12,r2
   1638c:	00800044 	movi	r2,1
   16390:	60800415 	stw	r2,16(r12)
   16394:	6005883a 	mov	r2,r12
   16398:	60000515 	stw	zero,20(r12)
   1639c:	dfc00417 	ldw	ra,16(sp)
   163a0:	dcc00317 	ldw	r19,12(sp)
   163a4:	dc800217 	ldw	r18,8(sp)
   163a8:	dc400117 	ldw	r17,4(sp)
   163ac:	dc000017 	ldw	r16,0(sp)
   163b0:	dec00504 	addi	sp,sp,20
   163b4:	f800283a 	ret
   163b8:	880d883a 	mov	r6,r17
   163bc:	04c00044 	movi	r19,1
   163c0:	8023883a 	mov	r17,r16
   163c4:	3021883a 	mov	r16,r6
   163c8:	003fac06 	br	1627c <__mdiff+0x3c>

000163cc <__lshift>:
   163cc:	defff904 	addi	sp,sp,-28
   163d0:	28800417 	ldw	r2,16(r5)
   163d4:	dc000015 	stw	r16,0(sp)
   163d8:	3021d17a 	srai	r16,r6,5
   163dc:	28c00217 	ldw	r3,8(r5)
   163e0:	10800044 	addi	r2,r2,1
   163e4:	dc400115 	stw	r17,4(sp)
   163e8:	80a3883a 	add	r17,r16,r2
   163ec:	dd400515 	stw	r21,20(sp)
   163f0:	dd000415 	stw	r20,16(sp)
   163f4:	dc800215 	stw	r18,8(sp)
   163f8:	dfc00615 	stw	ra,24(sp)
   163fc:	2825883a 	mov	r18,r5
   16400:	dcc00315 	stw	r19,12(sp)
   16404:	3029883a 	mov	r20,r6
   16408:	202b883a 	mov	r21,r4
   1640c:	29400117 	ldw	r5,4(r5)
   16410:	1c40030e 	bge	r3,r17,16420 <__lshift+0x54>
   16414:	18c7883a 	add	r3,r3,r3
   16418:	29400044 	addi	r5,r5,1
   1641c:	1c7ffd16 	blt	r3,r17,16414 <__lshift+0x48>
   16420:	a809883a 	mov	r4,r21
   16424:	00160080 	call	16008 <_Balloc>
   16428:	1027883a 	mov	r19,r2
   1642c:	11400504 	addi	r5,r2,20
   16430:	0400090e 	bge	zero,r16,16458 <__lshift+0x8c>
   16434:	2805883a 	mov	r2,r5
   16438:	0007883a 	mov	r3,zero
   1643c:	18c00044 	addi	r3,r3,1
   16440:	10000015 	stw	zero,0(r2)
   16444:	10800104 	addi	r2,r2,4
   16448:	80fffc1e 	bne	r16,r3,1643c <__lshift+0x70>
   1644c:	8405883a 	add	r2,r16,r16
   16450:	1085883a 	add	r2,r2,r2
   16454:	288b883a 	add	r5,r5,r2
   16458:	90800417 	ldw	r2,16(r18)
   1645c:	91000504 	addi	r4,r18,20
   16460:	a18007cc 	andi	r6,r20,31
   16464:	1085883a 	add	r2,r2,r2
   16468:	1085883a 	add	r2,r2,r2
   1646c:	208f883a 	add	r7,r4,r2
   16470:	30001e26 	beq	r6,zero,164ec <__lshift+0x120>
   16474:	00800804 	movi	r2,32
   16478:	1191c83a 	sub	r8,r2,r6
   1647c:	0007883a 	mov	r3,zero
   16480:	20800017 	ldw	r2,0(r4)
   16484:	1184983a 	sll	r2,r2,r6
   16488:	1884b03a 	or	r2,r3,r2
   1648c:	28800015 	stw	r2,0(r5)
   16490:	20c00017 	ldw	r3,0(r4)
   16494:	21000104 	addi	r4,r4,4
   16498:	29400104 	addi	r5,r5,4
   1649c:	1a06d83a 	srl	r3,r3,r8
   164a0:	21fff736 	bltu	r4,r7,16480 <__lshift+0xb4>
   164a4:	28c00015 	stw	r3,0(r5)
   164a8:	18000126 	beq	r3,zero,164b0 <__lshift+0xe4>
   164ac:	8c400044 	addi	r17,r17,1
   164b0:	88bfffc4 	addi	r2,r17,-1
   164b4:	98800415 	stw	r2,16(r19)
   164b8:	a809883a 	mov	r4,r21
   164bc:	900b883a 	mov	r5,r18
   164c0:	0015a880 	call	15a88 <_Bfree>
   164c4:	9805883a 	mov	r2,r19
   164c8:	dfc00617 	ldw	ra,24(sp)
   164cc:	dd400517 	ldw	r21,20(sp)
   164d0:	dd000417 	ldw	r20,16(sp)
   164d4:	dcc00317 	ldw	r19,12(sp)
   164d8:	dc800217 	ldw	r18,8(sp)
   164dc:	dc400117 	ldw	r17,4(sp)
   164e0:	dc000017 	ldw	r16,0(sp)
   164e4:	dec00704 	addi	sp,sp,28
   164e8:	f800283a 	ret
   164ec:	20800017 	ldw	r2,0(r4)
   164f0:	21000104 	addi	r4,r4,4
   164f4:	28800015 	stw	r2,0(r5)
   164f8:	29400104 	addi	r5,r5,4
   164fc:	21ffec2e 	bgeu	r4,r7,164b0 <__lshift+0xe4>
   16500:	20800017 	ldw	r2,0(r4)
   16504:	21000104 	addi	r4,r4,4
   16508:	28800015 	stw	r2,0(r5)
   1650c:	29400104 	addi	r5,r5,4
   16510:	21fff636 	bltu	r4,r7,164ec <__lshift+0x120>
   16514:	003fe606 	br	164b0 <__lshift+0xe4>

00016518 <__multiply>:
   16518:	defff004 	addi	sp,sp,-64
   1651c:	dc800815 	stw	r18,32(sp)
   16520:	dc400715 	stw	r17,28(sp)
   16524:	2c800417 	ldw	r18,16(r5)
   16528:	34400417 	ldw	r17,16(r6)
   1652c:	dcc00915 	stw	r19,36(sp)
   16530:	dc000615 	stw	r16,24(sp)
   16534:	dfc00f15 	stw	ra,60(sp)
   16538:	df000e15 	stw	fp,56(sp)
   1653c:	ddc00d15 	stw	r23,52(sp)
   16540:	dd800c15 	stw	r22,48(sp)
   16544:	dd400b15 	stw	r21,44(sp)
   16548:	dd000a15 	stw	r20,40(sp)
   1654c:	2821883a 	mov	r16,r5
   16550:	3027883a 	mov	r19,r6
   16554:	9440040e 	bge	r18,r17,16568 <__multiply+0x50>
   16558:	8825883a 	mov	r18,r17
   1655c:	2c400417 	ldw	r17,16(r5)
   16560:	2827883a 	mov	r19,r5
   16564:	3021883a 	mov	r16,r6
   16568:	80800217 	ldw	r2,8(r16)
   1656c:	9447883a 	add	r3,r18,r17
   16570:	d8c00415 	stw	r3,16(sp)
   16574:	81400117 	ldw	r5,4(r16)
   16578:	10c0010e 	bge	r2,r3,16580 <__multiply+0x68>
   1657c:	29400044 	addi	r5,r5,1
   16580:	00160080 	call	16008 <_Balloc>
   16584:	d8800515 	stw	r2,20(sp)
   16588:	d9000417 	ldw	r4,16(sp)
   1658c:	d8c00517 	ldw	r3,20(sp)
   16590:	2105883a 	add	r2,r4,r4
   16594:	1085883a 	add	r2,r2,r2
   16598:	19000504 	addi	r4,r3,20
   1659c:	2085883a 	add	r2,r4,r2
   165a0:	d8800315 	stw	r2,12(sp)
   165a4:	2080052e 	bgeu	r4,r2,165bc <__multiply+0xa4>
   165a8:	2005883a 	mov	r2,r4
   165ac:	d8c00317 	ldw	r3,12(sp)
   165b0:	10000015 	stw	zero,0(r2)
   165b4:	10800104 	addi	r2,r2,4
   165b8:	10fffc36 	bltu	r2,r3,165ac <__multiply+0x94>
   165bc:	8c45883a 	add	r2,r17,r17
   165c0:	9487883a 	add	r3,r18,r18
   165c4:	9dc00504 	addi	r23,r19,20
   165c8:	1085883a 	add	r2,r2,r2
   165cc:	84000504 	addi	r16,r16,20
   165d0:	18c7883a 	add	r3,r3,r3
   165d4:	b885883a 	add	r2,r23,r2
   165d8:	dc000015 	stw	r16,0(sp)
   165dc:	d8800215 	stw	r2,8(sp)
   165e0:	80f9883a 	add	fp,r16,r3
   165e4:	b880432e 	bgeu	r23,r2,166f4 <__multiply+0x1dc>
   165e8:	d9000115 	stw	r4,4(sp)
   165ec:	b9000017 	ldw	r4,0(r23)
   165f0:	253fffcc 	andi	r20,r4,65535
   165f4:	a0001a26 	beq	r20,zero,16660 <__multiply+0x148>
   165f8:	dcc00017 	ldw	r19,0(sp)
   165fc:	dc800117 	ldw	r18,4(sp)
   16600:	002b883a 	mov	r21,zero
   16604:	9c400017 	ldw	r17,0(r19)
   16608:	94000017 	ldw	r16,0(r18)
   1660c:	a009883a 	mov	r4,r20
   16610:	897fffcc 	andi	r5,r17,65535
   16614:	00197dc0 	call	197dc <__mulsi3>
   16618:	880ad43a 	srli	r5,r17,16
   1661c:	80ffffcc 	andi	r3,r16,65535
   16620:	a8c7883a 	add	r3,r21,r3
   16624:	a009883a 	mov	r4,r20
   16628:	10e3883a 	add	r17,r2,r3
   1662c:	8020d43a 	srli	r16,r16,16
   16630:	00197dc0 	call	197dc <__mulsi3>
   16634:	8806d43a 	srli	r3,r17,16
   16638:	1405883a 	add	r2,r2,r16
   1663c:	9cc00104 	addi	r19,r19,4
   16640:	1887883a 	add	r3,r3,r2
   16644:	90c0008d 	sth	r3,2(r18)
   16648:	9440000d 	sth	r17,0(r18)
   1664c:	182ad43a 	srli	r21,r3,16
   16650:	94800104 	addi	r18,r18,4
   16654:	9f3feb36 	bltu	r19,fp,16604 <__multiply+0xec>
   16658:	95400015 	stw	r21,0(r18)
   1665c:	b9000017 	ldw	r4,0(r23)
   16660:	202ad43a 	srli	r21,r4,16
   16664:	a8001c26 	beq	r21,zero,166d8 <__multiply+0x1c0>
   16668:	d9000117 	ldw	r4,4(sp)
   1666c:	dd000017 	ldw	r20,0(sp)
   16670:	002d883a 	mov	r22,zero
   16674:	24c00017 	ldw	r19,0(r4)
   16678:	2025883a 	mov	r18,r4
   1667c:	9823883a 	mov	r17,r19
   16680:	a4000017 	ldw	r16,0(r20)
   16684:	a809883a 	mov	r4,r21
   16688:	a5000104 	addi	r20,r20,4
   1668c:	817fffcc 	andi	r5,r16,65535
   16690:	00197dc0 	call	197dc <__mulsi3>
   16694:	8806d43a 	srli	r3,r17,16
   16698:	800ad43a 	srli	r5,r16,16
   1669c:	94c0000d 	sth	r19,0(r18)
   166a0:	b0c7883a 	add	r3,r22,r3
   166a4:	10e1883a 	add	r16,r2,r3
   166a8:	9400008d 	sth	r16,2(r18)
   166ac:	a809883a 	mov	r4,r21
   166b0:	94800104 	addi	r18,r18,4
   166b4:	00197dc0 	call	197dc <__mulsi3>
   166b8:	94400017 	ldw	r17,0(r18)
   166bc:	8020d43a 	srli	r16,r16,16
   166c0:	88ffffcc 	andi	r3,r17,65535
   166c4:	10c5883a 	add	r2,r2,r3
   166c8:	80a7883a 	add	r19,r16,r2
   166cc:	982cd43a 	srli	r22,r19,16
   166d0:	a73feb36 	bltu	r20,fp,16680 <__multiply+0x168>
   166d4:	94c00015 	stw	r19,0(r18)
   166d8:	d8800217 	ldw	r2,8(sp)
   166dc:	bdc00104 	addi	r23,r23,4
   166e0:	b880042e 	bgeu	r23,r2,166f4 <__multiply+0x1dc>
   166e4:	d8c00117 	ldw	r3,4(sp)
   166e8:	18c00104 	addi	r3,r3,4
   166ec:	d8c00115 	stw	r3,4(sp)
   166f0:	003fbe06 	br	165ec <__multiply+0xd4>
   166f4:	d9000417 	ldw	r4,16(sp)
   166f8:	01000c0e 	bge	zero,r4,1672c <__multiply+0x214>
   166fc:	d8c00317 	ldw	r3,12(sp)
   16700:	18bfff17 	ldw	r2,-4(r3)
   16704:	18ffff04 	addi	r3,r3,-4
   16708:	10000326 	beq	r2,zero,16718 <__multiply+0x200>
   1670c:	00000706 	br	1672c <__multiply+0x214>
   16710:	18800017 	ldw	r2,0(r3)
   16714:	1000051e 	bne	r2,zero,1672c <__multiply+0x214>
   16718:	d9000417 	ldw	r4,16(sp)
   1671c:	18ffff04 	addi	r3,r3,-4
   16720:	213fffc4 	addi	r4,r4,-1
   16724:	d9000415 	stw	r4,16(sp)
   16728:	203ff91e 	bne	r4,zero,16710 <__multiply+0x1f8>
   1672c:	d8800417 	ldw	r2,16(sp)
   16730:	d8c00517 	ldw	r3,20(sp)
   16734:	18800415 	stw	r2,16(r3)
   16738:	1805883a 	mov	r2,r3
   1673c:	dfc00f17 	ldw	ra,60(sp)
   16740:	df000e17 	ldw	fp,56(sp)
   16744:	ddc00d17 	ldw	r23,52(sp)
   16748:	dd800c17 	ldw	r22,48(sp)
   1674c:	dd400b17 	ldw	r21,44(sp)
   16750:	dd000a17 	ldw	r20,40(sp)
   16754:	dcc00917 	ldw	r19,36(sp)
   16758:	dc800817 	ldw	r18,32(sp)
   1675c:	dc400717 	ldw	r17,28(sp)
   16760:	dc000617 	ldw	r16,24(sp)
   16764:	dec01004 	addi	sp,sp,64
   16768:	f800283a 	ret

0001676c <__i2b>:
   1676c:	defffd04 	addi	sp,sp,-12
   16770:	dc000015 	stw	r16,0(sp)
   16774:	04000044 	movi	r16,1
   16778:	dc800115 	stw	r18,4(sp)
   1677c:	2825883a 	mov	r18,r5
   16780:	800b883a 	mov	r5,r16
   16784:	dfc00215 	stw	ra,8(sp)
   16788:	00160080 	call	16008 <_Balloc>
   1678c:	14000415 	stw	r16,16(r2)
   16790:	14800515 	stw	r18,20(r2)
   16794:	dfc00217 	ldw	ra,8(sp)
   16798:	dc800117 	ldw	r18,4(sp)
   1679c:	dc000017 	ldw	r16,0(sp)
   167a0:	dec00304 	addi	sp,sp,12
   167a4:	f800283a 	ret

000167a8 <__multadd>:
   167a8:	defff604 	addi	sp,sp,-40
   167ac:	dd800615 	stw	r22,24(sp)
   167b0:	2d800417 	ldw	r22,16(r5)
   167b4:	df000815 	stw	fp,32(sp)
   167b8:	ddc00715 	stw	r23,28(sp)
   167bc:	dd400515 	stw	r21,20(sp)
   167c0:	dd000415 	stw	r20,16(sp)
   167c4:	dcc00315 	stw	r19,12(sp)
   167c8:	dc800215 	stw	r18,8(sp)
   167cc:	dfc00915 	stw	ra,36(sp)
   167d0:	dc400115 	stw	r17,4(sp)
   167d4:	dc000015 	stw	r16,0(sp)
   167d8:	282f883a 	mov	r23,r5
   167dc:	2039883a 	mov	fp,r4
   167e0:	302b883a 	mov	r21,r6
   167e4:	3829883a 	mov	r20,r7
   167e8:	2c800504 	addi	r18,r5,20
   167ec:	0027883a 	mov	r19,zero
   167f0:	94400017 	ldw	r17,0(r18)
   167f4:	a80b883a 	mov	r5,r21
   167f8:	9cc00044 	addi	r19,r19,1
   167fc:	893fffcc 	andi	r4,r17,65535
   16800:	00197dc0 	call	197dc <__mulsi3>
   16804:	8808d43a 	srli	r4,r17,16
   16808:	1521883a 	add	r16,r2,r20
   1680c:	a80b883a 	mov	r5,r21
   16810:	00197dc0 	call	197dc <__mulsi3>
   16814:	8008d43a 	srli	r4,r16,16
   16818:	843fffcc 	andi	r16,r16,65535
   1681c:	1105883a 	add	r2,r2,r4
   16820:	1006943a 	slli	r3,r2,16
   16824:	1028d43a 	srli	r20,r2,16
   16828:	1c07883a 	add	r3,r3,r16
   1682c:	90c00015 	stw	r3,0(r18)
   16830:	94800104 	addi	r18,r18,4
   16834:	9dbfee16 	blt	r19,r22,167f0 <__multadd+0x48>
   16838:	a0000826 	beq	r20,zero,1685c <__multadd+0xb4>
   1683c:	b8800217 	ldw	r2,8(r23)
   16840:	b080130e 	bge	r22,r2,16890 <__multadd+0xe8>
   16844:	b585883a 	add	r2,r22,r22
   16848:	1085883a 	add	r2,r2,r2
   1684c:	15c5883a 	add	r2,r2,r23
   16850:	b0c00044 	addi	r3,r22,1
   16854:	15000515 	stw	r20,20(r2)
   16858:	b8c00415 	stw	r3,16(r23)
   1685c:	b805883a 	mov	r2,r23
   16860:	dfc00917 	ldw	ra,36(sp)
   16864:	df000817 	ldw	fp,32(sp)
   16868:	ddc00717 	ldw	r23,28(sp)
   1686c:	dd800617 	ldw	r22,24(sp)
   16870:	dd400517 	ldw	r21,20(sp)
   16874:	dd000417 	ldw	r20,16(sp)
   16878:	dcc00317 	ldw	r19,12(sp)
   1687c:	dc800217 	ldw	r18,8(sp)
   16880:	dc400117 	ldw	r17,4(sp)
   16884:	dc000017 	ldw	r16,0(sp)
   16888:	dec00a04 	addi	sp,sp,40
   1688c:	f800283a 	ret
   16890:	b9400117 	ldw	r5,4(r23)
   16894:	e009883a 	mov	r4,fp
   16898:	29400044 	addi	r5,r5,1
   1689c:	00160080 	call	16008 <_Balloc>
   168a0:	b9800417 	ldw	r6,16(r23)
   168a4:	b9400304 	addi	r5,r23,12
   168a8:	11000304 	addi	r4,r2,12
   168ac:	318d883a 	add	r6,r6,r6
   168b0:	318d883a 	add	r6,r6,r6
   168b4:	31800204 	addi	r6,r6,8
   168b8:	1023883a 	mov	r17,r2
   168bc:	00158700 	call	15870 <memcpy>
   168c0:	b80b883a 	mov	r5,r23
   168c4:	e009883a 	mov	r4,fp
   168c8:	0015a880 	call	15a88 <_Bfree>
   168cc:	882f883a 	mov	r23,r17
   168d0:	003fdc06 	br	16844 <__multadd+0x9c>

000168d4 <__pow5mult>:
   168d4:	defffa04 	addi	sp,sp,-24
   168d8:	308000cc 	andi	r2,r6,3
   168dc:	dd000415 	stw	r20,16(sp)
   168e0:	dcc00315 	stw	r19,12(sp)
   168e4:	dc000015 	stw	r16,0(sp)
   168e8:	dfc00515 	stw	ra,20(sp)
   168ec:	dc800215 	stw	r18,8(sp)
   168f0:	dc400115 	stw	r17,4(sp)
   168f4:	3021883a 	mov	r16,r6
   168f8:	2027883a 	mov	r19,r4
   168fc:	2829883a 	mov	r20,r5
   16900:	10002b1e 	bne	r2,zero,169b0 <__pow5mult+0xdc>
   16904:	8025d0ba 	srai	r18,r16,2
   16908:	90001b26 	beq	r18,zero,16978 <__pow5mult+0xa4>
   1690c:	9c001217 	ldw	r16,72(r19)
   16910:	8000081e 	bne	r16,zero,16934 <__pow5mult+0x60>
   16914:	00003006 	br	169d8 <__pow5mult+0x104>
   16918:	800b883a 	mov	r5,r16
   1691c:	800d883a 	mov	r6,r16
   16920:	9809883a 	mov	r4,r19
   16924:	90001426 	beq	r18,zero,16978 <__pow5mult+0xa4>
   16928:	80800017 	ldw	r2,0(r16)
   1692c:	10001b26 	beq	r2,zero,1699c <__pow5mult+0xc8>
   16930:	1021883a 	mov	r16,r2
   16934:	9080004c 	andi	r2,r18,1
   16938:	1005003a 	cmpeq	r2,r2,zero
   1693c:	9025d07a 	srai	r18,r18,1
   16940:	800d883a 	mov	r6,r16
   16944:	9809883a 	mov	r4,r19
   16948:	a00b883a 	mov	r5,r20
   1694c:	103ff21e 	bne	r2,zero,16918 <__pow5mult+0x44>
   16950:	00165180 	call	16518 <__multiply>
   16954:	a00b883a 	mov	r5,r20
   16958:	9809883a 	mov	r4,r19
   1695c:	1023883a 	mov	r17,r2
   16960:	0015a880 	call	15a88 <_Bfree>
   16964:	8829883a 	mov	r20,r17
   16968:	800b883a 	mov	r5,r16
   1696c:	800d883a 	mov	r6,r16
   16970:	9809883a 	mov	r4,r19
   16974:	903fec1e 	bne	r18,zero,16928 <__pow5mult+0x54>
   16978:	a005883a 	mov	r2,r20
   1697c:	dfc00517 	ldw	ra,20(sp)
   16980:	dd000417 	ldw	r20,16(sp)
   16984:	dcc00317 	ldw	r19,12(sp)
   16988:	dc800217 	ldw	r18,8(sp)
   1698c:	dc400117 	ldw	r17,4(sp)
   16990:	dc000017 	ldw	r16,0(sp)
   16994:	dec00604 	addi	sp,sp,24
   16998:	f800283a 	ret
   1699c:	00165180 	call	16518 <__multiply>
   169a0:	80800015 	stw	r2,0(r16)
   169a4:	1021883a 	mov	r16,r2
   169a8:	10000015 	stw	zero,0(r2)
   169ac:	003fe106 	br	16934 <__pow5mult+0x60>
   169b0:	1085883a 	add	r2,r2,r2
   169b4:	00c00134 	movhi	r3,4
   169b8:	18e09104 	addi	r3,r3,-32188
   169bc:	1085883a 	add	r2,r2,r2
   169c0:	10c5883a 	add	r2,r2,r3
   169c4:	11bfff17 	ldw	r6,-4(r2)
   169c8:	000f883a 	mov	r7,zero
   169cc:	00167a80 	call	167a8 <__multadd>
   169d0:	1029883a 	mov	r20,r2
   169d4:	003fcb06 	br	16904 <__pow5mult+0x30>
   169d8:	9809883a 	mov	r4,r19
   169dc:	01409c44 	movi	r5,625
   169e0:	001676c0 	call	1676c <__i2b>
   169e4:	98801215 	stw	r2,72(r19)
   169e8:	1021883a 	mov	r16,r2
   169ec:	10000015 	stw	zero,0(r2)
   169f0:	003fd006 	br	16934 <__pow5mult+0x60>

000169f4 <__s2b>:
   169f4:	defff904 	addi	sp,sp,-28
   169f8:	dcc00315 	stw	r19,12(sp)
   169fc:	dc800215 	stw	r18,8(sp)
   16a00:	2827883a 	mov	r19,r5
   16a04:	2025883a 	mov	r18,r4
   16a08:	01400244 	movi	r5,9
   16a0c:	39000204 	addi	r4,r7,8
   16a10:	dd000415 	stw	r20,16(sp)
   16a14:	dc400115 	stw	r17,4(sp)
   16a18:	dfc00615 	stw	ra,24(sp)
   16a1c:	dd400515 	stw	r21,20(sp)
   16a20:	dc000015 	stw	r16,0(sp)
   16a24:	3829883a 	mov	r20,r7
   16a28:	3023883a 	mov	r17,r6
   16a2c:	001970c0 	call	1970c <__divsi3>
   16a30:	00c00044 	movi	r3,1
   16a34:	1880350e 	bge	r3,r2,16b0c <__s2b+0x118>
   16a38:	000b883a 	mov	r5,zero
   16a3c:	18c7883a 	add	r3,r3,r3
   16a40:	29400044 	addi	r5,r5,1
   16a44:	18bffd16 	blt	r3,r2,16a3c <__s2b+0x48>
   16a48:	9009883a 	mov	r4,r18
   16a4c:	00160080 	call	16008 <_Balloc>
   16a50:	1011883a 	mov	r8,r2
   16a54:	d8800717 	ldw	r2,28(sp)
   16a58:	00c00044 	movi	r3,1
   16a5c:	01800244 	movi	r6,9
   16a60:	40800515 	stw	r2,20(r8)
   16a64:	40c00415 	stw	r3,16(r8)
   16a68:	3440260e 	bge	r6,r17,16b04 <__s2b+0x110>
   16a6c:	3021883a 	mov	r16,r6
   16a70:	99ab883a 	add	r21,r19,r6
   16a74:	9c05883a 	add	r2,r19,r16
   16a78:	11c00007 	ldb	r7,0(r2)
   16a7c:	400b883a 	mov	r5,r8
   16a80:	9009883a 	mov	r4,r18
   16a84:	39fff404 	addi	r7,r7,-48
   16a88:	01800284 	movi	r6,10
   16a8c:	00167a80 	call	167a8 <__multadd>
   16a90:	84000044 	addi	r16,r16,1
   16a94:	1011883a 	mov	r8,r2
   16a98:	8c3ff61e 	bne	r17,r16,16a74 <__s2b+0x80>
   16a9c:	ac45883a 	add	r2,r21,r17
   16aa0:	117ffe04 	addi	r5,r2,-8
   16aa4:	880d883a 	mov	r6,r17
   16aa8:	35000c0e 	bge	r6,r20,16adc <__s2b+0xe8>
   16aac:	a185c83a 	sub	r2,r20,r6
   16ab0:	2821883a 	mov	r16,r5
   16ab4:	28a3883a 	add	r17,r5,r2
   16ab8:	81c00007 	ldb	r7,0(r16)
   16abc:	400b883a 	mov	r5,r8
   16ac0:	9009883a 	mov	r4,r18
   16ac4:	39fff404 	addi	r7,r7,-48
   16ac8:	01800284 	movi	r6,10
   16acc:	00167a80 	call	167a8 <__multadd>
   16ad0:	84000044 	addi	r16,r16,1
   16ad4:	1011883a 	mov	r8,r2
   16ad8:	847ff71e 	bne	r16,r17,16ab8 <__s2b+0xc4>
   16adc:	4005883a 	mov	r2,r8
   16ae0:	dfc00617 	ldw	ra,24(sp)
   16ae4:	dd400517 	ldw	r21,20(sp)
   16ae8:	dd000417 	ldw	r20,16(sp)
   16aec:	dcc00317 	ldw	r19,12(sp)
   16af0:	dc800217 	ldw	r18,8(sp)
   16af4:	dc400117 	ldw	r17,4(sp)
   16af8:	dc000017 	ldw	r16,0(sp)
   16afc:	dec00704 	addi	sp,sp,28
   16b00:	f800283a 	ret
   16b04:	99400284 	addi	r5,r19,10
   16b08:	003fe706 	br	16aa8 <__s2b+0xb4>
   16b0c:	000b883a 	mov	r5,zero
   16b10:	003fcd06 	br	16a48 <__s2b+0x54>

00016b14 <_realloc_r>:
   16b14:	defff404 	addi	sp,sp,-48
   16b18:	dd800815 	stw	r22,32(sp)
   16b1c:	dc800415 	stw	r18,16(sp)
   16b20:	dc400315 	stw	r17,12(sp)
   16b24:	dfc00b15 	stw	ra,44(sp)
   16b28:	df000a15 	stw	fp,40(sp)
   16b2c:	ddc00915 	stw	r23,36(sp)
   16b30:	dd400715 	stw	r21,28(sp)
   16b34:	dd000615 	stw	r20,24(sp)
   16b38:	dcc00515 	stw	r19,20(sp)
   16b3c:	dc000215 	stw	r16,8(sp)
   16b40:	2825883a 	mov	r18,r5
   16b44:	3023883a 	mov	r17,r6
   16b48:	202d883a 	mov	r22,r4
   16b4c:	2800c926 	beq	r5,zero,16e74 <_realloc_r+0x360>
   16b50:	001a5600 	call	1a560 <__malloc_lock>
   16b54:	943ffe04 	addi	r16,r18,-8
   16b58:	88c002c4 	addi	r3,r17,11
   16b5c:	00800584 	movi	r2,22
   16b60:	82000117 	ldw	r8,4(r16)
   16b64:	10c01b2e 	bgeu	r2,r3,16bd4 <_realloc_r+0xc0>
   16b68:	00bffe04 	movi	r2,-8
   16b6c:	188e703a 	and	r7,r3,r2
   16b70:	3839883a 	mov	fp,r7
   16b74:	38001a16 	blt	r7,zero,16be0 <_realloc_r+0xcc>
   16b78:	e4401936 	bltu	fp,r17,16be0 <_realloc_r+0xcc>
   16b7c:	013fff04 	movi	r4,-4
   16b80:	4126703a 	and	r19,r8,r4
   16b84:	99c02616 	blt	r19,r7,16c20 <_realloc_r+0x10c>
   16b88:	802b883a 	mov	r21,r16
   16b8c:	9829883a 	mov	r20,r19
   16b90:	84000204 	addi	r16,r16,8
   16b94:	a80f883a 	mov	r7,r21
   16b98:	a70dc83a 	sub	r6,r20,fp
   16b9c:	008003c4 	movi	r2,15
   16ba0:	1180c136 	bltu	r2,r6,16ea8 <_realloc_r+0x394>
   16ba4:	38800117 	ldw	r2,4(r7)
   16ba8:	a549883a 	add	r4,r20,r21
   16bac:	1080004c 	andi	r2,r2,1
   16bb0:	a084b03a 	or	r2,r20,r2
   16bb4:	38800115 	stw	r2,4(r7)
   16bb8:	20c00117 	ldw	r3,4(r4)
   16bbc:	18c00054 	ori	r3,r3,1
   16bc0:	20c00115 	stw	r3,4(r4)
   16bc4:	b009883a 	mov	r4,r22
   16bc8:	001a5800 	call	1a580 <__malloc_unlock>
   16bcc:	8023883a 	mov	r17,r16
   16bd0:	00000606 	br	16bec <_realloc_r+0xd8>
   16bd4:	01c00404 	movi	r7,16
   16bd8:	3839883a 	mov	fp,r7
   16bdc:	e47fe72e 	bgeu	fp,r17,16b7c <_realloc_r+0x68>
   16be0:	00800304 	movi	r2,12
   16be4:	0023883a 	mov	r17,zero
   16be8:	b0800015 	stw	r2,0(r22)
   16bec:	8805883a 	mov	r2,r17
   16bf0:	dfc00b17 	ldw	ra,44(sp)
   16bf4:	df000a17 	ldw	fp,40(sp)
   16bf8:	ddc00917 	ldw	r23,36(sp)
   16bfc:	dd800817 	ldw	r22,32(sp)
   16c00:	dd400717 	ldw	r21,28(sp)
   16c04:	dd000617 	ldw	r20,24(sp)
   16c08:	dcc00517 	ldw	r19,20(sp)
   16c0c:	dc800417 	ldw	r18,16(sp)
   16c10:	dc400317 	ldw	r17,12(sp)
   16c14:	dc000217 	ldw	r16,8(sp)
   16c18:	dec00c04 	addi	sp,sp,48
   16c1c:	f800283a 	ret
   16c20:	00800134 	movhi	r2,4
   16c24:	10a1e704 	addi	r2,r2,-30820
   16c28:	12400217 	ldw	r9,8(r2)
   16c2c:	84cd883a 	add	r6,r16,r19
   16c30:	802b883a 	mov	r21,r16
   16c34:	3240b926 	beq	r6,r9,16f1c <_realloc_r+0x408>
   16c38:	31400117 	ldw	r5,4(r6)
   16c3c:	00bfff84 	movi	r2,-2
   16c40:	2884703a 	and	r2,r5,r2
   16c44:	1185883a 	add	r2,r2,r6
   16c48:	10c00117 	ldw	r3,4(r2)
   16c4c:	18c0004c 	andi	r3,r3,1
   16c50:	1807003a 	cmpeq	r3,r3,zero
   16c54:	1800a326 	beq	r3,zero,16ee4 <_realloc_r+0x3d0>
   16c58:	2908703a 	and	r4,r5,r4
   16c5c:	9929883a 	add	r20,r19,r4
   16c60:	a1c0a30e 	bge	r20,r7,16ef0 <_realloc_r+0x3dc>
   16c64:	4080004c 	andi	r2,r8,1
   16c68:	1000551e 	bne	r2,zero,16dc0 <_realloc_r+0x2ac>
   16c6c:	80800017 	ldw	r2,0(r16)
   16c70:	80afc83a 	sub	r23,r16,r2
   16c74:	b8c00117 	ldw	r3,4(r23)
   16c78:	00bfff04 	movi	r2,-4
   16c7c:	1884703a 	and	r2,r3,r2
   16c80:	30002e26 	beq	r6,zero,16d3c <_realloc_r+0x228>
   16c84:	3240b926 	beq	r6,r9,16f6c <_realloc_r+0x458>
   16c88:	98a9883a 	add	r20,r19,r2
   16c8c:	2509883a 	add	r4,r4,r20
   16c90:	d9000015 	stw	r4,0(sp)
   16c94:	21c02a16 	blt	r4,r7,16d40 <_realloc_r+0x22c>
   16c98:	30800317 	ldw	r2,12(r6)
   16c9c:	30c00217 	ldw	r3,8(r6)
   16ca0:	01400904 	movi	r5,36
   16ca4:	99bfff04 	addi	r6,r19,-4
   16ca8:	18800315 	stw	r2,12(r3)
   16cac:	10c00215 	stw	r3,8(r2)
   16cb0:	b9000317 	ldw	r4,12(r23)
   16cb4:	b8800217 	ldw	r2,8(r23)
   16cb8:	b82b883a 	mov	r21,r23
   16cbc:	bc000204 	addi	r16,r23,8
   16cc0:	20800215 	stw	r2,8(r4)
   16cc4:	11000315 	stw	r4,12(r2)
   16cc8:	2980e436 	bltu	r5,r6,1705c <_realloc_r+0x548>
   16ccc:	008004c4 	movi	r2,19
   16cd0:	9009883a 	mov	r4,r18
   16cd4:	8011883a 	mov	r8,r16
   16cd8:	11800f2e 	bgeu	r2,r6,16d18 <_realloc_r+0x204>
   16cdc:	90800017 	ldw	r2,0(r18)
   16ce0:	ba000404 	addi	r8,r23,16
   16ce4:	91000204 	addi	r4,r18,8
   16ce8:	b8800215 	stw	r2,8(r23)
   16cec:	90c00117 	ldw	r3,4(r18)
   16cf0:	008006c4 	movi	r2,27
   16cf4:	b8c00315 	stw	r3,12(r23)
   16cf8:	1180072e 	bgeu	r2,r6,16d18 <_realloc_r+0x204>
   16cfc:	90c00217 	ldw	r3,8(r18)
   16d00:	ba000604 	addi	r8,r23,24
   16d04:	91000404 	addi	r4,r18,16
   16d08:	b8c00415 	stw	r3,16(r23)
   16d0c:	90800317 	ldw	r2,12(r18)
   16d10:	b8800515 	stw	r2,20(r23)
   16d14:	3140e726 	beq	r6,r5,170b4 <_realloc_r+0x5a0>
   16d18:	20800017 	ldw	r2,0(r4)
   16d1c:	dd000017 	ldw	r20,0(sp)
   16d20:	b80f883a 	mov	r7,r23
   16d24:	40800015 	stw	r2,0(r8)
   16d28:	20c00117 	ldw	r3,4(r4)
   16d2c:	40c00115 	stw	r3,4(r8)
   16d30:	20800217 	ldw	r2,8(r4)
   16d34:	40800215 	stw	r2,8(r8)
   16d38:	003f9706 	br	16b98 <_realloc_r+0x84>
   16d3c:	98a9883a 	add	r20,r19,r2
   16d40:	a1c01f16 	blt	r20,r7,16dc0 <_realloc_r+0x2ac>
   16d44:	b8c00317 	ldw	r3,12(r23)
   16d48:	b8800217 	ldw	r2,8(r23)
   16d4c:	99bfff04 	addi	r6,r19,-4
   16d50:	01400904 	movi	r5,36
   16d54:	b82b883a 	mov	r21,r23
   16d58:	18800215 	stw	r2,8(r3)
   16d5c:	10c00315 	stw	r3,12(r2)
   16d60:	bc000204 	addi	r16,r23,8
   16d64:	2980c336 	bltu	r5,r6,17074 <_realloc_r+0x560>
   16d68:	008004c4 	movi	r2,19
   16d6c:	9009883a 	mov	r4,r18
   16d70:	8011883a 	mov	r8,r16
   16d74:	11800f2e 	bgeu	r2,r6,16db4 <_realloc_r+0x2a0>
   16d78:	90800017 	ldw	r2,0(r18)
   16d7c:	ba000404 	addi	r8,r23,16
   16d80:	91000204 	addi	r4,r18,8
   16d84:	b8800215 	stw	r2,8(r23)
   16d88:	90c00117 	ldw	r3,4(r18)
   16d8c:	008006c4 	movi	r2,27
   16d90:	b8c00315 	stw	r3,12(r23)
   16d94:	1180072e 	bgeu	r2,r6,16db4 <_realloc_r+0x2a0>
   16d98:	90c00217 	ldw	r3,8(r18)
   16d9c:	ba000604 	addi	r8,r23,24
   16da0:	91000404 	addi	r4,r18,16
   16da4:	b8c00415 	stw	r3,16(r23)
   16da8:	90800317 	ldw	r2,12(r18)
   16dac:	b8800515 	stw	r2,20(r23)
   16db0:	3140c726 	beq	r6,r5,170d0 <_realloc_r+0x5bc>
   16db4:	20800017 	ldw	r2,0(r4)
   16db8:	b80f883a 	mov	r7,r23
   16dbc:	003fd906 	br	16d24 <_realloc_r+0x210>
   16dc0:	880b883a 	mov	r5,r17
   16dc4:	b009883a 	mov	r4,r22
   16dc8:	001504c0 	call	1504c <_malloc_r>
   16dcc:	1023883a 	mov	r17,r2
   16dd0:	10002526 	beq	r2,zero,16e68 <_realloc_r+0x354>
   16dd4:	80800117 	ldw	r2,4(r16)
   16dd8:	00ffff84 	movi	r3,-2
   16ddc:	893ffe04 	addi	r4,r17,-8
   16de0:	10c4703a 	and	r2,r2,r3
   16de4:	8085883a 	add	r2,r16,r2
   16de8:	20809526 	beq	r4,r2,17040 <_realloc_r+0x52c>
   16dec:	99bfff04 	addi	r6,r19,-4
   16df0:	01c00904 	movi	r7,36
   16df4:	39804536 	bltu	r7,r6,16f0c <_realloc_r+0x3f8>
   16df8:	008004c4 	movi	r2,19
   16dfc:	9009883a 	mov	r4,r18
   16e00:	880b883a 	mov	r5,r17
   16e04:	11800f2e 	bgeu	r2,r6,16e44 <_realloc_r+0x330>
   16e08:	90800017 	ldw	r2,0(r18)
   16e0c:	89400204 	addi	r5,r17,8
   16e10:	91000204 	addi	r4,r18,8
   16e14:	88800015 	stw	r2,0(r17)
   16e18:	90c00117 	ldw	r3,4(r18)
   16e1c:	008006c4 	movi	r2,27
   16e20:	88c00115 	stw	r3,4(r17)
   16e24:	1180072e 	bgeu	r2,r6,16e44 <_realloc_r+0x330>
   16e28:	90c00217 	ldw	r3,8(r18)
   16e2c:	89400404 	addi	r5,r17,16
   16e30:	91000404 	addi	r4,r18,16
   16e34:	88c00215 	stw	r3,8(r17)
   16e38:	90800317 	ldw	r2,12(r18)
   16e3c:	88800315 	stw	r2,12(r17)
   16e40:	31c09126 	beq	r6,r7,17088 <_realloc_r+0x574>
   16e44:	20800017 	ldw	r2,0(r4)
   16e48:	28800015 	stw	r2,0(r5)
   16e4c:	20c00117 	ldw	r3,4(r4)
   16e50:	28c00115 	stw	r3,4(r5)
   16e54:	20800217 	ldw	r2,8(r4)
   16e58:	28800215 	stw	r2,8(r5)
   16e5c:	900b883a 	mov	r5,r18
   16e60:	b009883a 	mov	r4,r22
   16e64:	00144c40 	call	144c4 <_free_r>
   16e68:	b009883a 	mov	r4,r22
   16e6c:	001a5800 	call	1a580 <__malloc_unlock>
   16e70:	003f5e06 	br	16bec <_realloc_r+0xd8>
   16e74:	300b883a 	mov	r5,r6
   16e78:	dfc00b17 	ldw	ra,44(sp)
   16e7c:	df000a17 	ldw	fp,40(sp)
   16e80:	ddc00917 	ldw	r23,36(sp)
   16e84:	dd800817 	ldw	r22,32(sp)
   16e88:	dd400717 	ldw	r21,28(sp)
   16e8c:	dd000617 	ldw	r20,24(sp)
   16e90:	dcc00517 	ldw	r19,20(sp)
   16e94:	dc800417 	ldw	r18,16(sp)
   16e98:	dc400317 	ldw	r17,12(sp)
   16e9c:	dc000217 	ldw	r16,8(sp)
   16ea0:	dec00c04 	addi	sp,sp,48
   16ea4:	001504c1 	jmpi	1504c <_malloc_r>
   16ea8:	38800117 	ldw	r2,4(r7)
   16eac:	e54b883a 	add	r5,fp,r21
   16eb0:	31000054 	ori	r4,r6,1
   16eb4:	1080004c 	andi	r2,r2,1
   16eb8:	1704b03a 	or	r2,r2,fp
   16ebc:	38800115 	stw	r2,4(r7)
   16ec0:	29000115 	stw	r4,4(r5)
   16ec4:	2987883a 	add	r3,r5,r6
   16ec8:	18800117 	ldw	r2,4(r3)
   16ecc:	29400204 	addi	r5,r5,8
   16ed0:	b009883a 	mov	r4,r22
   16ed4:	10800054 	ori	r2,r2,1
   16ed8:	18800115 	stw	r2,4(r3)
   16edc:	00144c40 	call	144c4 <_free_r>
   16ee0:	003f3806 	br	16bc4 <_realloc_r+0xb0>
   16ee4:	000d883a 	mov	r6,zero
   16ee8:	0009883a 	mov	r4,zero
   16eec:	003f5d06 	br	16c64 <_realloc_r+0x150>
   16ef0:	30c00217 	ldw	r3,8(r6)
   16ef4:	30800317 	ldw	r2,12(r6)
   16ef8:	800f883a 	mov	r7,r16
   16efc:	84000204 	addi	r16,r16,8
   16f00:	10c00215 	stw	r3,8(r2)
   16f04:	18800315 	stw	r2,12(r3)
   16f08:	003f2306 	br	16b98 <_realloc_r+0x84>
   16f0c:	8809883a 	mov	r4,r17
   16f10:	900b883a 	mov	r5,r18
   16f14:	00159100 	call	15910 <memmove>
   16f18:	003fd006 	br	16e5c <_realloc_r+0x348>
   16f1c:	30800117 	ldw	r2,4(r6)
   16f20:	e0c00404 	addi	r3,fp,16
   16f24:	1108703a 	and	r4,r2,r4
   16f28:	9905883a 	add	r2,r19,r4
   16f2c:	10ff4d16 	blt	r2,r3,16c64 <_realloc_r+0x150>
   16f30:	1705c83a 	sub	r2,r2,fp
   16f34:	870b883a 	add	r5,r16,fp
   16f38:	10800054 	ori	r2,r2,1
   16f3c:	28800115 	stw	r2,4(r5)
   16f40:	80c00117 	ldw	r3,4(r16)
   16f44:	00800134 	movhi	r2,4
   16f48:	10a1e704 	addi	r2,r2,-30820
   16f4c:	b009883a 	mov	r4,r22
   16f50:	18c0004c 	andi	r3,r3,1
   16f54:	e0c6b03a 	or	r3,fp,r3
   16f58:	11400215 	stw	r5,8(r2)
   16f5c:	80c00115 	stw	r3,4(r16)
   16f60:	001a5800 	call	1a580 <__malloc_unlock>
   16f64:	84400204 	addi	r17,r16,8
   16f68:	003f2006 	br	16bec <_realloc_r+0xd8>
   16f6c:	98a9883a 	add	r20,r19,r2
   16f70:	2509883a 	add	r4,r4,r20
   16f74:	e0800404 	addi	r2,fp,16
   16f78:	d9000115 	stw	r4,4(sp)
   16f7c:	20bf7016 	blt	r4,r2,16d40 <_realloc_r+0x22c>
   16f80:	b8c00317 	ldw	r3,12(r23)
   16f84:	b8800217 	ldw	r2,8(r23)
   16f88:	99bfff04 	addi	r6,r19,-4
   16f8c:	01400904 	movi	r5,36
   16f90:	18800215 	stw	r2,8(r3)
   16f94:	10c00315 	stw	r3,12(r2)
   16f98:	bc400204 	addi	r17,r23,8
   16f9c:	29804136 	bltu	r5,r6,170a4 <_realloc_r+0x590>
   16fa0:	008004c4 	movi	r2,19
   16fa4:	9009883a 	mov	r4,r18
   16fa8:	880f883a 	mov	r7,r17
   16fac:	11800f2e 	bgeu	r2,r6,16fec <_realloc_r+0x4d8>
   16fb0:	90800017 	ldw	r2,0(r18)
   16fb4:	b9c00404 	addi	r7,r23,16
   16fb8:	91000204 	addi	r4,r18,8
   16fbc:	b8800215 	stw	r2,8(r23)
   16fc0:	90c00117 	ldw	r3,4(r18)
   16fc4:	008006c4 	movi	r2,27
   16fc8:	b8c00315 	stw	r3,12(r23)
   16fcc:	1180072e 	bgeu	r2,r6,16fec <_realloc_r+0x4d8>
   16fd0:	90c00217 	ldw	r3,8(r18)
   16fd4:	b9c00604 	addi	r7,r23,24
   16fd8:	91000404 	addi	r4,r18,16
   16fdc:	b8c00415 	stw	r3,16(r23)
   16fe0:	90800317 	ldw	r2,12(r18)
   16fe4:	b8800515 	stw	r2,20(r23)
   16fe8:	31404026 	beq	r6,r5,170ec <_realloc_r+0x5d8>
   16fec:	20800017 	ldw	r2,0(r4)
   16ff0:	38800015 	stw	r2,0(r7)
   16ff4:	20c00117 	ldw	r3,4(r4)
   16ff8:	38c00115 	stw	r3,4(r7)
   16ffc:	20800217 	ldw	r2,8(r4)
   17000:	38800215 	stw	r2,8(r7)
   17004:	d8c00117 	ldw	r3,4(sp)
   17008:	bf0b883a 	add	r5,r23,fp
   1700c:	b009883a 	mov	r4,r22
   17010:	1f05c83a 	sub	r2,r3,fp
   17014:	10800054 	ori	r2,r2,1
   17018:	28800115 	stw	r2,4(r5)
   1701c:	b8c00117 	ldw	r3,4(r23)
   17020:	00800134 	movhi	r2,4
   17024:	10a1e704 	addi	r2,r2,-30820
   17028:	11400215 	stw	r5,8(r2)
   1702c:	18c0004c 	andi	r3,r3,1
   17030:	e0c6b03a 	or	r3,fp,r3
   17034:	b8c00115 	stw	r3,4(r23)
   17038:	001a5800 	call	1a580 <__malloc_unlock>
   1703c:	003eeb06 	br	16bec <_realloc_r+0xd8>
   17040:	20800117 	ldw	r2,4(r4)
   17044:	00ffff04 	movi	r3,-4
   17048:	800f883a 	mov	r7,r16
   1704c:	10c4703a 	and	r2,r2,r3
   17050:	98a9883a 	add	r20,r19,r2
   17054:	84000204 	addi	r16,r16,8
   17058:	003ecf06 	br	16b98 <_realloc_r+0x84>
   1705c:	900b883a 	mov	r5,r18
   17060:	8009883a 	mov	r4,r16
   17064:	00159100 	call	15910 <memmove>
   17068:	dd000017 	ldw	r20,0(sp)
   1706c:	b80f883a 	mov	r7,r23
   17070:	003ec906 	br	16b98 <_realloc_r+0x84>
   17074:	900b883a 	mov	r5,r18
   17078:	8009883a 	mov	r4,r16
   1707c:	00159100 	call	15910 <memmove>
   17080:	b80f883a 	mov	r7,r23
   17084:	003ec406 	br	16b98 <_realloc_r+0x84>
   17088:	90c00417 	ldw	r3,16(r18)
   1708c:	89400604 	addi	r5,r17,24
   17090:	91000604 	addi	r4,r18,24
   17094:	88c00415 	stw	r3,16(r17)
   17098:	90800517 	ldw	r2,20(r18)
   1709c:	88800515 	stw	r2,20(r17)
   170a0:	003f6806 	br	16e44 <_realloc_r+0x330>
   170a4:	900b883a 	mov	r5,r18
   170a8:	8809883a 	mov	r4,r17
   170ac:	00159100 	call	15910 <memmove>
   170b0:	003fd406 	br	17004 <_realloc_r+0x4f0>
   170b4:	90c00417 	ldw	r3,16(r18)
   170b8:	91000604 	addi	r4,r18,24
   170bc:	ba000804 	addi	r8,r23,32
   170c0:	b8c00615 	stw	r3,24(r23)
   170c4:	90800517 	ldw	r2,20(r18)
   170c8:	b8800715 	stw	r2,28(r23)
   170cc:	003f1206 	br	16d18 <_realloc_r+0x204>
   170d0:	90c00417 	ldw	r3,16(r18)
   170d4:	91000604 	addi	r4,r18,24
   170d8:	ba000804 	addi	r8,r23,32
   170dc:	b8c00615 	stw	r3,24(r23)
   170e0:	90800517 	ldw	r2,20(r18)
   170e4:	b8800715 	stw	r2,28(r23)
   170e8:	003f3206 	br	16db4 <_realloc_r+0x2a0>
   170ec:	90c00417 	ldw	r3,16(r18)
   170f0:	91000604 	addi	r4,r18,24
   170f4:	b9c00804 	addi	r7,r23,32
   170f8:	b8c00615 	stw	r3,24(r23)
   170fc:	90800517 	ldw	r2,20(r18)
   17100:	b8800715 	stw	r2,28(r23)
   17104:	003fb906 	br	16fec <_realloc_r+0x4d8>

00017108 <__isinfd>:
   17108:	200d883a 	mov	r6,r4
   1710c:	0109c83a 	sub	r4,zero,r4
   17110:	2188b03a 	or	r4,r4,r6
   17114:	2008d7fa 	srli	r4,r4,31
   17118:	00a00034 	movhi	r2,32768
   1711c:	10bfffc4 	addi	r2,r2,-1
   17120:	1144703a 	and	r2,r2,r5
   17124:	2088b03a 	or	r4,r4,r2
   17128:	009ffc34 	movhi	r2,32752
   1712c:	1105c83a 	sub	r2,r2,r4
   17130:	0087c83a 	sub	r3,zero,r2
   17134:	10c4b03a 	or	r2,r2,r3
   17138:	1004d7fa 	srli	r2,r2,31
   1713c:	00c00044 	movi	r3,1
   17140:	1885c83a 	sub	r2,r3,r2
   17144:	f800283a 	ret

00017148 <__isnand>:
   17148:	200d883a 	mov	r6,r4
   1714c:	0109c83a 	sub	r4,zero,r4
   17150:	2188b03a 	or	r4,r4,r6
   17154:	2008d7fa 	srli	r4,r4,31
   17158:	00a00034 	movhi	r2,32768
   1715c:	10bfffc4 	addi	r2,r2,-1
   17160:	1144703a 	and	r2,r2,r5
   17164:	2088b03a 	or	r4,r4,r2
   17168:	009ffc34 	movhi	r2,32752
   1716c:	1105c83a 	sub	r2,r2,r4
   17170:	1004d7fa 	srli	r2,r2,31
   17174:	f800283a 	ret

00017178 <_sbrk_r>:
   17178:	defffd04 	addi	sp,sp,-12
   1717c:	dc000015 	stw	r16,0(sp)
   17180:	04000134 	movhi	r16,4
   17184:	84278604 	addi	r16,r16,-25064
   17188:	dc400115 	stw	r17,4(sp)
   1718c:	80000015 	stw	zero,0(r16)
   17190:	2023883a 	mov	r17,r4
   17194:	2809883a 	mov	r4,r5
   17198:	dfc00215 	stw	ra,8(sp)
   1719c:	001a79c0 	call	1a79c <sbrk>
   171a0:	1007883a 	mov	r3,r2
   171a4:	00bfffc4 	movi	r2,-1
   171a8:	18800626 	beq	r3,r2,171c4 <_sbrk_r+0x4c>
   171ac:	1805883a 	mov	r2,r3
   171b0:	dfc00217 	ldw	ra,8(sp)
   171b4:	dc400117 	ldw	r17,4(sp)
   171b8:	dc000017 	ldw	r16,0(sp)
   171bc:	dec00304 	addi	sp,sp,12
   171c0:	f800283a 	ret
   171c4:	80800017 	ldw	r2,0(r16)
   171c8:	103ff826 	beq	r2,zero,171ac <_sbrk_r+0x34>
   171cc:	88800015 	stw	r2,0(r17)
   171d0:	1805883a 	mov	r2,r3
   171d4:	dfc00217 	ldw	ra,8(sp)
   171d8:	dc400117 	ldw	r17,4(sp)
   171dc:	dc000017 	ldw	r16,0(sp)
   171e0:	dec00304 	addi	sp,sp,12
   171e4:	f800283a 	ret

000171e8 <__sclose>:
   171e8:	2940038f 	ldh	r5,14(r5)
   171ec:	00175301 	jmpi	17530 <_close_r>

000171f0 <__sseek>:
   171f0:	defffe04 	addi	sp,sp,-8
   171f4:	dc000015 	stw	r16,0(sp)
   171f8:	2821883a 	mov	r16,r5
   171fc:	2940038f 	ldh	r5,14(r5)
   17200:	dfc00115 	stw	ra,4(sp)
   17204:	00177a80 	call	177a8 <_lseek_r>
   17208:	1007883a 	mov	r3,r2
   1720c:	00bfffc4 	movi	r2,-1
   17210:	18800926 	beq	r3,r2,17238 <__sseek+0x48>
   17214:	8080030b 	ldhu	r2,12(r16)
   17218:	80c01415 	stw	r3,80(r16)
   1721c:	10840014 	ori	r2,r2,4096
   17220:	8080030d 	sth	r2,12(r16)
   17224:	1805883a 	mov	r2,r3
   17228:	dfc00117 	ldw	ra,4(sp)
   1722c:	dc000017 	ldw	r16,0(sp)
   17230:	dec00204 	addi	sp,sp,8
   17234:	f800283a 	ret
   17238:	8080030b 	ldhu	r2,12(r16)
   1723c:	10bbffcc 	andi	r2,r2,61439
   17240:	8080030d 	sth	r2,12(r16)
   17244:	1805883a 	mov	r2,r3
   17248:	dfc00117 	ldw	ra,4(sp)
   1724c:	dc000017 	ldw	r16,0(sp)
   17250:	dec00204 	addi	sp,sp,8
   17254:	f800283a 	ret

00017258 <__swrite>:
   17258:	2880030b 	ldhu	r2,12(r5)
   1725c:	defffb04 	addi	sp,sp,-20
   17260:	dcc00315 	stw	r19,12(sp)
   17264:	1080400c 	andi	r2,r2,256
   17268:	dc800215 	stw	r18,8(sp)
   1726c:	dc400115 	stw	r17,4(sp)
   17270:	dc000015 	stw	r16,0(sp)
   17274:	3027883a 	mov	r19,r6
   17278:	3825883a 	mov	r18,r7
   1727c:	dfc00415 	stw	ra,16(sp)
   17280:	2821883a 	mov	r16,r5
   17284:	000d883a 	mov	r6,zero
   17288:	01c00084 	movi	r7,2
   1728c:	2023883a 	mov	r17,r4
   17290:	10000226 	beq	r2,zero,1729c <__swrite+0x44>
   17294:	2940038f 	ldh	r5,14(r5)
   17298:	00177a80 	call	177a8 <_lseek_r>
   1729c:	8080030b 	ldhu	r2,12(r16)
   172a0:	8140038f 	ldh	r5,14(r16)
   172a4:	8809883a 	mov	r4,r17
   172a8:	10bbffcc 	andi	r2,r2,61439
   172ac:	980d883a 	mov	r6,r19
   172b0:	900f883a 	mov	r7,r18
   172b4:	8080030d 	sth	r2,12(r16)
   172b8:	dfc00417 	ldw	ra,16(sp)
   172bc:	dcc00317 	ldw	r19,12(sp)
   172c0:	dc800217 	ldw	r18,8(sp)
   172c4:	dc400117 	ldw	r17,4(sp)
   172c8:	dc000017 	ldw	r16,0(sp)
   172cc:	dec00504 	addi	sp,sp,20
   172d0:	00173f01 	jmpi	173f0 <_write_r>

000172d4 <__sread>:
   172d4:	defffe04 	addi	sp,sp,-8
   172d8:	dc000015 	stw	r16,0(sp)
   172dc:	2821883a 	mov	r16,r5
   172e0:	2940038f 	ldh	r5,14(r5)
   172e4:	dfc00115 	stw	ra,4(sp)
   172e8:	00178200 	call	17820 <_read_r>
   172ec:	1007883a 	mov	r3,r2
   172f0:	10000816 	blt	r2,zero,17314 <__sread+0x40>
   172f4:	80801417 	ldw	r2,80(r16)
   172f8:	10c5883a 	add	r2,r2,r3
   172fc:	80801415 	stw	r2,80(r16)
   17300:	1805883a 	mov	r2,r3
   17304:	dfc00117 	ldw	ra,4(sp)
   17308:	dc000017 	ldw	r16,0(sp)
   1730c:	dec00204 	addi	sp,sp,8
   17310:	f800283a 	ret
   17314:	8080030b 	ldhu	r2,12(r16)
   17318:	10bbffcc 	andi	r2,r2,61439
   1731c:	8080030d 	sth	r2,12(r16)
   17320:	1805883a 	mov	r2,r3
   17324:	dfc00117 	ldw	ra,4(sp)
   17328:	dc000017 	ldw	r16,0(sp)
   1732c:	dec00204 	addi	sp,sp,8
   17330:	f800283a 	ret

00017334 <strcmp>:
   17334:	2144b03a 	or	r2,r4,r5
   17338:	108000cc 	andi	r2,r2,3
   1733c:	10001d1e 	bne	r2,zero,173b4 <strcmp+0x80>
   17340:	200f883a 	mov	r7,r4
   17344:	28800017 	ldw	r2,0(r5)
   17348:	21000017 	ldw	r4,0(r4)
   1734c:	280d883a 	mov	r6,r5
   17350:	2080161e 	bne	r4,r2,173ac <strcmp+0x78>
   17354:	023fbff4 	movhi	r8,65279
   17358:	423fbfc4 	addi	r8,r8,-257
   1735c:	2207883a 	add	r3,r4,r8
   17360:	01602074 	movhi	r5,32897
   17364:	29602004 	addi	r5,r5,-32640
   17368:	1946703a 	and	r3,r3,r5
   1736c:	0104303a 	nor	r2,zero,r4
   17370:	10c4703a 	and	r2,r2,r3
   17374:	10001c1e 	bne	r2,zero,173e8 <strcmp+0xb4>
   17378:	4013883a 	mov	r9,r8
   1737c:	2811883a 	mov	r8,r5
   17380:	00000106 	br	17388 <strcmp+0x54>
   17384:	1800181e 	bne	r3,zero,173e8 <strcmp+0xb4>
   17388:	39c00104 	addi	r7,r7,4
   1738c:	39000017 	ldw	r4,0(r7)
   17390:	31800104 	addi	r6,r6,4
   17394:	31400017 	ldw	r5,0(r6)
   17398:	2245883a 	add	r2,r4,r9
   1739c:	1204703a 	and	r2,r2,r8
   173a0:	0106303a 	nor	r3,zero,r4
   173a4:	1886703a 	and	r3,r3,r2
   173a8:	217ff626 	beq	r4,r5,17384 <strcmp+0x50>
   173ac:	3809883a 	mov	r4,r7
   173b0:	300b883a 	mov	r5,r6
   173b4:	20c00007 	ldb	r3,0(r4)
   173b8:	1800051e 	bne	r3,zero,173d0 <strcmp+0x9c>
   173bc:	00000606 	br	173d8 <strcmp+0xa4>
   173c0:	21000044 	addi	r4,r4,1
   173c4:	20c00007 	ldb	r3,0(r4)
   173c8:	29400044 	addi	r5,r5,1
   173cc:	18000226 	beq	r3,zero,173d8 <strcmp+0xa4>
   173d0:	28800007 	ldb	r2,0(r5)
   173d4:	18bffa26 	beq	r3,r2,173c0 <strcmp+0x8c>
   173d8:	20c00003 	ldbu	r3,0(r4)
   173dc:	28800003 	ldbu	r2,0(r5)
   173e0:	1885c83a 	sub	r2,r3,r2
   173e4:	f800283a 	ret
   173e8:	0005883a 	mov	r2,zero
   173ec:	f800283a 	ret

000173f0 <_write_r>:
   173f0:	defffd04 	addi	sp,sp,-12
   173f4:	dc000015 	stw	r16,0(sp)
   173f8:	04000134 	movhi	r16,4
   173fc:	84278604 	addi	r16,r16,-25064
   17400:	dc400115 	stw	r17,4(sp)
   17404:	80000015 	stw	zero,0(r16)
   17408:	2023883a 	mov	r17,r4
   1740c:	2809883a 	mov	r4,r5
   17410:	300b883a 	mov	r5,r6
   17414:	380d883a 	mov	r6,r7
   17418:	dfc00215 	stw	ra,8(sp)
   1741c:	001a8580 	call	1a858 <write>
   17420:	1007883a 	mov	r3,r2
   17424:	00bfffc4 	movi	r2,-1
   17428:	18800626 	beq	r3,r2,17444 <_write_r+0x54>
   1742c:	1805883a 	mov	r2,r3
   17430:	dfc00217 	ldw	ra,8(sp)
   17434:	dc400117 	ldw	r17,4(sp)
   17438:	dc000017 	ldw	r16,0(sp)
   1743c:	dec00304 	addi	sp,sp,12
   17440:	f800283a 	ret
   17444:	80800017 	ldw	r2,0(r16)
   17448:	103ff826 	beq	r2,zero,1742c <_write_r+0x3c>
   1744c:	88800015 	stw	r2,0(r17)
   17450:	1805883a 	mov	r2,r3
   17454:	dfc00217 	ldw	ra,8(sp)
   17458:	dc400117 	ldw	r17,4(sp)
   1745c:	dc000017 	ldw	r16,0(sp)
   17460:	dec00304 	addi	sp,sp,12
   17464:	f800283a 	ret

00017468 <_calloc_r>:
   17468:	defffe04 	addi	sp,sp,-8
   1746c:	dc400015 	stw	r17,0(sp)
   17470:	2023883a 	mov	r17,r4
   17474:	2809883a 	mov	r4,r5
   17478:	300b883a 	mov	r5,r6
   1747c:	dfc00115 	stw	ra,4(sp)
   17480:	00197dc0 	call	197dc <__mulsi3>
   17484:	100b883a 	mov	r5,r2
   17488:	8809883a 	mov	r4,r17
   1748c:	001504c0 	call	1504c <_malloc_r>
   17490:	1023883a 	mov	r17,r2
   17494:	01c00904 	movi	r7,36
   17498:	10000d26 	beq	r2,zero,174d0 <_calloc_r+0x68>
   1749c:	10ffff17 	ldw	r3,-4(r2)
   174a0:	1009883a 	mov	r4,r2
   174a4:	00bfff04 	movi	r2,-4
   174a8:	1886703a 	and	r3,r3,r2
   174ac:	1887883a 	add	r3,r3,r2
   174b0:	180d883a 	mov	r6,r3
   174b4:	000b883a 	mov	r5,zero
   174b8:	38c01736 	bltu	r7,r3,17518 <_calloc_r+0xb0>
   174bc:	008004c4 	movi	r2,19
   174c0:	10c00836 	bltu	r2,r3,174e4 <_calloc_r+0x7c>
   174c4:	20000215 	stw	zero,8(r4)
   174c8:	20000015 	stw	zero,0(r4)
   174cc:	20000115 	stw	zero,4(r4)
   174d0:	8805883a 	mov	r2,r17
   174d4:	dfc00117 	ldw	ra,4(sp)
   174d8:	dc400017 	ldw	r17,0(sp)
   174dc:	dec00204 	addi	sp,sp,8
   174e0:	f800283a 	ret
   174e4:	008006c4 	movi	r2,27
   174e8:	88000015 	stw	zero,0(r17)
   174ec:	88000115 	stw	zero,4(r17)
   174f0:	89000204 	addi	r4,r17,8
   174f4:	10fff32e 	bgeu	r2,r3,174c4 <_calloc_r+0x5c>
   174f8:	88000215 	stw	zero,8(r17)
   174fc:	88000315 	stw	zero,12(r17)
   17500:	89000404 	addi	r4,r17,16
   17504:	19ffef1e 	bne	r3,r7,174c4 <_calloc_r+0x5c>
   17508:	89000604 	addi	r4,r17,24
   1750c:	88000415 	stw	zero,16(r17)
   17510:	88000515 	stw	zero,20(r17)
   17514:	003feb06 	br	174c4 <_calloc_r+0x5c>
   17518:	00159f00 	call	159f0 <memset>
   1751c:	8805883a 	mov	r2,r17
   17520:	dfc00117 	ldw	ra,4(sp)
   17524:	dc400017 	ldw	r17,0(sp)
   17528:	dec00204 	addi	sp,sp,8
   1752c:	f800283a 	ret

00017530 <_close_r>:
   17530:	defffd04 	addi	sp,sp,-12
   17534:	dc000015 	stw	r16,0(sp)
   17538:	04000134 	movhi	r16,4
   1753c:	84278604 	addi	r16,r16,-25064
   17540:	dc400115 	stw	r17,4(sp)
   17544:	80000015 	stw	zero,0(r16)
   17548:	2023883a 	mov	r17,r4
   1754c:	2809883a 	mov	r4,r5
   17550:	dfc00215 	stw	ra,8(sp)
   17554:	0019ecc0 	call	19ecc <close>
   17558:	1007883a 	mov	r3,r2
   1755c:	00bfffc4 	movi	r2,-1
   17560:	18800626 	beq	r3,r2,1757c <_close_r+0x4c>
   17564:	1805883a 	mov	r2,r3
   17568:	dfc00217 	ldw	ra,8(sp)
   1756c:	dc400117 	ldw	r17,4(sp)
   17570:	dc000017 	ldw	r16,0(sp)
   17574:	dec00304 	addi	sp,sp,12
   17578:	f800283a 	ret
   1757c:	80800017 	ldw	r2,0(r16)
   17580:	103ff826 	beq	r2,zero,17564 <_close_r+0x34>
   17584:	88800015 	stw	r2,0(r17)
   17588:	1805883a 	mov	r2,r3
   1758c:	dfc00217 	ldw	ra,8(sp)
   17590:	dc400117 	ldw	r17,4(sp)
   17594:	dc000017 	ldw	r16,0(sp)
   17598:	dec00304 	addi	sp,sp,12
   1759c:	f800283a 	ret

000175a0 <_fclose_r>:
   175a0:	defffc04 	addi	sp,sp,-16
   175a4:	dc400115 	stw	r17,4(sp)
   175a8:	dc000015 	stw	r16,0(sp)
   175ac:	dfc00315 	stw	ra,12(sp)
   175b0:	dc800215 	stw	r18,8(sp)
   175b4:	2821883a 	mov	r16,r5
   175b8:	2023883a 	mov	r17,r4
   175bc:	28002926 	beq	r5,zero,17664 <_fclose_r+0xc4>
   175c0:	00140fc0 	call	140fc <__sfp_lock_acquire>
   175c4:	88000226 	beq	r17,zero,175d0 <_fclose_r+0x30>
   175c8:	88800e17 	ldw	r2,56(r17)
   175cc:	10002d26 	beq	r2,zero,17684 <_fclose_r+0xe4>
   175d0:	8080030f 	ldh	r2,12(r16)
   175d4:	10002226 	beq	r2,zero,17660 <_fclose_r+0xc0>
   175d8:	8809883a 	mov	r4,r17
   175dc:	800b883a 	mov	r5,r16
   175e0:	0013e740 	call	13e74 <_fflush_r>
   175e4:	1025883a 	mov	r18,r2
   175e8:	80800b17 	ldw	r2,44(r16)
   175ec:	10000426 	beq	r2,zero,17600 <_fclose_r+0x60>
   175f0:	81400717 	ldw	r5,28(r16)
   175f4:	8809883a 	mov	r4,r17
   175f8:	103ee83a 	callr	r2
   175fc:	10002a16 	blt	r2,zero,176a8 <_fclose_r+0x108>
   17600:	8080030b 	ldhu	r2,12(r16)
   17604:	1080200c 	andi	r2,r2,128
   17608:	1000231e 	bne	r2,zero,17698 <_fclose_r+0xf8>
   1760c:	81400c17 	ldw	r5,48(r16)
   17610:	28000526 	beq	r5,zero,17628 <_fclose_r+0x88>
   17614:	80801004 	addi	r2,r16,64
   17618:	28800226 	beq	r5,r2,17624 <_fclose_r+0x84>
   1761c:	8809883a 	mov	r4,r17
   17620:	00144c40 	call	144c4 <_free_r>
   17624:	80000c15 	stw	zero,48(r16)
   17628:	81401117 	ldw	r5,68(r16)
   1762c:	28000326 	beq	r5,zero,1763c <_fclose_r+0x9c>
   17630:	8809883a 	mov	r4,r17
   17634:	00144c40 	call	144c4 <_free_r>
   17638:	80001115 	stw	zero,68(r16)
   1763c:	8000030d 	sth	zero,12(r16)
   17640:	00141000 	call	14100 <__sfp_lock_release>
   17644:	9005883a 	mov	r2,r18
   17648:	dfc00317 	ldw	ra,12(sp)
   1764c:	dc800217 	ldw	r18,8(sp)
   17650:	dc400117 	ldw	r17,4(sp)
   17654:	dc000017 	ldw	r16,0(sp)
   17658:	dec00404 	addi	sp,sp,16
   1765c:	f800283a 	ret
   17660:	00141000 	call	14100 <__sfp_lock_release>
   17664:	0025883a 	mov	r18,zero
   17668:	9005883a 	mov	r2,r18
   1766c:	dfc00317 	ldw	ra,12(sp)
   17670:	dc800217 	ldw	r18,8(sp)
   17674:	dc400117 	ldw	r17,4(sp)
   17678:	dc000017 	ldw	r16,0(sp)
   1767c:	dec00404 	addi	sp,sp,16
   17680:	f800283a 	ret
   17684:	8809883a 	mov	r4,r17
   17688:	001410c0 	call	1410c <__sinit>
   1768c:	8080030f 	ldh	r2,12(r16)
   17690:	103fd11e 	bne	r2,zero,175d8 <_fclose_r+0x38>
   17694:	003ff206 	br	17660 <_fclose_r+0xc0>
   17698:	81400417 	ldw	r5,16(r16)
   1769c:	8809883a 	mov	r4,r17
   176a0:	00144c40 	call	144c4 <_free_r>
   176a4:	003fd906 	br	1760c <_fclose_r+0x6c>
   176a8:	04bfffc4 	movi	r18,-1
   176ac:	003fd406 	br	17600 <_fclose_r+0x60>

000176b0 <fclose>:
   176b0:	00800134 	movhi	r2,4
   176b4:	10a76b04 	addi	r2,r2,-25172
   176b8:	200b883a 	mov	r5,r4
   176bc:	11000017 	ldw	r4,0(r2)
   176c0:	00175a01 	jmpi	175a0 <_fclose_r>

000176c4 <_fstat_r>:
   176c4:	defffd04 	addi	sp,sp,-12
   176c8:	dc000015 	stw	r16,0(sp)
   176cc:	04000134 	movhi	r16,4
   176d0:	84278604 	addi	r16,r16,-25064
   176d4:	dc400115 	stw	r17,4(sp)
   176d8:	80000015 	stw	zero,0(r16)
   176dc:	2023883a 	mov	r17,r4
   176e0:	2809883a 	mov	r4,r5
   176e4:	300b883a 	mov	r5,r6
   176e8:	dfc00215 	stw	ra,8(sp)
   176ec:	001a0580 	call	1a058 <fstat>
   176f0:	1007883a 	mov	r3,r2
   176f4:	00bfffc4 	movi	r2,-1
   176f8:	18800626 	beq	r3,r2,17714 <_fstat_r+0x50>
   176fc:	1805883a 	mov	r2,r3
   17700:	dfc00217 	ldw	ra,8(sp)
   17704:	dc400117 	ldw	r17,4(sp)
   17708:	dc000017 	ldw	r16,0(sp)
   1770c:	dec00304 	addi	sp,sp,12
   17710:	f800283a 	ret
   17714:	80800017 	ldw	r2,0(r16)
   17718:	103ff826 	beq	r2,zero,176fc <_fstat_r+0x38>
   1771c:	88800015 	stw	r2,0(r17)
   17720:	1805883a 	mov	r2,r3
   17724:	dfc00217 	ldw	ra,8(sp)
   17728:	dc400117 	ldw	r17,4(sp)
   1772c:	dc000017 	ldw	r16,0(sp)
   17730:	dec00304 	addi	sp,sp,12
   17734:	f800283a 	ret

00017738 <_isatty_r>:
   17738:	defffd04 	addi	sp,sp,-12
   1773c:	dc000015 	stw	r16,0(sp)
   17740:	04000134 	movhi	r16,4
   17744:	84278604 	addi	r16,r16,-25064
   17748:	dc400115 	stw	r17,4(sp)
   1774c:	80000015 	stw	zero,0(r16)
   17750:	2023883a 	mov	r17,r4
   17754:	2809883a 	mov	r4,r5
   17758:	dfc00215 	stw	ra,8(sp)
   1775c:	001a1900 	call	1a190 <isatty>
   17760:	1007883a 	mov	r3,r2
   17764:	00bfffc4 	movi	r2,-1
   17768:	18800626 	beq	r3,r2,17784 <_isatty_r+0x4c>
   1776c:	1805883a 	mov	r2,r3
   17770:	dfc00217 	ldw	ra,8(sp)
   17774:	dc400117 	ldw	r17,4(sp)
   17778:	dc000017 	ldw	r16,0(sp)
   1777c:	dec00304 	addi	sp,sp,12
   17780:	f800283a 	ret
   17784:	80800017 	ldw	r2,0(r16)
   17788:	103ff826 	beq	r2,zero,1776c <_isatty_r+0x34>
   1778c:	88800015 	stw	r2,0(r17)
   17790:	1805883a 	mov	r2,r3
   17794:	dfc00217 	ldw	ra,8(sp)
   17798:	dc400117 	ldw	r17,4(sp)
   1779c:	dc000017 	ldw	r16,0(sp)
   177a0:	dec00304 	addi	sp,sp,12
   177a4:	f800283a 	ret

000177a8 <_lseek_r>:
   177a8:	defffd04 	addi	sp,sp,-12
   177ac:	dc000015 	stw	r16,0(sp)
   177b0:	04000134 	movhi	r16,4
   177b4:	84278604 	addi	r16,r16,-25064
   177b8:	dc400115 	stw	r17,4(sp)
   177bc:	80000015 	stw	zero,0(r16)
   177c0:	2023883a 	mov	r17,r4
   177c4:	2809883a 	mov	r4,r5
   177c8:	300b883a 	mov	r5,r6
   177cc:	380d883a 	mov	r6,r7
   177d0:	dfc00215 	stw	ra,8(sp)
   177d4:	001a3a00 	call	1a3a0 <lseek>
   177d8:	1007883a 	mov	r3,r2
   177dc:	00bfffc4 	movi	r2,-1
   177e0:	18800626 	beq	r3,r2,177fc <_lseek_r+0x54>
   177e4:	1805883a 	mov	r2,r3
   177e8:	dfc00217 	ldw	ra,8(sp)
   177ec:	dc400117 	ldw	r17,4(sp)
   177f0:	dc000017 	ldw	r16,0(sp)
   177f4:	dec00304 	addi	sp,sp,12
   177f8:	f800283a 	ret
   177fc:	80800017 	ldw	r2,0(r16)
   17800:	103ff826 	beq	r2,zero,177e4 <_lseek_r+0x3c>
   17804:	88800015 	stw	r2,0(r17)
   17808:	1805883a 	mov	r2,r3
   1780c:	dfc00217 	ldw	ra,8(sp)
   17810:	dc400117 	ldw	r17,4(sp)
   17814:	dc000017 	ldw	r16,0(sp)
   17818:	dec00304 	addi	sp,sp,12
   1781c:	f800283a 	ret

00017820 <_read_r>:
   17820:	defffd04 	addi	sp,sp,-12
   17824:	dc000015 	stw	r16,0(sp)
   17828:	04000134 	movhi	r16,4
   1782c:	84278604 	addi	r16,r16,-25064
   17830:	dc400115 	stw	r17,4(sp)
   17834:	80000015 	stw	zero,0(r16)
   17838:	2023883a 	mov	r17,r4
   1783c:	2809883a 	mov	r4,r5
   17840:	300b883a 	mov	r5,r6
   17844:	380d883a 	mov	r6,r7
   17848:	dfc00215 	stw	ra,8(sp)
   1784c:	001a5a00 	call	1a5a0 <read>
   17850:	1007883a 	mov	r3,r2
   17854:	00bfffc4 	movi	r2,-1
   17858:	18800626 	beq	r3,r2,17874 <_read_r+0x54>
   1785c:	1805883a 	mov	r2,r3
   17860:	dfc00217 	ldw	ra,8(sp)
   17864:	dc400117 	ldw	r17,4(sp)
   17868:	dc000017 	ldw	r16,0(sp)
   1786c:	dec00304 	addi	sp,sp,12
   17870:	f800283a 	ret
   17874:	80800017 	ldw	r2,0(r16)
   17878:	103ff826 	beq	r2,zero,1785c <_read_r+0x3c>
   1787c:	88800015 	stw	r2,0(r17)
   17880:	1805883a 	mov	r2,r3
   17884:	dfc00217 	ldw	ra,8(sp)
   17888:	dc400117 	ldw	r17,4(sp)
   1788c:	dc000017 	ldw	r16,0(sp)
   17890:	dec00304 	addi	sp,sp,12
   17894:	f800283a 	ret

00017898 <__udivdi3>:
   17898:	defff104 	addi	sp,sp,-60
   1789c:	0015883a 	mov	r10,zero
   178a0:	2005883a 	mov	r2,r4
   178a4:	3011883a 	mov	r8,r6
   178a8:	df000d15 	stw	fp,52(sp)
   178ac:	dd400a15 	stw	r21,40(sp)
   178b0:	dcc00815 	stw	r19,32(sp)
   178b4:	dfc00e15 	stw	ra,56(sp)
   178b8:	ddc00c15 	stw	r23,48(sp)
   178bc:	dd800b15 	stw	r22,44(sp)
   178c0:	dd000915 	stw	r20,36(sp)
   178c4:	dc800715 	stw	r18,28(sp)
   178c8:	dc400615 	stw	r17,24(sp)
   178cc:	dc000515 	stw	r16,20(sp)
   178d0:	da800315 	stw	r10,12(sp)
   178d4:	4027883a 	mov	r19,r8
   178d8:	1039883a 	mov	fp,r2
   178dc:	282b883a 	mov	r21,r5
   178e0:	da800415 	stw	r10,16(sp)
   178e4:	3800401e 	bne	r7,zero,179e8 <__udivdi3+0x150>
   178e8:	2a006536 	bltu	r5,r8,17a80 <__udivdi3+0x1e8>
   178ec:	4000b526 	beq	r8,zero,17bc4 <__udivdi3+0x32c>
   178f0:	00bfffd4 	movui	r2,65535
   178f4:	14c0ad36 	bltu	r2,r19,17bac <__udivdi3+0x314>
   178f8:	00803fc4 	movi	r2,255
   178fc:	14c15e36 	bltu	r2,r19,17e78 <__udivdi3+0x5e0>
   17900:	000b883a 	mov	r5,zero
   17904:	0005883a 	mov	r2,zero
   17908:	9884d83a 	srl	r2,r19,r2
   1790c:	01000134 	movhi	r4,4
   17910:	21209904 	addi	r4,r4,-32156
   17914:	01800804 	movi	r6,32
   17918:	1105883a 	add	r2,r2,r4
   1791c:	10c00003 	ldbu	r3,0(r2)
   17920:	28c7883a 	add	r3,r5,r3
   17924:	30e9c83a 	sub	r20,r6,r3
   17928:	a0010a1e 	bne	r20,zero,17d54 <__udivdi3+0x4bc>
   1792c:	982ed43a 	srli	r23,r19,16
   17930:	acebc83a 	sub	r21,r21,r19
   17934:	9dbfffcc 	andi	r22,r19,65535
   17938:	05000044 	movi	r20,1
   1793c:	a809883a 	mov	r4,r21
   17940:	b80b883a 	mov	r5,r23
   17944:	00197cc0 	call	197cc <__udivsi3>
   17948:	100b883a 	mov	r5,r2
   1794c:	b009883a 	mov	r4,r22
   17950:	1021883a 	mov	r16,r2
   17954:	00197dc0 	call	197dc <__mulsi3>
   17958:	a809883a 	mov	r4,r21
   1795c:	b80b883a 	mov	r5,r23
   17960:	1023883a 	mov	r17,r2
   17964:	00197d40 	call	197d4 <__umodsi3>
   17968:	1004943a 	slli	r2,r2,16
   1796c:	e006d43a 	srli	r3,fp,16
   17970:	10c4b03a 	or	r2,r2,r3
   17974:	1440042e 	bgeu	r2,r17,17988 <__udivdi3+0xf0>
   17978:	14c5883a 	add	r2,r2,r19
   1797c:	843fffc4 	addi	r16,r16,-1
   17980:	14c00136 	bltu	r2,r19,17988 <__udivdi3+0xf0>
   17984:	14415c36 	bltu	r2,r17,17ef8 <__udivdi3+0x660>
   17988:	1463c83a 	sub	r17,r2,r17
   1798c:	8809883a 	mov	r4,r17
   17990:	b80b883a 	mov	r5,r23
   17994:	00197cc0 	call	197cc <__udivsi3>
   17998:	100b883a 	mov	r5,r2
   1799c:	b009883a 	mov	r4,r22
   179a0:	102b883a 	mov	r21,r2
   179a4:	00197dc0 	call	197dc <__mulsi3>
   179a8:	8809883a 	mov	r4,r17
   179ac:	b80b883a 	mov	r5,r23
   179b0:	1025883a 	mov	r18,r2
   179b4:	00197d40 	call	197d4 <__umodsi3>
   179b8:	1004943a 	slli	r2,r2,16
   179bc:	e0ffffcc 	andi	r3,fp,65535
   179c0:	10c4b03a 	or	r2,r2,r3
   179c4:	1480042e 	bgeu	r2,r18,179d8 <__udivdi3+0x140>
   179c8:	9885883a 	add	r2,r19,r2
   179cc:	ad7fffc4 	addi	r21,r21,-1
   179d0:	14c00136 	bltu	r2,r19,179d8 <__udivdi3+0x140>
   179d4:	14813c36 	bltu	r2,r18,17ec8 <__udivdi3+0x630>
   179d8:	8004943a 	slli	r2,r16,16
   179dc:	a009883a 	mov	r4,r20
   179e0:	a884b03a 	or	r2,r21,r2
   179e4:	00001506 	br	17a3c <__udivdi3+0x1a4>
   179e8:	380d883a 	mov	r6,r7
   179ec:	29c06c36 	bltu	r5,r7,17ba0 <__udivdi3+0x308>
   179f0:	00bfffd4 	movui	r2,65535
   179f4:	11c06436 	bltu	r2,r7,17b88 <__udivdi3+0x2f0>
   179f8:	00803fc4 	movi	r2,255
   179fc:	11c11836 	bltu	r2,r7,17e60 <__udivdi3+0x5c8>
   17a00:	000b883a 	mov	r5,zero
   17a04:	0005883a 	mov	r2,zero
   17a08:	3084d83a 	srl	r2,r6,r2
   17a0c:	01000134 	movhi	r4,4
   17a10:	21209904 	addi	r4,r4,-32156
   17a14:	01c00804 	movi	r7,32
   17a18:	1105883a 	add	r2,r2,r4
   17a1c:	10c00003 	ldbu	r3,0(r2)
   17a20:	28c7883a 	add	r3,r5,r3
   17a24:	38edc83a 	sub	r22,r7,r3
   17a28:	b000731e 	bne	r22,zero,17bf8 <__udivdi3+0x360>
   17a2c:	35400136 	bltu	r6,r21,17a34 <__udivdi3+0x19c>
   17a30:	e4c05b36 	bltu	fp,r19,17ba0 <__udivdi3+0x308>
   17a34:	00800044 	movi	r2,1
   17a38:	0009883a 	mov	r4,zero
   17a3c:	d8800315 	stw	r2,12(sp)
   17a40:	d9400317 	ldw	r5,12(sp)
   17a44:	2007883a 	mov	r3,r4
   17a48:	d9000415 	stw	r4,16(sp)
   17a4c:	2805883a 	mov	r2,r5
   17a50:	dfc00e17 	ldw	ra,56(sp)
   17a54:	df000d17 	ldw	fp,52(sp)
   17a58:	ddc00c17 	ldw	r23,48(sp)
   17a5c:	dd800b17 	ldw	r22,44(sp)
   17a60:	dd400a17 	ldw	r21,40(sp)
   17a64:	dd000917 	ldw	r20,36(sp)
   17a68:	dcc00817 	ldw	r19,32(sp)
   17a6c:	dc800717 	ldw	r18,28(sp)
   17a70:	dc400617 	ldw	r17,24(sp)
   17a74:	dc000517 	ldw	r16,20(sp)
   17a78:	dec00f04 	addi	sp,sp,60
   17a7c:	f800283a 	ret
   17a80:	00bfffd4 	movui	r2,65535
   17a84:	12005636 	bltu	r2,r8,17be0 <__udivdi3+0x348>
   17a88:	00803fc4 	movi	r2,255
   17a8c:	12010036 	bltu	r2,r8,17e90 <__udivdi3+0x5f8>
   17a90:	000b883a 	mov	r5,zero
   17a94:	0005883a 	mov	r2,zero
   17a98:	9884d83a 	srl	r2,r19,r2
   17a9c:	01000134 	movhi	r4,4
   17aa0:	21209904 	addi	r4,r4,-32156
   17aa4:	01800804 	movi	r6,32
   17aa8:	1105883a 	add	r2,r2,r4
   17aac:	10c00003 	ldbu	r3,0(r2)
   17ab0:	28c7883a 	add	r3,r5,r3
   17ab4:	30cbc83a 	sub	r5,r6,r3
   17ab8:	28000626 	beq	r5,zero,17ad4 <__udivdi3+0x23c>
   17abc:	3145c83a 	sub	r2,r6,r5
   17ac0:	e084d83a 	srl	r2,fp,r2
   17ac4:	a946983a 	sll	r3,r21,r5
   17ac8:	e178983a 	sll	fp,fp,r5
   17acc:	9966983a 	sll	r19,r19,r5
   17ad0:	18aab03a 	or	r21,r3,r2
   17ad4:	982ed43a 	srli	r23,r19,16
   17ad8:	a809883a 	mov	r4,r21
   17adc:	9cbfffcc 	andi	r18,r19,65535
   17ae0:	b80b883a 	mov	r5,r23
   17ae4:	00197cc0 	call	197cc <__udivsi3>
   17ae8:	100b883a 	mov	r5,r2
   17aec:	9009883a 	mov	r4,r18
   17af0:	1021883a 	mov	r16,r2
   17af4:	00197dc0 	call	197dc <__mulsi3>
   17af8:	a809883a 	mov	r4,r21
   17afc:	b80b883a 	mov	r5,r23
   17b00:	1023883a 	mov	r17,r2
   17b04:	00197d40 	call	197d4 <__umodsi3>
   17b08:	1004943a 	slli	r2,r2,16
   17b0c:	e006d43a 	srli	r3,fp,16
   17b10:	10c4b03a 	or	r2,r2,r3
   17b14:	1440042e 	bgeu	r2,r17,17b28 <__udivdi3+0x290>
   17b18:	14c5883a 	add	r2,r2,r19
   17b1c:	843fffc4 	addi	r16,r16,-1
   17b20:	14c00136 	bltu	r2,r19,17b28 <__udivdi3+0x290>
   17b24:	1440ea36 	bltu	r2,r17,17ed0 <__udivdi3+0x638>
   17b28:	1463c83a 	sub	r17,r2,r17
   17b2c:	8809883a 	mov	r4,r17
   17b30:	b80b883a 	mov	r5,r23
   17b34:	00197cc0 	call	197cc <__udivsi3>
   17b38:	100b883a 	mov	r5,r2
   17b3c:	9009883a 	mov	r4,r18
   17b40:	102b883a 	mov	r21,r2
   17b44:	00197dc0 	call	197dc <__mulsi3>
   17b48:	8809883a 	mov	r4,r17
   17b4c:	b80b883a 	mov	r5,r23
   17b50:	1025883a 	mov	r18,r2
   17b54:	00197d40 	call	197d4 <__umodsi3>
   17b58:	1004943a 	slli	r2,r2,16
   17b5c:	e0ffffcc 	andi	r3,fp,65535
   17b60:	10c4b03a 	or	r2,r2,r3
   17b64:	1480042e 	bgeu	r2,r18,17b78 <__udivdi3+0x2e0>
   17b68:	9885883a 	add	r2,r19,r2
   17b6c:	ad7fffc4 	addi	r21,r21,-1
   17b70:	14c00136 	bltu	r2,r19,17b78 <__udivdi3+0x2e0>
   17b74:	1480d936 	bltu	r2,r18,17edc <__udivdi3+0x644>
   17b78:	8004943a 	slli	r2,r16,16
   17b7c:	0009883a 	mov	r4,zero
   17b80:	a884b03a 	or	r2,r21,r2
   17b84:	003fad06 	br	17a3c <__udivdi3+0x1a4>
   17b88:	00804034 	movhi	r2,256
   17b8c:	10bfffc4 	addi	r2,r2,-1
   17b90:	11c0b636 	bltu	r2,r7,17e6c <__udivdi3+0x5d4>
   17b94:	01400404 	movi	r5,16
   17b98:	2805883a 	mov	r2,r5
   17b9c:	003f9a06 	br	17a08 <__udivdi3+0x170>
   17ba0:	0005883a 	mov	r2,zero
   17ba4:	0009883a 	mov	r4,zero
   17ba8:	003fa406 	br	17a3c <__udivdi3+0x1a4>
   17bac:	00804034 	movhi	r2,256
   17bb0:	10bfffc4 	addi	r2,r2,-1
   17bb4:	14c0b336 	bltu	r2,r19,17e84 <__udivdi3+0x5ec>
   17bb8:	01400404 	movi	r5,16
   17bbc:	2805883a 	mov	r2,r5
   17bc0:	003f5106 	br	17908 <__udivdi3+0x70>
   17bc4:	01000044 	movi	r4,1
   17bc8:	000b883a 	mov	r5,zero
   17bcc:	00197cc0 	call	197cc <__udivsi3>
   17bd0:	1027883a 	mov	r19,r2
   17bd4:	00bfffd4 	movui	r2,65535
   17bd8:	14fff436 	bltu	r2,r19,17bac <__udivdi3+0x314>
   17bdc:	003f4606 	br	178f8 <__udivdi3+0x60>
   17be0:	00804034 	movhi	r2,256
   17be4:	10bfffc4 	addi	r2,r2,-1
   17be8:	1200ac36 	bltu	r2,r8,17e9c <__udivdi3+0x604>
   17bec:	01400404 	movi	r5,16
   17bf0:	2805883a 	mov	r2,r5
   17bf4:	003fa806 	br	17a98 <__udivdi3+0x200>
   17bf8:	3d85c83a 	sub	r2,r7,r22
   17bfc:	3588983a 	sll	r4,r6,r22
   17c00:	9886d83a 	srl	r3,r19,r2
   17c04:	a8a2d83a 	srl	r17,r21,r2
   17c08:	e084d83a 	srl	r2,fp,r2
   17c0c:	20eeb03a 	or	r23,r4,r3
   17c10:	b824d43a 	srli	r18,r23,16
   17c14:	ad86983a 	sll	r3,r21,r22
   17c18:	8809883a 	mov	r4,r17
   17c1c:	900b883a 	mov	r5,r18
   17c20:	1886b03a 	or	r3,r3,r2
   17c24:	d8c00115 	stw	r3,4(sp)
   17c28:	bc3fffcc 	andi	r16,r23,65535
   17c2c:	00197cc0 	call	197cc <__udivsi3>
   17c30:	100b883a 	mov	r5,r2
   17c34:	8009883a 	mov	r4,r16
   17c38:	1029883a 	mov	r20,r2
   17c3c:	00197dc0 	call	197dc <__mulsi3>
   17c40:	900b883a 	mov	r5,r18
   17c44:	8809883a 	mov	r4,r17
   17c48:	102b883a 	mov	r21,r2
   17c4c:	00197d40 	call	197d4 <__umodsi3>
   17c50:	d9400117 	ldw	r5,4(sp)
   17c54:	1004943a 	slli	r2,r2,16
   17c58:	9da6983a 	sll	r19,r19,r22
   17c5c:	2806d43a 	srli	r3,r5,16
   17c60:	10c4b03a 	or	r2,r2,r3
   17c64:	1540032e 	bgeu	r2,r21,17c74 <__udivdi3+0x3dc>
   17c68:	15c5883a 	add	r2,r2,r23
   17c6c:	a53fffc4 	addi	r20,r20,-1
   17c70:	15c0912e 	bgeu	r2,r23,17eb8 <__udivdi3+0x620>
   17c74:	1563c83a 	sub	r17,r2,r21
   17c78:	8809883a 	mov	r4,r17
   17c7c:	900b883a 	mov	r5,r18
   17c80:	00197cc0 	call	197cc <__udivsi3>
   17c84:	100b883a 	mov	r5,r2
   17c88:	8009883a 	mov	r4,r16
   17c8c:	102b883a 	mov	r21,r2
   17c90:	00197dc0 	call	197dc <__mulsi3>
   17c94:	8809883a 	mov	r4,r17
   17c98:	900b883a 	mov	r5,r18
   17c9c:	1021883a 	mov	r16,r2
   17ca0:	00197d40 	call	197d4 <__umodsi3>
   17ca4:	da800117 	ldw	r10,4(sp)
   17ca8:	1004943a 	slli	r2,r2,16
   17cac:	50ffffcc 	andi	r3,r10,65535
   17cb0:	10c6b03a 	or	r3,r2,r3
   17cb4:	1c00032e 	bgeu	r3,r16,17cc4 <__udivdi3+0x42c>
   17cb8:	1dc7883a 	add	r3,r3,r23
   17cbc:	ad7fffc4 	addi	r21,r21,-1
   17cc0:	1dc0792e 	bgeu	r3,r23,17ea8 <__udivdi3+0x610>
   17cc4:	a004943a 	slli	r2,r20,16
   17cc8:	982ed43a 	srli	r23,r19,16
   17ccc:	9cffffcc 	andi	r19,r19,65535
   17cd0:	a8a4b03a 	or	r18,r21,r2
   17cd4:	947fffcc 	andi	r17,r18,65535
   17cd8:	902ad43a 	srli	r21,r18,16
   17cdc:	8809883a 	mov	r4,r17
   17ce0:	980b883a 	mov	r5,r19
   17ce4:	1c21c83a 	sub	r16,r3,r16
   17ce8:	00197dc0 	call	197dc <__mulsi3>
   17cec:	8809883a 	mov	r4,r17
   17cf0:	b80b883a 	mov	r5,r23
   17cf4:	1029883a 	mov	r20,r2
   17cf8:	00197dc0 	call	197dc <__mulsi3>
   17cfc:	980b883a 	mov	r5,r19
   17d00:	a809883a 	mov	r4,r21
   17d04:	1023883a 	mov	r17,r2
   17d08:	00197dc0 	call	197dc <__mulsi3>
   17d0c:	a809883a 	mov	r4,r21
   17d10:	b80b883a 	mov	r5,r23
   17d14:	1027883a 	mov	r19,r2
   17d18:	00197dc0 	call	197dc <__mulsi3>
   17d1c:	1009883a 	mov	r4,r2
   17d20:	a004d43a 	srli	r2,r20,16
   17d24:	8ce3883a 	add	r17,r17,r19
   17d28:	1447883a 	add	r3,r2,r17
   17d2c:	1cc0022e 	bgeu	r3,r19,17d38 <__udivdi3+0x4a0>
   17d30:	00800074 	movhi	r2,1
   17d34:	2089883a 	add	r4,r4,r2
   17d38:	1804d43a 	srli	r2,r3,16
   17d3c:	2085883a 	add	r2,r4,r2
   17d40:	80804436 	bltu	r16,r2,17e54 <__udivdi3+0x5bc>
   17d44:	80803e26 	beq	r16,r2,17e40 <__udivdi3+0x5a8>
   17d48:	9005883a 	mov	r2,r18
   17d4c:	0009883a 	mov	r4,zero
   17d50:	003f3a06 	br	17a3c <__udivdi3+0x1a4>
   17d54:	9d26983a 	sll	r19,r19,r20
   17d58:	3505c83a 	sub	r2,r6,r20
   17d5c:	a8a2d83a 	srl	r17,r21,r2
   17d60:	982ed43a 	srli	r23,r19,16
   17d64:	e084d83a 	srl	r2,fp,r2
   17d68:	ad06983a 	sll	r3,r21,r20
   17d6c:	8809883a 	mov	r4,r17
   17d70:	b80b883a 	mov	r5,r23
   17d74:	1886b03a 	or	r3,r3,r2
   17d78:	d8c00015 	stw	r3,0(sp)
   17d7c:	9dbfffcc 	andi	r22,r19,65535
   17d80:	00197cc0 	call	197cc <__udivsi3>
   17d84:	100b883a 	mov	r5,r2
   17d88:	b009883a 	mov	r4,r22
   17d8c:	d8800215 	stw	r2,8(sp)
   17d90:	00197dc0 	call	197dc <__mulsi3>
   17d94:	8809883a 	mov	r4,r17
   17d98:	b80b883a 	mov	r5,r23
   17d9c:	102b883a 	mov	r21,r2
   17da0:	00197d40 	call	197d4 <__umodsi3>
   17da4:	d9000017 	ldw	r4,0(sp)
   17da8:	1004943a 	slli	r2,r2,16
   17dac:	2006d43a 	srli	r3,r4,16
   17db0:	10c4b03a 	or	r2,r2,r3
   17db4:	1540052e 	bgeu	r2,r21,17dcc <__udivdi3+0x534>
   17db8:	d9400217 	ldw	r5,8(sp)
   17dbc:	14c5883a 	add	r2,r2,r19
   17dc0:	297fffc4 	addi	r5,r5,-1
   17dc4:	d9400215 	stw	r5,8(sp)
   17dc8:	14c0462e 	bgeu	r2,r19,17ee4 <__udivdi3+0x64c>
   17dcc:	1563c83a 	sub	r17,r2,r21
   17dd0:	8809883a 	mov	r4,r17
   17dd4:	b80b883a 	mov	r5,r23
   17dd8:	00197cc0 	call	197cc <__udivsi3>
   17ddc:	100b883a 	mov	r5,r2
   17de0:	b009883a 	mov	r4,r22
   17de4:	1025883a 	mov	r18,r2
   17de8:	00197dc0 	call	197dc <__mulsi3>
   17dec:	8809883a 	mov	r4,r17
   17df0:	b80b883a 	mov	r5,r23
   17df4:	1021883a 	mov	r16,r2
   17df8:	00197d40 	call	197d4 <__umodsi3>
   17dfc:	da800017 	ldw	r10,0(sp)
   17e00:	1004943a 	slli	r2,r2,16
   17e04:	50ffffcc 	andi	r3,r10,65535
   17e08:	10c6b03a 	or	r3,r2,r3
   17e0c:	1c00062e 	bgeu	r3,r16,17e28 <__udivdi3+0x590>
   17e10:	1cc7883a 	add	r3,r3,r19
   17e14:	94bfffc4 	addi	r18,r18,-1
   17e18:	1cc00336 	bltu	r3,r19,17e28 <__udivdi3+0x590>
   17e1c:	1c00022e 	bgeu	r3,r16,17e28 <__udivdi3+0x590>
   17e20:	94bfffc4 	addi	r18,r18,-1
   17e24:	1cc7883a 	add	r3,r3,r19
   17e28:	d9000217 	ldw	r4,8(sp)
   17e2c:	e538983a 	sll	fp,fp,r20
   17e30:	1c2bc83a 	sub	r21,r3,r16
   17e34:	2004943a 	slli	r2,r4,16
   17e38:	90a8b03a 	or	r20,r18,r2
   17e3c:	003ebf06 	br	1793c <__udivdi3+0xa4>
   17e40:	1804943a 	slli	r2,r3,16
   17e44:	e588983a 	sll	r4,fp,r22
   17e48:	a0ffffcc 	andi	r3,r20,65535
   17e4c:	10c5883a 	add	r2,r2,r3
   17e50:	20bfbd2e 	bgeu	r4,r2,17d48 <__udivdi3+0x4b0>
   17e54:	90bfffc4 	addi	r2,r18,-1
   17e58:	0009883a 	mov	r4,zero
   17e5c:	003ef706 	br	17a3c <__udivdi3+0x1a4>
   17e60:	01400204 	movi	r5,8
   17e64:	2805883a 	mov	r2,r5
   17e68:	003ee706 	br	17a08 <__udivdi3+0x170>
   17e6c:	01400604 	movi	r5,24
   17e70:	2805883a 	mov	r2,r5
   17e74:	003ee406 	br	17a08 <__udivdi3+0x170>
   17e78:	01400204 	movi	r5,8
   17e7c:	2805883a 	mov	r2,r5
   17e80:	003ea106 	br	17908 <__udivdi3+0x70>
   17e84:	01400604 	movi	r5,24
   17e88:	2805883a 	mov	r2,r5
   17e8c:	003e9e06 	br	17908 <__udivdi3+0x70>
   17e90:	01400204 	movi	r5,8
   17e94:	2805883a 	mov	r2,r5
   17e98:	003eff06 	br	17a98 <__udivdi3+0x200>
   17e9c:	01400604 	movi	r5,24
   17ea0:	2805883a 	mov	r2,r5
   17ea4:	003efc06 	br	17a98 <__udivdi3+0x200>
   17ea8:	1c3f862e 	bgeu	r3,r16,17cc4 <__udivdi3+0x42c>
   17eac:	1dc7883a 	add	r3,r3,r23
   17eb0:	ad7fffc4 	addi	r21,r21,-1
   17eb4:	003f8306 	br	17cc4 <__udivdi3+0x42c>
   17eb8:	157f6e2e 	bgeu	r2,r21,17c74 <__udivdi3+0x3dc>
   17ebc:	a53fffc4 	addi	r20,r20,-1
   17ec0:	15c5883a 	add	r2,r2,r23
   17ec4:	003f6b06 	br	17c74 <__udivdi3+0x3dc>
   17ec8:	ad7fffc4 	addi	r21,r21,-1
   17ecc:	003ec206 	br	179d8 <__udivdi3+0x140>
   17ed0:	843fffc4 	addi	r16,r16,-1
   17ed4:	14c5883a 	add	r2,r2,r19
   17ed8:	003f1306 	br	17b28 <__udivdi3+0x290>
   17edc:	ad7fffc4 	addi	r21,r21,-1
   17ee0:	003f2506 	br	17b78 <__udivdi3+0x2e0>
   17ee4:	157fb92e 	bgeu	r2,r21,17dcc <__udivdi3+0x534>
   17ee8:	297fffc4 	addi	r5,r5,-1
   17eec:	14c5883a 	add	r2,r2,r19
   17ef0:	d9400215 	stw	r5,8(sp)
   17ef4:	003fb506 	br	17dcc <__udivdi3+0x534>
   17ef8:	843fffc4 	addi	r16,r16,-1
   17efc:	14c5883a 	add	r2,r2,r19
   17f00:	003ea106 	br	17988 <__udivdi3+0xf0>

00017f04 <__umoddi3>:
   17f04:	defff004 	addi	sp,sp,-64
   17f08:	3011883a 	mov	r8,r6
   17f0c:	000d883a 	mov	r6,zero
   17f10:	dd400b15 	stw	r21,44(sp)
   17f14:	dcc00915 	stw	r19,36(sp)
   17f18:	dc000615 	stw	r16,24(sp)
   17f1c:	dfc00f15 	stw	ra,60(sp)
   17f20:	df000e15 	stw	fp,56(sp)
   17f24:	ddc00d15 	stw	r23,52(sp)
   17f28:	dd800c15 	stw	r22,48(sp)
   17f2c:	dd000a15 	stw	r20,40(sp)
   17f30:	dc800815 	stw	r18,32(sp)
   17f34:	dc400715 	stw	r17,28(sp)
   17f38:	2817883a 	mov	r11,r5
   17f3c:	d9800415 	stw	r6,16(sp)
   17f40:	4027883a 	mov	r19,r8
   17f44:	d9800515 	stw	r6,20(sp)
   17f48:	2021883a 	mov	r16,r4
   17f4c:	282b883a 	mov	r21,r5
   17f50:	38002c1e 	bne	r7,zero,18004 <__umoddi3+0x100>
   17f54:	2a005636 	bltu	r5,r8,180b0 <__umoddi3+0x1ac>
   17f58:	40009a26 	beq	r8,zero,181c4 <__umoddi3+0x2c0>
   17f5c:	00bfffd4 	movui	r2,65535
   17f60:	14c09236 	bltu	r2,r19,181ac <__umoddi3+0x2a8>
   17f64:	00803fc4 	movi	r2,255
   17f68:	14c15c36 	bltu	r2,r19,184dc <__umoddi3+0x5d8>
   17f6c:	000b883a 	mov	r5,zero
   17f70:	0005883a 	mov	r2,zero
   17f74:	9884d83a 	srl	r2,r19,r2
   17f78:	01000134 	movhi	r4,4
   17f7c:	21209904 	addi	r4,r4,-32156
   17f80:	01800804 	movi	r6,32
   17f84:	1105883a 	add	r2,r2,r4
   17f88:	10c00003 	ldbu	r3,0(r2)
   17f8c:	28c7883a 	add	r3,r5,r3
   17f90:	30e5c83a 	sub	r18,r6,r3
   17f94:	9000a41e 	bne	r18,zero,18228 <__umoddi3+0x324>
   17f98:	982ed43a 	srli	r23,r19,16
   17f9c:	acebc83a 	sub	r21,r21,r19
   17fa0:	9d3fffcc 	andi	r20,r19,65535
   17fa4:	002d883a 	mov	r22,zero
   17fa8:	a809883a 	mov	r4,r21
   17fac:	b80b883a 	mov	r5,r23
   17fb0:	00197cc0 	call	197cc <__udivsi3>
   17fb4:	100b883a 	mov	r5,r2
   17fb8:	a009883a 	mov	r4,r20
   17fbc:	00197dc0 	call	197dc <__mulsi3>
   17fc0:	a809883a 	mov	r4,r21
   17fc4:	b80b883a 	mov	r5,r23
   17fc8:	1023883a 	mov	r17,r2
   17fcc:	00197d40 	call	197d4 <__umodsi3>
   17fd0:	1004943a 	slli	r2,r2,16
   17fd4:	8006d43a 	srli	r3,r16,16
   17fd8:	10c4b03a 	or	r2,r2,r3
   17fdc:	1440032e 	bgeu	r2,r17,17fec <__umoddi3+0xe8>
   17fe0:	14c5883a 	add	r2,r2,r19
   17fe4:	14c00136 	bltu	r2,r19,17fec <__umoddi3+0xe8>
   17fe8:	14415836 	bltu	r2,r17,1854c <__umoddi3+0x648>
   17fec:	1463c83a 	sub	r17,r2,r17
   17ff0:	8809883a 	mov	r4,r17
   17ff4:	b80b883a 	mov	r5,r23
   17ff8:	00197cc0 	call	197cc <__udivsi3>
   17ffc:	a009883a 	mov	r4,r20
   18000:	00005306 	br	18150 <__umoddi3+0x24c>
   18004:	380d883a 	mov	r6,r7
   18008:	29c0132e 	bgeu	r5,r7,18058 <__umoddi3+0x154>
   1800c:	d9000415 	stw	r4,16(sp)
   18010:	d9400515 	stw	r5,20(sp)
   18014:	d9400417 	ldw	r5,16(sp)
   18018:	5813883a 	mov	r9,r11
   1801c:	2811883a 	mov	r8,r5
   18020:	4005883a 	mov	r2,r8
   18024:	4807883a 	mov	r3,r9
   18028:	dfc00f17 	ldw	ra,60(sp)
   1802c:	df000e17 	ldw	fp,56(sp)
   18030:	ddc00d17 	ldw	r23,52(sp)
   18034:	dd800c17 	ldw	r22,48(sp)
   18038:	dd400b17 	ldw	r21,44(sp)
   1803c:	dd000a17 	ldw	r20,40(sp)
   18040:	dcc00917 	ldw	r19,36(sp)
   18044:	dc800817 	ldw	r18,32(sp)
   18048:	dc400717 	ldw	r17,28(sp)
   1804c:	dc000617 	ldw	r16,24(sp)
   18050:	dec01004 	addi	sp,sp,64
   18054:	f800283a 	ret
   18058:	00bfffd4 	movui	r2,65535
   1805c:	11c06636 	bltu	r2,r7,181f8 <__umoddi3+0x2f4>
   18060:	00803fc4 	movi	r2,255
   18064:	11c12036 	bltu	r2,r7,184e8 <__umoddi3+0x5e4>
   18068:	000b883a 	mov	r5,zero
   1806c:	0005883a 	mov	r2,zero
   18070:	3084d83a 	srl	r2,r6,r2
   18074:	01000134 	movhi	r4,4
   18078:	21209904 	addi	r4,r4,-32156
   1807c:	01c00804 	movi	r7,32
   18080:	1105883a 	add	r2,r2,r4
   18084:	10c00003 	ldbu	r3,0(r2)
   18088:	28c7883a 	add	r3,r5,r3
   1808c:	38e5c83a 	sub	r18,r7,r3
   18090:	9000941e 	bne	r18,zero,182e4 <__umoddi3+0x3e0>
   18094:	35405e36 	bltu	r6,r21,18210 <__umoddi3+0x30c>
   18098:	84c05d2e 	bgeu	r16,r19,18210 <__umoddi3+0x30c>
   1809c:	8011883a 	mov	r8,r16
   180a0:	a813883a 	mov	r9,r21
   180a4:	dc000415 	stw	r16,16(sp)
   180a8:	dd400515 	stw	r21,20(sp)
   180ac:	003fdc06 	br	18020 <__umoddi3+0x11c>
   180b0:	00bfffd4 	movui	r2,65535
   180b4:	12004a36 	bltu	r2,r8,181e0 <__umoddi3+0x2dc>
   180b8:	00803fc4 	movi	r2,255
   180bc:	12010d36 	bltu	r2,r8,184f4 <__umoddi3+0x5f0>
   180c0:	000b883a 	mov	r5,zero
   180c4:	0005883a 	mov	r2,zero
   180c8:	9884d83a 	srl	r2,r19,r2
   180cc:	01000134 	movhi	r4,4
   180d0:	21209904 	addi	r4,r4,-32156
   180d4:	01800804 	movi	r6,32
   180d8:	1105883a 	add	r2,r2,r4
   180dc:	10c00003 	ldbu	r3,0(r2)
   180e0:	28c7883a 	add	r3,r5,r3
   180e4:	30c7c83a 	sub	r3,r6,r3
   180e8:	1800dc1e 	bne	r3,zero,1845c <__umoddi3+0x558>
   180ec:	002d883a 	mov	r22,zero
   180f0:	982ed43a 	srli	r23,r19,16
   180f4:	a809883a 	mov	r4,r21
   180f8:	9cbfffcc 	andi	r18,r19,65535
   180fc:	b80b883a 	mov	r5,r23
   18100:	00197cc0 	call	197cc <__udivsi3>
   18104:	100b883a 	mov	r5,r2
   18108:	9009883a 	mov	r4,r18
   1810c:	00197dc0 	call	197dc <__mulsi3>
   18110:	a809883a 	mov	r4,r21
   18114:	b80b883a 	mov	r5,r23
   18118:	1023883a 	mov	r17,r2
   1811c:	00197d40 	call	197d4 <__umodsi3>
   18120:	1004943a 	slli	r2,r2,16
   18124:	8006d43a 	srli	r3,r16,16
   18128:	10c4b03a 	or	r2,r2,r3
   1812c:	1440032e 	bgeu	r2,r17,1813c <__umoddi3+0x238>
   18130:	14c5883a 	add	r2,r2,r19
   18134:	14c00136 	bltu	r2,r19,1813c <__umoddi3+0x238>
   18138:	14410236 	bltu	r2,r17,18544 <__umoddi3+0x640>
   1813c:	1463c83a 	sub	r17,r2,r17
   18140:	8809883a 	mov	r4,r17
   18144:	b80b883a 	mov	r5,r23
   18148:	00197cc0 	call	197cc <__udivsi3>
   1814c:	9009883a 	mov	r4,r18
   18150:	100b883a 	mov	r5,r2
   18154:	00197dc0 	call	197dc <__mulsi3>
   18158:	8809883a 	mov	r4,r17
   1815c:	b80b883a 	mov	r5,r23
   18160:	102b883a 	mov	r21,r2
   18164:	00197d40 	call	197d4 <__umodsi3>
   18168:	1004943a 	slli	r2,r2,16
   1816c:	80ffffcc 	andi	r3,r16,65535
   18170:	10c4b03a 	or	r2,r2,r3
   18174:	1540042e 	bgeu	r2,r21,18188 <__umoddi3+0x284>
   18178:	14c5883a 	add	r2,r2,r19
   1817c:	14c00236 	bltu	r2,r19,18188 <__umoddi3+0x284>
   18180:	1540012e 	bgeu	r2,r21,18188 <__umoddi3+0x284>
   18184:	14c5883a 	add	r2,r2,r19
   18188:	1545c83a 	sub	r2,r2,r21
   1818c:	1584d83a 	srl	r2,r2,r22
   18190:	0013883a 	mov	r9,zero
   18194:	d8800415 	stw	r2,16(sp)
   18198:	d8c00417 	ldw	r3,16(sp)
   1819c:	0005883a 	mov	r2,zero
   181a0:	d8800515 	stw	r2,20(sp)
   181a4:	1811883a 	mov	r8,r3
   181a8:	003f9d06 	br	18020 <__umoddi3+0x11c>
   181ac:	00804034 	movhi	r2,256
   181b0:	10bfffc4 	addi	r2,r2,-1
   181b4:	14c0c636 	bltu	r2,r19,184d0 <__umoddi3+0x5cc>
   181b8:	01400404 	movi	r5,16
   181bc:	2805883a 	mov	r2,r5
   181c0:	003f6c06 	br	17f74 <__umoddi3+0x70>
   181c4:	01000044 	movi	r4,1
   181c8:	000b883a 	mov	r5,zero
   181cc:	00197cc0 	call	197cc <__udivsi3>
   181d0:	1027883a 	mov	r19,r2
   181d4:	00bfffd4 	movui	r2,65535
   181d8:	14fff436 	bltu	r2,r19,181ac <__umoddi3+0x2a8>
   181dc:	003f6106 	br	17f64 <__umoddi3+0x60>
   181e0:	00804034 	movhi	r2,256
   181e4:	10bfffc4 	addi	r2,r2,-1
   181e8:	1200c536 	bltu	r2,r8,18500 <__umoddi3+0x5fc>
   181ec:	01400404 	movi	r5,16
   181f0:	2805883a 	mov	r2,r5
   181f4:	003fb406 	br	180c8 <__umoddi3+0x1c4>
   181f8:	00804034 	movhi	r2,256
   181fc:	10bfffc4 	addi	r2,r2,-1
   18200:	11c0c236 	bltu	r2,r7,1850c <__umoddi3+0x608>
   18204:	01400404 	movi	r5,16
   18208:	2805883a 	mov	r2,r5
   1820c:	003f9806 	br	18070 <__umoddi3+0x16c>
   18210:	84c9c83a 	sub	r4,r16,r19
   18214:	8105803a 	cmpltu	r2,r16,r4
   18218:	a987c83a 	sub	r3,r21,r6
   1821c:	18abc83a 	sub	r21,r3,r2
   18220:	2021883a 	mov	r16,r4
   18224:	003f9d06 	br	1809c <__umoddi3+0x198>
   18228:	9ca6983a 	sll	r19,r19,r18
   1822c:	3485c83a 	sub	r2,r6,r18
   18230:	a8a2d83a 	srl	r17,r21,r2
   18234:	982ed43a 	srli	r23,r19,16
   18238:	ac86983a 	sll	r3,r21,r18
   1823c:	8084d83a 	srl	r2,r16,r2
   18240:	8809883a 	mov	r4,r17
   18244:	b80b883a 	mov	r5,r23
   18248:	18b8b03a 	or	fp,r3,r2
   1824c:	9d3fffcc 	andi	r20,r19,65535
   18250:	00197cc0 	call	197cc <__udivsi3>
   18254:	100b883a 	mov	r5,r2
   18258:	a009883a 	mov	r4,r20
   1825c:	00197dc0 	call	197dc <__mulsi3>
   18260:	8809883a 	mov	r4,r17
   18264:	b80b883a 	mov	r5,r23
   18268:	102b883a 	mov	r21,r2
   1826c:	00197d40 	call	197d4 <__umodsi3>
   18270:	1004943a 	slli	r2,r2,16
   18274:	e006d43a 	srli	r3,fp,16
   18278:	902d883a 	mov	r22,r18
   1827c:	10c4b03a 	or	r2,r2,r3
   18280:	1540022e 	bgeu	r2,r21,1828c <__umoddi3+0x388>
   18284:	14c5883a 	add	r2,r2,r19
   18288:	14c0ab2e 	bgeu	r2,r19,18538 <__umoddi3+0x634>
   1828c:	1563c83a 	sub	r17,r2,r21
   18290:	8809883a 	mov	r4,r17
   18294:	b80b883a 	mov	r5,r23
   18298:	00197cc0 	call	197cc <__udivsi3>
   1829c:	100b883a 	mov	r5,r2
   182a0:	a009883a 	mov	r4,r20
   182a4:	00197dc0 	call	197dc <__mulsi3>
   182a8:	8809883a 	mov	r4,r17
   182ac:	b80b883a 	mov	r5,r23
   182b0:	102b883a 	mov	r21,r2
   182b4:	00197d40 	call	197d4 <__umodsi3>
   182b8:	1004943a 	slli	r2,r2,16
   182bc:	e0ffffcc 	andi	r3,fp,65535
   182c0:	10c4b03a 	or	r2,r2,r3
   182c4:	1540042e 	bgeu	r2,r21,182d8 <__umoddi3+0x3d4>
   182c8:	14c5883a 	add	r2,r2,r19
   182cc:	14c00236 	bltu	r2,r19,182d8 <__umoddi3+0x3d4>
   182d0:	1540012e 	bgeu	r2,r21,182d8 <__umoddi3+0x3d4>
   182d4:	14c5883a 	add	r2,r2,r19
   182d8:	84a0983a 	sll	r16,r16,r18
   182dc:	156bc83a 	sub	r21,r2,r21
   182e0:	003f3106 	br	17fa8 <__umoddi3+0xa4>
   182e4:	3c8fc83a 	sub	r7,r7,r18
   182e8:	3486983a 	sll	r3,r6,r18
   182ec:	99c4d83a 	srl	r2,r19,r7
   182f0:	a9e2d83a 	srl	r17,r21,r7
   182f4:	ac8c983a 	sll	r6,r21,r18
   182f8:	18acb03a 	or	r22,r3,r2
   182fc:	b02ed43a 	srli	r23,r22,16
   18300:	81c4d83a 	srl	r2,r16,r7
   18304:	8809883a 	mov	r4,r17
   18308:	b80b883a 	mov	r5,r23
   1830c:	308cb03a 	or	r6,r6,r2
   18310:	d9c00315 	stw	r7,12(sp)
   18314:	d9800215 	stw	r6,8(sp)
   18318:	b53fffcc 	andi	r20,r22,65535
   1831c:	00197cc0 	call	197cc <__udivsi3>
   18320:	100b883a 	mov	r5,r2
   18324:	a009883a 	mov	r4,r20
   18328:	1039883a 	mov	fp,r2
   1832c:	00197dc0 	call	197dc <__mulsi3>
   18330:	8809883a 	mov	r4,r17
   18334:	b80b883a 	mov	r5,r23
   18338:	102b883a 	mov	r21,r2
   1833c:	00197d40 	call	197d4 <__umodsi3>
   18340:	d9000217 	ldw	r4,8(sp)
   18344:	1004943a 	slli	r2,r2,16
   18348:	9ca6983a 	sll	r19,r19,r18
   1834c:	2006d43a 	srli	r3,r4,16
   18350:	84a0983a 	sll	r16,r16,r18
   18354:	dcc00015 	stw	r19,0(sp)
   18358:	10c4b03a 	or	r2,r2,r3
   1835c:	dc000115 	stw	r16,4(sp)
   18360:	1540032e 	bgeu	r2,r21,18370 <__umoddi3+0x46c>
   18364:	1585883a 	add	r2,r2,r22
   18368:	e73fffc4 	addi	fp,fp,-1
   1836c:	15806e2e 	bgeu	r2,r22,18528 <__umoddi3+0x624>
   18370:	1563c83a 	sub	r17,r2,r21
   18374:	8809883a 	mov	r4,r17
   18378:	b80b883a 	mov	r5,r23
   1837c:	00197cc0 	call	197cc <__udivsi3>
   18380:	100b883a 	mov	r5,r2
   18384:	a009883a 	mov	r4,r20
   18388:	1021883a 	mov	r16,r2
   1838c:	00197dc0 	call	197dc <__mulsi3>
   18390:	b80b883a 	mov	r5,r23
   18394:	8809883a 	mov	r4,r17
   18398:	1029883a 	mov	r20,r2
   1839c:	00197d40 	call	197d4 <__umodsi3>
   183a0:	d9400217 	ldw	r5,8(sp)
   183a4:	1004943a 	slli	r2,r2,16
   183a8:	28ffffcc 	andi	r3,r5,65535
   183ac:	10c4b03a 	or	r2,r2,r3
   183b0:	1500032e 	bgeu	r2,r20,183c0 <__umoddi3+0x4bc>
   183b4:	1585883a 	add	r2,r2,r22
   183b8:	843fffc4 	addi	r16,r16,-1
   183bc:	1580562e 	bgeu	r2,r22,18518 <__umoddi3+0x614>
   183c0:	d9800017 	ldw	r6,0(sp)
   183c4:	e022943a 	slli	r17,fp,16
   183c8:	302ed43a 	srli	r23,r6,16
   183cc:	8462b03a 	or	r17,r16,r17
   183d0:	34ffffcc 	andi	r19,r6,65535
   183d4:	882ad43a 	srli	r21,r17,16
   183d8:	8c7fffcc 	andi	r17,r17,65535
   183dc:	8809883a 	mov	r4,r17
   183e0:	980b883a 	mov	r5,r19
   183e4:	1521c83a 	sub	r16,r2,r20
   183e8:	00197dc0 	call	197dc <__mulsi3>
   183ec:	8809883a 	mov	r4,r17
   183f0:	b80b883a 	mov	r5,r23
   183f4:	1029883a 	mov	r20,r2
   183f8:	00197dc0 	call	197dc <__mulsi3>
   183fc:	980b883a 	mov	r5,r19
   18400:	a809883a 	mov	r4,r21
   18404:	1023883a 	mov	r17,r2
   18408:	00197dc0 	call	197dc <__mulsi3>
   1840c:	a809883a 	mov	r4,r21
   18410:	b80b883a 	mov	r5,r23
   18414:	1027883a 	mov	r19,r2
   18418:	00197dc0 	call	197dc <__mulsi3>
   1841c:	100b883a 	mov	r5,r2
   18420:	a004d43a 	srli	r2,r20,16
   18424:	8ce3883a 	add	r17,r17,r19
   18428:	1449883a 	add	r4,r2,r17
   1842c:	24c0022e 	bgeu	r4,r19,18438 <__umoddi3+0x534>
   18430:	00800074 	movhi	r2,1
   18434:	288b883a 	add	r5,r5,r2
   18438:	2004d43a 	srli	r2,r4,16
   1843c:	2008943a 	slli	r4,r4,16
   18440:	a0ffffcc 	andi	r3,r20,65535
   18444:	288d883a 	add	r6,r5,r2
   18448:	20c9883a 	add	r4,r4,r3
   1844c:	81800b36 	bltu	r16,r6,1847c <__umoddi3+0x578>
   18450:	81804026 	beq	r16,r6,18554 <__umoddi3+0x650>
   18454:	818dc83a 	sub	r6,r16,r6
   18458:	00000f06 	br	18498 <__umoddi3+0x594>
   1845c:	30c5c83a 	sub	r2,r6,r3
   18460:	182d883a 	mov	r22,r3
   18464:	8084d83a 	srl	r2,r16,r2
   18468:	a8c6983a 	sll	r3,r21,r3
   1846c:	9da6983a 	sll	r19,r19,r22
   18470:	85a0983a 	sll	r16,r16,r22
   18474:	18aab03a 	or	r21,r3,r2
   18478:	003f1d06 	br	180f0 <__umoddi3+0x1ec>
   1847c:	d8c00017 	ldw	r3,0(sp)
   18480:	20c5c83a 	sub	r2,r4,r3
   18484:	2089803a 	cmpltu	r4,r4,r2
   18488:	3587c83a 	sub	r3,r6,r22
   1848c:	1907c83a 	sub	r3,r3,r4
   18490:	80cdc83a 	sub	r6,r16,r3
   18494:	1009883a 	mov	r4,r2
   18498:	d9400117 	ldw	r5,4(sp)
   1849c:	2905c83a 	sub	r2,r5,r4
   184a0:	2887803a 	cmpltu	r3,r5,r2
   184a4:	30c7c83a 	sub	r3,r6,r3
   184a8:	d9800317 	ldw	r6,12(sp)
   184ac:	1484d83a 	srl	r2,r2,r18
   184b0:	1988983a 	sll	r4,r3,r6
   184b4:	1c86d83a 	srl	r3,r3,r18
   184b8:	2088b03a 	or	r4,r4,r2
   184bc:	2011883a 	mov	r8,r4
   184c0:	1813883a 	mov	r9,r3
   184c4:	d9000415 	stw	r4,16(sp)
   184c8:	d8c00515 	stw	r3,20(sp)
   184cc:	003ed406 	br	18020 <__umoddi3+0x11c>
   184d0:	01400604 	movi	r5,24
   184d4:	2805883a 	mov	r2,r5
   184d8:	003ea606 	br	17f74 <__umoddi3+0x70>
   184dc:	01400204 	movi	r5,8
   184e0:	2805883a 	mov	r2,r5
   184e4:	003ea306 	br	17f74 <__umoddi3+0x70>
   184e8:	01400204 	movi	r5,8
   184ec:	2805883a 	mov	r2,r5
   184f0:	003edf06 	br	18070 <__umoddi3+0x16c>
   184f4:	01400204 	movi	r5,8
   184f8:	2805883a 	mov	r2,r5
   184fc:	003ef206 	br	180c8 <__umoddi3+0x1c4>
   18500:	01400604 	movi	r5,24
   18504:	2805883a 	mov	r2,r5
   18508:	003eef06 	br	180c8 <__umoddi3+0x1c4>
   1850c:	01400604 	movi	r5,24
   18510:	2805883a 	mov	r2,r5
   18514:	003ed606 	br	18070 <__umoddi3+0x16c>
   18518:	153fa92e 	bgeu	r2,r20,183c0 <__umoddi3+0x4bc>
   1851c:	843fffc4 	addi	r16,r16,-1
   18520:	1585883a 	add	r2,r2,r22
   18524:	003fa606 	br	183c0 <__umoddi3+0x4bc>
   18528:	157f912e 	bgeu	r2,r21,18370 <__umoddi3+0x46c>
   1852c:	e73fffc4 	addi	fp,fp,-1
   18530:	1585883a 	add	r2,r2,r22
   18534:	003f8e06 	br	18370 <__umoddi3+0x46c>
   18538:	157f542e 	bgeu	r2,r21,1828c <__umoddi3+0x388>
   1853c:	14c5883a 	add	r2,r2,r19
   18540:	003f5206 	br	1828c <__umoddi3+0x388>
   18544:	14c5883a 	add	r2,r2,r19
   18548:	003efc06 	br	1813c <__umoddi3+0x238>
   1854c:	14c5883a 	add	r2,r2,r19
   18550:	003ea606 	br	17fec <__umoddi3+0xe8>
   18554:	d8800117 	ldw	r2,4(sp)
   18558:	113fc836 	bltu	r2,r4,1847c <__umoddi3+0x578>
   1855c:	000d883a 	mov	r6,zero
   18560:	003fcd06 	br	18498 <__umoddi3+0x594>

00018564 <_fpadd_parts>:
   18564:	defff804 	addi	sp,sp,-32
   18568:	dcc00315 	stw	r19,12(sp)
   1856c:	2027883a 	mov	r19,r4
   18570:	21000017 	ldw	r4,0(r4)
   18574:	00c00044 	movi	r3,1
   18578:	dd400515 	stw	r21,20(sp)
   1857c:	dd000415 	stw	r20,16(sp)
   18580:	ddc00715 	stw	r23,28(sp)
   18584:	dd800615 	stw	r22,24(sp)
   18588:	dc800215 	stw	r18,8(sp)
   1858c:	dc400115 	stw	r17,4(sp)
   18590:	dc000015 	stw	r16,0(sp)
   18594:	282b883a 	mov	r21,r5
   18598:	3029883a 	mov	r20,r6
   1859c:	1900632e 	bgeu	r3,r4,1872c <_fpadd_parts+0x1c8>
   185a0:	28800017 	ldw	r2,0(r5)
   185a4:	1880812e 	bgeu	r3,r2,187ac <_fpadd_parts+0x248>
   185a8:	00c00104 	movi	r3,4
   185ac:	20c0dc26 	beq	r4,r3,18920 <_fpadd_parts+0x3bc>
   185b0:	10c07e26 	beq	r2,r3,187ac <_fpadd_parts+0x248>
   185b4:	00c00084 	movi	r3,2
   185b8:	10c06726 	beq	r2,r3,18758 <_fpadd_parts+0x1f4>
   185bc:	20c07b26 	beq	r4,r3,187ac <_fpadd_parts+0x248>
   185c0:	9dc00217 	ldw	r23,8(r19)
   185c4:	28c00217 	ldw	r3,8(r5)
   185c8:	9c400317 	ldw	r17,12(r19)
   185cc:	2bc00317 	ldw	r15,12(r5)
   185d0:	b8cdc83a 	sub	r6,r23,r3
   185d4:	9c800417 	ldw	r18,16(r19)
   185d8:	2c000417 	ldw	r16,16(r5)
   185dc:	3009883a 	mov	r4,r6
   185e0:	30009716 	blt	r6,zero,18840 <_fpadd_parts+0x2dc>
   185e4:	00800fc4 	movi	r2,63
   185e8:	11806b16 	blt	r2,r6,18798 <_fpadd_parts+0x234>
   185ec:	0100a40e 	bge	zero,r4,18880 <_fpadd_parts+0x31c>
   185f0:	35bff804 	addi	r22,r6,-32
   185f4:	b000bc16 	blt	r22,zero,188e8 <_fpadd_parts+0x384>
   185f8:	8596d83a 	srl	r11,r16,r22
   185fc:	0019883a 	mov	r12,zero
   18600:	0013883a 	mov	r9,zero
   18604:	01000044 	movi	r4,1
   18608:	0015883a 	mov	r10,zero
   1860c:	b000be16 	blt	r22,zero,18908 <_fpadd_parts+0x3a4>
   18610:	2590983a 	sll	r8,r4,r22
   18614:	000f883a 	mov	r7,zero
   18618:	00bfffc4 	movi	r2,-1
   1861c:	3889883a 	add	r4,r7,r2
   18620:	408b883a 	add	r5,r8,r2
   18624:	21cd803a 	cmpltu	r6,r4,r7
   18628:	314b883a 	add	r5,r6,r5
   1862c:	7904703a 	and	r2,r15,r4
   18630:	8146703a 	and	r3,r16,r5
   18634:	10c4b03a 	or	r2,r2,r3
   18638:	10000226 	beq	r2,zero,18644 <_fpadd_parts+0xe0>
   1863c:	02400044 	movi	r9,1
   18640:	0015883a 	mov	r10,zero
   18644:	5a5eb03a 	or	r15,r11,r9
   18648:	62a0b03a 	or	r16,r12,r10
   1864c:	99400117 	ldw	r5,4(r19)
   18650:	a8800117 	ldw	r2,4(r21)
   18654:	28806e26 	beq	r5,r2,18810 <_fpadd_parts+0x2ac>
   18658:	28006626 	beq	r5,zero,187f4 <_fpadd_parts+0x290>
   1865c:	7c45c83a 	sub	r2,r15,r17
   18660:	7889803a 	cmpltu	r4,r15,r2
   18664:	8487c83a 	sub	r3,r16,r18
   18668:	1909c83a 	sub	r4,r3,r4
   1866c:	100d883a 	mov	r6,r2
   18670:	200f883a 	mov	r7,r4
   18674:	38007716 	blt	r7,zero,18854 <_fpadd_parts+0x2f0>
   18678:	a5c00215 	stw	r23,8(r20)
   1867c:	a1c00415 	stw	r7,16(r20)
   18680:	a0000115 	stw	zero,4(r20)
   18684:	a1800315 	stw	r6,12(r20)
   18688:	a2000317 	ldw	r8,12(r20)
   1868c:	a2400417 	ldw	r9,16(r20)
   18690:	00bfffc4 	movi	r2,-1
   18694:	408b883a 	add	r5,r8,r2
   18698:	2a09803a 	cmpltu	r4,r5,r8
   1869c:	488d883a 	add	r6,r9,r2
   186a0:	01c40034 	movhi	r7,4096
   186a4:	39ffffc4 	addi	r7,r7,-1
   186a8:	218d883a 	add	r6,r4,r6
   186ac:	39801736 	bltu	r7,r6,1870c <_fpadd_parts+0x1a8>
   186b0:	31c06526 	beq	r6,r7,18848 <_fpadd_parts+0x2e4>
   186b4:	a3000217 	ldw	r12,8(r20)
   186b8:	4209883a 	add	r4,r8,r8
   186bc:	00bfffc4 	movi	r2,-1
   186c0:	220f803a 	cmpltu	r7,r4,r8
   186c4:	4a4b883a 	add	r5,r9,r9
   186c8:	394f883a 	add	r7,r7,r5
   186cc:	2095883a 	add	r10,r4,r2
   186d0:	3897883a 	add	r11,r7,r2
   186d4:	510d803a 	cmpltu	r6,r10,r4
   186d8:	6099883a 	add	r12,r12,r2
   186dc:	32d7883a 	add	r11,r6,r11
   186e0:	00840034 	movhi	r2,4096
   186e4:	10bfffc4 	addi	r2,r2,-1
   186e8:	2011883a 	mov	r8,r4
   186ec:	3813883a 	mov	r9,r7
   186f0:	a1000315 	stw	r4,12(r20)
   186f4:	a1c00415 	stw	r7,16(r20)
   186f8:	a3000215 	stw	r12,8(r20)
   186fc:	12c00336 	bltu	r2,r11,1870c <_fpadd_parts+0x1a8>
   18700:	58bfed1e 	bne	r11,r2,186b8 <_fpadd_parts+0x154>
   18704:	00bfff84 	movi	r2,-2
   18708:	12bfeb2e 	bgeu	r2,r10,186b8 <_fpadd_parts+0x154>
   1870c:	a2800417 	ldw	r10,16(r20)
   18710:	008000c4 	movi	r2,3
   18714:	00c80034 	movhi	r3,8192
   18718:	18ffffc4 	addi	r3,r3,-1
   1871c:	a2400317 	ldw	r9,12(r20)
   18720:	a0800015 	stw	r2,0(r20)
   18724:	1a802336 	bltu	r3,r10,187b4 <_fpadd_parts+0x250>
   18728:	a027883a 	mov	r19,r20
   1872c:	9805883a 	mov	r2,r19
   18730:	ddc00717 	ldw	r23,28(sp)
   18734:	dd800617 	ldw	r22,24(sp)
   18738:	dd400517 	ldw	r21,20(sp)
   1873c:	dd000417 	ldw	r20,16(sp)
   18740:	dcc00317 	ldw	r19,12(sp)
   18744:	dc800217 	ldw	r18,8(sp)
   18748:	dc400117 	ldw	r17,4(sp)
   1874c:	dc000017 	ldw	r16,0(sp)
   18750:	dec00804 	addi	sp,sp,32
   18754:	f800283a 	ret
   18758:	20fff41e 	bne	r4,r3,1872c <_fpadd_parts+0x1c8>
   1875c:	31000015 	stw	r4,0(r6)
   18760:	98800117 	ldw	r2,4(r19)
   18764:	30800115 	stw	r2,4(r6)
   18768:	98c00217 	ldw	r3,8(r19)
   1876c:	30c00215 	stw	r3,8(r6)
   18770:	98800317 	ldw	r2,12(r19)
   18774:	30800315 	stw	r2,12(r6)
   18778:	98c00417 	ldw	r3,16(r19)
   1877c:	30c00415 	stw	r3,16(r6)
   18780:	98800117 	ldw	r2,4(r19)
   18784:	28c00117 	ldw	r3,4(r5)
   18788:	3027883a 	mov	r19,r6
   1878c:	10c4703a 	and	r2,r2,r3
   18790:	30800115 	stw	r2,4(r6)
   18794:	003fe506 	br	1872c <_fpadd_parts+0x1c8>
   18798:	1dc02616 	blt	r3,r23,18834 <_fpadd_parts+0x2d0>
   1879c:	0023883a 	mov	r17,zero
   187a0:	182f883a 	mov	r23,r3
   187a4:	0025883a 	mov	r18,zero
   187a8:	003fa806 	br	1864c <_fpadd_parts+0xe8>
   187ac:	a827883a 	mov	r19,r21
   187b0:	003fde06 	br	1872c <_fpadd_parts+0x1c8>
   187b4:	01800044 	movi	r6,1
   187b8:	500497fa 	slli	r2,r10,31
   187bc:	4808d07a 	srli	r4,r9,1
   187c0:	518ad83a 	srl	r5,r10,r6
   187c4:	a2000217 	ldw	r8,8(r20)
   187c8:	1108b03a 	or	r4,r2,r4
   187cc:	0007883a 	mov	r3,zero
   187d0:	4984703a 	and	r2,r9,r6
   187d4:	208cb03a 	or	r6,r4,r2
   187d8:	28ceb03a 	or	r7,r5,r3
   187dc:	42000044 	addi	r8,r8,1
   187e0:	a027883a 	mov	r19,r20
   187e4:	a1c00415 	stw	r7,16(r20)
   187e8:	a2000215 	stw	r8,8(r20)
   187ec:	a1800315 	stw	r6,12(r20)
   187f0:	003fce06 	br	1872c <_fpadd_parts+0x1c8>
   187f4:	8bc5c83a 	sub	r2,r17,r15
   187f8:	8889803a 	cmpltu	r4,r17,r2
   187fc:	9407c83a 	sub	r3,r18,r16
   18800:	1909c83a 	sub	r4,r3,r4
   18804:	100d883a 	mov	r6,r2
   18808:	200f883a 	mov	r7,r4
   1880c:	003f9906 	br	18674 <_fpadd_parts+0x110>
   18810:	7c45883a 	add	r2,r15,r17
   18814:	13c9803a 	cmpltu	r4,r2,r15
   18818:	8487883a 	add	r3,r16,r18
   1881c:	20c9883a 	add	r4,r4,r3
   18820:	a1400115 	stw	r5,4(r20)
   18824:	a5c00215 	stw	r23,8(r20)
   18828:	a0800315 	stw	r2,12(r20)
   1882c:	a1000415 	stw	r4,16(r20)
   18830:	003fb606 	br	1870c <_fpadd_parts+0x1a8>
   18834:	001f883a 	mov	r15,zero
   18838:	0021883a 	mov	r16,zero
   1883c:	003f8306 	br	1864c <_fpadd_parts+0xe8>
   18840:	018dc83a 	sub	r6,zero,r6
   18844:	003f6706 	br	185e4 <_fpadd_parts+0x80>
   18848:	00bfff84 	movi	r2,-2
   1884c:	117faf36 	bltu	r2,r5,1870c <_fpadd_parts+0x1a8>
   18850:	003f9806 	br	186b4 <_fpadd_parts+0x150>
   18854:	0005883a 	mov	r2,zero
   18858:	1189c83a 	sub	r4,r2,r6
   1885c:	1105803a 	cmpltu	r2,r2,r4
   18860:	01cbc83a 	sub	r5,zero,r7
   18864:	2885c83a 	sub	r2,r5,r2
   18868:	01800044 	movi	r6,1
   1886c:	a1800115 	stw	r6,4(r20)
   18870:	a5c00215 	stw	r23,8(r20)
   18874:	a1000315 	stw	r4,12(r20)
   18878:	a0800415 	stw	r2,16(r20)
   1887c:	003f8206 	br	18688 <_fpadd_parts+0x124>
   18880:	203f7226 	beq	r4,zero,1864c <_fpadd_parts+0xe8>
   18884:	35bff804 	addi	r22,r6,-32
   18888:	b9af883a 	add	r23,r23,r6
   1888c:	b0003116 	blt	r22,zero,18954 <_fpadd_parts+0x3f0>
   18890:	959ad83a 	srl	r13,r18,r22
   18894:	001d883a 	mov	r14,zero
   18898:	000f883a 	mov	r7,zero
   1889c:	01000044 	movi	r4,1
   188a0:	0011883a 	mov	r8,zero
   188a4:	b0002516 	blt	r22,zero,1893c <_fpadd_parts+0x3d8>
   188a8:	2594983a 	sll	r10,r4,r22
   188ac:	0013883a 	mov	r9,zero
   188b0:	00bfffc4 	movi	r2,-1
   188b4:	4889883a 	add	r4,r9,r2
   188b8:	508b883a 	add	r5,r10,r2
   188bc:	224d803a 	cmpltu	r6,r4,r9
   188c0:	314b883a 	add	r5,r6,r5
   188c4:	8904703a 	and	r2,r17,r4
   188c8:	9146703a 	and	r3,r18,r5
   188cc:	10c4b03a 	or	r2,r2,r3
   188d0:	10000226 	beq	r2,zero,188dc <_fpadd_parts+0x378>
   188d4:	01c00044 	movi	r7,1
   188d8:	0011883a 	mov	r8,zero
   188dc:	69e2b03a 	or	r17,r13,r7
   188e0:	7224b03a 	or	r18,r14,r8
   188e4:	003f5906 	br	1864c <_fpadd_parts+0xe8>
   188e8:	8407883a 	add	r3,r16,r16
   188ec:	008007c4 	movi	r2,31
   188f0:	1185c83a 	sub	r2,r2,r6
   188f4:	1886983a 	sll	r3,r3,r2
   188f8:	7996d83a 	srl	r11,r15,r6
   188fc:	8198d83a 	srl	r12,r16,r6
   18900:	1ad6b03a 	or	r11,r3,r11
   18904:	003f3e06 	br	18600 <_fpadd_parts+0x9c>
   18908:	2006d07a 	srli	r3,r4,1
   1890c:	008007c4 	movi	r2,31
   18910:	1185c83a 	sub	r2,r2,r6
   18914:	1890d83a 	srl	r8,r3,r2
   18918:	218e983a 	sll	r7,r4,r6
   1891c:	003f3e06 	br	18618 <_fpadd_parts+0xb4>
   18920:	113f821e 	bne	r2,r4,1872c <_fpadd_parts+0x1c8>
   18924:	28c00117 	ldw	r3,4(r5)
   18928:	98800117 	ldw	r2,4(r19)
   1892c:	10ff7f26 	beq	r2,r3,1872c <_fpadd_parts+0x1c8>
   18930:	04c00134 	movhi	r19,4
   18934:	9ce09404 	addi	r19,r19,-32176
   18938:	003f7c06 	br	1872c <_fpadd_parts+0x1c8>
   1893c:	2006d07a 	srli	r3,r4,1
   18940:	008007c4 	movi	r2,31
   18944:	1185c83a 	sub	r2,r2,r6
   18948:	1894d83a 	srl	r10,r3,r2
   1894c:	2192983a 	sll	r9,r4,r6
   18950:	003fd706 	br	188b0 <_fpadd_parts+0x34c>
   18954:	9487883a 	add	r3,r18,r18
   18958:	008007c4 	movi	r2,31
   1895c:	1185c83a 	sub	r2,r2,r6
   18960:	1886983a 	sll	r3,r3,r2
   18964:	899ad83a 	srl	r13,r17,r6
   18968:	919cd83a 	srl	r14,r18,r6
   1896c:	1b5ab03a 	or	r13,r3,r13
   18970:	003fc906 	br	18898 <_fpadd_parts+0x334>

00018974 <__subdf3>:
   18974:	deffea04 	addi	sp,sp,-88
   18978:	dcc01415 	stw	r19,80(sp)
   1897c:	dcc00404 	addi	r19,sp,16
   18980:	2011883a 	mov	r8,r4
   18984:	2813883a 	mov	r9,r5
   18988:	dc401315 	stw	r17,76(sp)
   1898c:	d809883a 	mov	r4,sp
   18990:	980b883a 	mov	r5,r19
   18994:	dc400904 	addi	r17,sp,36
   18998:	dfc01515 	stw	ra,84(sp)
   1899c:	da400115 	stw	r9,4(sp)
   189a0:	d9c00315 	stw	r7,12(sp)
   189a4:	da000015 	stw	r8,0(sp)
   189a8:	d9800215 	stw	r6,8(sp)
   189ac:	0019ccc0 	call	19ccc <__unpack_d>
   189b0:	d9000204 	addi	r4,sp,8
   189b4:	880b883a 	mov	r5,r17
   189b8:	0019ccc0 	call	19ccc <__unpack_d>
   189bc:	d8800a17 	ldw	r2,40(sp)
   189c0:	880b883a 	mov	r5,r17
   189c4:	9809883a 	mov	r4,r19
   189c8:	d9800e04 	addi	r6,sp,56
   189cc:	1080005c 	xori	r2,r2,1
   189d0:	d8800a15 	stw	r2,40(sp)
   189d4:	00185640 	call	18564 <_fpadd_parts>
   189d8:	1009883a 	mov	r4,r2
   189dc:	00199b80 	call	199b8 <__pack_d>
   189e0:	dfc01517 	ldw	ra,84(sp)
   189e4:	dcc01417 	ldw	r19,80(sp)
   189e8:	dc401317 	ldw	r17,76(sp)
   189ec:	dec01604 	addi	sp,sp,88
   189f0:	f800283a 	ret

000189f4 <__adddf3>:
   189f4:	deffea04 	addi	sp,sp,-88
   189f8:	dcc01415 	stw	r19,80(sp)
   189fc:	dcc00404 	addi	r19,sp,16
   18a00:	2011883a 	mov	r8,r4
   18a04:	2813883a 	mov	r9,r5
   18a08:	dc401315 	stw	r17,76(sp)
   18a0c:	d809883a 	mov	r4,sp
   18a10:	980b883a 	mov	r5,r19
   18a14:	dc400904 	addi	r17,sp,36
   18a18:	dfc01515 	stw	ra,84(sp)
   18a1c:	da400115 	stw	r9,4(sp)
   18a20:	d9c00315 	stw	r7,12(sp)
   18a24:	da000015 	stw	r8,0(sp)
   18a28:	d9800215 	stw	r6,8(sp)
   18a2c:	0019ccc0 	call	19ccc <__unpack_d>
   18a30:	d9000204 	addi	r4,sp,8
   18a34:	880b883a 	mov	r5,r17
   18a38:	0019ccc0 	call	19ccc <__unpack_d>
   18a3c:	d9800e04 	addi	r6,sp,56
   18a40:	9809883a 	mov	r4,r19
   18a44:	880b883a 	mov	r5,r17
   18a48:	00185640 	call	18564 <_fpadd_parts>
   18a4c:	1009883a 	mov	r4,r2
   18a50:	00199b80 	call	199b8 <__pack_d>
   18a54:	dfc01517 	ldw	ra,84(sp)
   18a58:	dcc01417 	ldw	r19,80(sp)
   18a5c:	dc401317 	ldw	r17,76(sp)
   18a60:	dec01604 	addi	sp,sp,88
   18a64:	f800283a 	ret

00018a68 <__muldf3>:
   18a68:	deffe004 	addi	sp,sp,-128
   18a6c:	dc401815 	stw	r17,96(sp)
   18a70:	dc400404 	addi	r17,sp,16
   18a74:	2011883a 	mov	r8,r4
   18a78:	2813883a 	mov	r9,r5
   18a7c:	dc001715 	stw	r16,92(sp)
   18a80:	d809883a 	mov	r4,sp
   18a84:	880b883a 	mov	r5,r17
   18a88:	dc000904 	addi	r16,sp,36
   18a8c:	dfc01f15 	stw	ra,124(sp)
   18a90:	da400115 	stw	r9,4(sp)
   18a94:	d9c00315 	stw	r7,12(sp)
   18a98:	da000015 	stw	r8,0(sp)
   18a9c:	d9800215 	stw	r6,8(sp)
   18aa0:	ddc01e15 	stw	r23,120(sp)
   18aa4:	dd801d15 	stw	r22,116(sp)
   18aa8:	dd401c15 	stw	r21,112(sp)
   18aac:	dd001b15 	stw	r20,108(sp)
   18ab0:	dcc01a15 	stw	r19,104(sp)
   18ab4:	dc801915 	stw	r18,100(sp)
   18ab8:	0019ccc0 	call	19ccc <__unpack_d>
   18abc:	d9000204 	addi	r4,sp,8
   18ac0:	800b883a 	mov	r5,r16
   18ac4:	0019ccc0 	call	19ccc <__unpack_d>
   18ac8:	d9000417 	ldw	r4,16(sp)
   18acc:	00800044 	movi	r2,1
   18ad0:	1100102e 	bgeu	r2,r4,18b14 <__muldf3+0xac>
   18ad4:	d8c00917 	ldw	r3,36(sp)
   18ad8:	10c0062e 	bgeu	r2,r3,18af4 <__muldf3+0x8c>
   18adc:	00800104 	movi	r2,4
   18ae0:	20800a26 	beq	r4,r2,18b0c <__muldf3+0xa4>
   18ae4:	1880cc26 	beq	r3,r2,18e18 <__muldf3+0x3b0>
   18ae8:	00800084 	movi	r2,2
   18aec:	20800926 	beq	r4,r2,18b14 <__muldf3+0xac>
   18af0:	1880191e 	bne	r3,r2,18b58 <__muldf3+0xf0>
   18af4:	d8c00a17 	ldw	r3,40(sp)
   18af8:	d8800517 	ldw	r2,20(sp)
   18afc:	8009883a 	mov	r4,r16
   18b00:	10c4c03a 	cmpne	r2,r2,r3
   18b04:	d8800a15 	stw	r2,40(sp)
   18b08:	00000706 	br	18b28 <__muldf3+0xc0>
   18b0c:	00800084 	movi	r2,2
   18b10:	1880c326 	beq	r3,r2,18e20 <__muldf3+0x3b8>
   18b14:	d8800517 	ldw	r2,20(sp)
   18b18:	d8c00a17 	ldw	r3,40(sp)
   18b1c:	8809883a 	mov	r4,r17
   18b20:	10c4c03a 	cmpne	r2,r2,r3
   18b24:	d8800515 	stw	r2,20(sp)
   18b28:	00199b80 	call	199b8 <__pack_d>
   18b2c:	dfc01f17 	ldw	ra,124(sp)
   18b30:	ddc01e17 	ldw	r23,120(sp)
   18b34:	dd801d17 	ldw	r22,116(sp)
   18b38:	dd401c17 	ldw	r21,112(sp)
   18b3c:	dd001b17 	ldw	r20,108(sp)
   18b40:	dcc01a17 	ldw	r19,104(sp)
   18b44:	dc801917 	ldw	r18,100(sp)
   18b48:	dc401817 	ldw	r17,96(sp)
   18b4c:	dc001717 	ldw	r16,92(sp)
   18b50:	dec02004 	addi	sp,sp,128
   18b54:	f800283a 	ret
   18b58:	dd800717 	ldw	r22,28(sp)
   18b5c:	dc800c17 	ldw	r18,48(sp)
   18b60:	002b883a 	mov	r21,zero
   18b64:	0023883a 	mov	r17,zero
   18b68:	a80b883a 	mov	r5,r21
   18b6c:	b00d883a 	mov	r6,r22
   18b70:	880f883a 	mov	r7,r17
   18b74:	ddc00817 	ldw	r23,32(sp)
   18b78:	dcc00d17 	ldw	r19,52(sp)
   18b7c:	9009883a 	mov	r4,r18
   18b80:	00198140 	call	19814 <__muldi3>
   18b84:	001b883a 	mov	r13,zero
   18b88:	680f883a 	mov	r7,r13
   18b8c:	b009883a 	mov	r4,r22
   18b90:	000b883a 	mov	r5,zero
   18b94:	980d883a 	mov	r6,r19
   18b98:	b82d883a 	mov	r22,r23
   18b9c:	002f883a 	mov	r23,zero
   18ba0:	db401615 	stw	r13,88(sp)
   18ba4:	d8801315 	stw	r2,76(sp)
   18ba8:	d8c01415 	stw	r3,80(sp)
   18bac:	dcc01515 	stw	r19,84(sp)
   18bb0:	00198140 	call	19814 <__muldi3>
   18bb4:	b00d883a 	mov	r6,r22
   18bb8:	000b883a 	mov	r5,zero
   18bbc:	9009883a 	mov	r4,r18
   18bc0:	b80f883a 	mov	r7,r23
   18bc4:	1021883a 	mov	r16,r2
   18bc8:	1823883a 	mov	r17,r3
   18bcc:	00198140 	call	19814 <__muldi3>
   18bd0:	8085883a 	add	r2,r16,r2
   18bd4:	140d803a 	cmpltu	r6,r2,r16
   18bd8:	88c7883a 	add	r3,r17,r3
   18bdc:	30cd883a 	add	r6,r6,r3
   18be0:	1029883a 	mov	r20,r2
   18be4:	302b883a 	mov	r21,r6
   18be8:	da801317 	ldw	r10,76(sp)
   18bec:	dac01417 	ldw	r11,80(sp)
   18bf0:	db001517 	ldw	r12,84(sp)
   18bf4:	db401617 	ldw	r13,88(sp)
   18bf8:	3440612e 	bgeu	r6,r17,18d80 <__muldf3+0x318>
   18bfc:	0009883a 	mov	r4,zero
   18c00:	5105883a 	add	r2,r10,r4
   18c04:	128d803a 	cmpltu	r6,r2,r10
   18c08:	5d07883a 	add	r3,r11,r20
   18c0c:	30cd883a 	add	r6,r6,r3
   18c10:	0021883a 	mov	r16,zero
   18c14:	04400044 	movi	r17,1
   18c18:	1025883a 	mov	r18,r2
   18c1c:	3027883a 	mov	r19,r6
   18c20:	32c06236 	bltu	r6,r11,18dac <__muldf3+0x344>
   18c24:	59807a26 	beq	r11,r6,18e10 <__muldf3+0x3a8>
   18c28:	680b883a 	mov	r5,r13
   18c2c:	b80f883a 	mov	r7,r23
   18c30:	6009883a 	mov	r4,r12
   18c34:	b00d883a 	mov	r6,r22
   18c38:	00198140 	call	19814 <__muldi3>
   18c3c:	1009883a 	mov	r4,r2
   18c40:	000f883a 	mov	r7,zero
   18c44:	1545883a 	add	r2,r2,r21
   18c48:	1111803a 	cmpltu	r8,r2,r4
   18c4c:	19c7883a 	add	r3,r3,r7
   18c50:	40c7883a 	add	r3,r8,r3
   18c54:	88cb883a 	add	r5,r17,r3
   18c58:	d8c00617 	ldw	r3,24(sp)
   18c5c:	8089883a 	add	r4,r16,r2
   18c60:	d8800b17 	ldw	r2,44(sp)
   18c64:	18c00104 	addi	r3,r3,4
   18c68:	240d803a 	cmpltu	r6,r4,r16
   18c6c:	10c7883a 	add	r3,r2,r3
   18c70:	2013883a 	mov	r9,r4
   18c74:	d8800a17 	ldw	r2,40(sp)
   18c78:	d9000517 	ldw	r4,20(sp)
   18c7c:	314d883a 	add	r6,r6,r5
   18c80:	3015883a 	mov	r10,r6
   18c84:	2088c03a 	cmpne	r4,r4,r2
   18c88:	00880034 	movhi	r2,8192
   18c8c:	10bfffc4 	addi	r2,r2,-1
   18c90:	d9000f15 	stw	r4,60(sp)
   18c94:	d8c01015 	stw	r3,64(sp)
   18c98:	1180162e 	bgeu	r2,r6,18cf4 <__muldf3+0x28c>
   18c9c:	1811883a 	mov	r8,r3
   18ca0:	101f883a 	mov	r15,r2
   18ca4:	980497fa 	slli	r2,r19,31
   18ca8:	9016d07a 	srli	r11,r18,1
   18cac:	500697fa 	slli	r3,r10,31
   18cb0:	480cd07a 	srli	r6,r9,1
   18cb4:	500ed07a 	srli	r7,r10,1
   18cb8:	12d6b03a 	or	r11,r2,r11
   18cbc:	00800044 	movi	r2,1
   18cc0:	198cb03a 	or	r6,r3,r6
   18cc4:	4888703a 	and	r4,r9,r2
   18cc8:	9818d07a 	srli	r12,r19,1
   18ccc:	001b883a 	mov	r13,zero
   18cd0:	03a00034 	movhi	r14,32768
   18cd4:	3013883a 	mov	r9,r6
   18cd8:	3815883a 	mov	r10,r7
   18cdc:	4091883a 	add	r8,r8,r2
   18ce0:	20000226 	beq	r4,zero,18cec <__muldf3+0x284>
   18ce4:	5b64b03a 	or	r18,r11,r13
   18ce8:	63a6b03a 	or	r19,r12,r14
   18cec:	7abfed36 	bltu	r15,r10,18ca4 <__muldf3+0x23c>
   18cf0:	da001015 	stw	r8,64(sp)
   18cf4:	00840034 	movhi	r2,4096
   18cf8:	10bfffc4 	addi	r2,r2,-1
   18cfc:	12801436 	bltu	r2,r10,18d50 <__muldf3+0x2e8>
   18d00:	da001017 	ldw	r8,64(sp)
   18d04:	101f883a 	mov	r15,r2
   18d08:	4a45883a 	add	r2,r9,r9
   18d0c:	124d803a 	cmpltu	r6,r2,r9
   18d10:	5287883a 	add	r3,r10,r10
   18d14:	9497883a 	add	r11,r18,r18
   18d18:	5c8f803a 	cmpltu	r7,r11,r18
   18d1c:	9cd9883a 	add	r12,r19,r19
   18d20:	01000044 	movi	r4,1
   18d24:	30cd883a 	add	r6,r6,r3
   18d28:	3b0f883a 	add	r7,r7,r12
   18d2c:	423fffc4 	addi	r8,r8,-1
   18d30:	1013883a 	mov	r9,r2
   18d34:	3015883a 	mov	r10,r6
   18d38:	111ab03a 	or	r13,r2,r4
   18d3c:	98003016 	blt	r19,zero,18e00 <__muldf3+0x398>
   18d40:	5825883a 	mov	r18,r11
   18d44:	3827883a 	mov	r19,r7
   18d48:	7abfef2e 	bgeu	r15,r10,18d08 <__muldf3+0x2a0>
   18d4c:	da001015 	stw	r8,64(sp)
   18d50:	00803fc4 	movi	r2,255
   18d54:	488e703a 	and	r7,r9,r2
   18d58:	00802004 	movi	r2,128
   18d5c:	0007883a 	mov	r3,zero
   18d60:	0011883a 	mov	r8,zero
   18d64:	38801826 	beq	r7,r2,18dc8 <__muldf3+0x360>
   18d68:	008000c4 	movi	r2,3
   18d6c:	d9000e04 	addi	r4,sp,56
   18d70:	da801215 	stw	r10,72(sp)
   18d74:	d8800e15 	stw	r2,56(sp)
   18d78:	da401115 	stw	r9,68(sp)
   18d7c:	003f6a06 	br	18b28 <__muldf3+0xc0>
   18d80:	89802126 	beq	r17,r6,18e08 <__muldf3+0x3a0>
   18d84:	0009883a 	mov	r4,zero
   18d88:	5105883a 	add	r2,r10,r4
   18d8c:	128d803a 	cmpltu	r6,r2,r10
   18d90:	5d07883a 	add	r3,r11,r20
   18d94:	30cd883a 	add	r6,r6,r3
   18d98:	0021883a 	mov	r16,zero
   18d9c:	0023883a 	mov	r17,zero
   18da0:	1025883a 	mov	r18,r2
   18da4:	3027883a 	mov	r19,r6
   18da8:	32ff9e2e 	bgeu	r6,r11,18c24 <__muldf3+0x1bc>
   18dac:	00800044 	movi	r2,1
   18db0:	8089883a 	add	r4,r16,r2
   18db4:	240d803a 	cmpltu	r6,r4,r16
   18db8:	344d883a 	add	r6,r6,r17
   18dbc:	2021883a 	mov	r16,r4
   18dc0:	3023883a 	mov	r17,r6
   18dc4:	003f9806 	br	18c28 <__muldf3+0x1c0>
   18dc8:	403fe71e 	bne	r8,zero,18d68 <__muldf3+0x300>
   18dcc:	01004004 	movi	r4,256
   18dd0:	4904703a 	and	r2,r9,r4
   18dd4:	10c4b03a 	or	r2,r2,r3
   18dd8:	103fe31e 	bne	r2,zero,18d68 <__muldf3+0x300>
   18ddc:	94c4b03a 	or	r2,r18,r19
   18de0:	103fe126 	beq	r2,zero,18d68 <__muldf3+0x300>
   18de4:	49c5883a 	add	r2,r9,r7
   18de8:	1251803a 	cmpltu	r8,r2,r9
   18dec:	4291883a 	add	r8,r8,r10
   18df0:	013fc004 	movi	r4,-256
   18df4:	1112703a 	and	r9,r2,r4
   18df8:	4015883a 	mov	r10,r8
   18dfc:	003fda06 	br	18d68 <__muldf3+0x300>
   18e00:	6813883a 	mov	r9,r13
   18e04:	003fce06 	br	18d40 <__muldf3+0x2d8>
   18e08:	143f7c36 	bltu	r2,r16,18bfc <__muldf3+0x194>
   18e0c:	003fdd06 	br	18d84 <__muldf3+0x31c>
   18e10:	12bf852e 	bgeu	r2,r10,18c28 <__muldf3+0x1c0>
   18e14:	003fe506 	br	18dac <__muldf3+0x344>
   18e18:	00800084 	movi	r2,2
   18e1c:	20bf351e 	bne	r4,r2,18af4 <__muldf3+0x8c>
   18e20:	01000134 	movhi	r4,4
   18e24:	21209404 	addi	r4,r4,-32176
   18e28:	003f3f06 	br	18b28 <__muldf3+0xc0>

00018e2c <__divdf3>:
   18e2c:	deffed04 	addi	sp,sp,-76
   18e30:	dcc01115 	stw	r19,68(sp)
   18e34:	dcc00404 	addi	r19,sp,16
   18e38:	2011883a 	mov	r8,r4
   18e3c:	2813883a 	mov	r9,r5
   18e40:	dc000e15 	stw	r16,56(sp)
   18e44:	d809883a 	mov	r4,sp
   18e48:	980b883a 	mov	r5,r19
   18e4c:	dc000904 	addi	r16,sp,36
   18e50:	dfc01215 	stw	ra,72(sp)
   18e54:	da400115 	stw	r9,4(sp)
   18e58:	d9c00315 	stw	r7,12(sp)
   18e5c:	da000015 	stw	r8,0(sp)
   18e60:	d9800215 	stw	r6,8(sp)
   18e64:	dc801015 	stw	r18,64(sp)
   18e68:	dc400f15 	stw	r17,60(sp)
   18e6c:	0019ccc0 	call	19ccc <__unpack_d>
   18e70:	d9000204 	addi	r4,sp,8
   18e74:	800b883a 	mov	r5,r16
   18e78:	0019ccc0 	call	19ccc <__unpack_d>
   18e7c:	d9000417 	ldw	r4,16(sp)
   18e80:	00800044 	movi	r2,1
   18e84:	11000b2e 	bgeu	r2,r4,18eb4 <__divdf3+0x88>
   18e88:	d9400917 	ldw	r5,36(sp)
   18e8c:	1140762e 	bgeu	r2,r5,19068 <__divdf3+0x23c>
   18e90:	d8800517 	ldw	r2,20(sp)
   18e94:	d8c00a17 	ldw	r3,40(sp)
   18e98:	01800104 	movi	r6,4
   18e9c:	10c4f03a 	xor	r2,r2,r3
   18ea0:	d8800515 	stw	r2,20(sp)
   18ea4:	21800226 	beq	r4,r6,18eb0 <__divdf3+0x84>
   18ea8:	00800084 	movi	r2,2
   18eac:	2080141e 	bne	r4,r2,18f00 <__divdf3+0xd4>
   18eb0:	29000926 	beq	r5,r4,18ed8 <__divdf3+0xac>
   18eb4:	9809883a 	mov	r4,r19
   18eb8:	00199b80 	call	199b8 <__pack_d>
   18ebc:	dfc01217 	ldw	ra,72(sp)
   18ec0:	dcc01117 	ldw	r19,68(sp)
   18ec4:	dc801017 	ldw	r18,64(sp)
   18ec8:	dc400f17 	ldw	r17,60(sp)
   18ecc:	dc000e17 	ldw	r16,56(sp)
   18ed0:	dec01304 	addi	sp,sp,76
   18ed4:	f800283a 	ret
   18ed8:	01000134 	movhi	r4,4
   18edc:	21209404 	addi	r4,r4,-32176
   18ee0:	00199b80 	call	199b8 <__pack_d>
   18ee4:	dfc01217 	ldw	ra,72(sp)
   18ee8:	dcc01117 	ldw	r19,68(sp)
   18eec:	dc801017 	ldw	r18,64(sp)
   18ef0:	dc400f17 	ldw	r17,60(sp)
   18ef4:	dc000e17 	ldw	r16,56(sp)
   18ef8:	dec01304 	addi	sp,sp,76
   18efc:	f800283a 	ret
   18f00:	29805b26 	beq	r5,r6,19070 <__divdf3+0x244>
   18f04:	28802d26 	beq	r5,r2,18fbc <__divdf3+0x190>
   18f08:	d8c00617 	ldw	r3,24(sp)
   18f0c:	d8800b17 	ldw	r2,44(sp)
   18f10:	d9c00817 	ldw	r7,32(sp)
   18f14:	dc400d17 	ldw	r17,52(sp)
   18f18:	188bc83a 	sub	r5,r3,r2
   18f1c:	d9800717 	ldw	r6,28(sp)
   18f20:	dc000c17 	ldw	r16,48(sp)
   18f24:	d9400615 	stw	r5,24(sp)
   18f28:	3c403836 	bltu	r7,r17,1900c <__divdf3+0x1e0>
   18f2c:	89c03626 	beq	r17,r7,19008 <__divdf3+0x1dc>
   18f30:	0015883a 	mov	r10,zero
   18f34:	001d883a 	mov	r14,zero
   18f38:	02c40034 	movhi	r11,4096
   18f3c:	001f883a 	mov	r15,zero
   18f40:	003f883a 	mov	ra,zero
   18f44:	04800f44 	movi	r18,61
   18f48:	00000f06 	br	18f88 <__divdf3+0x15c>
   18f4c:	601d883a 	mov	r14,r12
   18f50:	681f883a 	mov	r15,r13
   18f54:	400d883a 	mov	r6,r8
   18f58:	100f883a 	mov	r7,r2
   18f5c:	3191883a 	add	r8,r6,r6
   18f60:	5808d07a 	srli	r4,r11,1
   18f64:	4185803a 	cmpltu	r2,r8,r6
   18f68:	39d3883a 	add	r9,r7,r7
   18f6c:	28c6b03a 	or	r3,r5,r3
   18f70:	1245883a 	add	r2,r2,r9
   18f74:	1815883a 	mov	r10,r3
   18f78:	2017883a 	mov	r11,r4
   18f7c:	400d883a 	mov	r6,r8
   18f80:	100f883a 	mov	r7,r2
   18f84:	fc801726 	beq	ra,r18,18fe4 <__divdf3+0x1b8>
   18f88:	580a97fa 	slli	r5,r11,31
   18f8c:	5006d07a 	srli	r3,r10,1
   18f90:	ffc00044 	addi	ra,ra,1
   18f94:	3c7ff136 	bltu	r7,r17,18f5c <__divdf3+0x130>
   18f98:	3411c83a 	sub	r8,r6,r16
   18f9c:	3205803a 	cmpltu	r2,r6,r8
   18fa0:	3c53c83a 	sub	r9,r7,r17
   18fa4:	7298b03a 	or	r12,r14,r10
   18fa8:	7adab03a 	or	r13,r15,r11
   18fac:	4885c83a 	sub	r2,r9,r2
   18fb0:	89ffe61e 	bne	r17,r7,18f4c <__divdf3+0x120>
   18fb4:	343fe936 	bltu	r6,r16,18f5c <__divdf3+0x130>
   18fb8:	003fe406 	br	18f4c <__divdf3+0x120>
   18fbc:	9809883a 	mov	r4,r19
   18fc0:	d9800415 	stw	r6,16(sp)
   18fc4:	00199b80 	call	199b8 <__pack_d>
   18fc8:	dfc01217 	ldw	ra,72(sp)
   18fcc:	dcc01117 	ldw	r19,68(sp)
   18fd0:	dc801017 	ldw	r18,64(sp)
   18fd4:	dc400f17 	ldw	r17,60(sp)
   18fd8:	dc000e17 	ldw	r16,56(sp)
   18fdc:	dec01304 	addi	sp,sp,76
   18fe0:	f800283a 	ret
   18fe4:	00803fc4 	movi	r2,255
   18fe8:	7090703a 	and	r8,r14,r2
   18fec:	00802004 	movi	r2,128
   18ff0:	0007883a 	mov	r3,zero
   18ff4:	0013883a 	mov	r9,zero
   18ff8:	40800d26 	beq	r8,r2,19030 <__divdf3+0x204>
   18ffc:	dbc00815 	stw	r15,32(sp)
   19000:	db800715 	stw	r14,28(sp)
   19004:	003fab06 	br	18eb4 <__divdf3+0x88>
   19008:	343fc92e 	bgeu	r6,r16,18f30 <__divdf3+0x104>
   1900c:	3185883a 	add	r2,r6,r6
   19010:	1189803a 	cmpltu	r4,r2,r6
   19014:	39c7883a 	add	r3,r7,r7
   19018:	20c9883a 	add	r4,r4,r3
   1901c:	297fffc4 	addi	r5,r5,-1
   19020:	100d883a 	mov	r6,r2
   19024:	200f883a 	mov	r7,r4
   19028:	d9400615 	stw	r5,24(sp)
   1902c:	003fc006 	br	18f30 <__divdf3+0x104>
   19030:	483ff21e 	bne	r9,zero,18ffc <__divdf3+0x1d0>
   19034:	01004004 	movi	r4,256
   19038:	7104703a 	and	r2,r14,r4
   1903c:	10c4b03a 	or	r2,r2,r3
   19040:	103fee1e 	bne	r2,zero,18ffc <__divdf3+0x1d0>
   19044:	31c4b03a 	or	r2,r6,r7
   19048:	103fec26 	beq	r2,zero,18ffc <__divdf3+0x1d0>
   1904c:	7205883a 	add	r2,r14,r8
   19050:	1391803a 	cmpltu	r8,r2,r14
   19054:	43d1883a 	add	r8,r8,r15
   19058:	013fc004 	movi	r4,-256
   1905c:	111c703a 	and	r14,r2,r4
   19060:	401f883a 	mov	r15,r8
   19064:	003fe506 	br	18ffc <__divdf3+0x1d0>
   19068:	8009883a 	mov	r4,r16
   1906c:	003f9206 	br	18eb8 <__divdf3+0x8c>
   19070:	9809883a 	mov	r4,r19
   19074:	d8000715 	stw	zero,28(sp)
   19078:	d8000815 	stw	zero,32(sp)
   1907c:	d8000615 	stw	zero,24(sp)
   19080:	003f8d06 	br	18eb8 <__divdf3+0x8c>

00019084 <__eqdf2>:
   19084:	deffef04 	addi	sp,sp,-68
   19088:	dc400f15 	stw	r17,60(sp)
   1908c:	dc400404 	addi	r17,sp,16
   19090:	2005883a 	mov	r2,r4
   19094:	2807883a 	mov	r3,r5
   19098:	dc000e15 	stw	r16,56(sp)
   1909c:	d809883a 	mov	r4,sp
   190a0:	880b883a 	mov	r5,r17
   190a4:	dc000904 	addi	r16,sp,36
   190a8:	d8c00115 	stw	r3,4(sp)
   190ac:	d8800015 	stw	r2,0(sp)
   190b0:	d9800215 	stw	r6,8(sp)
   190b4:	dfc01015 	stw	ra,64(sp)
   190b8:	d9c00315 	stw	r7,12(sp)
   190bc:	0019ccc0 	call	19ccc <__unpack_d>
   190c0:	d9000204 	addi	r4,sp,8
   190c4:	800b883a 	mov	r5,r16
   190c8:	0019ccc0 	call	19ccc <__unpack_d>
   190cc:	d8800417 	ldw	r2,16(sp)
   190d0:	00c00044 	movi	r3,1
   190d4:	180d883a 	mov	r6,r3
   190d8:	1880062e 	bgeu	r3,r2,190f4 <__eqdf2+0x70>
   190dc:	d8800917 	ldw	r2,36(sp)
   190e0:	8809883a 	mov	r4,r17
   190e4:	800b883a 	mov	r5,r16
   190e8:	1880022e 	bgeu	r3,r2,190f4 <__eqdf2+0x70>
   190ec:	0019e040 	call	19e04 <__fpcmp_parts_d>
   190f0:	100d883a 	mov	r6,r2
   190f4:	3005883a 	mov	r2,r6
   190f8:	dfc01017 	ldw	ra,64(sp)
   190fc:	dc400f17 	ldw	r17,60(sp)
   19100:	dc000e17 	ldw	r16,56(sp)
   19104:	dec01104 	addi	sp,sp,68
   19108:	f800283a 	ret

0001910c <__nedf2>:
   1910c:	deffef04 	addi	sp,sp,-68
   19110:	dc400f15 	stw	r17,60(sp)
   19114:	dc400404 	addi	r17,sp,16
   19118:	2005883a 	mov	r2,r4
   1911c:	2807883a 	mov	r3,r5
   19120:	dc000e15 	stw	r16,56(sp)
   19124:	d809883a 	mov	r4,sp
   19128:	880b883a 	mov	r5,r17
   1912c:	dc000904 	addi	r16,sp,36
   19130:	d8c00115 	stw	r3,4(sp)
   19134:	d8800015 	stw	r2,0(sp)
   19138:	d9800215 	stw	r6,8(sp)
   1913c:	dfc01015 	stw	ra,64(sp)
   19140:	d9c00315 	stw	r7,12(sp)
   19144:	0019ccc0 	call	19ccc <__unpack_d>
   19148:	d9000204 	addi	r4,sp,8
   1914c:	800b883a 	mov	r5,r16
   19150:	0019ccc0 	call	19ccc <__unpack_d>
   19154:	d8800417 	ldw	r2,16(sp)
   19158:	00c00044 	movi	r3,1
   1915c:	180d883a 	mov	r6,r3
   19160:	1880062e 	bgeu	r3,r2,1917c <__nedf2+0x70>
   19164:	d8800917 	ldw	r2,36(sp)
   19168:	8809883a 	mov	r4,r17
   1916c:	800b883a 	mov	r5,r16
   19170:	1880022e 	bgeu	r3,r2,1917c <__nedf2+0x70>
   19174:	0019e040 	call	19e04 <__fpcmp_parts_d>
   19178:	100d883a 	mov	r6,r2
   1917c:	3005883a 	mov	r2,r6
   19180:	dfc01017 	ldw	ra,64(sp)
   19184:	dc400f17 	ldw	r17,60(sp)
   19188:	dc000e17 	ldw	r16,56(sp)
   1918c:	dec01104 	addi	sp,sp,68
   19190:	f800283a 	ret

00019194 <__gtdf2>:
   19194:	deffef04 	addi	sp,sp,-68
   19198:	dc400f15 	stw	r17,60(sp)
   1919c:	dc400404 	addi	r17,sp,16
   191a0:	2005883a 	mov	r2,r4
   191a4:	2807883a 	mov	r3,r5
   191a8:	dc000e15 	stw	r16,56(sp)
   191ac:	d809883a 	mov	r4,sp
   191b0:	880b883a 	mov	r5,r17
   191b4:	dc000904 	addi	r16,sp,36
   191b8:	d8c00115 	stw	r3,4(sp)
   191bc:	d8800015 	stw	r2,0(sp)
   191c0:	d9800215 	stw	r6,8(sp)
   191c4:	dfc01015 	stw	ra,64(sp)
   191c8:	d9c00315 	stw	r7,12(sp)
   191cc:	0019ccc0 	call	19ccc <__unpack_d>
   191d0:	d9000204 	addi	r4,sp,8
   191d4:	800b883a 	mov	r5,r16
   191d8:	0019ccc0 	call	19ccc <__unpack_d>
   191dc:	d8800417 	ldw	r2,16(sp)
   191e0:	00c00044 	movi	r3,1
   191e4:	01bfffc4 	movi	r6,-1
   191e8:	1880062e 	bgeu	r3,r2,19204 <__gtdf2+0x70>
   191ec:	d8800917 	ldw	r2,36(sp)
   191f0:	8809883a 	mov	r4,r17
   191f4:	800b883a 	mov	r5,r16
   191f8:	1880022e 	bgeu	r3,r2,19204 <__gtdf2+0x70>
   191fc:	0019e040 	call	19e04 <__fpcmp_parts_d>
   19200:	100d883a 	mov	r6,r2
   19204:	3005883a 	mov	r2,r6
   19208:	dfc01017 	ldw	ra,64(sp)
   1920c:	dc400f17 	ldw	r17,60(sp)
   19210:	dc000e17 	ldw	r16,56(sp)
   19214:	dec01104 	addi	sp,sp,68
   19218:	f800283a 	ret

0001921c <__gedf2>:
   1921c:	deffef04 	addi	sp,sp,-68
   19220:	dc400f15 	stw	r17,60(sp)
   19224:	dc400404 	addi	r17,sp,16
   19228:	2005883a 	mov	r2,r4
   1922c:	2807883a 	mov	r3,r5
   19230:	dc000e15 	stw	r16,56(sp)
   19234:	d809883a 	mov	r4,sp
   19238:	880b883a 	mov	r5,r17
   1923c:	dc000904 	addi	r16,sp,36
   19240:	d8c00115 	stw	r3,4(sp)
   19244:	d8800015 	stw	r2,0(sp)
   19248:	d9800215 	stw	r6,8(sp)
   1924c:	dfc01015 	stw	ra,64(sp)
   19250:	d9c00315 	stw	r7,12(sp)
   19254:	0019ccc0 	call	19ccc <__unpack_d>
   19258:	d9000204 	addi	r4,sp,8
   1925c:	800b883a 	mov	r5,r16
   19260:	0019ccc0 	call	19ccc <__unpack_d>
   19264:	d8800417 	ldw	r2,16(sp)
   19268:	00c00044 	movi	r3,1
   1926c:	01bfffc4 	movi	r6,-1
   19270:	1880062e 	bgeu	r3,r2,1928c <__gedf2+0x70>
   19274:	d8800917 	ldw	r2,36(sp)
   19278:	8809883a 	mov	r4,r17
   1927c:	800b883a 	mov	r5,r16
   19280:	1880022e 	bgeu	r3,r2,1928c <__gedf2+0x70>
   19284:	0019e040 	call	19e04 <__fpcmp_parts_d>
   19288:	100d883a 	mov	r6,r2
   1928c:	3005883a 	mov	r2,r6
   19290:	dfc01017 	ldw	ra,64(sp)
   19294:	dc400f17 	ldw	r17,60(sp)
   19298:	dc000e17 	ldw	r16,56(sp)
   1929c:	dec01104 	addi	sp,sp,68
   192a0:	f800283a 	ret

000192a4 <__ltdf2>:
   192a4:	deffef04 	addi	sp,sp,-68
   192a8:	dc400f15 	stw	r17,60(sp)
   192ac:	dc400404 	addi	r17,sp,16
   192b0:	2005883a 	mov	r2,r4
   192b4:	2807883a 	mov	r3,r5
   192b8:	dc000e15 	stw	r16,56(sp)
   192bc:	d809883a 	mov	r4,sp
   192c0:	880b883a 	mov	r5,r17
   192c4:	dc000904 	addi	r16,sp,36
   192c8:	d8c00115 	stw	r3,4(sp)
   192cc:	d8800015 	stw	r2,0(sp)
   192d0:	d9800215 	stw	r6,8(sp)
   192d4:	dfc01015 	stw	ra,64(sp)
   192d8:	d9c00315 	stw	r7,12(sp)
   192dc:	0019ccc0 	call	19ccc <__unpack_d>
   192e0:	d9000204 	addi	r4,sp,8
   192e4:	800b883a 	mov	r5,r16
   192e8:	0019ccc0 	call	19ccc <__unpack_d>
   192ec:	d8800417 	ldw	r2,16(sp)
   192f0:	00c00044 	movi	r3,1
   192f4:	180d883a 	mov	r6,r3
   192f8:	1880062e 	bgeu	r3,r2,19314 <__ltdf2+0x70>
   192fc:	d8800917 	ldw	r2,36(sp)
   19300:	8809883a 	mov	r4,r17
   19304:	800b883a 	mov	r5,r16
   19308:	1880022e 	bgeu	r3,r2,19314 <__ltdf2+0x70>
   1930c:	0019e040 	call	19e04 <__fpcmp_parts_d>
   19310:	100d883a 	mov	r6,r2
   19314:	3005883a 	mov	r2,r6
   19318:	dfc01017 	ldw	ra,64(sp)
   1931c:	dc400f17 	ldw	r17,60(sp)
   19320:	dc000e17 	ldw	r16,56(sp)
   19324:	dec01104 	addi	sp,sp,68
   19328:	f800283a 	ret

0001932c <__floatsidf>:
   1932c:	2006d7fa 	srli	r3,r4,31
   19330:	defff604 	addi	sp,sp,-40
   19334:	008000c4 	movi	r2,3
   19338:	dfc00915 	stw	ra,36(sp)
   1933c:	dcc00815 	stw	r19,32(sp)
   19340:	dc800715 	stw	r18,28(sp)
   19344:	dc400615 	stw	r17,24(sp)
   19348:	dc000515 	stw	r16,20(sp)
   1934c:	d8800015 	stw	r2,0(sp)
   19350:	d8c00115 	stw	r3,4(sp)
   19354:	20000f1e 	bne	r4,zero,19394 <__floatsidf+0x68>
   19358:	00800084 	movi	r2,2
   1935c:	d8800015 	stw	r2,0(sp)
   19360:	d809883a 	mov	r4,sp
   19364:	00199b80 	call	199b8 <__pack_d>
   19368:	1009883a 	mov	r4,r2
   1936c:	180b883a 	mov	r5,r3
   19370:	2005883a 	mov	r2,r4
   19374:	2807883a 	mov	r3,r5
   19378:	dfc00917 	ldw	ra,36(sp)
   1937c:	dcc00817 	ldw	r19,32(sp)
   19380:	dc800717 	ldw	r18,28(sp)
   19384:	dc400617 	ldw	r17,24(sp)
   19388:	dc000517 	ldw	r16,20(sp)
   1938c:	dec00a04 	addi	sp,sp,40
   19390:	f800283a 	ret
   19394:	00800f04 	movi	r2,60
   19398:	1807003a 	cmpeq	r3,r3,zero
   1939c:	d8800215 	stw	r2,8(sp)
   193a0:	18001126 	beq	r3,zero,193e8 <__floatsidf+0xbc>
   193a4:	0027883a 	mov	r19,zero
   193a8:	2025883a 	mov	r18,r4
   193ac:	d9000315 	stw	r4,12(sp)
   193b0:	dcc00415 	stw	r19,16(sp)
   193b4:	00199380 	call	19938 <__clzsi2>
   193b8:	11000744 	addi	r4,r2,29
   193bc:	013fe80e 	bge	zero,r4,19360 <__floatsidf+0x34>
   193c0:	10bfff44 	addi	r2,r2,-3
   193c4:	10000c16 	blt	r2,zero,193f8 <__floatsidf+0xcc>
   193c8:	90a2983a 	sll	r17,r18,r2
   193cc:	0021883a 	mov	r16,zero
   193d0:	d8800217 	ldw	r2,8(sp)
   193d4:	dc400415 	stw	r17,16(sp)
   193d8:	dc000315 	stw	r16,12(sp)
   193dc:	1105c83a 	sub	r2,r2,r4
   193e0:	d8800215 	stw	r2,8(sp)
   193e4:	003fde06 	br	19360 <__floatsidf+0x34>
   193e8:	00a00034 	movhi	r2,32768
   193ec:	20800a26 	beq	r4,r2,19418 <__floatsidf+0xec>
   193f0:	0109c83a 	sub	r4,zero,r4
   193f4:	003feb06 	br	193a4 <__floatsidf+0x78>
   193f8:	9006d07a 	srli	r3,r18,1
   193fc:	008007c4 	movi	r2,31
   19400:	1105c83a 	sub	r2,r2,r4
   19404:	1886d83a 	srl	r3,r3,r2
   19408:	9922983a 	sll	r17,r19,r4
   1940c:	9120983a 	sll	r16,r18,r4
   19410:	1c62b03a 	or	r17,r3,r17
   19414:	003fee06 	br	193d0 <__floatsidf+0xa4>
   19418:	0009883a 	mov	r4,zero
   1941c:	01707834 	movhi	r5,49632
   19420:	003fd306 	br	19370 <__floatsidf+0x44>

00019424 <__fixdfsi>:
   19424:	defff804 	addi	sp,sp,-32
   19428:	2005883a 	mov	r2,r4
   1942c:	2807883a 	mov	r3,r5
   19430:	d809883a 	mov	r4,sp
   19434:	d9400204 	addi	r5,sp,8
   19438:	d8c00115 	stw	r3,4(sp)
   1943c:	d8800015 	stw	r2,0(sp)
   19440:	dfc00715 	stw	ra,28(sp)
   19444:	0019ccc0 	call	19ccc <__unpack_d>
   19448:	d8c00217 	ldw	r3,8(sp)
   1944c:	00800084 	movi	r2,2
   19450:	1880051e 	bne	r3,r2,19468 <__fixdfsi+0x44>
   19454:	0007883a 	mov	r3,zero
   19458:	1805883a 	mov	r2,r3
   1945c:	dfc00717 	ldw	ra,28(sp)
   19460:	dec00804 	addi	sp,sp,32
   19464:	f800283a 	ret
   19468:	00800044 	movi	r2,1
   1946c:	10fff92e 	bgeu	r2,r3,19454 <__fixdfsi+0x30>
   19470:	00800104 	movi	r2,4
   19474:	18800426 	beq	r3,r2,19488 <__fixdfsi+0x64>
   19478:	d8c00417 	ldw	r3,16(sp)
   1947c:	183ff516 	blt	r3,zero,19454 <__fixdfsi+0x30>
   19480:	00800784 	movi	r2,30
   19484:	10c0080e 	bge	r2,r3,194a8 <__fixdfsi+0x84>
   19488:	d8800317 	ldw	r2,12(sp)
   1948c:	1000121e 	bne	r2,zero,194d8 <__fixdfsi+0xb4>
   19490:	00e00034 	movhi	r3,32768
   19494:	18ffffc4 	addi	r3,r3,-1
   19498:	1805883a 	mov	r2,r3
   1949c:	dfc00717 	ldw	ra,28(sp)
   194a0:	dec00804 	addi	sp,sp,32
   194a4:	f800283a 	ret
   194a8:	00800f04 	movi	r2,60
   194ac:	10d1c83a 	sub	r8,r2,r3
   194b0:	40bff804 	addi	r2,r8,-32
   194b4:	d9800517 	ldw	r6,20(sp)
   194b8:	d9c00617 	ldw	r7,24(sp)
   194bc:	10000816 	blt	r2,zero,194e0 <__fixdfsi+0xbc>
   194c0:	3888d83a 	srl	r4,r7,r2
   194c4:	d8800317 	ldw	r2,12(sp)
   194c8:	2007883a 	mov	r3,r4
   194cc:	103fe226 	beq	r2,zero,19458 <__fixdfsi+0x34>
   194d0:	0107c83a 	sub	r3,zero,r4
   194d4:	003fe006 	br	19458 <__fixdfsi+0x34>
   194d8:	00e00034 	movhi	r3,32768
   194dc:	003fde06 	br	19458 <__fixdfsi+0x34>
   194e0:	39c7883a 	add	r3,r7,r7
   194e4:	008007c4 	movi	r2,31
   194e8:	1205c83a 	sub	r2,r2,r8
   194ec:	1886983a 	sll	r3,r3,r2
   194f0:	3208d83a 	srl	r4,r6,r8
   194f4:	1908b03a 	or	r4,r3,r4
   194f8:	003ff206 	br	194c4 <__fixdfsi+0xa0>

000194fc <__floatunsidf>:
   194fc:	defff204 	addi	sp,sp,-56
   19500:	dfc00d15 	stw	ra,52(sp)
   19504:	ddc00c15 	stw	r23,48(sp)
   19508:	dd800b15 	stw	r22,44(sp)
   1950c:	dd400a15 	stw	r21,40(sp)
   19510:	dd000915 	stw	r20,36(sp)
   19514:	dcc00815 	stw	r19,32(sp)
   19518:	dc800715 	stw	r18,28(sp)
   1951c:	dc400615 	stw	r17,24(sp)
   19520:	dc000515 	stw	r16,20(sp)
   19524:	d8000115 	stw	zero,4(sp)
   19528:	20000f1e 	bne	r4,zero,19568 <__floatunsidf+0x6c>
   1952c:	00800084 	movi	r2,2
   19530:	d8800015 	stw	r2,0(sp)
   19534:	d809883a 	mov	r4,sp
   19538:	00199b80 	call	199b8 <__pack_d>
   1953c:	dfc00d17 	ldw	ra,52(sp)
   19540:	ddc00c17 	ldw	r23,48(sp)
   19544:	dd800b17 	ldw	r22,44(sp)
   19548:	dd400a17 	ldw	r21,40(sp)
   1954c:	dd000917 	ldw	r20,36(sp)
   19550:	dcc00817 	ldw	r19,32(sp)
   19554:	dc800717 	ldw	r18,28(sp)
   19558:	dc400617 	ldw	r17,24(sp)
   1955c:	dc000517 	ldw	r16,20(sp)
   19560:	dec00e04 	addi	sp,sp,56
   19564:	f800283a 	ret
   19568:	008000c4 	movi	r2,3
   1956c:	00c00f04 	movi	r3,60
   19570:	002f883a 	mov	r23,zero
   19574:	202d883a 	mov	r22,r4
   19578:	d8800015 	stw	r2,0(sp)
   1957c:	d8c00215 	stw	r3,8(sp)
   19580:	d9000315 	stw	r4,12(sp)
   19584:	ddc00415 	stw	r23,16(sp)
   19588:	00199380 	call	19938 <__clzsi2>
   1958c:	12400744 	addi	r9,r2,29
   19590:	48000b16 	blt	r9,zero,195c0 <__floatunsidf+0xc4>
   19594:	483fe726 	beq	r9,zero,19534 <__floatunsidf+0x38>
   19598:	10bfff44 	addi	r2,r2,-3
   1959c:	10002e16 	blt	r2,zero,19658 <__floatunsidf+0x15c>
   195a0:	b0a2983a 	sll	r17,r22,r2
   195a4:	0021883a 	mov	r16,zero
   195a8:	d8800217 	ldw	r2,8(sp)
   195ac:	dc400415 	stw	r17,16(sp)
   195b0:	dc000315 	stw	r16,12(sp)
   195b4:	1245c83a 	sub	r2,r2,r9
   195b8:	d8800215 	stw	r2,8(sp)
   195bc:	003fdd06 	br	19534 <__floatunsidf+0x38>
   195c0:	0255c83a 	sub	r10,zero,r9
   195c4:	51bff804 	addi	r6,r10,-32
   195c8:	30001b16 	blt	r6,zero,19638 <__floatunsidf+0x13c>
   195cc:	b9a8d83a 	srl	r20,r23,r6
   195d0:	002b883a 	mov	r21,zero
   195d4:	000f883a 	mov	r7,zero
   195d8:	01000044 	movi	r4,1
   195dc:	0011883a 	mov	r8,zero
   195e0:	30002516 	blt	r6,zero,19678 <__floatunsidf+0x17c>
   195e4:	21a6983a 	sll	r19,r4,r6
   195e8:	0025883a 	mov	r18,zero
   195ec:	00bfffc4 	movi	r2,-1
   195f0:	9089883a 	add	r4,r18,r2
   195f4:	988b883a 	add	r5,r19,r2
   195f8:	248d803a 	cmpltu	r6,r4,r18
   195fc:	314b883a 	add	r5,r6,r5
   19600:	b104703a 	and	r2,r22,r4
   19604:	b946703a 	and	r3,r23,r5
   19608:	10c4b03a 	or	r2,r2,r3
   1960c:	10000226 	beq	r2,zero,19618 <__floatunsidf+0x11c>
   19610:	01c00044 	movi	r7,1
   19614:	0011883a 	mov	r8,zero
   19618:	d9000217 	ldw	r4,8(sp)
   1961c:	a1c4b03a 	or	r2,r20,r7
   19620:	aa06b03a 	or	r3,r21,r8
   19624:	2249c83a 	sub	r4,r4,r9
   19628:	d8c00415 	stw	r3,16(sp)
   1962c:	d9000215 	stw	r4,8(sp)
   19630:	d8800315 	stw	r2,12(sp)
   19634:	003fbf06 	br	19534 <__floatunsidf+0x38>
   19638:	bdc7883a 	add	r3,r23,r23
   1963c:	008007c4 	movi	r2,31
   19640:	1285c83a 	sub	r2,r2,r10
   19644:	1886983a 	sll	r3,r3,r2
   19648:	b2a8d83a 	srl	r20,r22,r10
   1964c:	baaad83a 	srl	r21,r23,r10
   19650:	1d28b03a 	or	r20,r3,r20
   19654:	003fdf06 	br	195d4 <__floatunsidf+0xd8>
   19658:	b006d07a 	srli	r3,r22,1
   1965c:	008007c4 	movi	r2,31
   19660:	1245c83a 	sub	r2,r2,r9
   19664:	1886d83a 	srl	r3,r3,r2
   19668:	ba62983a 	sll	r17,r23,r9
   1966c:	b260983a 	sll	r16,r22,r9
   19670:	1c62b03a 	or	r17,r3,r17
   19674:	003fcc06 	br	195a8 <__floatunsidf+0xac>
   19678:	2006d07a 	srli	r3,r4,1
   1967c:	008007c4 	movi	r2,31
   19680:	1285c83a 	sub	r2,r2,r10
   19684:	18a6d83a 	srl	r19,r3,r2
   19688:	22a4983a 	sll	r18,r4,r10
   1968c:	003fd706 	br	195ec <__floatunsidf+0xf0>

00019690 <udivmodsi4>:
   19690:	29001b2e 	bgeu	r5,r4,19700 <udivmodsi4+0x70>
   19694:	28001a16 	blt	r5,zero,19700 <udivmodsi4+0x70>
   19698:	00800044 	movi	r2,1
   1969c:	0007883a 	mov	r3,zero
   196a0:	01c007c4 	movi	r7,31
   196a4:	00000306 	br	196b4 <udivmodsi4+0x24>
   196a8:	19c01326 	beq	r3,r7,196f8 <udivmodsi4+0x68>
   196ac:	18c00044 	addi	r3,r3,1
   196b0:	28000416 	blt	r5,zero,196c4 <udivmodsi4+0x34>
   196b4:	294b883a 	add	r5,r5,r5
   196b8:	1085883a 	add	r2,r2,r2
   196bc:	293ffa36 	bltu	r5,r4,196a8 <udivmodsi4+0x18>
   196c0:	10000d26 	beq	r2,zero,196f8 <udivmodsi4+0x68>
   196c4:	0007883a 	mov	r3,zero
   196c8:	21400236 	bltu	r4,r5,196d4 <udivmodsi4+0x44>
   196cc:	2149c83a 	sub	r4,r4,r5
   196d0:	1886b03a 	or	r3,r3,r2
   196d4:	1004d07a 	srli	r2,r2,1
   196d8:	280ad07a 	srli	r5,r5,1
   196dc:	103ffa1e 	bne	r2,zero,196c8 <udivmodsi4+0x38>
   196e0:	30000226 	beq	r6,zero,196ec <udivmodsi4+0x5c>
   196e4:	2005883a 	mov	r2,r4
   196e8:	f800283a 	ret
   196ec:	1809883a 	mov	r4,r3
   196f0:	2005883a 	mov	r2,r4
   196f4:	f800283a 	ret
   196f8:	0007883a 	mov	r3,zero
   196fc:	003ff806 	br	196e0 <udivmodsi4+0x50>
   19700:	00800044 	movi	r2,1
   19704:	0007883a 	mov	r3,zero
   19708:	003fef06 	br	196c8 <udivmodsi4+0x38>

0001970c <__divsi3>:
   1970c:	defffe04 	addi	sp,sp,-8
   19710:	dc000015 	stw	r16,0(sp)
   19714:	dfc00115 	stw	ra,4(sp)
   19718:	0021883a 	mov	r16,zero
   1971c:	20000c16 	blt	r4,zero,19750 <__divsi3+0x44>
   19720:	000d883a 	mov	r6,zero
   19724:	28000e16 	blt	r5,zero,19760 <__divsi3+0x54>
   19728:	00196900 	call	19690 <udivmodsi4>
   1972c:	1007883a 	mov	r3,r2
   19730:	8005003a 	cmpeq	r2,r16,zero
   19734:	1000011e 	bne	r2,zero,1973c <__divsi3+0x30>
   19738:	00c7c83a 	sub	r3,zero,r3
   1973c:	1805883a 	mov	r2,r3
   19740:	dfc00117 	ldw	ra,4(sp)
   19744:	dc000017 	ldw	r16,0(sp)
   19748:	dec00204 	addi	sp,sp,8
   1974c:	f800283a 	ret
   19750:	0109c83a 	sub	r4,zero,r4
   19754:	04000044 	movi	r16,1
   19758:	000d883a 	mov	r6,zero
   1975c:	283ff20e 	bge	r5,zero,19728 <__divsi3+0x1c>
   19760:	014bc83a 	sub	r5,zero,r5
   19764:	8021003a 	cmpeq	r16,r16,zero
   19768:	003fef06 	br	19728 <__divsi3+0x1c>

0001976c <__modsi3>:
   1976c:	deffff04 	addi	sp,sp,-4
   19770:	dfc00015 	stw	ra,0(sp)
   19774:	01800044 	movi	r6,1
   19778:	2807883a 	mov	r3,r5
   1977c:	20000416 	blt	r4,zero,19790 <__modsi3+0x24>
   19780:	28000c16 	blt	r5,zero,197b4 <__modsi3+0x48>
   19784:	dfc00017 	ldw	ra,0(sp)
   19788:	dec00104 	addi	sp,sp,4
   1978c:	00196901 	jmpi	19690 <udivmodsi4>
   19790:	0109c83a 	sub	r4,zero,r4
   19794:	28000b16 	blt	r5,zero,197c4 <__modsi3+0x58>
   19798:	180b883a 	mov	r5,r3
   1979c:	01800044 	movi	r6,1
   197a0:	00196900 	call	19690 <udivmodsi4>
   197a4:	0085c83a 	sub	r2,zero,r2
   197a8:	dfc00017 	ldw	ra,0(sp)
   197ac:	dec00104 	addi	sp,sp,4
   197b0:	f800283a 	ret
   197b4:	014bc83a 	sub	r5,zero,r5
   197b8:	dfc00017 	ldw	ra,0(sp)
   197bc:	dec00104 	addi	sp,sp,4
   197c0:	00196901 	jmpi	19690 <udivmodsi4>
   197c4:	0147c83a 	sub	r3,zero,r5
   197c8:	003ff306 	br	19798 <__modsi3+0x2c>

000197cc <__udivsi3>:
   197cc:	000d883a 	mov	r6,zero
   197d0:	00196901 	jmpi	19690 <udivmodsi4>

000197d4 <__umodsi3>:
   197d4:	01800044 	movi	r6,1
   197d8:	00196901 	jmpi	19690 <udivmodsi4>

000197dc <__mulsi3>:
   197dc:	20000a26 	beq	r4,zero,19808 <__mulsi3+0x2c>
   197e0:	0007883a 	mov	r3,zero
   197e4:	2080004c 	andi	r2,r4,1
   197e8:	1005003a 	cmpeq	r2,r2,zero
   197ec:	2008d07a 	srli	r4,r4,1
   197f0:	1000011e 	bne	r2,zero,197f8 <__mulsi3+0x1c>
   197f4:	1947883a 	add	r3,r3,r5
   197f8:	294b883a 	add	r5,r5,r5
   197fc:	203ff91e 	bne	r4,zero,197e4 <__mulsi3+0x8>
   19800:	1805883a 	mov	r2,r3
   19804:	f800283a 	ret
   19808:	0007883a 	mov	r3,zero
   1980c:	1805883a 	mov	r2,r3
   19810:	f800283a 	ret

00019814 <__muldi3>:
   19814:	defff204 	addi	sp,sp,-56
   19818:	df000c15 	stw	fp,48(sp)
   1981c:	3038d43a 	srli	fp,r6,16
   19820:	dd000815 	stw	r20,32(sp)
   19824:	dc400515 	stw	r17,20(sp)
   19828:	2028d43a 	srli	r20,r4,16
   1982c:	247fffcc 	andi	r17,r4,65535
   19830:	dc000415 	stw	r16,16(sp)
   19834:	343fffcc 	andi	r16,r6,65535
   19838:	dcc00715 	stw	r19,28(sp)
   1983c:	d9000015 	stw	r4,0(sp)
   19840:	2827883a 	mov	r19,r5
   19844:	8809883a 	mov	r4,r17
   19848:	d9400115 	stw	r5,4(sp)
   1984c:	800b883a 	mov	r5,r16
   19850:	d9800215 	stw	r6,8(sp)
   19854:	dfc00d15 	stw	ra,52(sp)
   19858:	d9c00315 	stw	r7,12(sp)
   1985c:	dd800a15 	stw	r22,40(sp)
   19860:	dd400915 	stw	r21,36(sp)
   19864:	302d883a 	mov	r22,r6
   19868:	ddc00b15 	stw	r23,44(sp)
   1986c:	dc800615 	stw	r18,24(sp)
   19870:	00197dc0 	call	197dc <__mulsi3>
   19874:	8809883a 	mov	r4,r17
   19878:	e00b883a 	mov	r5,fp
   1987c:	102b883a 	mov	r21,r2
   19880:	00197dc0 	call	197dc <__mulsi3>
   19884:	800b883a 	mov	r5,r16
   19888:	a009883a 	mov	r4,r20
   1988c:	1023883a 	mov	r17,r2
   19890:	00197dc0 	call	197dc <__mulsi3>
   19894:	a009883a 	mov	r4,r20
   19898:	e00b883a 	mov	r5,fp
   1989c:	1021883a 	mov	r16,r2
   198a0:	00197dc0 	call	197dc <__mulsi3>
   198a4:	a8ffffcc 	andi	r3,r21,65535
   198a8:	a82ad43a 	srli	r21,r21,16
   198ac:	8c23883a 	add	r17,r17,r16
   198b0:	1011883a 	mov	r8,r2
   198b4:	ac6b883a 	add	r21,r21,r17
   198b8:	a804943a 	slli	r2,r21,16
   198bc:	b009883a 	mov	r4,r22
   198c0:	980b883a 	mov	r5,r19
   198c4:	10c7883a 	add	r3,r2,r3
   198c8:	a812d43a 	srli	r9,r21,16
   198cc:	180d883a 	mov	r6,r3
   198d0:	ac00022e 	bgeu	r21,r16,198dc <__muldi3+0xc8>
   198d4:	00800074 	movhi	r2,1
   198d8:	4091883a 	add	r8,r8,r2
   198dc:	4267883a 	add	r19,r8,r9
   198e0:	302d883a 	mov	r22,r6
   198e4:	00197dc0 	call	197dc <__mulsi3>
   198e8:	d9400317 	ldw	r5,12(sp)
   198ec:	d9000017 	ldw	r4,0(sp)
   198f0:	1023883a 	mov	r17,r2
   198f4:	00197dc0 	call	197dc <__mulsi3>
   198f8:	14cb883a 	add	r5,r2,r19
   198fc:	894b883a 	add	r5,r17,r5
   19900:	b005883a 	mov	r2,r22
   19904:	2807883a 	mov	r3,r5
   19908:	dfc00d17 	ldw	ra,52(sp)
   1990c:	df000c17 	ldw	fp,48(sp)
   19910:	ddc00b17 	ldw	r23,44(sp)
   19914:	dd800a17 	ldw	r22,40(sp)
   19918:	dd400917 	ldw	r21,36(sp)
   1991c:	dd000817 	ldw	r20,32(sp)
   19920:	dcc00717 	ldw	r19,28(sp)
   19924:	dc800617 	ldw	r18,24(sp)
   19928:	dc400517 	ldw	r17,20(sp)
   1992c:	dc000417 	ldw	r16,16(sp)
   19930:	dec00e04 	addi	sp,sp,56
   19934:	f800283a 	ret

00019938 <__clzsi2>:
   19938:	00bfffd4 	movui	r2,65535
   1993c:	11000e36 	bltu	r2,r4,19978 <__clzsi2+0x40>
   19940:	00803fc4 	movi	r2,255
   19944:	01400204 	movi	r5,8
   19948:	0007883a 	mov	r3,zero
   1994c:	11001036 	bltu	r2,r4,19990 <__clzsi2+0x58>
   19950:	000b883a 	mov	r5,zero
   19954:	20c6d83a 	srl	r3,r4,r3
   19958:	00800134 	movhi	r2,4
   1995c:	10a09904 	addi	r2,r2,-32156
   19960:	1887883a 	add	r3,r3,r2
   19964:	18800003 	ldbu	r2,0(r3)
   19968:	00c00804 	movi	r3,32
   1996c:	2885883a 	add	r2,r5,r2
   19970:	1885c83a 	sub	r2,r3,r2
   19974:	f800283a 	ret
   19978:	01400404 	movi	r5,16
   1997c:	00804034 	movhi	r2,256
   19980:	10bfffc4 	addi	r2,r2,-1
   19984:	2807883a 	mov	r3,r5
   19988:	113ff22e 	bgeu	r2,r4,19954 <__clzsi2+0x1c>
   1998c:	01400604 	movi	r5,24
   19990:	2807883a 	mov	r3,r5
   19994:	20c6d83a 	srl	r3,r4,r3
   19998:	00800134 	movhi	r2,4
   1999c:	10a09904 	addi	r2,r2,-32156
   199a0:	1887883a 	add	r3,r3,r2
   199a4:	18800003 	ldbu	r2,0(r3)
   199a8:	00c00804 	movi	r3,32
   199ac:	2885883a 	add	r2,r5,r2
   199b0:	1885c83a 	sub	r2,r3,r2
   199b4:	f800283a 	ret

000199b8 <__pack_d>:
   199b8:	20c00017 	ldw	r3,0(r4)
   199bc:	defffd04 	addi	sp,sp,-12
   199c0:	dc000015 	stw	r16,0(sp)
   199c4:	dc800215 	stw	r18,8(sp)
   199c8:	dc400115 	stw	r17,4(sp)
   199cc:	00800044 	movi	r2,1
   199d0:	22000317 	ldw	r8,12(r4)
   199d4:	001f883a 	mov	r15,zero
   199d8:	22400417 	ldw	r9,16(r4)
   199dc:	24000117 	ldw	r16,4(r4)
   199e0:	10c0552e 	bgeu	r2,r3,19b38 <__pack_d+0x180>
   199e4:	00800104 	movi	r2,4
   199e8:	18804f26 	beq	r3,r2,19b28 <__pack_d+0x170>
   199ec:	00800084 	movi	r2,2
   199f0:	18800226 	beq	r3,r2,199fc <__pack_d+0x44>
   199f4:	4244b03a 	or	r2,r8,r9
   199f8:	10001a1e 	bne	r2,zero,19a64 <__pack_d+0xac>
   199fc:	000d883a 	mov	r6,zero
   19a00:	000f883a 	mov	r7,zero
   19a04:	0011883a 	mov	r8,zero
   19a08:	00800434 	movhi	r2,16
   19a0c:	10bfffc4 	addi	r2,r2,-1
   19a10:	301d883a 	mov	r14,r6
   19a14:	3884703a 	and	r2,r7,r2
   19a18:	400a953a 	slli	r5,r8,20
   19a1c:	79bffc2c 	andhi	r6,r15,65520
   19a20:	308cb03a 	or	r6,r6,r2
   19a24:	00e00434 	movhi	r3,32784
   19a28:	18ffffc4 	addi	r3,r3,-1
   19a2c:	800497fa 	slli	r2,r16,31
   19a30:	30c6703a 	and	r3,r6,r3
   19a34:	1946b03a 	or	r3,r3,r5
   19a38:	01600034 	movhi	r5,32768
   19a3c:	297fffc4 	addi	r5,r5,-1
   19a40:	194a703a 	and	r5,r3,r5
   19a44:	288ab03a 	or	r5,r5,r2
   19a48:	2807883a 	mov	r3,r5
   19a4c:	7005883a 	mov	r2,r14
   19a50:	dc800217 	ldw	r18,8(sp)
   19a54:	dc400117 	ldw	r17,4(sp)
   19a58:	dc000017 	ldw	r16,0(sp)
   19a5c:	dec00304 	addi	sp,sp,12
   19a60:	f800283a 	ret
   19a64:	21000217 	ldw	r4,8(r4)
   19a68:	00bf0084 	movi	r2,-1022
   19a6c:	20803f16 	blt	r4,r2,19b6c <__pack_d+0x1b4>
   19a70:	0080ffc4 	movi	r2,1023
   19a74:	11002c16 	blt	r2,r4,19b28 <__pack_d+0x170>
   19a78:	00803fc4 	movi	r2,255
   19a7c:	408c703a 	and	r6,r8,r2
   19a80:	00802004 	movi	r2,128
   19a84:	0007883a 	mov	r3,zero
   19a88:	000f883a 	mov	r7,zero
   19a8c:	2280ffc4 	addi	r10,r4,1023
   19a90:	30801e26 	beq	r6,r2,19b0c <__pack_d+0x154>
   19a94:	00801fc4 	movi	r2,127
   19a98:	4089883a 	add	r4,r8,r2
   19a9c:	220d803a 	cmpltu	r6,r4,r8
   19aa0:	324d883a 	add	r6,r6,r9
   19aa4:	2011883a 	mov	r8,r4
   19aa8:	3013883a 	mov	r9,r6
   19aac:	00880034 	movhi	r2,8192
   19ab0:	10bfffc4 	addi	r2,r2,-1
   19ab4:	12400d36 	bltu	r2,r9,19aec <__pack_d+0x134>
   19ab8:	4804963a 	slli	r2,r9,24
   19abc:	400cd23a 	srli	r6,r8,8
   19ac0:	480ed23a 	srli	r7,r9,8
   19ac4:	013fffc4 	movi	r4,-1
   19ac8:	118cb03a 	or	r6,r2,r6
   19acc:	01400434 	movhi	r5,16
   19ad0:	297fffc4 	addi	r5,r5,-1
   19ad4:	3104703a 	and	r2,r6,r4
   19ad8:	3946703a 	and	r3,r7,r5
   19adc:	5201ffcc 	andi	r8,r10,2047
   19ae0:	100d883a 	mov	r6,r2
   19ae4:	180f883a 	mov	r7,r3
   19ae8:	003fc706 	br	19a08 <__pack_d+0x50>
   19aec:	480897fa 	slli	r4,r9,31
   19af0:	4004d07a 	srli	r2,r8,1
   19af4:	4806d07a 	srli	r3,r9,1
   19af8:	52800044 	addi	r10,r10,1
   19afc:	2084b03a 	or	r2,r4,r2
   19b00:	1011883a 	mov	r8,r2
   19b04:	1813883a 	mov	r9,r3
   19b08:	003feb06 	br	19ab8 <__pack_d+0x100>
   19b0c:	383fe11e 	bne	r7,zero,19a94 <__pack_d+0xdc>
   19b10:	01004004 	movi	r4,256
   19b14:	4104703a 	and	r2,r8,r4
   19b18:	10c4b03a 	or	r2,r2,r3
   19b1c:	103fe326 	beq	r2,zero,19aac <__pack_d+0xf4>
   19b20:	3005883a 	mov	r2,r6
   19b24:	003fdc06 	br	19a98 <__pack_d+0xe0>
   19b28:	000d883a 	mov	r6,zero
   19b2c:	000f883a 	mov	r7,zero
   19b30:	0201ffc4 	movi	r8,2047
   19b34:	003fb406 	br	19a08 <__pack_d+0x50>
   19b38:	0005883a 	mov	r2,zero
   19b3c:	00c00234 	movhi	r3,8
   19b40:	408cb03a 	or	r6,r8,r2
   19b44:	48ceb03a 	or	r7,r9,r3
   19b48:	013fffc4 	movi	r4,-1
   19b4c:	01400434 	movhi	r5,16
   19b50:	297fffc4 	addi	r5,r5,-1
   19b54:	3104703a 	and	r2,r6,r4
   19b58:	3946703a 	and	r3,r7,r5
   19b5c:	100d883a 	mov	r6,r2
   19b60:	180f883a 	mov	r7,r3
   19b64:	0201ffc4 	movi	r8,2047
   19b68:	003fa706 	br	19a08 <__pack_d+0x50>
   19b6c:	1109c83a 	sub	r4,r2,r4
   19b70:	00800e04 	movi	r2,56
   19b74:	11004316 	blt	r2,r4,19c84 <__pack_d+0x2cc>
   19b78:	21fff804 	addi	r7,r4,-32
   19b7c:	38004516 	blt	r7,zero,19c94 <__pack_d+0x2dc>
   19b80:	49d8d83a 	srl	r12,r9,r7
   19b84:	001b883a 	mov	r13,zero
   19b88:	0023883a 	mov	r17,zero
   19b8c:	01400044 	movi	r5,1
   19b90:	0025883a 	mov	r18,zero
   19b94:	38004716 	blt	r7,zero,19cb4 <__pack_d+0x2fc>
   19b98:	29d6983a 	sll	r11,r5,r7
   19b9c:	0015883a 	mov	r10,zero
   19ba0:	00bfffc4 	movi	r2,-1
   19ba4:	5089883a 	add	r4,r10,r2
   19ba8:	588b883a 	add	r5,r11,r2
   19bac:	228d803a 	cmpltu	r6,r4,r10
   19bb0:	314b883a 	add	r5,r6,r5
   19bb4:	4104703a 	and	r2,r8,r4
   19bb8:	4946703a 	and	r3,r9,r5
   19bbc:	10c4b03a 	or	r2,r2,r3
   19bc0:	10000226 	beq	r2,zero,19bcc <__pack_d+0x214>
   19bc4:	04400044 	movi	r17,1
   19bc8:	0025883a 	mov	r18,zero
   19bcc:	00803fc4 	movi	r2,255
   19bd0:	644eb03a 	or	r7,r12,r17
   19bd4:	3892703a 	and	r9,r7,r2
   19bd8:	00802004 	movi	r2,128
   19bdc:	6c90b03a 	or	r8,r13,r18
   19be0:	0015883a 	mov	r10,zero
   19be4:	48801626 	beq	r9,r2,19c40 <__pack_d+0x288>
   19be8:	01001fc4 	movi	r4,127
   19bec:	3905883a 	add	r2,r7,r4
   19bf0:	11cd803a 	cmpltu	r6,r2,r7
   19bf4:	320d883a 	add	r6,r6,r8
   19bf8:	100f883a 	mov	r7,r2
   19bfc:	00840034 	movhi	r2,4096
   19c00:	10bfffc4 	addi	r2,r2,-1
   19c04:	3011883a 	mov	r8,r6
   19c08:	0007883a 	mov	r3,zero
   19c0c:	11801b36 	bltu	r2,r6,19c7c <__pack_d+0x2c4>
   19c10:	4004963a 	slli	r2,r8,24
   19c14:	3808d23a 	srli	r4,r7,8
   19c18:	400ad23a 	srli	r5,r8,8
   19c1c:	1813883a 	mov	r9,r3
   19c20:	1108b03a 	or	r4,r2,r4
   19c24:	00bfffc4 	movi	r2,-1
   19c28:	00c00434 	movhi	r3,16
   19c2c:	18ffffc4 	addi	r3,r3,-1
   19c30:	208c703a 	and	r6,r4,r2
   19c34:	28ce703a 	and	r7,r5,r3
   19c38:	4a01ffcc 	andi	r8,r9,2047
   19c3c:	003f7206 	br	19a08 <__pack_d+0x50>
   19c40:	503fe91e 	bne	r10,zero,19be8 <__pack_d+0x230>
   19c44:	01004004 	movi	r4,256
   19c48:	3904703a 	and	r2,r7,r4
   19c4c:	0007883a 	mov	r3,zero
   19c50:	10c4b03a 	or	r2,r2,r3
   19c54:	10000626 	beq	r2,zero,19c70 <__pack_d+0x2b8>
   19c58:	3a45883a 	add	r2,r7,r9
   19c5c:	11cd803a 	cmpltu	r6,r2,r7
   19c60:	320d883a 	add	r6,r6,r8
   19c64:	100f883a 	mov	r7,r2
   19c68:	3011883a 	mov	r8,r6
   19c6c:	0007883a 	mov	r3,zero
   19c70:	00840034 	movhi	r2,4096
   19c74:	10bfffc4 	addi	r2,r2,-1
   19c78:	123fe52e 	bgeu	r2,r8,19c10 <__pack_d+0x258>
   19c7c:	00c00044 	movi	r3,1
   19c80:	003fe306 	br	19c10 <__pack_d+0x258>
   19c84:	0009883a 	mov	r4,zero
   19c88:	0013883a 	mov	r9,zero
   19c8c:	000b883a 	mov	r5,zero
   19c90:	003fe406 	br	19c24 <__pack_d+0x26c>
   19c94:	4a47883a 	add	r3,r9,r9
   19c98:	008007c4 	movi	r2,31
   19c9c:	1105c83a 	sub	r2,r2,r4
   19ca0:	1886983a 	sll	r3,r3,r2
   19ca4:	4118d83a 	srl	r12,r8,r4
   19ca8:	491ad83a 	srl	r13,r9,r4
   19cac:	1b18b03a 	or	r12,r3,r12
   19cb0:	003fb506 	br	19b88 <__pack_d+0x1d0>
   19cb4:	2806d07a 	srli	r3,r5,1
   19cb8:	008007c4 	movi	r2,31
   19cbc:	1105c83a 	sub	r2,r2,r4
   19cc0:	1896d83a 	srl	r11,r3,r2
   19cc4:	2914983a 	sll	r10,r5,r4
   19cc8:	003fb506 	br	19ba0 <__pack_d+0x1e8>

00019ccc <__unpack_d>:
   19ccc:	20c00117 	ldw	r3,4(r4)
   19cd0:	22400017 	ldw	r9,0(r4)
   19cd4:	00800434 	movhi	r2,16
   19cd8:	10bfffc4 	addi	r2,r2,-1
   19cdc:	1808d53a 	srli	r4,r3,20
   19ce0:	180cd7fa 	srli	r6,r3,31
   19ce4:	1894703a 	and	r10,r3,r2
   19ce8:	2201ffcc 	andi	r8,r4,2047
   19cec:	281b883a 	mov	r13,r5
   19cf0:	4817883a 	mov	r11,r9
   19cf4:	29800115 	stw	r6,4(r5)
   19cf8:	5019883a 	mov	r12,r10
   19cfc:	40001e1e 	bne	r8,zero,19d78 <__unpack_d+0xac>
   19d00:	4a84b03a 	or	r2,r9,r10
   19d04:	10001926 	beq	r2,zero,19d6c <__unpack_d+0xa0>
   19d08:	4804d63a 	srli	r2,r9,24
   19d0c:	500c923a 	slli	r6,r10,8
   19d10:	013f0084 	movi	r4,-1022
   19d14:	00c40034 	movhi	r3,4096
   19d18:	18ffffc4 	addi	r3,r3,-1
   19d1c:	118cb03a 	or	r6,r2,r6
   19d20:	008000c4 	movi	r2,3
   19d24:	480a923a 	slli	r5,r9,8
   19d28:	68800015 	stw	r2,0(r13)
   19d2c:	69000215 	stw	r4,8(r13)
   19d30:	19800b36 	bltu	r3,r6,19d60 <__unpack_d+0x94>
   19d34:	200f883a 	mov	r7,r4
   19d38:	1811883a 	mov	r8,r3
   19d3c:	2945883a 	add	r2,r5,r5
   19d40:	1149803a 	cmpltu	r4,r2,r5
   19d44:	3187883a 	add	r3,r6,r6
   19d48:	20c9883a 	add	r4,r4,r3
   19d4c:	100b883a 	mov	r5,r2
   19d50:	200d883a 	mov	r6,r4
   19d54:	39ffffc4 	addi	r7,r7,-1
   19d58:	413ff82e 	bgeu	r8,r4,19d3c <__unpack_d+0x70>
   19d5c:	69c00215 	stw	r7,8(r13)
   19d60:	69800415 	stw	r6,16(r13)
   19d64:	69400315 	stw	r5,12(r13)
   19d68:	f800283a 	ret
   19d6c:	00800084 	movi	r2,2
   19d70:	28800015 	stw	r2,0(r5)
   19d74:	f800283a 	ret
   19d78:	0081ffc4 	movi	r2,2047
   19d7c:	40800f26 	beq	r8,r2,19dbc <__unpack_d+0xf0>
   19d80:	480cd63a 	srli	r6,r9,24
   19d84:	5006923a 	slli	r3,r10,8
   19d88:	4804923a 	slli	r2,r9,8
   19d8c:	0009883a 	mov	r4,zero
   19d90:	30c6b03a 	or	r3,r6,r3
   19d94:	01440034 	movhi	r5,4096
   19d98:	110cb03a 	or	r6,r2,r4
   19d9c:	423f0044 	addi	r8,r8,-1023
   19da0:	194eb03a 	or	r7,r3,r5
   19da4:	008000c4 	movi	r2,3
   19da8:	69c00415 	stw	r7,16(r13)
   19dac:	6a000215 	stw	r8,8(r13)
   19db0:	68800015 	stw	r2,0(r13)
   19db4:	69800315 	stw	r6,12(r13)
   19db8:	f800283a 	ret
   19dbc:	4a84b03a 	or	r2,r9,r10
   19dc0:	1000031e 	bne	r2,zero,19dd0 <__unpack_d+0x104>
   19dc4:	00800104 	movi	r2,4
   19dc8:	28800015 	stw	r2,0(r5)
   19dcc:	f800283a 	ret
   19dd0:	0009883a 	mov	r4,zero
   19dd4:	01400234 	movhi	r5,8
   19dd8:	4904703a 	and	r2,r9,r4
   19ddc:	5146703a 	and	r3,r10,r5
   19de0:	10c4b03a 	or	r2,r2,r3
   19de4:	10000526 	beq	r2,zero,19dfc <__unpack_d+0x130>
   19de8:	00800044 	movi	r2,1
   19dec:	68800015 	stw	r2,0(r13)
   19df0:	6b000415 	stw	r12,16(r13)
   19df4:	6ac00315 	stw	r11,12(r13)
   19df8:	f800283a 	ret
   19dfc:	68000015 	stw	zero,0(r13)
   19e00:	003ffb06 	br	19df0 <__unpack_d+0x124>

00019e04 <__fpcmp_parts_d>:
   19e04:	21800017 	ldw	r6,0(r4)
   19e08:	00c00044 	movi	r3,1
   19e0c:	19800a2e 	bgeu	r3,r6,19e38 <__fpcmp_parts_d+0x34>
   19e10:	28800017 	ldw	r2,0(r5)
   19e14:	1880082e 	bgeu	r3,r2,19e38 <__fpcmp_parts_d+0x34>
   19e18:	00c00104 	movi	r3,4
   19e1c:	30c02626 	beq	r6,r3,19eb8 <__fpcmp_parts_d+0xb4>
   19e20:	10c02226 	beq	r2,r3,19eac <__fpcmp_parts_d+0xa8>
   19e24:	00c00084 	movi	r3,2
   19e28:	30c00526 	beq	r6,r3,19e40 <__fpcmp_parts_d+0x3c>
   19e2c:	10c0071e 	bne	r2,r3,19e4c <__fpcmp_parts_d+0x48>
   19e30:	20800117 	ldw	r2,4(r4)
   19e34:	1000091e 	bne	r2,zero,19e5c <__fpcmp_parts_d+0x58>
   19e38:	00800044 	movi	r2,1
   19e3c:	f800283a 	ret
   19e40:	10c01a1e 	bne	r2,r3,19eac <__fpcmp_parts_d+0xa8>
   19e44:	0005883a 	mov	r2,zero
   19e48:	f800283a 	ret
   19e4c:	22000117 	ldw	r8,4(r4)
   19e50:	28800117 	ldw	r2,4(r5)
   19e54:	40800326 	beq	r8,r2,19e64 <__fpcmp_parts_d+0x60>
   19e58:	403ff726 	beq	r8,zero,19e38 <__fpcmp_parts_d+0x34>
   19e5c:	00bfffc4 	movi	r2,-1
   19e60:	f800283a 	ret
   19e64:	20c00217 	ldw	r3,8(r4)
   19e68:	28800217 	ldw	r2,8(r5)
   19e6c:	10fffa16 	blt	r2,r3,19e58 <__fpcmp_parts_d+0x54>
   19e70:	18800916 	blt	r3,r2,19e98 <__fpcmp_parts_d+0x94>
   19e74:	21c00417 	ldw	r7,16(r4)
   19e78:	28c00417 	ldw	r3,16(r5)
   19e7c:	21800317 	ldw	r6,12(r4)
   19e80:	28800317 	ldw	r2,12(r5)
   19e84:	19fff436 	bltu	r3,r7,19e58 <__fpcmp_parts_d+0x54>
   19e88:	38c00526 	beq	r7,r3,19ea0 <__fpcmp_parts_d+0x9c>
   19e8c:	38c00236 	bltu	r7,r3,19e98 <__fpcmp_parts_d+0x94>
   19e90:	19ffec1e 	bne	r3,r7,19e44 <__fpcmp_parts_d+0x40>
   19e94:	30bfeb2e 	bgeu	r6,r2,19e44 <__fpcmp_parts_d+0x40>
   19e98:	403fe71e 	bne	r8,zero,19e38 <__fpcmp_parts_d+0x34>
   19e9c:	003fef06 	br	19e5c <__fpcmp_parts_d+0x58>
   19ea0:	11bffa2e 	bgeu	r2,r6,19e8c <__fpcmp_parts_d+0x88>
   19ea4:	403fe426 	beq	r8,zero,19e38 <__fpcmp_parts_d+0x34>
   19ea8:	003fec06 	br	19e5c <__fpcmp_parts_d+0x58>
   19eac:	28800117 	ldw	r2,4(r5)
   19eb0:	103fe11e 	bne	r2,zero,19e38 <__fpcmp_parts_d+0x34>
   19eb4:	003fe906 	br	19e5c <__fpcmp_parts_d+0x58>
   19eb8:	11bfdd1e 	bne	r2,r6,19e30 <__fpcmp_parts_d+0x2c>
   19ebc:	28c00117 	ldw	r3,4(r5)
   19ec0:	20800117 	ldw	r2,4(r4)
   19ec4:	1885c83a 	sub	r2,r3,r2
   19ec8:	f800283a 	ret

00019ecc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19ecc:	defff804 	addi	sp,sp,-32
   19ed0:	dfc00715 	stw	ra,28(sp)
   19ed4:	df000615 	stw	fp,24(sp)
   19ed8:	df000604 	addi	fp,sp,24
   19edc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19ee0:	e0bffc17 	ldw	r2,-16(fp)
   19ee4:	1004803a 	cmplt	r2,r2,zero
   19ee8:	1000091e 	bne	r2,zero,19f10 <close+0x44>
   19eec:	e13ffc17 	ldw	r4,-16(fp)
   19ef0:	01400304 	movi	r5,12
   19ef4:	00197dc0 	call	197dc <__mulsi3>
   19ef8:	1007883a 	mov	r3,r2
   19efc:	00800134 	movhi	r2,4
   19f00:	10a2f304 	addi	r2,r2,-29748
   19f04:	1887883a 	add	r3,r3,r2
   19f08:	e0ffff15 	stw	r3,-4(fp)
   19f0c:	00000106 	br	19f14 <close+0x48>
   19f10:	e03fff15 	stw	zero,-4(fp)
   19f14:	e0bfff17 	ldw	r2,-4(fp)
   19f18:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   19f1c:	e0bffb17 	ldw	r2,-20(fp)
   19f20:	1005003a 	cmpeq	r2,r2,zero
   19f24:	10001d1e 	bne	r2,zero,19f9c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19f28:	e0bffb17 	ldw	r2,-20(fp)
   19f2c:	10800017 	ldw	r2,0(r2)
   19f30:	10800417 	ldw	r2,16(r2)
   19f34:	1005003a 	cmpeq	r2,r2,zero
   19f38:	1000071e 	bne	r2,zero,19f58 <close+0x8c>
   19f3c:	e0bffb17 	ldw	r2,-20(fp)
   19f40:	10800017 	ldw	r2,0(r2)
   19f44:	10800417 	ldw	r2,16(r2)
   19f48:	e13ffb17 	ldw	r4,-20(fp)
   19f4c:	103ee83a 	callr	r2
   19f50:	e0bffe15 	stw	r2,-8(fp)
   19f54:	00000106 	br	19f5c <close+0x90>
   19f58:	e03ffe15 	stw	zero,-8(fp)
   19f5c:	e0bffe17 	ldw	r2,-8(fp)
   19f60:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19f64:	e13ffc17 	ldw	r4,-16(fp)
   19f68:	001a7240 	call	1a724 <alt_release_fd>
    if (rval < 0)
   19f6c:	e0bffa17 	ldw	r2,-24(fp)
   19f70:	1004403a 	cmpge	r2,r2,zero
   19f74:	1000071e 	bne	r2,zero,19f94 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   19f78:	0019fcc0 	call	19fcc <alt_get_errno>
   19f7c:	e0fffa17 	ldw	r3,-24(fp)
   19f80:	00c7c83a 	sub	r3,zero,r3
   19f84:	10c00015 	stw	r3,0(r2)
      return -1;
   19f88:	00bfffc4 	movi	r2,-1
   19f8c:	e0bffd15 	stw	r2,-12(fp)
   19f90:	00000806 	br	19fb4 <close+0xe8>
    }
    return 0;
   19f94:	e03ffd15 	stw	zero,-12(fp)
   19f98:	00000606 	br	19fb4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19f9c:	0019fcc0 	call	19fcc <alt_get_errno>
   19fa0:	1007883a 	mov	r3,r2
   19fa4:	00801444 	movi	r2,81
   19fa8:	18800015 	stw	r2,0(r3)
    return -1;
   19fac:	00bfffc4 	movi	r2,-1
   19fb0:	e0bffd15 	stw	r2,-12(fp)
   19fb4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   19fb8:	e037883a 	mov	sp,fp
   19fbc:	dfc00117 	ldw	ra,4(sp)
   19fc0:	df000017 	ldw	fp,0(sp)
   19fc4:	dec00204 	addi	sp,sp,8
   19fc8:	f800283a 	ret

00019fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19fcc:	defffd04 	addi	sp,sp,-12
   19fd0:	dfc00215 	stw	ra,8(sp)
   19fd4:	df000115 	stw	fp,4(sp)
   19fd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   19fdc:	00800134 	movhi	r2,4
   19fe0:	10a77604 	addi	r2,r2,-25128
   19fe4:	10800017 	ldw	r2,0(r2)
   19fe8:	1005003a 	cmpeq	r2,r2,zero
   19fec:	1000061e 	bne	r2,zero,1a008 <alt_get_errno+0x3c>
   19ff0:	00800134 	movhi	r2,4
   19ff4:	10a77604 	addi	r2,r2,-25128
   19ff8:	10800017 	ldw	r2,0(r2)
   19ffc:	103ee83a 	callr	r2
   1a000:	e0bfff15 	stw	r2,-4(fp)
   1a004:	00000306 	br	1a014 <alt_get_errno+0x48>
   1a008:	00800134 	movhi	r2,4
   1a00c:	10a78604 	addi	r2,r2,-25064
   1a010:	e0bfff15 	stw	r2,-4(fp)
   1a014:	e0bfff17 	ldw	r2,-4(fp)
}
   1a018:	e037883a 	mov	sp,fp
   1a01c:	dfc00117 	ldw	ra,4(sp)
   1a020:	df000017 	ldw	fp,0(sp)
   1a024:	dec00204 	addi	sp,sp,8
   1a028:	f800283a 	ret

0001a02c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1a02c:	defffc04 	addi	sp,sp,-16
   1a030:	df000315 	stw	fp,12(sp)
   1a034:	df000304 	addi	fp,sp,12
   1a038:	e13ffd15 	stw	r4,-12(fp)
   1a03c:	e17ffe15 	stw	r5,-8(fp)
   1a040:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1a044:	e0bfff17 	ldw	r2,-4(fp)
}
   1a048:	e037883a 	mov	sp,fp
   1a04c:	df000017 	ldw	fp,0(sp)
   1a050:	dec00104 	addi	sp,sp,4
   1a054:	f800283a 	ret

0001a058 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1a058:	defff904 	addi	sp,sp,-28
   1a05c:	dfc00615 	stw	ra,24(sp)
   1a060:	df000515 	stw	fp,20(sp)
   1a064:	df000504 	addi	fp,sp,20
   1a068:	e13ffc15 	stw	r4,-16(fp)
   1a06c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a070:	e0bffc17 	ldw	r2,-16(fp)
   1a074:	1004803a 	cmplt	r2,r2,zero
   1a078:	1000091e 	bne	r2,zero,1a0a0 <fstat+0x48>
   1a07c:	e13ffc17 	ldw	r4,-16(fp)
   1a080:	01400304 	movi	r5,12
   1a084:	00197dc0 	call	197dc <__mulsi3>
   1a088:	1007883a 	mov	r3,r2
   1a08c:	00800134 	movhi	r2,4
   1a090:	10a2f304 	addi	r2,r2,-29748
   1a094:	1887883a 	add	r3,r3,r2
   1a098:	e0ffff15 	stw	r3,-4(fp)
   1a09c:	00000106 	br	1a0a4 <fstat+0x4c>
   1a0a0:	e03fff15 	stw	zero,-4(fp)
   1a0a4:	e0bfff17 	ldw	r2,-4(fp)
   1a0a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a0ac:	e0bffb17 	ldw	r2,-20(fp)
   1a0b0:	1005003a 	cmpeq	r2,r2,zero
   1a0b4:	1000121e 	bne	r2,zero,1a100 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1a0b8:	e0bffb17 	ldw	r2,-20(fp)
   1a0bc:	10800017 	ldw	r2,0(r2)
   1a0c0:	10800817 	ldw	r2,32(r2)
   1a0c4:	1005003a 	cmpeq	r2,r2,zero
   1a0c8:	1000081e 	bne	r2,zero,1a0ec <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   1a0cc:	e0bffb17 	ldw	r2,-20(fp)
   1a0d0:	10800017 	ldw	r2,0(r2)
   1a0d4:	10800817 	ldw	r2,32(r2)
   1a0d8:	e13ffb17 	ldw	r4,-20(fp)
   1a0dc:	e17ffd17 	ldw	r5,-12(fp)
   1a0e0:	103ee83a 	callr	r2
   1a0e4:	e0bffe15 	stw	r2,-8(fp)
   1a0e8:	00000b06 	br	1a118 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1a0ec:	e0fffd17 	ldw	r3,-12(fp)
   1a0f0:	00880004 	movi	r2,8192
   1a0f4:	18800115 	stw	r2,4(r3)
      return 0;
   1a0f8:	e03ffe15 	stw	zero,-8(fp)
   1a0fc:	00000606 	br	1a118 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a100:	001a1300 	call	1a130 <alt_get_errno>
   1a104:	1007883a 	mov	r3,r2
   1a108:	00801444 	movi	r2,81
   1a10c:	18800015 	stw	r2,0(r3)
    return -1;
   1a110:	00bfffc4 	movi	r2,-1
   1a114:	e0bffe15 	stw	r2,-8(fp)
   1a118:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1a11c:	e037883a 	mov	sp,fp
   1a120:	dfc00117 	ldw	ra,4(sp)
   1a124:	df000017 	ldw	fp,0(sp)
   1a128:	dec00204 	addi	sp,sp,8
   1a12c:	f800283a 	ret

0001a130 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a130:	defffd04 	addi	sp,sp,-12
   1a134:	dfc00215 	stw	ra,8(sp)
   1a138:	df000115 	stw	fp,4(sp)
   1a13c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a140:	00800134 	movhi	r2,4
   1a144:	10a77604 	addi	r2,r2,-25128
   1a148:	10800017 	ldw	r2,0(r2)
   1a14c:	1005003a 	cmpeq	r2,r2,zero
   1a150:	1000061e 	bne	r2,zero,1a16c <alt_get_errno+0x3c>
   1a154:	00800134 	movhi	r2,4
   1a158:	10a77604 	addi	r2,r2,-25128
   1a15c:	10800017 	ldw	r2,0(r2)
   1a160:	103ee83a 	callr	r2
   1a164:	e0bfff15 	stw	r2,-4(fp)
   1a168:	00000306 	br	1a178 <alt_get_errno+0x48>
   1a16c:	00800134 	movhi	r2,4
   1a170:	10a78604 	addi	r2,r2,-25064
   1a174:	e0bfff15 	stw	r2,-4(fp)
   1a178:	e0bfff17 	ldw	r2,-4(fp)
}
   1a17c:	e037883a 	mov	sp,fp
   1a180:	dfc00117 	ldw	ra,4(sp)
   1a184:	df000017 	ldw	fp,0(sp)
   1a188:	dec00204 	addi	sp,sp,8
   1a18c:	f800283a 	ret

0001a190 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1a190:	deffeb04 	addi	sp,sp,-84
   1a194:	dfc01415 	stw	ra,80(sp)
   1a198:	df001315 	stw	fp,76(sp)
   1a19c:	df001304 	addi	fp,sp,76
   1a1a0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a1a4:	e0bffd17 	ldw	r2,-12(fp)
   1a1a8:	1004803a 	cmplt	r2,r2,zero
   1a1ac:	1000091e 	bne	r2,zero,1a1d4 <isatty+0x44>
   1a1b0:	e13ffd17 	ldw	r4,-12(fp)
   1a1b4:	01400304 	movi	r5,12
   1a1b8:	00197dc0 	call	197dc <__mulsi3>
   1a1bc:	1007883a 	mov	r3,r2
   1a1c0:	00800134 	movhi	r2,4
   1a1c4:	10a2f304 	addi	r2,r2,-29748
   1a1c8:	1887883a 	add	r3,r3,r2
   1a1cc:	e0ffff15 	stw	r3,-4(fp)
   1a1d0:	00000106 	br	1a1d8 <isatty+0x48>
   1a1d4:	e03fff15 	stw	zero,-4(fp)
   1a1d8:	e0bfff17 	ldw	r2,-4(fp)
   1a1dc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   1a1e0:	e0bfed17 	ldw	r2,-76(fp)
   1a1e4:	1005003a 	cmpeq	r2,r2,zero
   1a1e8:	10000f1e 	bne	r2,zero,1a228 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1a1ec:	e0bfed17 	ldw	r2,-76(fp)
   1a1f0:	10800017 	ldw	r2,0(r2)
   1a1f4:	10800817 	ldw	r2,32(r2)
   1a1f8:	1004c03a 	cmpne	r2,r2,zero
   1a1fc:	1000031e 	bne	r2,zero,1a20c <isatty+0x7c>
    {
      return 1;
   1a200:	00800044 	movi	r2,1
   1a204:	e0bffe15 	stw	r2,-8(fp)
   1a208:	00000c06 	br	1a23c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1a20c:	e17fee04 	addi	r5,fp,-72
   1a210:	e13ffd17 	ldw	r4,-12(fp)
   1a214:	001a0580 	call	1a058 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1a218:	e0bfef17 	ldw	r2,-68(fp)
   1a21c:	10880020 	cmpeqi	r2,r2,8192
   1a220:	e0bffe15 	stw	r2,-8(fp)
   1a224:	00000506 	br	1a23c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a228:	001a2540 	call	1a254 <alt_get_errno>
   1a22c:	1007883a 	mov	r3,r2
   1a230:	00801444 	movi	r2,81
   1a234:	18800015 	stw	r2,0(r3)
    return 0;
   1a238:	e03ffe15 	stw	zero,-8(fp)
   1a23c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1a240:	e037883a 	mov	sp,fp
   1a244:	dfc00117 	ldw	ra,4(sp)
   1a248:	df000017 	ldw	fp,0(sp)
   1a24c:	dec00204 	addi	sp,sp,8
   1a250:	f800283a 	ret

0001a254 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a254:	defffd04 	addi	sp,sp,-12
   1a258:	dfc00215 	stw	ra,8(sp)
   1a25c:	df000115 	stw	fp,4(sp)
   1a260:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a264:	00800134 	movhi	r2,4
   1a268:	10a77604 	addi	r2,r2,-25128
   1a26c:	10800017 	ldw	r2,0(r2)
   1a270:	1005003a 	cmpeq	r2,r2,zero
   1a274:	1000061e 	bne	r2,zero,1a290 <alt_get_errno+0x3c>
   1a278:	00800134 	movhi	r2,4
   1a27c:	10a77604 	addi	r2,r2,-25128
   1a280:	10800017 	ldw	r2,0(r2)
   1a284:	103ee83a 	callr	r2
   1a288:	e0bfff15 	stw	r2,-4(fp)
   1a28c:	00000306 	br	1a29c <alt_get_errno+0x48>
   1a290:	00800134 	movhi	r2,4
   1a294:	10a78604 	addi	r2,r2,-25064
   1a298:	e0bfff15 	stw	r2,-4(fp)
   1a29c:	e0bfff17 	ldw	r2,-4(fp)
}
   1a2a0:	e037883a 	mov	sp,fp
   1a2a4:	dfc00117 	ldw	ra,4(sp)
   1a2a8:	df000017 	ldw	fp,0(sp)
   1a2ac:	dec00204 	addi	sp,sp,8
   1a2b0:	f800283a 	ret

0001a2b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1a2b4:	defffe04 	addi	sp,sp,-8
   1a2b8:	dfc00115 	stw	ra,4(sp)
   1a2bc:	df000015 	stw	fp,0(sp)
   1a2c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1a2c4:	010000b4 	movhi	r4,2
   1a2c8:	21326c04 	addi	r4,r4,-13904
   1a2cc:	01400134 	movhi	r5,4
   1a2d0:	2960e404 	addi	r5,r5,-31856
   1a2d4:	01800134 	movhi	r6,4
   1a2d8:	31a77b04 	addi	r6,r6,-25108
   1a2dc:	001a3340 	call	1a334 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a2e0:	01000074 	movhi	r4,1
   1a2e4:	21000804 	addi	r4,r4,32
   1a2e8:	01400074 	movhi	r5,1
   1a2ec:	29400804 	addi	r5,r5,32
   1a2f0:	01800074 	movhi	r6,1
   1a2f4:	31806d04 	addi	r6,r6,436
   1a2f8:	001a3340 	call	1a334 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a2fc:	01000134 	movhi	r4,4
   1a300:	21200004 	addi	r4,r4,-32768
   1a304:	01400134 	movhi	r5,4
   1a308:	29600004 	addi	r5,r5,-32768
   1a30c:	01800134 	movhi	r6,4
   1a310:	31a0e404 	addi	r6,r6,-31856
   1a314:	001a3340 	call	1a334 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a318:	001b7a40 	call	1b7a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a31c:	001b99c0 	call	1b99c <alt_icache_flush_all>
}
   1a320:	e037883a 	mov	sp,fp
   1a324:	dfc00117 	ldw	ra,4(sp)
   1a328:	df000017 	ldw	fp,0(sp)
   1a32c:	dec00204 	addi	sp,sp,8
   1a330:	f800283a 	ret

0001a334 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1a334:	defffc04 	addi	sp,sp,-16
   1a338:	df000315 	stw	fp,12(sp)
   1a33c:	df000304 	addi	fp,sp,12
   1a340:	e13ffd15 	stw	r4,-12(fp)
   1a344:	e17ffe15 	stw	r5,-8(fp)
   1a348:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1a34c:	e0fffe17 	ldw	r3,-8(fp)
   1a350:	e0bffd17 	ldw	r2,-12(fp)
   1a354:	18800e26 	beq	r3,r2,1a390 <alt_load_section+0x5c>
  {
    while( to != end )
   1a358:	00000a06 	br	1a384 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1a35c:	e0bffd17 	ldw	r2,-12(fp)
   1a360:	10c00017 	ldw	r3,0(r2)
   1a364:	e0bffe17 	ldw	r2,-8(fp)
   1a368:	10c00015 	stw	r3,0(r2)
   1a36c:	e0bffe17 	ldw	r2,-8(fp)
   1a370:	10800104 	addi	r2,r2,4
   1a374:	e0bffe15 	stw	r2,-8(fp)
   1a378:	e0bffd17 	ldw	r2,-12(fp)
   1a37c:	10800104 	addi	r2,r2,4
   1a380:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1a384:	e0fffe17 	ldw	r3,-8(fp)
   1a388:	e0bfff17 	ldw	r2,-4(fp)
   1a38c:	18bff31e 	bne	r3,r2,1a35c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1a390:	e037883a 	mov	sp,fp
   1a394:	df000017 	ldw	fp,0(sp)
   1a398:	dec00104 	addi	sp,sp,4
   1a39c:	f800283a 	ret

0001a3a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a3a0:	defff804 	addi	sp,sp,-32
   1a3a4:	dfc00715 	stw	ra,28(sp)
   1a3a8:	df000615 	stw	fp,24(sp)
   1a3ac:	df000604 	addi	fp,sp,24
   1a3b0:	e13ffc15 	stw	r4,-16(fp)
   1a3b4:	e17ffd15 	stw	r5,-12(fp)
   1a3b8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a3bc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a3c0:	e0bffc17 	ldw	r2,-16(fp)
   1a3c4:	1004803a 	cmplt	r2,r2,zero
   1a3c8:	1000091e 	bne	r2,zero,1a3f0 <lseek+0x50>
   1a3cc:	e13ffc17 	ldw	r4,-16(fp)
   1a3d0:	01400304 	movi	r5,12
   1a3d4:	00197dc0 	call	197dc <__mulsi3>
   1a3d8:	1007883a 	mov	r3,r2
   1a3dc:	00800134 	movhi	r2,4
   1a3e0:	10a2f304 	addi	r2,r2,-29748
   1a3e4:	1887883a 	add	r3,r3,r2
   1a3e8:	e0ffff15 	stw	r3,-4(fp)
   1a3ec:	00000106 	br	1a3f4 <lseek+0x54>
   1a3f0:	e03fff15 	stw	zero,-4(fp)
   1a3f4:	e0bfff17 	ldw	r2,-4(fp)
   1a3f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   1a3fc:	e0bffb17 	ldw	r2,-20(fp)
   1a400:	1005003a 	cmpeq	r2,r2,zero
   1a404:	1000111e 	bne	r2,zero,1a44c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a408:	e0bffb17 	ldw	r2,-20(fp)
   1a40c:	10800017 	ldw	r2,0(r2)
   1a410:	10800717 	ldw	r2,28(r2)
   1a414:	1005003a 	cmpeq	r2,r2,zero
   1a418:	1000091e 	bne	r2,zero,1a440 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a41c:	e0bffb17 	ldw	r2,-20(fp)
   1a420:	10800017 	ldw	r2,0(r2)
   1a424:	10800717 	ldw	r2,28(r2)
   1a428:	e13ffb17 	ldw	r4,-20(fp)
   1a42c:	e17ffd17 	ldw	r5,-12(fp)
   1a430:	e1bffe17 	ldw	r6,-8(fp)
   1a434:	103ee83a 	callr	r2
   1a438:	e0bffa15 	stw	r2,-24(fp)
   1a43c:	00000506 	br	1a454 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a440:	00bfde84 	movi	r2,-134
   1a444:	e0bffa15 	stw	r2,-24(fp)
   1a448:	00000206 	br	1a454 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a44c:	00bfebc4 	movi	r2,-81
   1a450:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   1a454:	e0bffa17 	ldw	r2,-24(fp)
   1a458:	1004403a 	cmpge	r2,r2,zero
   1a45c:	1000071e 	bne	r2,zero,1a47c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   1a460:	001a4940 	call	1a494 <alt_get_errno>
   1a464:	1007883a 	mov	r3,r2
   1a468:	e0bffa17 	ldw	r2,-24(fp)
   1a46c:	0085c83a 	sub	r2,zero,r2
   1a470:	18800015 	stw	r2,0(r3)
    rc = -1;
   1a474:	00bfffc4 	movi	r2,-1
   1a478:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   1a47c:	e0bffa17 	ldw	r2,-24(fp)
}
   1a480:	e037883a 	mov	sp,fp
   1a484:	dfc00117 	ldw	ra,4(sp)
   1a488:	df000017 	ldw	fp,0(sp)
   1a48c:	dec00204 	addi	sp,sp,8
   1a490:	f800283a 	ret

0001a494 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a494:	defffd04 	addi	sp,sp,-12
   1a498:	dfc00215 	stw	ra,8(sp)
   1a49c:	df000115 	stw	fp,4(sp)
   1a4a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a4a4:	00800134 	movhi	r2,4
   1a4a8:	10a77604 	addi	r2,r2,-25128
   1a4ac:	10800017 	ldw	r2,0(r2)
   1a4b0:	1005003a 	cmpeq	r2,r2,zero
   1a4b4:	1000061e 	bne	r2,zero,1a4d0 <alt_get_errno+0x3c>
   1a4b8:	00800134 	movhi	r2,4
   1a4bc:	10a77604 	addi	r2,r2,-25128
   1a4c0:	10800017 	ldw	r2,0(r2)
   1a4c4:	103ee83a 	callr	r2
   1a4c8:	e0bfff15 	stw	r2,-4(fp)
   1a4cc:	00000306 	br	1a4dc <alt_get_errno+0x48>
   1a4d0:	00800134 	movhi	r2,4
   1a4d4:	10a78604 	addi	r2,r2,-25064
   1a4d8:	e0bfff15 	stw	r2,-4(fp)
   1a4dc:	e0bfff17 	ldw	r2,-4(fp)
}
   1a4e0:	e037883a 	mov	sp,fp
   1a4e4:	dfc00117 	ldw	ra,4(sp)
   1a4e8:	df000017 	ldw	fp,0(sp)
   1a4ec:	dec00204 	addi	sp,sp,8
   1a4f0:	f800283a 	ret

0001a4f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a4f4:	defffd04 	addi	sp,sp,-12
   1a4f8:	dfc00215 	stw	ra,8(sp)
   1a4fc:	df000115 	stw	fp,4(sp)
   1a500:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a504:	0009883a 	mov	r4,zero
   1a508:	001a9dc0 	call	1a9dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a50c:	001aa100 	call	1aa10 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a510:	01000134 	movhi	r4,4
   1a514:	2120dc04 	addi	r4,r4,-31888
   1a518:	01400134 	movhi	r5,4
   1a51c:	2960dc04 	addi	r5,r5,-31888
   1a520:	01800134 	movhi	r6,4
   1a524:	31a0dc04 	addi	r6,r6,-31888
   1a528:	001bd700 	call	1bd70 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a52c:	001b8d40 	call	1b8d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a530:	010000b4 	movhi	r4,2
   1a534:	212e4e04 	addi	r4,r4,-18120
   1a538:	001c5a40 	call	1c5a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a53c:	d1201c17 	ldw	r4,-32656(gp)
   1a540:	d1601d17 	ldw	r5,-32652(gp)
   1a544:	d1a01e17 	ldw	r6,-32648(gp)
   1a548:	00103740 	call	10374 <main>
   1a54c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a550:	01000044 	movi	r4,1
   1a554:	0019ecc0 	call	19ecc <close>
  exit (result);
   1a558:	e13fff17 	ldw	r4,-4(fp)
   1a55c:	001c5b80 	call	1c5b8 <exit>

0001a560 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a560:	defffe04 	addi	sp,sp,-8
   1a564:	df000115 	stw	fp,4(sp)
   1a568:	df000104 	addi	fp,sp,4
   1a56c:	e13fff15 	stw	r4,-4(fp)
}
   1a570:	e037883a 	mov	sp,fp
   1a574:	df000017 	ldw	fp,0(sp)
   1a578:	dec00104 	addi	sp,sp,4
   1a57c:	f800283a 	ret

0001a580 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a580:	defffe04 	addi	sp,sp,-8
   1a584:	df000115 	stw	fp,4(sp)
   1a588:	df000104 	addi	fp,sp,4
   1a58c:	e13fff15 	stw	r4,-4(fp)
}
   1a590:	e037883a 	mov	sp,fp
   1a594:	df000017 	ldw	fp,0(sp)
   1a598:	dec00104 	addi	sp,sp,4
   1a59c:	f800283a 	ret

0001a5a0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a5a0:	defff704 	addi	sp,sp,-36
   1a5a4:	dfc00815 	stw	ra,32(sp)
   1a5a8:	df000715 	stw	fp,28(sp)
   1a5ac:	df000704 	addi	fp,sp,28
   1a5b0:	e13ffb15 	stw	r4,-20(fp)
   1a5b4:	e17ffc15 	stw	r5,-16(fp)
   1a5b8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a5bc:	e0bffb17 	ldw	r2,-20(fp)
   1a5c0:	1004803a 	cmplt	r2,r2,zero
   1a5c4:	1000091e 	bne	r2,zero,1a5ec <read+0x4c>
   1a5c8:	e13ffb17 	ldw	r4,-20(fp)
   1a5cc:	01400304 	movi	r5,12
   1a5d0:	00197dc0 	call	197dc <__mulsi3>
   1a5d4:	1007883a 	mov	r3,r2
   1a5d8:	00800134 	movhi	r2,4
   1a5dc:	10a2f304 	addi	r2,r2,-29748
   1a5e0:	1887883a 	add	r3,r3,r2
   1a5e4:	e0ffff15 	stw	r3,-4(fp)
   1a5e8:	00000106 	br	1a5f0 <read+0x50>
   1a5ec:	e03fff15 	stw	zero,-4(fp)
   1a5f0:	e0bfff17 	ldw	r2,-4(fp)
   1a5f4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1a5f8:	e0bffa17 	ldw	r2,-24(fp)
   1a5fc:	1005003a 	cmpeq	r2,r2,zero
   1a600:	1000241e 	bne	r2,zero,1a694 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a604:	e0bffa17 	ldw	r2,-24(fp)
   1a608:	10800217 	ldw	r2,8(r2)
   1a60c:	108000cc 	andi	r2,r2,3
   1a610:	10800060 	cmpeqi	r2,r2,1
   1a614:	10001a1e 	bne	r2,zero,1a680 <read+0xe0>
   1a618:	e0bffa17 	ldw	r2,-24(fp)
   1a61c:	10800017 	ldw	r2,0(r2)
   1a620:	10800517 	ldw	r2,20(r2)
   1a624:	1005003a 	cmpeq	r2,r2,zero
   1a628:	1000151e 	bne	r2,zero,1a680 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a62c:	e0bffa17 	ldw	r2,-24(fp)
   1a630:	10800017 	ldw	r2,0(r2)
   1a634:	10800517 	ldw	r2,20(r2)
   1a638:	e17ffc17 	ldw	r5,-16(fp)
   1a63c:	e1bffd17 	ldw	r6,-12(fp)
   1a640:	e13ffa17 	ldw	r4,-24(fp)
   1a644:	103ee83a 	callr	r2
   1a648:	e0bff915 	stw	r2,-28(fp)
   1a64c:	e0bff917 	ldw	r2,-28(fp)
   1a650:	1004403a 	cmpge	r2,r2,zero
   1a654:	1000071e 	bne	r2,zero,1a674 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   1a658:	001a6c40 	call	1a6c4 <alt_get_errno>
   1a65c:	e0fff917 	ldw	r3,-28(fp)
   1a660:	00c7c83a 	sub	r3,zero,r3
   1a664:	10c00015 	stw	r3,0(r2)
          return -1;
   1a668:	00bfffc4 	movi	r2,-1
   1a66c:	e0bffe15 	stw	r2,-8(fp)
   1a670:	00000e06 	br	1a6ac <read+0x10c>
        }
        return rval;
   1a674:	e0bff917 	ldw	r2,-28(fp)
   1a678:	e0bffe15 	stw	r2,-8(fp)
   1a67c:	00000b06 	br	1a6ac <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a680:	001a6c40 	call	1a6c4 <alt_get_errno>
   1a684:	1007883a 	mov	r3,r2
   1a688:	00800344 	movi	r2,13
   1a68c:	18800015 	stw	r2,0(r3)
   1a690:	00000406 	br	1a6a4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a694:	001a6c40 	call	1a6c4 <alt_get_errno>
   1a698:	1007883a 	mov	r3,r2
   1a69c:	00801444 	movi	r2,81
   1a6a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a6a4:	00bfffc4 	movi	r2,-1
   1a6a8:	e0bffe15 	stw	r2,-8(fp)
   1a6ac:	e0bffe17 	ldw	r2,-8(fp)
}
   1a6b0:	e037883a 	mov	sp,fp
   1a6b4:	dfc00117 	ldw	ra,4(sp)
   1a6b8:	df000017 	ldw	fp,0(sp)
   1a6bc:	dec00204 	addi	sp,sp,8
   1a6c0:	f800283a 	ret

0001a6c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a6c4:	defffd04 	addi	sp,sp,-12
   1a6c8:	dfc00215 	stw	ra,8(sp)
   1a6cc:	df000115 	stw	fp,4(sp)
   1a6d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a6d4:	00800134 	movhi	r2,4
   1a6d8:	10a77604 	addi	r2,r2,-25128
   1a6dc:	10800017 	ldw	r2,0(r2)
   1a6e0:	1005003a 	cmpeq	r2,r2,zero
   1a6e4:	1000061e 	bne	r2,zero,1a700 <alt_get_errno+0x3c>
   1a6e8:	00800134 	movhi	r2,4
   1a6ec:	10a77604 	addi	r2,r2,-25128
   1a6f0:	10800017 	ldw	r2,0(r2)
   1a6f4:	103ee83a 	callr	r2
   1a6f8:	e0bfff15 	stw	r2,-4(fp)
   1a6fc:	00000306 	br	1a70c <alt_get_errno+0x48>
   1a700:	00800134 	movhi	r2,4
   1a704:	10a78604 	addi	r2,r2,-25064
   1a708:	e0bfff15 	stw	r2,-4(fp)
   1a70c:	e0bfff17 	ldw	r2,-4(fp)
}
   1a710:	e037883a 	mov	sp,fp
   1a714:	dfc00117 	ldw	ra,4(sp)
   1a718:	df000017 	ldw	fp,0(sp)
   1a71c:	dec00204 	addi	sp,sp,8
   1a720:	f800283a 	ret

0001a724 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a724:	defffc04 	addi	sp,sp,-16
   1a728:	dfc00315 	stw	ra,12(sp)
   1a72c:	df000215 	stw	fp,8(sp)
   1a730:	dc000115 	stw	r16,4(sp)
   1a734:	df000104 	addi	fp,sp,4
   1a738:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a73c:	e0bfff17 	ldw	r2,-4(fp)
   1a740:	108000d0 	cmplti	r2,r2,3
   1a744:	10000f1e 	bne	r2,zero,1a784 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a748:	e13fff17 	ldw	r4,-4(fp)
   1a74c:	04000134 	movhi	r16,4
   1a750:	8422f304 	addi	r16,r16,-29748
   1a754:	01400304 	movi	r5,12
   1a758:	00197dc0 	call	197dc <__mulsi3>
   1a75c:	1405883a 	add	r2,r2,r16
   1a760:	10800204 	addi	r2,r2,8
   1a764:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a768:	e13fff17 	ldw	r4,-4(fp)
   1a76c:	04000134 	movhi	r16,4
   1a770:	8422f304 	addi	r16,r16,-29748
   1a774:	01400304 	movi	r5,12
   1a778:	00197dc0 	call	197dc <__mulsi3>
   1a77c:	1405883a 	add	r2,r2,r16
   1a780:	10000015 	stw	zero,0(r2)
  }
}
   1a784:	e037883a 	mov	sp,fp
   1a788:	dfc00217 	ldw	ra,8(sp)
   1a78c:	df000117 	ldw	fp,4(sp)
   1a790:	dc000017 	ldw	r16,0(sp)
   1a794:	dec00304 	addi	sp,sp,12
   1a798:	f800283a 	ret

0001a79c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a79c:	defff804 	addi	sp,sp,-32
   1a7a0:	df000715 	stw	fp,28(sp)
   1a7a4:	df000704 	addi	fp,sp,28
   1a7a8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a7ac:	0005303a 	rdctl	r2,status
   1a7b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a7b4:	e0fffb17 	ldw	r3,-20(fp)
   1a7b8:	00bfff84 	movi	r2,-2
   1a7bc:	1884703a 	and	r2,r3,r2
   1a7c0:	1001703a 	wrctl	status,r2
  
  return context;
   1a7c4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a7c8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a7cc:	d0a00c17 	ldw	r2,-32720(gp)
   1a7d0:	10c000c4 	addi	r3,r2,3
   1a7d4:	00bfff04 	movi	r2,-4
   1a7d8:	1884703a 	and	r2,r3,r2
   1a7dc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a7e0:	d0e00c17 	ldw	r3,-32720(gp)
   1a7e4:	e0bffe17 	ldw	r2,-8(fp)
   1a7e8:	1887883a 	add	r3,r3,r2
   1a7ec:	00800134 	movhi	r2,4
   1a7f0:	10800004 	addi	r2,r2,0
   1a7f4:	10c0072e 	bgeu	r2,r3,1a814 <sbrk+0x78>
   1a7f8:	e0bffd17 	ldw	r2,-12(fp)
   1a7fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a800:	e0bffa17 	ldw	r2,-24(fp)
   1a804:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a808:	00bfffc4 	movi	r2,-1
   1a80c:	e0bfff15 	stw	r2,-4(fp)
   1a810:	00000c06 	br	1a844 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1a814:	d0a00c17 	ldw	r2,-32720(gp)
   1a818:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   1a81c:	d0e00c17 	ldw	r3,-32720(gp)
   1a820:	e0bffe17 	ldw	r2,-8(fp)
   1a824:	1885883a 	add	r2,r3,r2
   1a828:	d0a00c15 	stw	r2,-32720(gp)
   1a82c:	e0bffd17 	ldw	r2,-12(fp)
   1a830:	e0bff915 	stw	r2,-28(fp)
   1a834:	e0bff917 	ldw	r2,-28(fp)
   1a838:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a83c:	e0bffc17 	ldw	r2,-16(fp)
   1a840:	e0bfff15 	stw	r2,-4(fp)
   1a844:	e0bfff17 	ldw	r2,-4(fp)
} 
   1a848:	e037883a 	mov	sp,fp
   1a84c:	df000017 	ldw	fp,0(sp)
   1a850:	dec00104 	addi	sp,sp,4
   1a854:	f800283a 	ret

0001a858 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a858:	defff704 	addi	sp,sp,-36
   1a85c:	dfc00815 	stw	ra,32(sp)
   1a860:	df000715 	stw	fp,28(sp)
   1a864:	df000704 	addi	fp,sp,28
   1a868:	e13ffb15 	stw	r4,-20(fp)
   1a86c:	e17ffc15 	stw	r5,-16(fp)
   1a870:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a874:	e0bffb17 	ldw	r2,-20(fp)
   1a878:	1004803a 	cmplt	r2,r2,zero
   1a87c:	1000091e 	bne	r2,zero,1a8a4 <write+0x4c>
   1a880:	e13ffb17 	ldw	r4,-20(fp)
   1a884:	01400304 	movi	r5,12
   1a888:	00197dc0 	call	197dc <__mulsi3>
   1a88c:	1007883a 	mov	r3,r2
   1a890:	00800134 	movhi	r2,4
   1a894:	10a2f304 	addi	r2,r2,-29748
   1a898:	1887883a 	add	r3,r3,r2
   1a89c:	e0ffff15 	stw	r3,-4(fp)
   1a8a0:	00000106 	br	1a8a8 <write+0x50>
   1a8a4:	e03fff15 	stw	zero,-4(fp)
   1a8a8:	e0bfff17 	ldw	r2,-4(fp)
   1a8ac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1a8b0:	e0bffa17 	ldw	r2,-24(fp)
   1a8b4:	1005003a 	cmpeq	r2,r2,zero
   1a8b8:	1000241e 	bne	r2,zero,1a94c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a8bc:	e0bffa17 	ldw	r2,-24(fp)
   1a8c0:	10800217 	ldw	r2,8(r2)
   1a8c4:	108000cc 	andi	r2,r2,3
   1a8c8:	1005003a 	cmpeq	r2,r2,zero
   1a8cc:	10001a1e 	bne	r2,zero,1a938 <write+0xe0>
   1a8d0:	e0bffa17 	ldw	r2,-24(fp)
   1a8d4:	10800017 	ldw	r2,0(r2)
   1a8d8:	10800617 	ldw	r2,24(r2)
   1a8dc:	1005003a 	cmpeq	r2,r2,zero
   1a8e0:	1000151e 	bne	r2,zero,1a938 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a8e4:	e0bffa17 	ldw	r2,-24(fp)
   1a8e8:	10800017 	ldw	r2,0(r2)
   1a8ec:	10800617 	ldw	r2,24(r2)
   1a8f0:	e17ffc17 	ldw	r5,-16(fp)
   1a8f4:	e1bffd17 	ldw	r6,-12(fp)
   1a8f8:	e13ffa17 	ldw	r4,-24(fp)
   1a8fc:	103ee83a 	callr	r2
   1a900:	e0bff915 	stw	r2,-28(fp)
   1a904:	e0bff917 	ldw	r2,-28(fp)
   1a908:	1004403a 	cmpge	r2,r2,zero
   1a90c:	1000071e 	bne	r2,zero,1a92c <write+0xd4>
      {
        ALT_ERRNO = -rval;
   1a910:	001a97c0 	call	1a97c <alt_get_errno>
   1a914:	e0fff917 	ldw	r3,-28(fp)
   1a918:	00c7c83a 	sub	r3,zero,r3
   1a91c:	10c00015 	stw	r3,0(r2)
        return -1;
   1a920:	00bfffc4 	movi	r2,-1
   1a924:	e0bffe15 	stw	r2,-8(fp)
   1a928:	00000e06 	br	1a964 <write+0x10c>
      }
      return rval;
   1a92c:	e0bff917 	ldw	r2,-28(fp)
   1a930:	e0bffe15 	stw	r2,-8(fp)
   1a934:	00000b06 	br	1a964 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a938:	001a97c0 	call	1a97c <alt_get_errno>
   1a93c:	1007883a 	mov	r3,r2
   1a940:	00800344 	movi	r2,13
   1a944:	18800015 	stw	r2,0(r3)
   1a948:	00000406 	br	1a95c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a94c:	001a97c0 	call	1a97c <alt_get_errno>
   1a950:	1007883a 	mov	r3,r2
   1a954:	00801444 	movi	r2,81
   1a958:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a95c:	00bfffc4 	movi	r2,-1
   1a960:	e0bffe15 	stw	r2,-8(fp)
   1a964:	e0bffe17 	ldw	r2,-8(fp)
}
   1a968:	e037883a 	mov	sp,fp
   1a96c:	dfc00117 	ldw	ra,4(sp)
   1a970:	df000017 	ldw	fp,0(sp)
   1a974:	dec00204 	addi	sp,sp,8
   1a978:	f800283a 	ret

0001a97c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a97c:	defffd04 	addi	sp,sp,-12
   1a980:	dfc00215 	stw	ra,8(sp)
   1a984:	df000115 	stw	fp,4(sp)
   1a988:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a98c:	00800134 	movhi	r2,4
   1a990:	10a77604 	addi	r2,r2,-25128
   1a994:	10800017 	ldw	r2,0(r2)
   1a998:	1005003a 	cmpeq	r2,r2,zero
   1a99c:	1000061e 	bne	r2,zero,1a9b8 <alt_get_errno+0x3c>
   1a9a0:	00800134 	movhi	r2,4
   1a9a4:	10a77604 	addi	r2,r2,-25128
   1a9a8:	10800017 	ldw	r2,0(r2)
   1a9ac:	103ee83a 	callr	r2
   1a9b0:	e0bfff15 	stw	r2,-4(fp)
   1a9b4:	00000306 	br	1a9c4 <alt_get_errno+0x48>
   1a9b8:	00800134 	movhi	r2,4
   1a9bc:	10a78604 	addi	r2,r2,-25064
   1a9c0:	e0bfff15 	stw	r2,-4(fp)
   1a9c4:	e0bfff17 	ldw	r2,-4(fp)
}
   1a9c8:	e037883a 	mov	sp,fp
   1a9cc:	dfc00117 	ldw	ra,4(sp)
   1a9d0:	df000017 	ldw	fp,0(sp)
   1a9d4:	dec00204 	addi	sp,sp,8
   1a9d8:	f800283a 	ret

0001a9dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a9dc:	defffd04 	addi	sp,sp,-12
   1a9e0:	dfc00215 	stw	ra,8(sp)
   1a9e4:	df000115 	stw	fp,4(sp)
   1a9e8:	df000104 	addi	fp,sp,4
   1a9ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   1a9f0:	001c2700 	call	1c270 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a9f4:	00800044 	movi	r2,1
   1a9f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a9fc:	e037883a 	mov	sp,fp
   1aa00:	dfc00117 	ldw	ra,4(sp)
   1aa04:	df000017 	ldw	fp,0(sp)
   1aa08:	dec00204 	addi	sp,sp,8
   1aa0c:	f800283a 	ret

0001aa10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1aa10:	defffe04 	addi	sp,sp,-8
   1aa14:	dfc00115 	stw	ra,4(sp)
   1aa18:	df000015 	stw	fp,0(sp)
   1aa1c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
   1aa20:	01000134 	movhi	r4,4
   1aa24:	21040004 	addi	r4,r4,4096
   1aa28:	000b883a 	mov	r5,zero
   1aa2c:	01800404 	movi	r6,16
   1aa30:	01c0fa04 	movi	r7,1000
   1aa34:	001b5c00 	call	1b5c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART1, jtag_uart1);
   1aa38:	01000134 	movhi	r4,4
   1aa3c:	21235d04 	addi	r4,r4,-29324
   1aa40:	000b883a 	mov	r5,zero
   1aa44:	01800044 	movi	r6,1
   1aa48:	001abec0 	call	1abec <altera_avalon_jtag_uart_init>
   1aa4c:	01000134 	movhi	r4,4
   1aa50:	21235304 	addi	r4,r4,-29364
   1aa54:	001aa6c0 	call	1aa6c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   1aa58:	e037883a 	mov	sp,fp
   1aa5c:	dfc00117 	ldw	ra,4(sp)
   1aa60:	df000017 	ldw	fp,0(sp)
   1aa64:	dec00204 	addi	sp,sp,8
   1aa68:	f800283a 	ret

0001aa6c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1aa6c:	defffd04 	addi	sp,sp,-12
   1aa70:	dfc00215 	stw	ra,8(sp)
   1aa74:	df000115 	stw	fp,4(sp)
   1aa78:	df000104 	addi	fp,sp,4
   1aa7c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1aa80:	e13fff17 	ldw	r4,-4(fp)
   1aa84:	01400134 	movhi	r5,4
   1aa88:	29677304 	addi	r5,r5,-25140
   1aa8c:	001b7c00 	call	1b7c0 <alt_dev_llist_insert>
}
   1aa90:	e037883a 	mov	sp,fp
   1aa94:	dfc00117 	ldw	ra,4(sp)
   1aa98:	df000017 	ldw	fp,0(sp)
   1aa9c:	dec00204 	addi	sp,sp,8
   1aaa0:	f800283a 	ret

0001aaa4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1aaa4:	defffa04 	addi	sp,sp,-24
   1aaa8:	dfc00515 	stw	ra,20(sp)
   1aaac:	df000415 	stw	fp,16(sp)
   1aab0:	df000404 	addi	fp,sp,16
   1aab4:	e13ffd15 	stw	r4,-12(fp)
   1aab8:	e17ffe15 	stw	r5,-8(fp)
   1aabc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1aac0:	e0bffd17 	ldw	r2,-12(fp)
   1aac4:	10800017 	ldw	r2,0(r2)
   1aac8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1aacc:	e0bffc17 	ldw	r2,-16(fp)
   1aad0:	11000a04 	addi	r4,r2,40
   1aad4:	e0bffd17 	ldw	r2,-12(fp)
   1aad8:	11c00217 	ldw	r7,8(r2)
   1aadc:	e17ffe17 	ldw	r5,-8(fp)
   1aae0:	e1bfff17 	ldw	r6,-4(fp)
   1aae4:	001b0ec0 	call	1b0ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1aae8:	e037883a 	mov	sp,fp
   1aaec:	dfc00117 	ldw	ra,4(sp)
   1aaf0:	df000017 	ldw	fp,0(sp)
   1aaf4:	dec00204 	addi	sp,sp,8
   1aaf8:	f800283a 	ret

0001aafc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1aafc:	defffa04 	addi	sp,sp,-24
   1ab00:	dfc00515 	stw	ra,20(sp)
   1ab04:	df000415 	stw	fp,16(sp)
   1ab08:	df000404 	addi	fp,sp,16
   1ab0c:	e13ffd15 	stw	r4,-12(fp)
   1ab10:	e17ffe15 	stw	r5,-8(fp)
   1ab14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ab18:	e0bffd17 	ldw	r2,-12(fp)
   1ab1c:	10800017 	ldw	r2,0(r2)
   1ab20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1ab24:	e0bffc17 	ldw	r2,-16(fp)
   1ab28:	11000a04 	addi	r4,r2,40
   1ab2c:	e0bffd17 	ldw	r2,-12(fp)
   1ab30:	11c00217 	ldw	r7,8(r2)
   1ab34:	e17ffe17 	ldw	r5,-8(fp)
   1ab38:	e1bfff17 	ldw	r6,-4(fp)
   1ab3c:	001b3100 	call	1b310 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1ab40:	e037883a 	mov	sp,fp
   1ab44:	dfc00117 	ldw	ra,4(sp)
   1ab48:	df000017 	ldw	fp,0(sp)
   1ab4c:	dec00204 	addi	sp,sp,8
   1ab50:	f800283a 	ret

0001ab54 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1ab54:	defffc04 	addi	sp,sp,-16
   1ab58:	dfc00315 	stw	ra,12(sp)
   1ab5c:	df000215 	stw	fp,8(sp)
   1ab60:	df000204 	addi	fp,sp,8
   1ab64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ab68:	e0bfff17 	ldw	r2,-4(fp)
   1ab6c:	10800017 	ldw	r2,0(r2)
   1ab70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1ab74:	e0bffe17 	ldw	r2,-8(fp)
   1ab78:	11000a04 	addi	r4,r2,40
   1ab7c:	e0bfff17 	ldw	r2,-4(fp)
   1ab80:	11400217 	ldw	r5,8(r2)
   1ab84:	001af840 	call	1af84 <altera_avalon_jtag_uart_close>
}
   1ab88:	e037883a 	mov	sp,fp
   1ab8c:	dfc00117 	ldw	ra,4(sp)
   1ab90:	df000017 	ldw	fp,0(sp)
   1ab94:	dec00204 	addi	sp,sp,8
   1ab98:	f800283a 	ret

0001ab9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1ab9c:	defffa04 	addi	sp,sp,-24
   1aba0:	dfc00515 	stw	ra,20(sp)
   1aba4:	df000415 	stw	fp,16(sp)
   1aba8:	df000404 	addi	fp,sp,16
   1abac:	e13ffd15 	stw	r4,-12(fp)
   1abb0:	e17ffe15 	stw	r5,-8(fp)
   1abb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1abb8:	e0bffd17 	ldw	r2,-12(fp)
   1abbc:	10800017 	ldw	r2,0(r2)
   1abc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1abc4:	e0bffc17 	ldw	r2,-16(fp)
   1abc8:	11000a04 	addi	r4,r2,40
   1abcc:	e17ffe17 	ldw	r5,-8(fp)
   1abd0:	e1bfff17 	ldw	r6,-4(fp)
   1abd4:	001aff80 	call	1aff8 <altera_avalon_jtag_uart_ioctl>
}
   1abd8:	e037883a 	mov	sp,fp
   1abdc:	dfc00117 	ldw	ra,4(sp)
   1abe0:	df000017 	ldw	fp,0(sp)
   1abe4:	dec00204 	addi	sp,sp,8
   1abe8:	f800283a 	ret

0001abec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1abec:	defffa04 	addi	sp,sp,-24
   1abf0:	dfc00515 	stw	ra,20(sp)
   1abf4:	df000415 	stw	fp,16(sp)
   1abf8:	df000404 	addi	fp,sp,16
   1abfc:	e13ffd15 	stw	r4,-12(fp)
   1ac00:	e17ffe15 	stw	r5,-8(fp)
   1ac04:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ac08:	e0fffd17 	ldw	r3,-12(fp)
   1ac0c:	00800044 	movi	r2,1
   1ac10:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1ac14:	e0bffd17 	ldw	r2,-12(fp)
   1ac18:	10800017 	ldw	r2,0(r2)
   1ac1c:	11000104 	addi	r4,r2,4
   1ac20:	e0bffd17 	ldw	r2,-12(fp)
   1ac24:	10800817 	ldw	r2,32(r2)
   1ac28:	1007883a 	mov	r3,r2
   1ac2c:	2005883a 	mov	r2,r4
   1ac30:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1ac34:	e13ffe17 	ldw	r4,-8(fp)
   1ac38:	e17fff17 	ldw	r5,-4(fp)
   1ac3c:	d8000015 	stw	zero,0(sp)
   1ac40:	018000b4 	movhi	r6,2
   1ac44:	31ab2b04 	addi	r6,r6,-21332
   1ac48:	e1fffd17 	ldw	r7,-12(fp)
   1ac4c:	001b9cc0 	call	1b9cc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1ac50:	e0bffd17 	ldw	r2,-12(fp)
   1ac54:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1ac58:	e0bffd17 	ldw	r2,-12(fp)
   1ac5c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1ac60:	00800134 	movhi	r2,4
   1ac64:	10a78b04 	addi	r2,r2,-25044
   1ac68:	10800017 	ldw	r2,0(r2)
   1ac6c:	100b883a 	mov	r5,r2
   1ac70:	018000b4 	movhi	r6,2
   1ac74:	31abb504 	addi	r6,r6,-20780
   1ac78:	e1fffd17 	ldw	r7,-12(fp)
   1ac7c:	001b6500 	call	1b650 <alt_alarm_start>
   1ac80:	1004403a 	cmpge	r2,r2,zero
   1ac84:	1000041e 	bne	r2,zero,1ac98 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1ac88:	e0fffd17 	ldw	r3,-12(fp)
   1ac8c:	00a00034 	movhi	r2,32768
   1ac90:	10bfffc4 	addi	r2,r2,-1
   1ac94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1ac98:	e037883a 	mov	sp,fp
   1ac9c:	dfc00117 	ldw	ra,4(sp)
   1aca0:	df000017 	ldw	fp,0(sp)
   1aca4:	dec00204 	addi	sp,sp,8
   1aca8:	f800283a 	ret

0001acac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1acac:	defff804 	addi	sp,sp,-32
   1acb0:	df000715 	stw	fp,28(sp)
   1acb4:	df000704 	addi	fp,sp,28
   1acb8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1acbc:	e0bfff17 	ldw	r2,-4(fp)
   1acc0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   1acc4:	e0bffe17 	ldw	r2,-8(fp)
   1acc8:	10800017 	ldw	r2,0(r2)
   1accc:	e0bffd15 	stw	r2,-12(fp)
   1acd0:	00000006 	br	1acd4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1acd4:	e0bffd17 	ldw	r2,-12(fp)
   1acd8:	10800104 	addi	r2,r2,4
   1acdc:	10800037 	ldwio	r2,0(r2)
   1ace0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1ace4:	e0bffc17 	ldw	r2,-16(fp)
   1ace8:	1080c00c 	andi	r2,r2,768
   1acec:	1005003a 	cmpeq	r2,r2,zero
   1acf0:	1000741e 	bne	r2,zero,1aec4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1acf4:	e0bffc17 	ldw	r2,-16(fp)
   1acf8:	1080400c 	andi	r2,r2,256
   1acfc:	1005003a 	cmpeq	r2,r2,zero
   1ad00:	1000351e 	bne	r2,zero,1add8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1ad04:	00800074 	movhi	r2,1
   1ad08:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ad0c:	e0bffe17 	ldw	r2,-8(fp)
   1ad10:	10800a17 	ldw	r2,40(r2)
   1ad14:	10800044 	addi	r2,r2,1
   1ad18:	1081ffcc 	andi	r2,r2,2047
   1ad1c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   1ad20:	e0bffe17 	ldw	r2,-8(fp)
   1ad24:	10c00b17 	ldw	r3,44(r2)
   1ad28:	e0bffa17 	ldw	r2,-24(fp)
   1ad2c:	18801626 	beq	r3,r2,1ad88 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1ad30:	e0bffd17 	ldw	r2,-12(fp)
   1ad34:	10800037 	ldwio	r2,0(r2)
   1ad38:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1ad3c:	e0bffb17 	ldw	r2,-20(fp)
   1ad40:	10a0000c 	andi	r2,r2,32768
   1ad44:	1005003a 	cmpeq	r2,r2,zero
   1ad48:	10000f1e 	bne	r2,zero,1ad88 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1ad4c:	e0bffe17 	ldw	r2,-8(fp)
   1ad50:	10c00a17 	ldw	r3,40(r2)
   1ad54:	e0bffb17 	ldw	r2,-20(fp)
   1ad58:	1009883a 	mov	r4,r2
   1ad5c:	e0bffe17 	ldw	r2,-8(fp)
   1ad60:	1885883a 	add	r2,r3,r2
   1ad64:	10800e04 	addi	r2,r2,56
   1ad68:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ad6c:	e0bffe17 	ldw	r2,-8(fp)
   1ad70:	10800a17 	ldw	r2,40(r2)
   1ad74:	10800044 	addi	r2,r2,1
   1ad78:	10c1ffcc 	andi	r3,r2,2047
   1ad7c:	e0bffe17 	ldw	r2,-8(fp)
   1ad80:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1ad84:	003fe106 	br	1ad0c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1ad88:	e0bffb17 	ldw	r2,-20(fp)
   1ad8c:	10bfffec 	andhi	r2,r2,65535
   1ad90:	1005003a 	cmpeq	r2,r2,zero
   1ad94:	1000101e 	bne	r2,zero,1add8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ad98:	e0bffe17 	ldw	r2,-8(fp)
   1ad9c:	10c00817 	ldw	r3,32(r2)
   1ada0:	00bfff84 	movi	r2,-2
   1ada4:	1886703a 	and	r3,r3,r2
   1ada8:	e0bffe17 	ldw	r2,-8(fp)
   1adac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1adb0:	e0bffd17 	ldw	r2,-12(fp)
   1adb4:	11000104 	addi	r4,r2,4
   1adb8:	e0bffe17 	ldw	r2,-8(fp)
   1adbc:	10800817 	ldw	r2,32(r2)
   1adc0:	1007883a 	mov	r3,r2
   1adc4:	2005883a 	mov	r2,r4
   1adc8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1adcc:	e0bffd17 	ldw	r2,-12(fp)
   1add0:	10800104 	addi	r2,r2,4
   1add4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1add8:	e0bffc17 	ldw	r2,-16(fp)
   1addc:	1080800c 	andi	r2,r2,512
   1ade0:	1005003a 	cmpeq	r2,r2,zero
   1ade4:	103fbb1e 	bne	r2,zero,1acd4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1ade8:	e0bffc17 	ldw	r2,-16(fp)
   1adec:	10bfffec 	andhi	r2,r2,65535
   1adf0:	1004d43a 	srli	r2,r2,16
   1adf4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1adf8:	00001506 	br	1ae50 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1adfc:	e13ffd17 	ldw	r4,-12(fp)
   1ae00:	e0bffe17 	ldw	r2,-8(fp)
   1ae04:	10c00d17 	ldw	r3,52(r2)
   1ae08:	e0bffe17 	ldw	r2,-8(fp)
   1ae0c:	1885883a 	add	r2,r3,r2
   1ae10:	10820e04 	addi	r2,r2,2104
   1ae14:	10800003 	ldbu	r2,0(r2)
   1ae18:	10c03fcc 	andi	r3,r2,255
   1ae1c:	18c0201c 	xori	r3,r3,128
   1ae20:	18ffe004 	addi	r3,r3,-128
   1ae24:	2005883a 	mov	r2,r4
   1ae28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ae2c:	e0bffe17 	ldw	r2,-8(fp)
   1ae30:	10800d17 	ldw	r2,52(r2)
   1ae34:	10800044 	addi	r2,r2,1
   1ae38:	10c1ffcc 	andi	r3,r2,2047
   1ae3c:	e0bffe17 	ldw	r2,-8(fp)
   1ae40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1ae44:	e0bff917 	ldw	r2,-28(fp)
   1ae48:	10bfffc4 	addi	r2,r2,-1
   1ae4c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1ae50:	e0bff917 	ldw	r2,-28(fp)
   1ae54:	1005003a 	cmpeq	r2,r2,zero
   1ae58:	1000051e 	bne	r2,zero,1ae70 <altera_avalon_jtag_uart_irq+0x1c4>
   1ae5c:	e0bffe17 	ldw	r2,-8(fp)
   1ae60:	10c00d17 	ldw	r3,52(r2)
   1ae64:	e0bffe17 	ldw	r2,-8(fp)
   1ae68:	10800c17 	ldw	r2,48(r2)
   1ae6c:	18bfe31e 	bne	r3,r2,1adfc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1ae70:	e0bff917 	ldw	r2,-28(fp)
   1ae74:	1005003a 	cmpeq	r2,r2,zero
   1ae78:	103f961e 	bne	r2,zero,1acd4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1ae7c:	e0bffe17 	ldw	r2,-8(fp)
   1ae80:	10c00817 	ldw	r3,32(r2)
   1ae84:	00bfff44 	movi	r2,-3
   1ae88:	1886703a 	and	r3,r3,r2
   1ae8c:	e0bffe17 	ldw	r2,-8(fp)
   1ae90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ae94:	e0bffe17 	ldw	r2,-8(fp)
   1ae98:	10800017 	ldw	r2,0(r2)
   1ae9c:	11000104 	addi	r4,r2,4
   1aea0:	e0bffe17 	ldw	r2,-8(fp)
   1aea4:	10800817 	ldw	r2,32(r2)
   1aea8:	1007883a 	mov	r3,r2
   1aeac:	2005883a 	mov	r2,r4
   1aeb0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1aeb4:	e0bffd17 	ldw	r2,-12(fp)
   1aeb8:	10800104 	addi	r2,r2,4
   1aebc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1aec0:	003f8406 	br	1acd4 <altera_avalon_jtag_uart_irq+0x28>
}
   1aec4:	e037883a 	mov	sp,fp
   1aec8:	df000017 	ldw	fp,0(sp)
   1aecc:	dec00104 	addi	sp,sp,4
   1aed0:	f800283a 	ret

0001aed4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1aed4:	defffc04 	addi	sp,sp,-16
   1aed8:	df000315 	stw	fp,12(sp)
   1aedc:	df000304 	addi	fp,sp,12
   1aee0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1aee4:	e0bfff17 	ldw	r2,-4(fp)
   1aee8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1aeec:	e0bffe17 	ldw	r2,-8(fp)
   1aef0:	10800017 	ldw	r2,0(r2)
   1aef4:	10800104 	addi	r2,r2,4
   1aef8:	10800037 	ldwio	r2,0(r2)
   1aefc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1af00:	e0bffd17 	ldw	r2,-12(fp)
   1af04:	1081000c 	andi	r2,r2,1024
   1af08:	1005003a 	cmpeq	r2,r2,zero
   1af0c:	10000c1e 	bne	r2,zero,1af40 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1af10:	e0bffe17 	ldw	r2,-8(fp)
   1af14:	10800017 	ldw	r2,0(r2)
   1af18:	11000104 	addi	r4,r2,4
   1af1c:	e0bffe17 	ldw	r2,-8(fp)
   1af20:	10800817 	ldw	r2,32(r2)
   1af24:	10810014 	ori	r2,r2,1024
   1af28:	1007883a 	mov	r3,r2
   1af2c:	2005883a 	mov	r2,r4
   1af30:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1af34:	e0bffe17 	ldw	r2,-8(fp)
   1af38:	10000915 	stw	zero,36(r2)
   1af3c:	00000a06 	br	1af68 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1af40:	e0bffe17 	ldw	r2,-8(fp)
   1af44:	10c00917 	ldw	r3,36(r2)
   1af48:	00a00034 	movhi	r2,32768
   1af4c:	10bfff04 	addi	r2,r2,-4
   1af50:	10c00536 	bltu	r2,r3,1af68 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   1af54:	e0bffe17 	ldw	r2,-8(fp)
   1af58:	10800917 	ldw	r2,36(r2)
   1af5c:	10c00044 	addi	r3,r2,1
   1af60:	e0bffe17 	ldw	r2,-8(fp)
   1af64:	10c00915 	stw	r3,36(r2)
   1af68:	00800134 	movhi	r2,4
   1af6c:	10a78b04 	addi	r2,r2,-25044
   1af70:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1af74:	e037883a 	mov	sp,fp
   1af78:	df000017 	ldw	fp,0(sp)
   1af7c:	dec00104 	addi	sp,sp,4
   1af80:	f800283a 	ret

0001af84 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1af84:	defffc04 	addi	sp,sp,-16
   1af88:	df000315 	stw	fp,12(sp)
   1af8c:	df000304 	addi	fp,sp,12
   1af90:	e13ffd15 	stw	r4,-12(fp)
   1af94:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1af98:	00000706 	br	1afb8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   1af9c:	e0bffe17 	ldw	r2,-8(fp)
   1afa0:	1090000c 	andi	r2,r2,16384
   1afa4:	1005003a 	cmpeq	r2,r2,zero
   1afa8:	1000031e 	bne	r2,zero,1afb8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   1afac:	00bffd44 	movi	r2,-11
   1afb0:	e0bfff15 	stw	r2,-4(fp)
   1afb4:	00000b06 	br	1afe4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1afb8:	e0bffd17 	ldw	r2,-12(fp)
   1afbc:	10c00d17 	ldw	r3,52(r2)
   1afc0:	e0bffd17 	ldw	r2,-12(fp)
   1afc4:	10800c17 	ldw	r2,48(r2)
   1afc8:	18800526 	beq	r3,r2,1afe0 <altera_avalon_jtag_uart_close+0x5c>
   1afcc:	e0bffd17 	ldw	r2,-12(fp)
   1afd0:	10c00917 	ldw	r3,36(r2)
   1afd4:	e0bffd17 	ldw	r2,-12(fp)
   1afd8:	10800117 	ldw	r2,4(r2)
   1afdc:	18bfef36 	bltu	r3,r2,1af9c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1afe0:	e03fff15 	stw	zero,-4(fp)
   1afe4:	e0bfff17 	ldw	r2,-4(fp)
}
   1afe8:	e037883a 	mov	sp,fp
   1afec:	df000017 	ldw	fp,0(sp)
   1aff0:	dec00104 	addi	sp,sp,4
   1aff4:	f800283a 	ret

0001aff8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1aff8:	defff804 	addi	sp,sp,-32
   1affc:	df000715 	stw	fp,28(sp)
   1b000:	df000704 	addi	fp,sp,28
   1b004:	e13ffb15 	stw	r4,-20(fp)
   1b008:	e17ffc15 	stw	r5,-16(fp)
   1b00c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   1b010:	00bff9c4 	movi	r2,-25
   1b014:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   1b018:	e0bffc17 	ldw	r2,-16(fp)
   1b01c:	e0bfff15 	stw	r2,-4(fp)
   1b020:	e0ffff17 	ldw	r3,-4(fp)
   1b024:	189a8060 	cmpeqi	r2,r3,27137
   1b028:	1000041e 	bne	r2,zero,1b03c <altera_avalon_jtag_uart_ioctl+0x44>
   1b02c:	e0ffff17 	ldw	r3,-4(fp)
   1b030:	189a80a0 	cmpeqi	r2,r3,27138
   1b034:	10001b1e 	bne	r2,zero,1b0a4 <altera_avalon_jtag_uart_ioctl+0xac>
   1b038:	00002706 	br	1b0d8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1b03c:	e0bffb17 	ldw	r2,-20(fp)
   1b040:	10c00117 	ldw	r3,4(r2)
   1b044:	00a00034 	movhi	r2,32768
   1b048:	10bfffc4 	addi	r2,r2,-1
   1b04c:	18802226 	beq	r3,r2,1b0d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   1b050:	e0bffd17 	ldw	r2,-12(fp)
   1b054:	10800017 	ldw	r2,0(r2)
   1b058:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1b05c:	e0bff917 	ldw	r2,-28(fp)
   1b060:	10800090 	cmplti	r2,r2,2
   1b064:	1000071e 	bne	r2,zero,1b084 <altera_avalon_jtag_uart_ioctl+0x8c>
   1b068:	e0fff917 	ldw	r3,-28(fp)
   1b06c:	00a00034 	movhi	r2,32768
   1b070:	10bfffc4 	addi	r2,r2,-1
   1b074:	18800326 	beq	r3,r2,1b084 <altera_avalon_jtag_uart_ioctl+0x8c>
   1b078:	e0bff917 	ldw	r2,-28(fp)
   1b07c:	e0bffe15 	stw	r2,-8(fp)
   1b080:	00000306 	br	1b090 <altera_avalon_jtag_uart_ioctl+0x98>
   1b084:	00e00034 	movhi	r3,32768
   1b088:	18ffff84 	addi	r3,r3,-2
   1b08c:	e0fffe15 	stw	r3,-8(fp)
   1b090:	e0bffb17 	ldw	r2,-20(fp)
   1b094:	e0fffe17 	ldw	r3,-8(fp)
   1b098:	10c00115 	stw	r3,4(r2)
      rc = 0;
   1b09c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   1b0a0:	00000d06 	br	1b0d8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1b0a4:	e0bffb17 	ldw	r2,-20(fp)
   1b0a8:	10c00117 	ldw	r3,4(r2)
   1b0ac:	00a00034 	movhi	r2,32768
   1b0b0:	10bfffc4 	addi	r2,r2,-1
   1b0b4:	18800826 	beq	r3,r2,1b0d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1b0b8:	e13ffd17 	ldw	r4,-12(fp)
   1b0bc:	e0bffb17 	ldw	r2,-20(fp)
   1b0c0:	10c00917 	ldw	r3,36(r2)
   1b0c4:	e0bffb17 	ldw	r2,-20(fp)
   1b0c8:	10800117 	ldw	r2,4(r2)
   1b0cc:	1885803a 	cmpltu	r2,r3,r2
   1b0d0:	20800015 	stw	r2,0(r4)
      rc = 0;
   1b0d4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   1b0d8:	e0bffa17 	ldw	r2,-24(fp)
}
   1b0dc:	e037883a 	mov	sp,fp
   1b0e0:	df000017 	ldw	fp,0(sp)
   1b0e4:	dec00104 	addi	sp,sp,4
   1b0e8:	f800283a 	ret

0001b0ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1b0ec:	defff204 	addi	sp,sp,-56
   1b0f0:	dfc00d15 	stw	ra,52(sp)
   1b0f4:	df000c15 	stw	fp,48(sp)
   1b0f8:	df000c04 	addi	fp,sp,48
   1b0fc:	e13ffb15 	stw	r4,-20(fp)
   1b100:	e17ffc15 	stw	r5,-16(fp)
   1b104:	e1bffd15 	stw	r6,-12(fp)
   1b108:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   1b10c:	e0bffc17 	ldw	r2,-16(fp)
   1b110:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b114:	00004806 	br	1b238 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1b118:	e0bffb17 	ldw	r2,-20(fp)
   1b11c:	10800a17 	ldw	r2,40(r2)
   1b120:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1b124:	e0bffb17 	ldw	r2,-20(fp)
   1b128:	10800b17 	ldw	r2,44(r2)
   1b12c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   1b130:	e0fff717 	ldw	r3,-36(fp)
   1b134:	e0bff617 	ldw	r2,-40(fp)
   1b138:	18800536 	bltu	r3,r2,1b150 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1b13c:	e0bff717 	ldw	r2,-36(fp)
   1b140:	e0fff617 	ldw	r3,-40(fp)
   1b144:	10c5c83a 	sub	r2,r2,r3
   1b148:	e0bff815 	stw	r2,-32(fp)
   1b14c:	00000406 	br	1b160 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1b150:	00820004 	movi	r2,2048
   1b154:	e0fff617 	ldw	r3,-40(fp)
   1b158:	10c5c83a 	sub	r2,r2,r3
   1b15c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1b160:	e0bff817 	ldw	r2,-32(fp)
   1b164:	1005003a 	cmpeq	r2,r2,zero
   1b168:	10001f1e 	bne	r2,zero,1b1e8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   1b16c:	e0fffd17 	ldw	r3,-12(fp)
   1b170:	e0bff817 	ldw	r2,-32(fp)
   1b174:	1880022e 	bgeu	r3,r2,1b180 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   1b178:	e0bffd17 	ldw	r2,-12(fp)
   1b17c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1b180:	e0bffb17 	ldw	r2,-20(fp)
   1b184:	10c00e04 	addi	r3,r2,56
   1b188:	e0bff617 	ldw	r2,-40(fp)
   1b18c:	1887883a 	add	r3,r3,r2
   1b190:	e0bffa17 	ldw	r2,-24(fp)
   1b194:	1009883a 	mov	r4,r2
   1b198:	180b883a 	mov	r5,r3
   1b19c:	e1bff817 	ldw	r6,-32(fp)
   1b1a0:	00158700 	call	15870 <memcpy>
      ptr   += n;
   1b1a4:	e0fff817 	ldw	r3,-32(fp)
   1b1a8:	e0bffa17 	ldw	r2,-24(fp)
   1b1ac:	10c5883a 	add	r2,r2,r3
   1b1b0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   1b1b4:	e0fffd17 	ldw	r3,-12(fp)
   1b1b8:	e0bff817 	ldw	r2,-32(fp)
   1b1bc:	1885c83a 	sub	r2,r3,r2
   1b1c0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b1c4:	e0fff617 	ldw	r3,-40(fp)
   1b1c8:	e0bff817 	ldw	r2,-32(fp)
   1b1cc:	1885883a 	add	r2,r3,r2
   1b1d0:	10c1ffcc 	andi	r3,r2,2047
   1b1d4:	e0bffb17 	ldw	r2,-20(fp)
   1b1d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1b1dc:	e0bffd17 	ldw	r2,-12(fp)
   1b1e0:	10800048 	cmpgei	r2,r2,1
   1b1e4:	103fcc1e 	bne	r2,zero,1b118 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   1b1e8:	e0fffa17 	ldw	r3,-24(fp)
   1b1ec:	e0bffc17 	ldw	r2,-16(fp)
   1b1f0:	1880141e 	bne	r3,r2,1b244 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1b1f4:	e0bffe17 	ldw	r2,-8(fp)
   1b1f8:	1090000c 	andi	r2,r2,16384
   1b1fc:	1004c03a 	cmpne	r2,r2,zero
   1b200:	1000101e 	bne	r2,zero,1b244 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1b204:	e0bffb17 	ldw	r2,-20(fp)
   1b208:	10c00a17 	ldw	r3,40(r2)
   1b20c:	e0bff717 	ldw	r2,-36(fp)
   1b210:	1880051e 	bne	r3,r2,1b228 <altera_avalon_jtag_uart_read+0x13c>
   1b214:	e0bffb17 	ldw	r2,-20(fp)
   1b218:	10c00917 	ldw	r3,36(r2)
   1b21c:	e0bffb17 	ldw	r2,-20(fp)
   1b220:	10800117 	ldw	r2,4(r2)
   1b224:	18bff736 	bltu	r3,r2,1b204 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1b228:	e0bffb17 	ldw	r2,-20(fp)
   1b22c:	10c00a17 	ldw	r3,40(r2)
   1b230:	e0bff717 	ldw	r2,-36(fp)
   1b234:	18800326 	beq	r3,r2,1b244 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b238:	e0bffd17 	ldw	r2,-12(fp)
   1b23c:	10800048 	cmpgei	r2,r2,1
   1b240:	103fb51e 	bne	r2,zero,1b118 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1b244:	e0fffa17 	ldw	r3,-24(fp)
   1b248:	e0bffc17 	ldw	r2,-16(fp)
   1b24c:	18801926 	beq	r3,r2,1b2b4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b250:	0005303a 	rdctl	r2,status
   1b254:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b258:	e0fff517 	ldw	r3,-44(fp)
   1b25c:	00bfff84 	movi	r2,-2
   1b260:	1884703a 	and	r2,r3,r2
   1b264:	1001703a 	wrctl	status,r2
  
  return context;
   1b268:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1b26c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b270:	e0bffb17 	ldw	r2,-20(fp)
   1b274:	10800817 	ldw	r2,32(r2)
   1b278:	10c00054 	ori	r3,r2,1
   1b27c:	e0bffb17 	ldw	r2,-20(fp)
   1b280:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b284:	e0bffb17 	ldw	r2,-20(fp)
   1b288:	10800017 	ldw	r2,0(r2)
   1b28c:	11000104 	addi	r4,r2,4
   1b290:	e0bffb17 	ldw	r2,-20(fp)
   1b294:	10800817 	ldw	r2,32(r2)
   1b298:	1007883a 	mov	r3,r2
   1b29c:	2005883a 	mov	r2,r4
   1b2a0:	10c00035 	stwio	r3,0(r2)
   1b2a4:	e0bff917 	ldw	r2,-28(fp)
   1b2a8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b2ac:	e0bff417 	ldw	r2,-48(fp)
   1b2b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b2b4:	e0fffa17 	ldw	r3,-24(fp)
   1b2b8:	e0bffc17 	ldw	r2,-16(fp)
   1b2bc:	18800526 	beq	r3,r2,1b2d4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   1b2c0:	e0fffa17 	ldw	r3,-24(fp)
   1b2c4:	e0bffc17 	ldw	r2,-16(fp)
   1b2c8:	1887c83a 	sub	r3,r3,r2
   1b2cc:	e0ffff15 	stw	r3,-4(fp)
   1b2d0:	00000906 	br	1b2f8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   1b2d4:	e0bffe17 	ldw	r2,-8(fp)
   1b2d8:	1090000c 	andi	r2,r2,16384
   1b2dc:	1005003a 	cmpeq	r2,r2,zero
   1b2e0:	1000031e 	bne	r2,zero,1b2f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1b2e4:	00bffd44 	movi	r2,-11
   1b2e8:	e0bfff15 	stw	r2,-4(fp)
   1b2ec:	00000206 	br	1b2f8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1b2f0:	00bffec4 	movi	r2,-5
   1b2f4:	e0bfff15 	stw	r2,-4(fp)
   1b2f8:	e0bfff17 	ldw	r2,-4(fp)
}
   1b2fc:	e037883a 	mov	sp,fp
   1b300:	dfc00117 	ldw	ra,4(sp)
   1b304:	df000017 	ldw	fp,0(sp)
   1b308:	dec00204 	addi	sp,sp,8
   1b30c:	f800283a 	ret

0001b310 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b310:	defff204 	addi	sp,sp,-56
   1b314:	dfc00d15 	stw	ra,52(sp)
   1b318:	df000c15 	stw	fp,48(sp)
   1b31c:	df000c04 	addi	fp,sp,48
   1b320:	e13ffb15 	stw	r4,-20(fp)
   1b324:	e17ffc15 	stw	r5,-16(fp)
   1b328:	e1bffd15 	stw	r6,-12(fp)
   1b32c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1b330:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1b334:	e0bffc17 	ldw	r2,-16(fp)
   1b338:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b33c:	00003a06 	br	1b428 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1b340:	e0bffb17 	ldw	r2,-20(fp)
   1b344:	10800c17 	ldw	r2,48(r2)
   1b348:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   1b34c:	e0bffb17 	ldw	r2,-20(fp)
   1b350:	10800d17 	ldw	r2,52(r2)
   1b354:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   1b358:	e0fffa17 	ldw	r3,-24(fp)
   1b35c:	e0bff917 	ldw	r2,-28(fp)
   1b360:	1880062e 	bgeu	r3,r2,1b37c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1b364:	e0fff917 	ldw	r3,-28(fp)
   1b368:	e0bffa17 	ldw	r2,-24(fp)
   1b36c:	1885c83a 	sub	r2,r3,r2
   1b370:	10bfffc4 	addi	r2,r2,-1
   1b374:	e0bff815 	stw	r2,-32(fp)
   1b378:	00000c06 	br	1b3ac <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   1b37c:	e0bff917 	ldw	r2,-28(fp)
   1b380:	1005003a 	cmpeq	r2,r2,zero
   1b384:	1000051e 	bne	r2,zero,1b39c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1b388:	00820004 	movi	r2,2048
   1b38c:	e0fffa17 	ldw	r3,-24(fp)
   1b390:	10c5c83a 	sub	r2,r2,r3
   1b394:	e0bff815 	stw	r2,-32(fp)
   1b398:	00000406 	br	1b3ac <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1b39c:	0081ffc4 	movi	r2,2047
   1b3a0:	e0fffa17 	ldw	r3,-24(fp)
   1b3a4:	10c5c83a 	sub	r2,r2,r3
   1b3a8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1b3ac:	e0bff817 	ldw	r2,-32(fp)
   1b3b0:	1005003a 	cmpeq	r2,r2,zero
   1b3b4:	10001f1e 	bne	r2,zero,1b434 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   1b3b8:	e0fffd17 	ldw	r3,-12(fp)
   1b3bc:	e0bff817 	ldw	r2,-32(fp)
   1b3c0:	1880022e 	bgeu	r3,r2,1b3cc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   1b3c4:	e0bffd17 	ldw	r2,-12(fp)
   1b3c8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1b3cc:	e0bffb17 	ldw	r2,-20(fp)
   1b3d0:	10c20e04 	addi	r3,r2,2104
   1b3d4:	e0bffa17 	ldw	r2,-24(fp)
   1b3d8:	1885883a 	add	r2,r3,r2
   1b3dc:	e0fffc17 	ldw	r3,-16(fp)
   1b3e0:	1009883a 	mov	r4,r2
   1b3e4:	180b883a 	mov	r5,r3
   1b3e8:	e1bff817 	ldw	r6,-32(fp)
   1b3ec:	00158700 	call	15870 <memcpy>
      ptr   += n;
   1b3f0:	e0fff817 	ldw	r3,-32(fp)
   1b3f4:	e0bffc17 	ldw	r2,-16(fp)
   1b3f8:	10c5883a 	add	r2,r2,r3
   1b3fc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   1b400:	e0fffd17 	ldw	r3,-12(fp)
   1b404:	e0bff817 	ldw	r2,-32(fp)
   1b408:	1885c83a 	sub	r2,r3,r2
   1b40c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b410:	e0fffa17 	ldw	r3,-24(fp)
   1b414:	e0bff817 	ldw	r2,-32(fp)
   1b418:	1885883a 	add	r2,r3,r2
   1b41c:	10c1ffcc 	andi	r3,r2,2047
   1b420:	e0bffb17 	ldw	r2,-20(fp)
   1b424:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b428:	e0bffd17 	ldw	r2,-12(fp)
   1b42c:	10800048 	cmpgei	r2,r2,1
   1b430:	103fc31e 	bne	r2,zero,1b340 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b434:	0005303a 	rdctl	r2,status
   1b438:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b43c:	e0fff517 	ldw	r3,-44(fp)
   1b440:	00bfff84 	movi	r2,-2
   1b444:	1884703a 	and	r2,r3,r2
   1b448:	1001703a 	wrctl	status,r2
  
  return context;
   1b44c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1b450:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b454:	e0bffb17 	ldw	r2,-20(fp)
   1b458:	10800817 	ldw	r2,32(r2)
   1b45c:	10c00094 	ori	r3,r2,2
   1b460:	e0bffb17 	ldw	r2,-20(fp)
   1b464:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b468:	e0bffb17 	ldw	r2,-20(fp)
   1b46c:	10800017 	ldw	r2,0(r2)
   1b470:	11000104 	addi	r4,r2,4
   1b474:	e0bffb17 	ldw	r2,-20(fp)
   1b478:	10800817 	ldw	r2,32(r2)
   1b47c:	1007883a 	mov	r3,r2
   1b480:	2005883a 	mov	r2,r4
   1b484:	10c00035 	stwio	r3,0(r2)
   1b488:	e0bff717 	ldw	r2,-36(fp)
   1b48c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b490:	e0bff417 	ldw	r2,-48(fp)
   1b494:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1b498:	e0bffd17 	ldw	r2,-12(fp)
   1b49c:	10800050 	cmplti	r2,r2,1
   1b4a0:	1000111e 	bne	r2,zero,1b4e8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   1b4a4:	e0bffe17 	ldw	r2,-8(fp)
   1b4a8:	1090000c 	andi	r2,r2,16384
   1b4ac:	1004c03a 	cmpne	r2,r2,zero
   1b4b0:	1000101e 	bne	r2,zero,1b4f4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1b4b4:	e0bffb17 	ldw	r2,-20(fp)
   1b4b8:	10c00d17 	ldw	r3,52(r2)
   1b4bc:	e0bff917 	ldw	r2,-28(fp)
   1b4c0:	1880051e 	bne	r3,r2,1b4d8 <altera_avalon_jtag_uart_write+0x1c8>
   1b4c4:	e0bffb17 	ldw	r2,-20(fp)
   1b4c8:	10c00917 	ldw	r3,36(r2)
   1b4cc:	e0bffb17 	ldw	r2,-20(fp)
   1b4d0:	10800117 	ldw	r2,4(r2)
   1b4d4:	18bff736 	bltu	r3,r2,1b4b4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1b4d8:	e0bffb17 	ldw	r2,-20(fp)
   1b4dc:	10c00d17 	ldw	r3,52(r2)
   1b4e0:	e0bff917 	ldw	r2,-28(fp)
   1b4e4:	18800326 	beq	r3,r2,1b4f4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   1b4e8:	e0bffd17 	ldw	r2,-12(fp)
   1b4ec:	10800048 	cmpgei	r2,r2,1
   1b4f0:	103fcd1e 	bne	r2,zero,1b428 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1b4f4:	e0fffc17 	ldw	r3,-16(fp)
   1b4f8:	e0bff617 	ldw	r2,-40(fp)
   1b4fc:	18800526 	beq	r3,r2,1b514 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   1b500:	e0fffc17 	ldw	r3,-16(fp)
   1b504:	e0bff617 	ldw	r2,-40(fp)
   1b508:	1887c83a 	sub	r3,r3,r2
   1b50c:	e0ffff15 	stw	r3,-4(fp)
   1b510:	00000906 	br	1b538 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   1b514:	e0bffe17 	ldw	r2,-8(fp)
   1b518:	1090000c 	andi	r2,r2,16384
   1b51c:	1005003a 	cmpeq	r2,r2,zero
   1b520:	1000031e 	bne	r2,zero,1b530 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   1b524:	00bffd44 	movi	r2,-11
   1b528:	e0bfff15 	stw	r2,-4(fp)
   1b52c:	00000206 	br	1b538 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   1b530:	00bffec4 	movi	r2,-5
   1b534:	e0bfff15 	stw	r2,-4(fp)
   1b538:	e0bfff17 	ldw	r2,-4(fp)
}
   1b53c:	e037883a 	mov	sp,fp
   1b540:	dfc00117 	ldw	ra,4(sp)
   1b544:	df000017 	ldw	fp,0(sp)
   1b548:	dec00204 	addi	sp,sp,8
   1b54c:	f800283a 	ret

0001b550 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1b550:	defffa04 	addi	sp,sp,-24
   1b554:	dfc00515 	stw	ra,20(sp)
   1b558:	df000415 	stw	fp,16(sp)
   1b55c:	df000404 	addi	fp,sp,16
   1b560:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1b564:	e0bfff17 	ldw	r2,-4(fp)
   1b568:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1b56c:	e0bfff17 	ldw	r2,-4(fp)
   1b570:	10800104 	addi	r2,r2,4
   1b574:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b578:	0005303a 	rdctl	r2,status
   1b57c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b580:	e0fffd17 	ldw	r3,-12(fp)
   1b584:	00bfff84 	movi	r2,-2
   1b588:	1884703a 	and	r2,r3,r2
   1b58c:	1001703a 	wrctl	status,r2
  
  return context;
   1b590:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1b594:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   1b598:	001c1640 	call	1c164 <alt_tick>
   1b59c:	e0bffe17 	ldw	r2,-8(fp)
   1b5a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b5a4:	e0bffc17 	ldw	r2,-16(fp)
   1b5a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1b5ac:	e037883a 	mov	sp,fp
   1b5b0:	dfc00117 	ldw	ra,4(sp)
   1b5b4:	df000017 	ldw	fp,0(sp)
   1b5b8:	dec00204 	addi	sp,sp,8
   1b5bc:	f800283a 	ret

0001b5c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1b5c0:	defff804 	addi	sp,sp,-32
   1b5c4:	dfc00715 	stw	ra,28(sp)
   1b5c8:	df000615 	stw	fp,24(sp)
   1b5cc:	df000604 	addi	fp,sp,24
   1b5d0:	e13ffc15 	stw	r4,-16(fp)
   1b5d4:	e17ffd15 	stw	r5,-12(fp)
   1b5d8:	e1bffe15 	stw	r6,-8(fp)
   1b5dc:	e1ffff15 	stw	r7,-4(fp)
   1b5e0:	e0bfff17 	ldw	r2,-4(fp)
   1b5e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1b5e8:	00800134 	movhi	r2,4
   1b5ec:	10a78b04 	addi	r2,r2,-25044
   1b5f0:	10800017 	ldw	r2,0(r2)
   1b5f4:	1004c03a 	cmpne	r2,r2,zero
   1b5f8:	1000041e 	bne	r2,zero,1b60c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   1b5fc:	00c00134 	movhi	r3,4
   1b600:	18e78b04 	addi	r3,r3,-25044
   1b604:	e0bffb17 	ldw	r2,-20(fp)
   1b608:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1b60c:	e0bffc17 	ldw	r2,-16(fp)
   1b610:	10800104 	addi	r2,r2,4
   1b614:	1007883a 	mov	r3,r2
   1b618:	008001c4 	movi	r2,7
   1b61c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1b620:	d8000015 	stw	zero,0(sp)
   1b624:	e13ffd17 	ldw	r4,-12(fp)
   1b628:	e17ffe17 	ldw	r5,-8(fp)
   1b62c:	018000b4 	movhi	r6,2
   1b630:	31ad5404 	addi	r6,r6,-19120
   1b634:	e1fffc17 	ldw	r7,-16(fp)
   1b638:	001b9cc0 	call	1b9cc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1b63c:	e037883a 	mov	sp,fp
   1b640:	dfc00117 	ldw	ra,4(sp)
   1b644:	df000017 	ldw	fp,0(sp)
   1b648:	dec00204 	addi	sp,sp,8
   1b64c:	f800283a 	ret

0001b650 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b650:	defff404 	addi	sp,sp,-48
   1b654:	df000b15 	stw	fp,44(sp)
   1b658:	df000b04 	addi	fp,sp,44
   1b65c:	e13ffb15 	stw	r4,-20(fp)
   1b660:	e17ffc15 	stw	r5,-16(fp)
   1b664:	e1bffd15 	stw	r6,-12(fp)
   1b668:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b66c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b670:	00800134 	movhi	r2,4
   1b674:	10a78b04 	addi	r2,r2,-25044
   1b678:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b67c:	1005003a 	cmpeq	r2,r2,zero
   1b680:	1000411e 	bne	r2,zero,1b788 <alt_alarm_start+0x138>
  {
    if (alarm)
   1b684:	e0bffb17 	ldw	r2,-20(fp)
   1b688:	1005003a 	cmpeq	r2,r2,zero
   1b68c:	10003b1e 	bne	r2,zero,1b77c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1b690:	e0fffb17 	ldw	r3,-20(fp)
   1b694:	e0bffd17 	ldw	r2,-12(fp)
   1b698:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   1b69c:	e0fffb17 	ldw	r3,-20(fp)
   1b6a0:	e0bffe17 	ldw	r2,-8(fp)
   1b6a4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b6a8:	0005303a 	rdctl	r2,status
   1b6ac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b6b0:	e0fff817 	ldw	r3,-32(fp)
   1b6b4:	00bfff84 	movi	r2,-2
   1b6b8:	1884703a 	and	r2,r3,r2
   1b6bc:	1001703a 	wrctl	status,r2
  
  return context;
   1b6c0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b6c4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b6c8:	00800134 	movhi	r2,4
   1b6cc:	10a78c04 	addi	r2,r2,-25040
   1b6d0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b6d4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b6d8:	e0fffc17 	ldw	r3,-16(fp)
   1b6dc:	e0bff917 	ldw	r2,-28(fp)
   1b6e0:	1885883a 	add	r2,r3,r2
   1b6e4:	10c00044 	addi	r3,r2,1
   1b6e8:	e0bffb17 	ldw	r2,-20(fp)
   1b6ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b6f0:	e0bffb17 	ldw	r2,-20(fp)
   1b6f4:	10c00217 	ldw	r3,8(r2)
   1b6f8:	e0bff917 	ldw	r2,-28(fp)
   1b6fc:	1880042e 	bgeu	r3,r2,1b710 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1b700:	e0fffb17 	ldw	r3,-20(fp)
   1b704:	00800044 	movi	r2,1
   1b708:	18800405 	stb	r2,16(r3)
   1b70c:	00000206 	br	1b718 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1b710:	e0bffb17 	ldw	r2,-20(fp)
   1b714:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b718:	e0fffb17 	ldw	r3,-20(fp)
   1b71c:	00800134 	movhi	r2,4
   1b720:	10a77904 	addi	r2,r2,-25116
   1b724:	e0bff615 	stw	r2,-40(fp)
   1b728:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b72c:	e0fff717 	ldw	r3,-36(fp)
   1b730:	e0bff617 	ldw	r2,-40(fp)
   1b734:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1b738:	e0bff617 	ldw	r2,-40(fp)
   1b73c:	10c00017 	ldw	r3,0(r2)
   1b740:	e0bff717 	ldw	r2,-36(fp)
   1b744:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b748:	e0bff617 	ldw	r2,-40(fp)
   1b74c:	10c00017 	ldw	r3,0(r2)
   1b750:	e0bff717 	ldw	r2,-36(fp)
   1b754:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1b758:	e0fff617 	ldw	r3,-40(fp)
   1b75c:	e0bff717 	ldw	r2,-36(fp)
   1b760:	18800015 	stw	r2,0(r3)
   1b764:	e0bffa17 	ldw	r2,-24(fp)
   1b768:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b76c:	e0bff517 	ldw	r2,-44(fp)
   1b770:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b774:	e03fff15 	stw	zero,-4(fp)
   1b778:	00000506 	br	1b790 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   1b77c:	00bffa84 	movi	r2,-22
   1b780:	e0bfff15 	stw	r2,-4(fp)
   1b784:	00000206 	br	1b790 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   1b788:	00bfde84 	movi	r2,-134
   1b78c:	e0bfff15 	stw	r2,-4(fp)
   1b790:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   1b794:	e037883a 	mov	sp,fp
   1b798:	df000017 	ldw	fp,0(sp)
   1b79c:	dec00104 	addi	sp,sp,4
   1b7a0:	f800283a 	ret

0001b7a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b7a4:	deffff04 	addi	sp,sp,-4
   1b7a8:	df000015 	stw	fp,0(sp)
   1b7ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b7b0:	e037883a 	mov	sp,fp
   1b7b4:	df000017 	ldw	fp,0(sp)
   1b7b8:	dec00104 	addi	sp,sp,4
   1b7bc:	f800283a 	ret

0001b7c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b7c0:	defff904 	addi	sp,sp,-28
   1b7c4:	dfc00615 	stw	ra,24(sp)
   1b7c8:	df000515 	stw	fp,20(sp)
   1b7cc:	df000504 	addi	fp,sp,20
   1b7d0:	e13ffd15 	stw	r4,-12(fp)
   1b7d4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b7d8:	e0bffd17 	ldw	r2,-12(fp)
   1b7dc:	1005003a 	cmpeq	r2,r2,zero
   1b7e0:	1000041e 	bne	r2,zero,1b7f4 <alt_dev_llist_insert+0x34>
   1b7e4:	e0bffd17 	ldw	r2,-12(fp)
   1b7e8:	10800217 	ldw	r2,8(r2)
   1b7ec:	1004c03a 	cmpne	r2,r2,zero
   1b7f0:	1000071e 	bne	r2,zero,1b810 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   1b7f4:	001b8740 	call	1b874 <alt_get_errno>
   1b7f8:	1007883a 	mov	r3,r2
   1b7fc:	00800584 	movi	r2,22
   1b800:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1b804:	00bffa84 	movi	r2,-22
   1b808:	e0bfff15 	stw	r2,-4(fp)
   1b80c:	00001306 	br	1b85c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b810:	e0fffd17 	ldw	r3,-12(fp)
   1b814:	e0bffe17 	ldw	r2,-8(fp)
   1b818:	e0bffb15 	stw	r2,-20(fp)
   1b81c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b820:	e0fffc17 	ldw	r3,-16(fp)
   1b824:	e0bffb17 	ldw	r2,-20(fp)
   1b828:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1b82c:	e0bffb17 	ldw	r2,-20(fp)
   1b830:	10c00017 	ldw	r3,0(r2)
   1b834:	e0bffc17 	ldw	r2,-16(fp)
   1b838:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b83c:	e0bffb17 	ldw	r2,-20(fp)
   1b840:	10c00017 	ldw	r3,0(r2)
   1b844:	e0bffc17 	ldw	r2,-16(fp)
   1b848:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1b84c:	e0fffb17 	ldw	r3,-20(fp)
   1b850:	e0bffc17 	ldw	r2,-16(fp)
   1b854:	18800015 	stw	r2,0(r3)

  return 0;  
   1b858:	e03fff15 	stw	zero,-4(fp)
   1b85c:	e0bfff17 	ldw	r2,-4(fp)
}
   1b860:	e037883a 	mov	sp,fp
   1b864:	dfc00117 	ldw	ra,4(sp)
   1b868:	df000017 	ldw	fp,0(sp)
   1b86c:	dec00204 	addi	sp,sp,8
   1b870:	f800283a 	ret

0001b874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b874:	defffd04 	addi	sp,sp,-12
   1b878:	dfc00215 	stw	ra,8(sp)
   1b87c:	df000115 	stw	fp,4(sp)
   1b880:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b884:	00800134 	movhi	r2,4
   1b888:	10a77604 	addi	r2,r2,-25128
   1b88c:	10800017 	ldw	r2,0(r2)
   1b890:	1005003a 	cmpeq	r2,r2,zero
   1b894:	1000061e 	bne	r2,zero,1b8b0 <alt_get_errno+0x3c>
   1b898:	00800134 	movhi	r2,4
   1b89c:	10a77604 	addi	r2,r2,-25128
   1b8a0:	10800017 	ldw	r2,0(r2)
   1b8a4:	103ee83a 	callr	r2
   1b8a8:	e0bfff15 	stw	r2,-4(fp)
   1b8ac:	00000306 	br	1b8bc <alt_get_errno+0x48>
   1b8b0:	00800134 	movhi	r2,4
   1b8b4:	10a78604 	addi	r2,r2,-25064
   1b8b8:	e0bfff15 	stw	r2,-4(fp)
   1b8bc:	e0bfff17 	ldw	r2,-4(fp)
}
   1b8c0:	e037883a 	mov	sp,fp
   1b8c4:	dfc00117 	ldw	ra,4(sp)
   1b8c8:	df000017 	ldw	fp,0(sp)
   1b8cc:	dec00204 	addi	sp,sp,8
   1b8d0:	f800283a 	ret

0001b8d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b8d4:	defffd04 	addi	sp,sp,-12
   1b8d8:	dfc00215 	stw	ra,8(sp)
   1b8dc:	df000115 	stw	fp,4(sp)
   1b8e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b8e4:	00bfff04 	movi	r2,-4
   1b8e8:	00c000b4 	movhi	r3,2
   1b8ec:	18f26c04 	addi	r3,r3,-13904
   1b8f0:	1885883a 	add	r2,r3,r2
   1b8f4:	e0bfff15 	stw	r2,-4(fp)
   1b8f8:	00000606 	br	1b914 <_do_ctors+0x40>
        (*ctor) (); 
   1b8fc:	e0bfff17 	ldw	r2,-4(fp)
   1b900:	10800017 	ldw	r2,0(r2)
   1b904:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b908:	e0bfff17 	ldw	r2,-4(fp)
   1b90c:	10bfff04 	addi	r2,r2,-4
   1b910:	e0bfff15 	stw	r2,-4(fp)
   1b914:	e0ffff17 	ldw	r3,-4(fp)
   1b918:	008000b4 	movhi	r2,2
   1b91c:	10b26b04 	addi	r2,r2,-13908
   1b920:	18bff62e 	bgeu	r3,r2,1b8fc <_do_ctors+0x28>
        (*ctor) (); 
}
   1b924:	e037883a 	mov	sp,fp
   1b928:	dfc00117 	ldw	ra,4(sp)
   1b92c:	df000017 	ldw	fp,0(sp)
   1b930:	dec00204 	addi	sp,sp,8
   1b934:	f800283a 	ret

0001b938 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b938:	defffd04 	addi	sp,sp,-12
   1b93c:	dfc00215 	stw	ra,8(sp)
   1b940:	df000115 	stw	fp,4(sp)
   1b944:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b948:	00bfff04 	movi	r2,-4
   1b94c:	00c000b4 	movhi	r3,2
   1b950:	18f26c04 	addi	r3,r3,-13904
   1b954:	1885883a 	add	r2,r3,r2
   1b958:	e0bfff15 	stw	r2,-4(fp)
   1b95c:	00000606 	br	1b978 <_do_dtors+0x40>
        (*dtor) (); 
   1b960:	e0bfff17 	ldw	r2,-4(fp)
   1b964:	10800017 	ldw	r2,0(r2)
   1b968:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b96c:	e0bfff17 	ldw	r2,-4(fp)
   1b970:	10bfff04 	addi	r2,r2,-4
   1b974:	e0bfff15 	stw	r2,-4(fp)
   1b978:	e0ffff17 	ldw	r3,-4(fp)
   1b97c:	008000b4 	movhi	r2,2
   1b980:	10b26c04 	addi	r2,r2,-13904
   1b984:	18bff62e 	bgeu	r3,r2,1b960 <_do_dtors+0x28>
        (*dtor) (); 
}
   1b988:	e037883a 	mov	sp,fp
   1b98c:	dfc00117 	ldw	ra,4(sp)
   1b990:	df000017 	ldw	fp,0(sp)
   1b994:	dec00204 	addi	sp,sp,8
   1b998:	f800283a 	ret

0001b99c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b99c:	defffe04 	addi	sp,sp,-8
   1b9a0:	dfc00115 	stw	ra,4(sp)
   1b9a4:	df000015 	stw	fp,0(sp)
   1b9a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1b9ac:	0009883a 	mov	r4,zero
   1b9b0:	01440004 	movi	r5,4096
   1b9b4:	001c5140 	call	1c514 <alt_icache_flush>
#endif
}
   1b9b8:	e037883a 	mov	sp,fp
   1b9bc:	dfc00117 	ldw	ra,4(sp)
   1b9c0:	df000017 	ldw	fp,0(sp)
   1b9c4:	dec00204 	addi	sp,sp,8
   1b9c8:	f800283a 	ret

0001b9cc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b9cc:	defff904 	addi	sp,sp,-28
   1b9d0:	dfc00615 	stw	ra,24(sp)
   1b9d4:	df000515 	stw	fp,20(sp)
   1b9d8:	df000504 	addi	fp,sp,20
   1b9dc:	e13ffc15 	stw	r4,-16(fp)
   1b9e0:	e17ffd15 	stw	r5,-12(fp)
   1b9e4:	e1bffe15 	stw	r6,-8(fp)
   1b9e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1b9ec:	e0800217 	ldw	r2,8(fp)
   1b9f0:	d8800015 	stw	r2,0(sp)
   1b9f4:	e13ffc17 	ldw	r4,-16(fp)
   1b9f8:	e17ffd17 	ldw	r5,-12(fp)
   1b9fc:	e1bffe17 	ldw	r6,-8(fp)
   1ba00:	e1ffff17 	ldw	r7,-4(fp)
   1ba04:	001bba00 	call	1bba0 <alt_iic_isr_register>
}  
   1ba08:	e037883a 	mov	sp,fp
   1ba0c:	dfc00117 	ldw	ra,4(sp)
   1ba10:	df000017 	ldw	fp,0(sp)
   1ba14:	dec00204 	addi	sp,sp,8
   1ba18:	f800283a 	ret

0001ba1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1ba1c:	defff904 	addi	sp,sp,-28
   1ba20:	df000615 	stw	fp,24(sp)
   1ba24:	df000604 	addi	fp,sp,24
   1ba28:	e13ffe15 	stw	r4,-8(fp)
   1ba2c:	e17fff15 	stw	r5,-4(fp)
   1ba30:	e0bfff17 	ldw	r2,-4(fp)
   1ba34:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba38:	0005303a 	rdctl	r2,status
   1ba3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba40:	e0fffb17 	ldw	r3,-20(fp)
   1ba44:	00bfff84 	movi	r2,-2
   1ba48:	1884703a 	and	r2,r3,r2
   1ba4c:	1001703a 	wrctl	status,r2
  
  return context;
   1ba50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1ba54:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   1ba58:	e0fffc17 	ldw	r3,-16(fp)
   1ba5c:	00800044 	movi	r2,1
   1ba60:	10c4983a 	sll	r2,r2,r3
   1ba64:	1007883a 	mov	r3,r2
   1ba68:	00800134 	movhi	r2,4
   1ba6c:	10a78a04 	addi	r2,r2,-25048
   1ba70:	10800017 	ldw	r2,0(r2)
   1ba74:	1886b03a 	or	r3,r3,r2
   1ba78:	00800134 	movhi	r2,4
   1ba7c:	10a78a04 	addi	r2,r2,-25048
   1ba80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1ba84:	00800134 	movhi	r2,4
   1ba88:	10a78a04 	addi	r2,r2,-25048
   1ba8c:	10800017 	ldw	r2,0(r2)
   1ba90:	100170fa 	wrctl	ienable,r2
   1ba94:	e0bffd17 	ldw	r2,-12(fp)
   1ba98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba9c:	e0bffa17 	ldw	r2,-24(fp)
   1baa0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1baa4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1baa8:	e037883a 	mov	sp,fp
   1baac:	df000017 	ldw	fp,0(sp)
   1bab0:	dec00104 	addi	sp,sp,4
   1bab4:	f800283a 	ret

0001bab8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1bab8:	defff904 	addi	sp,sp,-28
   1babc:	df000615 	stw	fp,24(sp)
   1bac0:	df000604 	addi	fp,sp,24
   1bac4:	e13ffe15 	stw	r4,-8(fp)
   1bac8:	e17fff15 	stw	r5,-4(fp)
   1bacc:	e0bfff17 	ldw	r2,-4(fp)
   1bad0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bad4:	0005303a 	rdctl	r2,status
   1bad8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1badc:	e0fffb17 	ldw	r3,-20(fp)
   1bae0:	00bfff84 	movi	r2,-2
   1bae4:	1884703a 	and	r2,r3,r2
   1bae8:	1001703a 	wrctl	status,r2
  
  return context;
   1baec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1baf0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   1baf4:	e0fffc17 	ldw	r3,-16(fp)
   1baf8:	00800044 	movi	r2,1
   1bafc:	10c4983a 	sll	r2,r2,r3
   1bb00:	0084303a 	nor	r2,zero,r2
   1bb04:	1007883a 	mov	r3,r2
   1bb08:	00800134 	movhi	r2,4
   1bb0c:	10a78a04 	addi	r2,r2,-25048
   1bb10:	10800017 	ldw	r2,0(r2)
   1bb14:	1886703a 	and	r3,r3,r2
   1bb18:	00800134 	movhi	r2,4
   1bb1c:	10a78a04 	addi	r2,r2,-25048
   1bb20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bb24:	00800134 	movhi	r2,4
   1bb28:	10a78a04 	addi	r2,r2,-25048
   1bb2c:	10800017 	ldw	r2,0(r2)
   1bb30:	100170fa 	wrctl	ienable,r2
   1bb34:	e0bffd17 	ldw	r2,-12(fp)
   1bb38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bb3c:	e0bffa17 	ldw	r2,-24(fp)
   1bb40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bb44:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1bb48:	e037883a 	mov	sp,fp
   1bb4c:	df000017 	ldw	fp,0(sp)
   1bb50:	dec00104 	addi	sp,sp,4
   1bb54:	f800283a 	ret

0001bb58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1bb58:	defffc04 	addi	sp,sp,-16
   1bb5c:	df000315 	stw	fp,12(sp)
   1bb60:	df000304 	addi	fp,sp,12
   1bb64:	e13ffe15 	stw	r4,-8(fp)
   1bb68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1bb6c:	000530fa 	rdctl	r2,ienable
   1bb70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1bb74:	e0ffff17 	ldw	r3,-4(fp)
   1bb78:	00800044 	movi	r2,1
   1bb7c:	10c4983a 	sll	r2,r2,r3
   1bb80:	1007883a 	mov	r3,r2
   1bb84:	e0bffd17 	ldw	r2,-12(fp)
   1bb88:	1884703a 	and	r2,r3,r2
   1bb8c:	1004c03a 	cmpne	r2,r2,zero
}
   1bb90:	e037883a 	mov	sp,fp
   1bb94:	df000017 	ldw	fp,0(sp)
   1bb98:	dec00104 	addi	sp,sp,4
   1bb9c:	f800283a 	ret

0001bba0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1bba0:	defff404 	addi	sp,sp,-48
   1bba4:	dfc00b15 	stw	ra,44(sp)
   1bba8:	df000a15 	stw	fp,40(sp)
   1bbac:	df000a04 	addi	fp,sp,40
   1bbb0:	e13ffb15 	stw	r4,-20(fp)
   1bbb4:	e17ffc15 	stw	r5,-16(fp)
   1bbb8:	e1bffd15 	stw	r6,-12(fp)
   1bbbc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   1bbc0:	00bffa84 	movi	r2,-22
   1bbc4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1bbc8:	e0bffc17 	ldw	r2,-16(fp)
   1bbcc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1bbd0:	e0bff917 	ldw	r2,-28(fp)
   1bbd4:	10800808 	cmpgei	r2,r2,32
   1bbd8:	1000291e 	bne	r2,zero,1bc80 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bbdc:	0005303a 	rdctl	r2,status
   1bbe0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bbe4:	e0fff717 	ldw	r3,-36(fp)
   1bbe8:	00bfff84 	movi	r2,-2
   1bbec:	1884703a 	and	r2,r3,r2
   1bbf0:	1001703a 	wrctl	status,r2
  
  return context;
   1bbf4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1bbf8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   1bbfc:	e0bff917 	ldw	r2,-28(fp)
   1bc00:	00c00134 	movhi	r3,4
   1bc04:	18e79704 	addi	r3,r3,-24996
   1bc08:	100490fa 	slli	r2,r2,3
   1bc0c:	10c7883a 	add	r3,r2,r3
   1bc10:	e0bffd17 	ldw	r2,-12(fp)
   1bc14:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   1bc18:	e0bff917 	ldw	r2,-28(fp)
   1bc1c:	00c00134 	movhi	r3,4
   1bc20:	18e79704 	addi	r3,r3,-24996
   1bc24:	100490fa 	slli	r2,r2,3
   1bc28:	10c5883a 	add	r2,r2,r3
   1bc2c:	10c00104 	addi	r3,r2,4
   1bc30:	e0bffe17 	ldw	r2,-8(fp)
   1bc34:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1bc38:	e0bffd17 	ldw	r2,-12(fp)
   1bc3c:	1005003a 	cmpeq	r2,r2,zero
   1bc40:	1000051e 	bne	r2,zero,1bc58 <alt_iic_isr_register+0xb8>
   1bc44:	e17ff917 	ldw	r5,-28(fp)
   1bc48:	e13ffb17 	ldw	r4,-20(fp)
   1bc4c:	001ba1c0 	call	1ba1c <alt_ic_irq_enable>
   1bc50:	e0bfff15 	stw	r2,-4(fp)
   1bc54:	00000406 	br	1bc68 <alt_iic_isr_register+0xc8>
   1bc58:	e17ff917 	ldw	r5,-28(fp)
   1bc5c:	e13ffb17 	ldw	r4,-20(fp)
   1bc60:	001bab80 	call	1bab8 <alt_ic_irq_disable>
   1bc64:	e0bfff15 	stw	r2,-4(fp)
   1bc68:	e0bfff17 	ldw	r2,-4(fp)
   1bc6c:	e0bffa15 	stw	r2,-24(fp)
   1bc70:	e0bff817 	ldw	r2,-32(fp)
   1bc74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bc78:	e0bff617 	ldw	r2,-40(fp)
   1bc7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1bc80:	e0bffa17 	ldw	r2,-24(fp)
}
   1bc84:	e037883a 	mov	sp,fp
   1bc88:	dfc00117 	ldw	ra,4(sp)
   1bc8c:	df000017 	ldw	fp,0(sp)
   1bc90:	dec00204 	addi	sp,sp,8
   1bc94:	f800283a 	ret

0001bc98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1bc98:	defff804 	addi	sp,sp,-32
   1bc9c:	dfc00715 	stw	ra,28(sp)
   1bca0:	df000615 	stw	fp,24(sp)
   1bca4:	dc000515 	stw	r16,20(sp)
   1bca8:	df000504 	addi	fp,sp,20
   1bcac:	e13ffc15 	stw	r4,-16(fp)
   1bcb0:	e17ffd15 	stw	r5,-12(fp)
   1bcb4:	e1bffe15 	stw	r6,-8(fp)
   1bcb8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1bcbc:	e13ffd17 	ldw	r4,-12(fp)
   1bcc0:	e17ffe17 	ldw	r5,-8(fp)
   1bcc4:	e1bfff17 	ldw	r6,-4(fp)
   1bcc8:	001bee00 	call	1bee0 <open>
   1bccc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1bcd0:	e0bffb17 	ldw	r2,-20(fp)
   1bcd4:	1004803a 	cmplt	r2,r2,zero
   1bcd8:	10001f1e 	bne	r2,zero,1bd58 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1bcdc:	e13ffb17 	ldw	r4,-20(fp)
   1bce0:	04000134 	movhi	r16,4
   1bce4:	8422f304 	addi	r16,r16,-29748
   1bce8:	01400304 	movi	r5,12
   1bcec:	00197dc0 	call	197dc <__mulsi3>
   1bcf0:	1405883a 	add	r2,r2,r16
   1bcf4:	10c00017 	ldw	r3,0(r2)
   1bcf8:	e0bffc17 	ldw	r2,-16(fp)
   1bcfc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1bd00:	e13ffb17 	ldw	r4,-20(fp)
   1bd04:	04000134 	movhi	r16,4
   1bd08:	8422f304 	addi	r16,r16,-29748
   1bd0c:	01400304 	movi	r5,12
   1bd10:	00197dc0 	call	197dc <__mulsi3>
   1bd14:	1405883a 	add	r2,r2,r16
   1bd18:	10800104 	addi	r2,r2,4
   1bd1c:	10c00017 	ldw	r3,0(r2)
   1bd20:	e0bffc17 	ldw	r2,-16(fp)
   1bd24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1bd28:	e13ffb17 	ldw	r4,-20(fp)
   1bd2c:	04000134 	movhi	r16,4
   1bd30:	8422f304 	addi	r16,r16,-29748
   1bd34:	01400304 	movi	r5,12
   1bd38:	00197dc0 	call	197dc <__mulsi3>
   1bd3c:	1405883a 	add	r2,r2,r16
   1bd40:	10800204 	addi	r2,r2,8
   1bd44:	10c00017 	ldw	r3,0(r2)
   1bd48:	e0bffc17 	ldw	r2,-16(fp)
   1bd4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1bd50:	e13ffb17 	ldw	r4,-20(fp)
   1bd54:	001a7240 	call	1a724 <alt_release_fd>
  }
} 
   1bd58:	e037883a 	mov	sp,fp
   1bd5c:	dfc00217 	ldw	ra,8(sp)
   1bd60:	df000117 	ldw	fp,4(sp)
   1bd64:	dc000017 	ldw	r16,0(sp)
   1bd68:	dec00304 	addi	sp,sp,12
   1bd6c:	f800283a 	ret

0001bd70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1bd70:	defffb04 	addi	sp,sp,-20
   1bd74:	dfc00415 	stw	ra,16(sp)
   1bd78:	df000315 	stw	fp,12(sp)
   1bd7c:	df000304 	addi	fp,sp,12
   1bd80:	e13ffd15 	stw	r4,-12(fp)
   1bd84:	e17ffe15 	stw	r5,-8(fp)
   1bd88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1bd8c:	01000134 	movhi	r4,4
   1bd90:	2122f604 	addi	r4,r4,-29736
   1bd94:	e17ffd17 	ldw	r5,-12(fp)
   1bd98:	01800044 	movi	r6,1
   1bd9c:	01c07fc4 	movi	r7,511
   1bda0:	001bc980 	call	1bc98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1bda4:	01000134 	movhi	r4,4
   1bda8:	2122f304 	addi	r4,r4,-29748
   1bdac:	e17ffe17 	ldw	r5,-8(fp)
   1bdb0:	000d883a 	mov	r6,zero
   1bdb4:	01c07fc4 	movi	r7,511
   1bdb8:	001bc980 	call	1bc98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1bdbc:	01000134 	movhi	r4,4
   1bdc0:	2122f904 	addi	r4,r4,-29724
   1bdc4:	e17fff17 	ldw	r5,-4(fp)
   1bdc8:	01800044 	movi	r6,1
   1bdcc:	01c07fc4 	movi	r7,511
   1bdd0:	001bc980 	call	1bc98 <alt_open_fd>
}  
   1bdd4:	e037883a 	mov	sp,fp
   1bdd8:	dfc00117 	ldw	ra,4(sp)
   1bddc:	df000017 	ldw	fp,0(sp)
   1bde0:	dec00204 	addi	sp,sp,8
   1bde4:	f800283a 	ret

0001bde8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1bde8:	defffa04 	addi	sp,sp,-24
   1bdec:	dfc00515 	stw	ra,20(sp)
   1bdf0:	df000415 	stw	fp,16(sp)
   1bdf4:	dc000315 	stw	r16,12(sp)
   1bdf8:	df000304 	addi	fp,sp,12
   1bdfc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1be00:	e0bffe17 	ldw	r2,-8(fp)
   1be04:	10800217 	ldw	r2,8(r2)
   1be08:	10d00034 	orhi	r3,r2,16384
   1be0c:	e0bffe17 	ldw	r2,-8(fp)
   1be10:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1be14:	e03ffd15 	stw	zero,-12(fp)
   1be18:	00002306 	br	1bea8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1be1c:	e13ffd17 	ldw	r4,-12(fp)
   1be20:	04000134 	movhi	r16,4
   1be24:	8422f304 	addi	r16,r16,-29748
   1be28:	01400304 	movi	r5,12
   1be2c:	00197dc0 	call	197dc <__mulsi3>
   1be30:	1405883a 	add	r2,r2,r16
   1be34:	10c00017 	ldw	r3,0(r2)
   1be38:	e0bffe17 	ldw	r2,-8(fp)
   1be3c:	10800017 	ldw	r2,0(r2)
   1be40:	1880161e 	bne	r3,r2,1be9c <alt_file_locked+0xb4>
   1be44:	e13ffd17 	ldw	r4,-12(fp)
   1be48:	04000134 	movhi	r16,4
   1be4c:	8422f304 	addi	r16,r16,-29748
   1be50:	01400304 	movi	r5,12
   1be54:	00197dc0 	call	197dc <__mulsi3>
   1be58:	1405883a 	add	r2,r2,r16
   1be5c:	10800204 	addi	r2,r2,8
   1be60:	10800017 	ldw	r2,0(r2)
   1be64:	1004403a 	cmpge	r2,r2,zero
   1be68:	10000c1e 	bne	r2,zero,1be9c <alt_file_locked+0xb4>
   1be6c:	e13ffd17 	ldw	r4,-12(fp)
   1be70:	01400304 	movi	r5,12
   1be74:	00197dc0 	call	197dc <__mulsi3>
   1be78:	1007883a 	mov	r3,r2
   1be7c:	00800134 	movhi	r2,4
   1be80:	10a2f304 	addi	r2,r2,-29748
   1be84:	1887883a 	add	r3,r3,r2
   1be88:	e0bffe17 	ldw	r2,-8(fp)
   1be8c:	18800326 	beq	r3,r2,1be9c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1be90:	00bffcc4 	movi	r2,-13
   1be94:	e0bfff15 	stw	r2,-4(fp)
   1be98:	00000a06 	br	1bec4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1be9c:	e0bffd17 	ldw	r2,-12(fp)
   1bea0:	10800044 	addi	r2,r2,1
   1bea4:	e0bffd15 	stw	r2,-12(fp)
   1bea8:	00800134 	movhi	r2,4
   1beac:	10a77504 	addi	r2,r2,-25132
   1beb0:	10800017 	ldw	r2,0(r2)
   1beb4:	1007883a 	mov	r3,r2
   1beb8:	e0bffd17 	ldw	r2,-12(fp)
   1bebc:	18bfd72e 	bgeu	r3,r2,1be1c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1bec0:	e03fff15 	stw	zero,-4(fp)
   1bec4:	e0bfff17 	ldw	r2,-4(fp)
}
   1bec8:	e037883a 	mov	sp,fp
   1becc:	dfc00217 	ldw	ra,8(sp)
   1bed0:	df000117 	ldw	fp,4(sp)
   1bed4:	dc000017 	ldw	r16,0(sp)
   1bed8:	dec00304 	addi	sp,sp,12
   1bedc:	f800283a 	ret

0001bee0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1bee0:	defff404 	addi	sp,sp,-48
   1bee4:	dfc00b15 	stw	ra,44(sp)
   1bee8:	df000a15 	stw	fp,40(sp)
   1beec:	df000a04 	addi	fp,sp,40
   1bef0:	e13ffb15 	stw	r4,-20(fp)
   1bef4:	e17ffc15 	stw	r5,-16(fp)
   1bef8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1befc:	00bfffc4 	movi	r2,-1
   1bf00:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   1bf04:	00bffb44 	movi	r2,-19
   1bf08:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   1bf0c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1bf10:	e13ffb17 	ldw	r4,-20(fp)
   1bf14:	01400134 	movhi	r5,4
   1bf18:	29677304 	addi	r5,r5,-25140
   1bf1c:	001c2900 	call	1c290 <alt_find_dev>
   1bf20:	e0bffa15 	stw	r2,-24(fp)
   1bf24:	e0bffa17 	ldw	r2,-24(fp)
   1bf28:	1004c03a 	cmpne	r2,r2,zero
   1bf2c:	1000051e 	bne	r2,zero,1bf44 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1bf30:	e13ffb17 	ldw	r4,-20(fp)
   1bf34:	001c3240 	call	1c324 <alt_find_file>
   1bf38:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   1bf3c:	00800044 	movi	r2,1
   1bf40:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1bf44:	e0bffa17 	ldw	r2,-24(fp)
   1bf48:	1005003a 	cmpeq	r2,r2,zero
   1bf4c:	1000311e 	bne	r2,zero,1c014 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1bf50:	e13ffa17 	ldw	r4,-24(fp)
   1bf54:	001c4440 	call	1c444 <alt_get_fd>
   1bf58:	e0bff815 	stw	r2,-32(fp)
   1bf5c:	e0bff817 	ldw	r2,-32(fp)
   1bf60:	1004403a 	cmpge	r2,r2,zero
   1bf64:	1000031e 	bne	r2,zero,1bf74 <open+0x94>
    {
      status = index;
   1bf68:	e0bff817 	ldw	r2,-32(fp)
   1bf6c:	e0bff715 	stw	r2,-36(fp)
   1bf70:	00002a06 	br	1c01c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   1bf74:	e13ff817 	ldw	r4,-32(fp)
   1bf78:	01400304 	movi	r5,12
   1bf7c:	00197dc0 	call	197dc <__mulsi3>
   1bf80:	1007883a 	mov	r3,r2
   1bf84:	00800134 	movhi	r2,4
   1bf88:	10a2f304 	addi	r2,r2,-29748
   1bf8c:	1885883a 	add	r2,r3,r2
   1bf90:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1bf94:	e0fffc17 	ldw	r3,-16(fp)
   1bf98:	00900034 	movhi	r2,16384
   1bf9c:	10bfffc4 	addi	r2,r2,-1
   1bfa0:	1886703a 	and	r3,r3,r2
   1bfa4:	e0bff917 	ldw	r2,-28(fp)
   1bfa8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1bfac:	e0bff617 	ldw	r2,-40(fp)
   1bfb0:	1004c03a 	cmpne	r2,r2,zero
   1bfb4:	1000061e 	bne	r2,zero,1bfd0 <open+0xf0>
   1bfb8:	e13ff917 	ldw	r4,-28(fp)
   1bfbc:	001bde80 	call	1bde8 <alt_file_locked>
   1bfc0:	e0bff715 	stw	r2,-36(fp)
   1bfc4:	e0bff717 	ldw	r2,-36(fp)
   1bfc8:	1004803a 	cmplt	r2,r2,zero
   1bfcc:	1000131e 	bne	r2,zero,1c01c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1bfd0:	e0bffa17 	ldw	r2,-24(fp)
   1bfd4:	10800317 	ldw	r2,12(r2)
   1bfd8:	1005003a 	cmpeq	r2,r2,zero
   1bfdc:	1000091e 	bne	r2,zero,1c004 <open+0x124>
   1bfe0:	e0bffa17 	ldw	r2,-24(fp)
   1bfe4:	10800317 	ldw	r2,12(r2)
   1bfe8:	e13ff917 	ldw	r4,-28(fp)
   1bfec:	e17ffb17 	ldw	r5,-20(fp)
   1bff0:	e1bffc17 	ldw	r6,-16(fp)
   1bff4:	e1fffd17 	ldw	r7,-12(fp)
   1bff8:	103ee83a 	callr	r2
   1bffc:	e0bfff15 	stw	r2,-4(fp)
   1c000:	00000106 	br	1c008 <open+0x128>
   1c004:	e03fff15 	stw	zero,-4(fp)
   1c008:	e0bfff17 	ldw	r2,-4(fp)
   1c00c:	e0bff715 	stw	r2,-36(fp)
   1c010:	00000206 	br	1c01c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1c014:	00bffb44 	movi	r2,-19
   1c018:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1c01c:	e0bff717 	ldw	r2,-36(fp)
   1c020:	1004403a 	cmpge	r2,r2,zero
   1c024:	1000091e 	bne	r2,zero,1c04c <open+0x16c>
  {
    alt_release_fd (index);  
   1c028:	e13ff817 	ldw	r4,-32(fp)
   1c02c:	001a7240 	call	1a724 <alt_release_fd>
    ALT_ERRNO = -status;
   1c030:	001c06c0 	call	1c06c <alt_get_errno>
   1c034:	e0fff717 	ldw	r3,-36(fp)
   1c038:	00c7c83a 	sub	r3,zero,r3
   1c03c:	10c00015 	stw	r3,0(r2)
    return -1;
   1c040:	00bfffc4 	movi	r2,-1
   1c044:	e0bffe15 	stw	r2,-8(fp)
   1c048:	00000206 	br	1c054 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   1c04c:	e0bff817 	ldw	r2,-32(fp)
   1c050:	e0bffe15 	stw	r2,-8(fp)
   1c054:	e0bffe17 	ldw	r2,-8(fp)
}
   1c058:	e037883a 	mov	sp,fp
   1c05c:	dfc00117 	ldw	ra,4(sp)
   1c060:	df000017 	ldw	fp,0(sp)
   1c064:	dec00204 	addi	sp,sp,8
   1c068:	f800283a 	ret

0001c06c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c06c:	defffd04 	addi	sp,sp,-12
   1c070:	dfc00215 	stw	ra,8(sp)
   1c074:	df000115 	stw	fp,4(sp)
   1c078:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1c07c:	00800134 	movhi	r2,4
   1c080:	10a77604 	addi	r2,r2,-25128
   1c084:	10800017 	ldw	r2,0(r2)
   1c088:	1005003a 	cmpeq	r2,r2,zero
   1c08c:	1000061e 	bne	r2,zero,1c0a8 <alt_get_errno+0x3c>
   1c090:	00800134 	movhi	r2,4
   1c094:	10a77604 	addi	r2,r2,-25128
   1c098:	10800017 	ldw	r2,0(r2)
   1c09c:	103ee83a 	callr	r2
   1c0a0:	e0bfff15 	stw	r2,-4(fp)
   1c0a4:	00000306 	br	1c0b4 <alt_get_errno+0x48>
   1c0a8:	00800134 	movhi	r2,4
   1c0ac:	10a78604 	addi	r2,r2,-25064
   1c0b0:	e0bfff15 	stw	r2,-4(fp)
   1c0b4:	e0bfff17 	ldw	r2,-4(fp)
}
   1c0b8:	e037883a 	mov	sp,fp
   1c0bc:	dfc00117 	ldw	ra,4(sp)
   1c0c0:	df000017 	ldw	fp,0(sp)
   1c0c4:	dec00204 	addi	sp,sp,8
   1c0c8:	f800283a 	ret

0001c0cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1c0cc:	defffa04 	addi	sp,sp,-24
   1c0d0:	df000515 	stw	fp,20(sp)
   1c0d4:	df000504 	addi	fp,sp,20
   1c0d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c0dc:	0005303a 	rdctl	r2,status
   1c0e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c0e4:	e0fffd17 	ldw	r3,-12(fp)
   1c0e8:	00bfff84 	movi	r2,-2
   1c0ec:	1884703a 	and	r2,r3,r2
   1c0f0:	1001703a 	wrctl	status,r2
  
  return context;
   1c0f4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1c0f8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1c0fc:	e0bfff17 	ldw	r2,-4(fp)
   1c100:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1c104:	e0bffc17 	ldw	r2,-16(fp)
   1c108:	10c00017 	ldw	r3,0(r2)
   1c10c:	e0bffc17 	ldw	r2,-16(fp)
   1c110:	10800117 	ldw	r2,4(r2)
   1c114:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1c118:	e0bffc17 	ldw	r2,-16(fp)
   1c11c:	10c00117 	ldw	r3,4(r2)
   1c120:	e0bffc17 	ldw	r2,-16(fp)
   1c124:	10800017 	ldw	r2,0(r2)
   1c128:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1c12c:	e0fffc17 	ldw	r3,-16(fp)
   1c130:	e0bffc17 	ldw	r2,-16(fp)
   1c134:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1c138:	e0fffc17 	ldw	r3,-16(fp)
   1c13c:	e0bffc17 	ldw	r2,-16(fp)
   1c140:	18800015 	stw	r2,0(r3)
   1c144:	e0bffe17 	ldw	r2,-8(fp)
   1c148:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c14c:	e0bffb17 	ldw	r2,-20(fp)
   1c150:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1c154:	e037883a 	mov	sp,fp
   1c158:	df000017 	ldw	fp,0(sp)
   1c15c:	dec00104 	addi	sp,sp,4
   1c160:	f800283a 	ret

0001c164 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1c164:	defffb04 	addi	sp,sp,-20
   1c168:	dfc00415 	stw	ra,16(sp)
   1c16c:	df000315 	stw	fp,12(sp)
   1c170:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1c174:	d0a00e17 	ldw	r2,-32712(gp)
   1c178:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1c17c:	d0a02117 	ldw	r2,-32636(gp)
   1c180:	10800044 	addi	r2,r2,1
   1c184:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c188:	00003106 	br	1c250 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1c18c:	e0bffe17 	ldw	r2,-8(fp)
   1c190:	10800017 	ldw	r2,0(r2)
   1c194:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1c198:	e0bffe17 	ldw	r2,-8(fp)
   1c19c:	10800403 	ldbu	r2,16(r2)
   1c1a0:	10803fcc 	andi	r2,r2,255
   1c1a4:	1005003a 	cmpeq	r2,r2,zero
   1c1a8:	1000051e 	bne	r2,zero,1c1c0 <alt_tick+0x5c>
   1c1ac:	d0a02117 	ldw	r2,-32636(gp)
   1c1b0:	1004c03a 	cmpne	r2,r2,zero
   1c1b4:	1000021e 	bne	r2,zero,1c1c0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1c1b8:	e0bffe17 	ldw	r2,-8(fp)
   1c1bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1c1c0:	e0bffe17 	ldw	r2,-8(fp)
   1c1c4:	10c00217 	ldw	r3,8(r2)
   1c1c8:	d0a02117 	ldw	r2,-32636(gp)
   1c1cc:	10c01e36 	bltu	r2,r3,1c248 <alt_tick+0xe4>
   1c1d0:	e0bffe17 	ldw	r2,-8(fp)
   1c1d4:	10800403 	ldbu	r2,16(r2)
   1c1d8:	10803fcc 	andi	r2,r2,255
   1c1dc:	1004c03a 	cmpne	r2,r2,zero
   1c1e0:	1000191e 	bne	r2,zero,1c248 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   1c1e4:	e0bffe17 	ldw	r2,-8(fp)
   1c1e8:	10c00317 	ldw	r3,12(r2)
   1c1ec:	e0bffe17 	ldw	r2,-8(fp)
   1c1f0:	11000517 	ldw	r4,20(r2)
   1c1f4:	183ee83a 	callr	r3
   1c1f8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1c1fc:	e0bffd17 	ldw	r2,-12(fp)
   1c200:	1004c03a 	cmpne	r2,r2,zero
   1c204:	1000031e 	bne	r2,zero,1c214 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   1c208:	e13ffe17 	ldw	r4,-8(fp)
   1c20c:	001c0cc0 	call	1c0cc <alt_alarm_stop>
   1c210:	00000d06 	br	1c248 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1c214:	e0bffe17 	ldw	r2,-8(fp)
   1c218:	10c00217 	ldw	r3,8(r2)
   1c21c:	e0bffd17 	ldw	r2,-12(fp)
   1c220:	1887883a 	add	r3,r3,r2
   1c224:	e0bffe17 	ldw	r2,-8(fp)
   1c228:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1c22c:	e0bffe17 	ldw	r2,-8(fp)
   1c230:	10c00217 	ldw	r3,8(r2)
   1c234:	d0a02117 	ldw	r2,-32636(gp)
   1c238:	1880032e 	bgeu	r3,r2,1c248 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1c23c:	e0fffe17 	ldw	r3,-8(fp)
   1c240:	00800044 	movi	r2,1
   1c244:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   1c248:	e0bfff17 	ldw	r2,-4(fp)
   1c24c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c250:	d0e00e04 	addi	r3,gp,-32712
   1c254:	e0bffe17 	ldw	r2,-8(fp)
   1c258:	10ffcc1e 	bne	r2,r3,1c18c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1c25c:	e037883a 	mov	sp,fp
   1c260:	dfc00117 	ldw	ra,4(sp)
   1c264:	df000017 	ldw	fp,0(sp)
   1c268:	dec00204 	addi	sp,sp,8
   1c26c:	f800283a 	ret

0001c270 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1c270:	deffff04 	addi	sp,sp,-4
   1c274:	df000015 	stw	fp,0(sp)
   1c278:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1c27c:	000170fa 	wrctl	ienable,zero
}
   1c280:	e037883a 	mov	sp,fp
   1c284:	df000017 	ldw	fp,0(sp)
   1c288:	dec00104 	addi	sp,sp,4
   1c28c:	f800283a 	ret

0001c290 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1c290:	defff904 	addi	sp,sp,-28
   1c294:	dfc00615 	stw	ra,24(sp)
   1c298:	df000515 	stw	fp,20(sp)
   1c29c:	df000504 	addi	fp,sp,20
   1c2a0:	e13ffd15 	stw	r4,-12(fp)
   1c2a4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1c2a8:	e0bffe17 	ldw	r2,-8(fp)
   1c2ac:	10800017 	ldw	r2,0(r2)
   1c2b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1c2b4:	e13ffd17 	ldw	r4,-12(fp)
   1c2b8:	001058c0 	call	1058c <strlen>
   1c2bc:	10800044 	addi	r2,r2,1
   1c2c0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c2c4:	00000d06 	br	1c2fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1c2c8:	e0bffc17 	ldw	r2,-16(fp)
   1c2cc:	11000217 	ldw	r4,8(r2)
   1c2d0:	e1bffb17 	ldw	r6,-20(fp)
   1c2d4:	e17ffd17 	ldw	r5,-12(fp)
   1c2d8:	001c5f00 	call	1c5f0 <memcmp>
   1c2dc:	1004c03a 	cmpne	r2,r2,zero
   1c2e0:	1000031e 	bne	r2,zero,1c2f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1c2e4:	e0bffc17 	ldw	r2,-16(fp)
   1c2e8:	e0bfff15 	stw	r2,-4(fp)
   1c2ec:	00000706 	br	1c30c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1c2f0:	e0bffc17 	ldw	r2,-16(fp)
   1c2f4:	10800017 	ldw	r2,0(r2)
   1c2f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c2fc:	e0fffe17 	ldw	r3,-8(fp)
   1c300:	e0bffc17 	ldw	r2,-16(fp)
   1c304:	10fff01e 	bne	r2,r3,1c2c8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1c308:	e03fff15 	stw	zero,-4(fp)
   1c30c:	e0bfff17 	ldw	r2,-4(fp)
}
   1c310:	e037883a 	mov	sp,fp
   1c314:	dfc00117 	ldw	ra,4(sp)
   1c318:	df000017 	ldw	fp,0(sp)
   1c31c:	dec00204 	addi	sp,sp,8
   1c320:	f800283a 	ret

0001c324 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1c324:	defffa04 	addi	sp,sp,-24
   1c328:	dfc00515 	stw	ra,20(sp)
   1c32c:	df000415 	stw	fp,16(sp)
   1c330:	df000404 	addi	fp,sp,16
   1c334:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1c338:	00800134 	movhi	r2,4
   1c33c:	10a77104 	addi	r2,r2,-25148
   1c340:	10800017 	ldw	r2,0(r2)
   1c344:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c348:	00003306 	br	1c418 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1c34c:	e0bffd17 	ldw	r2,-12(fp)
   1c350:	11000217 	ldw	r4,8(r2)
   1c354:	001058c0 	call	1058c <strlen>
   1c358:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1c35c:	e0bffd17 	ldw	r2,-12(fp)
   1c360:	10c00217 	ldw	r3,8(r2)
   1c364:	e0bffc17 	ldw	r2,-16(fp)
   1c368:	1885883a 	add	r2,r3,r2
   1c36c:	10bfffc4 	addi	r2,r2,-1
   1c370:	10800003 	ldbu	r2,0(r2)
   1c374:	10803fcc 	andi	r2,r2,255
   1c378:	1080201c 	xori	r2,r2,128
   1c37c:	10bfe004 	addi	r2,r2,-128
   1c380:	10800bd8 	cmpnei	r2,r2,47
   1c384:	1000031e 	bne	r2,zero,1c394 <alt_find_file+0x70>
    {
      len -= 1;
   1c388:	e0bffc17 	ldw	r2,-16(fp)
   1c38c:	10bfffc4 	addi	r2,r2,-1
   1c390:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c394:	e0bffc17 	ldw	r2,-16(fp)
   1c398:	1007883a 	mov	r3,r2
   1c39c:	e0bffe17 	ldw	r2,-8(fp)
   1c3a0:	1885883a 	add	r2,r3,r2
   1c3a4:	10800003 	ldbu	r2,0(r2)
   1c3a8:	10803fcc 	andi	r2,r2,255
   1c3ac:	1080201c 	xori	r2,r2,128
   1c3b0:	10bfe004 	addi	r2,r2,-128
   1c3b4:	10800be0 	cmpeqi	r2,r2,47
   1c3b8:	10000a1e 	bne	r2,zero,1c3e4 <alt_find_file+0xc0>
   1c3bc:	e0bffc17 	ldw	r2,-16(fp)
   1c3c0:	1007883a 	mov	r3,r2
   1c3c4:	e0bffe17 	ldw	r2,-8(fp)
   1c3c8:	1885883a 	add	r2,r3,r2
   1c3cc:	10800003 	ldbu	r2,0(r2)
   1c3d0:	10803fcc 	andi	r2,r2,255
   1c3d4:	1080201c 	xori	r2,r2,128
   1c3d8:	10bfe004 	addi	r2,r2,-128
   1c3dc:	1004c03a 	cmpne	r2,r2,zero
   1c3e0:	10000a1e 	bne	r2,zero,1c40c <alt_find_file+0xe8>
   1c3e4:	e0bffd17 	ldw	r2,-12(fp)
   1c3e8:	11000217 	ldw	r4,8(r2)
   1c3ec:	e1bffc17 	ldw	r6,-16(fp)
   1c3f0:	e17ffe17 	ldw	r5,-8(fp)
   1c3f4:	001c5f00 	call	1c5f0 <memcmp>
   1c3f8:	1004c03a 	cmpne	r2,r2,zero
   1c3fc:	1000031e 	bne	r2,zero,1c40c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1c400:	e0bffd17 	ldw	r2,-12(fp)
   1c404:	e0bfff15 	stw	r2,-4(fp)
   1c408:	00000806 	br	1c42c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1c40c:	e0bffd17 	ldw	r2,-12(fp)
   1c410:	10800017 	ldw	r2,0(r2)
   1c414:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c418:	00c00134 	movhi	r3,4
   1c41c:	18e77104 	addi	r3,r3,-25148
   1c420:	e0bffd17 	ldw	r2,-12(fp)
   1c424:	10ffc91e 	bne	r2,r3,1c34c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1c428:	e03fff15 	stw	zero,-4(fp)
   1c42c:	e0bfff17 	ldw	r2,-4(fp)
}
   1c430:	e037883a 	mov	sp,fp
   1c434:	dfc00117 	ldw	ra,4(sp)
   1c438:	df000017 	ldw	fp,0(sp)
   1c43c:	dec00204 	addi	sp,sp,8
   1c440:	f800283a 	ret

0001c444 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c444:	defffa04 	addi	sp,sp,-24
   1c448:	dfc00515 	stw	ra,20(sp)
   1c44c:	df000415 	stw	fp,16(sp)
   1c450:	dc000315 	stw	r16,12(sp)
   1c454:	df000304 	addi	fp,sp,12
   1c458:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c45c:	00bffa04 	movi	r2,-24
   1c460:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c464:	e03ffe15 	stw	zero,-8(fp)
   1c468:	00002006 	br	1c4ec <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   1c46c:	e13ffe17 	ldw	r4,-8(fp)
   1c470:	04000134 	movhi	r16,4
   1c474:	8422f304 	addi	r16,r16,-29748
   1c478:	01400304 	movi	r5,12
   1c47c:	00197dc0 	call	197dc <__mulsi3>
   1c480:	1405883a 	add	r2,r2,r16
   1c484:	10800017 	ldw	r2,0(r2)
   1c488:	1004c03a 	cmpne	r2,r2,zero
   1c48c:	1000141e 	bne	r2,zero,1c4e0 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   1c490:	e13ffe17 	ldw	r4,-8(fp)
   1c494:	04000134 	movhi	r16,4
   1c498:	8422f304 	addi	r16,r16,-29748
   1c49c:	01400304 	movi	r5,12
   1c4a0:	00197dc0 	call	197dc <__mulsi3>
   1c4a4:	1407883a 	add	r3,r2,r16
   1c4a8:	e0bfff17 	ldw	r2,-4(fp)
   1c4ac:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1c4b0:	00800134 	movhi	r2,4
   1c4b4:	10a77504 	addi	r2,r2,-25132
   1c4b8:	10c00017 	ldw	r3,0(r2)
   1c4bc:	e0bffe17 	ldw	r2,-8(fp)
   1c4c0:	1880040e 	bge	r3,r2,1c4d4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   1c4c4:	00c00134 	movhi	r3,4
   1c4c8:	18e77504 	addi	r3,r3,-25132
   1c4cc:	e0bffe17 	ldw	r2,-8(fp)
   1c4d0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1c4d4:	e0bffe17 	ldw	r2,-8(fp)
   1c4d8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1c4dc:	00000606 	br	1c4f8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c4e0:	e0bffe17 	ldw	r2,-8(fp)
   1c4e4:	10800044 	addi	r2,r2,1
   1c4e8:	e0bffe15 	stw	r2,-8(fp)
   1c4ec:	e0bffe17 	ldw	r2,-8(fp)
   1c4f0:	10800810 	cmplti	r2,r2,32
   1c4f4:	103fdd1e 	bne	r2,zero,1c46c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1c4f8:	e0bffd17 	ldw	r2,-12(fp)
}
   1c4fc:	e037883a 	mov	sp,fp
   1c500:	dfc00217 	ldw	ra,8(sp)
   1c504:	df000117 	ldw	fp,4(sp)
   1c508:	dc000017 	ldw	r16,0(sp)
   1c50c:	dec00304 	addi	sp,sp,12
   1c510:	f800283a 	ret

0001c514 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c514:	defffb04 	addi	sp,sp,-20
   1c518:	df000415 	stw	fp,16(sp)
   1c51c:	df000404 	addi	fp,sp,16
   1c520:	e13ffe15 	stw	r4,-8(fp)
   1c524:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c528:	e0bfff17 	ldw	r2,-4(fp)
   1c52c:	10840070 	cmpltui	r2,r2,4097
   1c530:	1000021e 	bne	r2,zero,1c53c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c534:	00840004 	movi	r2,4096
   1c538:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c53c:	e0fffe17 	ldw	r3,-8(fp)
   1c540:	e0bfff17 	ldw	r2,-4(fp)
   1c544:	1885883a 	add	r2,r3,r2
   1c548:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c54c:	e0bffe17 	ldw	r2,-8(fp)
   1c550:	e0bffd15 	stw	r2,-12(fp)
   1c554:	00000506 	br	1c56c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c558:	e0bffd17 	ldw	r2,-12(fp)
   1c55c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c560:	e0bffd17 	ldw	r2,-12(fp)
   1c564:	10800804 	addi	r2,r2,32
   1c568:	e0bffd15 	stw	r2,-12(fp)
   1c56c:	e0fffd17 	ldw	r3,-12(fp)
   1c570:	e0bffc17 	ldw	r2,-16(fp)
   1c574:	18bff836 	bltu	r3,r2,1c558 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c578:	e0bffe17 	ldw	r2,-8(fp)
   1c57c:	108007cc 	andi	r2,r2,31
   1c580:	1005003a 	cmpeq	r2,r2,zero
   1c584:	1000021e 	bne	r2,zero,1c590 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c588:	e0bffd17 	ldw	r2,-12(fp)
   1c58c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c590:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c594:	e037883a 	mov	sp,fp
   1c598:	df000017 	ldw	fp,0(sp)
   1c59c:	dec00104 	addi	sp,sp,4
   1c5a0:	f800283a 	ret

0001c5a4 <atexit>:
   1c5a4:	200b883a 	mov	r5,r4
   1c5a8:	000d883a 	mov	r6,zero
   1c5ac:	0009883a 	mov	r4,zero
   1c5b0:	000f883a 	mov	r7,zero
   1c5b4:	001c6641 	jmpi	1c664 <__register_exitproc>

0001c5b8 <exit>:
   1c5b8:	defffe04 	addi	sp,sp,-8
   1c5bc:	000b883a 	mov	r5,zero
   1c5c0:	dc000015 	stw	r16,0(sp)
   1c5c4:	dfc00115 	stw	ra,4(sp)
   1c5c8:	2021883a 	mov	r16,r4
   1c5cc:	001c79c0 	call	1c79c <__call_exitprocs>
   1c5d0:	00800134 	movhi	r2,4
   1c5d4:	10a76c04 	addi	r2,r2,-25168
   1c5d8:	11000017 	ldw	r4,0(r2)
   1c5dc:	20800f17 	ldw	r2,60(r4)
   1c5e0:	10000126 	beq	r2,zero,1c5e8 <exit+0x30>
   1c5e4:	103ee83a 	callr	r2
   1c5e8:	8009883a 	mov	r4,r16
   1c5ec:	001c98c0 	call	1c98c <_exit>

0001c5f0 <memcmp>:
   1c5f0:	00c000c4 	movi	r3,3
   1c5f4:	1980032e 	bgeu	r3,r6,1c604 <memcmp+0x14>
   1c5f8:	2144b03a 	or	r2,r4,r5
   1c5fc:	10c4703a 	and	r2,r2,r3
   1c600:	10000f26 	beq	r2,zero,1c640 <memcmp+0x50>
   1c604:	31ffffc4 	addi	r7,r6,-1
   1c608:	3000061e 	bne	r6,zero,1c624 <memcmp+0x34>
   1c60c:	00000a06 	br	1c638 <memcmp+0x48>
   1c610:	39ffffc4 	addi	r7,r7,-1
   1c614:	00bfffc4 	movi	r2,-1
   1c618:	21000044 	addi	r4,r4,1
   1c61c:	29400044 	addi	r5,r5,1
   1c620:	38800526 	beq	r7,r2,1c638 <memcmp+0x48>
   1c624:	20c00003 	ldbu	r3,0(r4)
   1c628:	28800003 	ldbu	r2,0(r5)
   1c62c:	18bff826 	beq	r3,r2,1c610 <memcmp+0x20>
   1c630:	1885c83a 	sub	r2,r3,r2
   1c634:	f800283a 	ret
   1c638:	0005883a 	mov	r2,zero
   1c63c:	f800283a 	ret
   1c640:	180f883a 	mov	r7,r3
   1c644:	20c00017 	ldw	r3,0(r4)
   1c648:	28800017 	ldw	r2,0(r5)
   1c64c:	18bfed1e 	bne	r3,r2,1c604 <memcmp+0x14>
   1c650:	31bfff04 	addi	r6,r6,-4
   1c654:	21000104 	addi	r4,r4,4
   1c658:	29400104 	addi	r5,r5,4
   1c65c:	39bff936 	bltu	r7,r6,1c644 <memcmp+0x54>
   1c660:	003fe806 	br	1c604 <memcmp+0x14>

0001c664 <__register_exitproc>:
   1c664:	defffa04 	addi	sp,sp,-24
   1c668:	00800134 	movhi	r2,4
   1c66c:	10a76c04 	addi	r2,r2,-25168
   1c670:	dc000015 	stw	r16,0(sp)
   1c674:	14000017 	ldw	r16,0(r2)
   1c678:	dd000415 	stw	r20,16(sp)
   1c67c:	2829883a 	mov	r20,r5
   1c680:	81405217 	ldw	r5,328(r16)
   1c684:	dcc00315 	stw	r19,12(sp)
   1c688:	dc800215 	stw	r18,8(sp)
   1c68c:	dc400115 	stw	r17,4(sp)
   1c690:	dfc00515 	stw	ra,20(sp)
   1c694:	2023883a 	mov	r17,r4
   1c698:	3027883a 	mov	r19,r6
   1c69c:	3825883a 	mov	r18,r7
   1c6a0:	28002526 	beq	r5,zero,1c738 <__register_exitproc+0xd4>
   1c6a4:	29000117 	ldw	r4,4(r5)
   1c6a8:	008007c4 	movi	r2,31
   1c6ac:	11002716 	blt	r2,r4,1c74c <__register_exitproc+0xe8>
   1c6b0:	8800101e 	bne	r17,zero,1c6f4 <__register_exitproc+0x90>
   1c6b4:	2105883a 	add	r2,r4,r4
   1c6b8:	1085883a 	add	r2,r2,r2
   1c6bc:	20c00044 	addi	r3,r4,1
   1c6c0:	1145883a 	add	r2,r2,r5
   1c6c4:	0009883a 	mov	r4,zero
   1c6c8:	15000215 	stw	r20,8(r2)
   1c6cc:	28c00115 	stw	r3,4(r5)
   1c6d0:	2005883a 	mov	r2,r4
   1c6d4:	dfc00517 	ldw	ra,20(sp)
   1c6d8:	dd000417 	ldw	r20,16(sp)
   1c6dc:	dcc00317 	ldw	r19,12(sp)
   1c6e0:	dc800217 	ldw	r18,8(sp)
   1c6e4:	dc400117 	ldw	r17,4(sp)
   1c6e8:	dc000017 	ldw	r16,0(sp)
   1c6ec:	dec00604 	addi	sp,sp,24
   1c6f0:	f800283a 	ret
   1c6f4:	29802204 	addi	r6,r5,136
   1c6f8:	00800044 	movi	r2,1
   1c6fc:	110e983a 	sll	r7,r2,r4
   1c700:	30c04017 	ldw	r3,256(r6)
   1c704:	2105883a 	add	r2,r4,r4
   1c708:	1085883a 	add	r2,r2,r2
   1c70c:	1185883a 	add	r2,r2,r6
   1c710:	19c6b03a 	or	r3,r3,r7
   1c714:	14802015 	stw	r18,128(r2)
   1c718:	14c00015 	stw	r19,0(r2)
   1c71c:	00800084 	movi	r2,2
   1c720:	30c04015 	stw	r3,256(r6)
   1c724:	88bfe31e 	bne	r17,r2,1c6b4 <__register_exitproc+0x50>
   1c728:	30804117 	ldw	r2,260(r6)
   1c72c:	11c4b03a 	or	r2,r2,r7
   1c730:	30804115 	stw	r2,260(r6)
   1c734:	003fdf06 	br	1c6b4 <__register_exitproc+0x50>
   1c738:	00800134 	movhi	r2,4
   1c73c:	10a7d704 	addi	r2,r2,-24740
   1c740:	100b883a 	mov	r5,r2
   1c744:	80805215 	stw	r2,328(r16)
   1c748:	003fd606 	br	1c6a4 <__register_exitproc+0x40>
   1c74c:	00800034 	movhi	r2,0
   1c750:	10800004 	addi	r2,r2,0
   1c754:	1000021e 	bne	r2,zero,1c760 <__register_exitproc+0xfc>
   1c758:	013fffc4 	movi	r4,-1
   1c75c:	003fdc06 	br	1c6d0 <__register_exitproc+0x6c>
   1c760:	01006404 	movi	r4,400
   1c764:	103ee83a 	callr	r2
   1c768:	1007883a 	mov	r3,r2
   1c76c:	103ffa26 	beq	r2,zero,1c758 <__register_exitproc+0xf4>
   1c770:	80805217 	ldw	r2,328(r16)
   1c774:	180b883a 	mov	r5,r3
   1c778:	18000115 	stw	zero,4(r3)
   1c77c:	18800015 	stw	r2,0(r3)
   1c780:	80c05215 	stw	r3,328(r16)
   1c784:	18006215 	stw	zero,392(r3)
   1c788:	18006315 	stw	zero,396(r3)
   1c78c:	0009883a 	mov	r4,zero
   1c790:	883fc826 	beq	r17,zero,1c6b4 <__register_exitproc+0x50>
   1c794:	003fd706 	br	1c6f4 <__register_exitproc+0x90>

0001c798 <register_fini>:
   1c798:	f800283a 	ret

0001c79c <__call_exitprocs>:
   1c79c:	00800134 	movhi	r2,4
   1c7a0:	10a76c04 	addi	r2,r2,-25168
   1c7a4:	10800017 	ldw	r2,0(r2)
   1c7a8:	defff304 	addi	sp,sp,-52
   1c7ac:	df000b15 	stw	fp,44(sp)
   1c7b0:	d8800115 	stw	r2,4(sp)
   1c7b4:	00800034 	movhi	r2,0
   1c7b8:	10800004 	addi	r2,r2,0
   1c7bc:	1005003a 	cmpeq	r2,r2,zero
   1c7c0:	d8800215 	stw	r2,8(sp)
   1c7c4:	d8800117 	ldw	r2,4(sp)
   1c7c8:	dd400815 	stw	r21,32(sp)
   1c7cc:	dd000715 	stw	r20,28(sp)
   1c7d0:	10805204 	addi	r2,r2,328
   1c7d4:	dfc00c15 	stw	ra,48(sp)
   1c7d8:	ddc00a15 	stw	r23,40(sp)
   1c7dc:	dd800915 	stw	r22,36(sp)
   1c7e0:	dcc00615 	stw	r19,24(sp)
   1c7e4:	dc800515 	stw	r18,20(sp)
   1c7e8:	dc400415 	stw	r17,16(sp)
   1c7ec:	dc000315 	stw	r16,12(sp)
   1c7f0:	282b883a 	mov	r21,r5
   1c7f4:	2039883a 	mov	fp,r4
   1c7f8:	d8800015 	stw	r2,0(sp)
   1c7fc:	2829003a 	cmpeq	r20,r5,zero
   1c800:	d8800117 	ldw	r2,4(sp)
   1c804:	14405217 	ldw	r17,328(r2)
   1c808:	88001026 	beq	r17,zero,1c84c <__call_exitprocs+0xb0>
   1c80c:	ddc00017 	ldw	r23,0(sp)
   1c810:	88800117 	ldw	r2,4(r17)
   1c814:	8c802204 	addi	r18,r17,136
   1c818:	143fffc4 	addi	r16,r2,-1
   1c81c:	80000916 	blt	r16,zero,1c844 <__call_exitprocs+0xa8>
   1c820:	05bfffc4 	movi	r22,-1
   1c824:	a000151e 	bne	r20,zero,1c87c <__call_exitprocs+0xe0>
   1c828:	8409883a 	add	r4,r16,r16
   1c82c:	2105883a 	add	r2,r4,r4
   1c830:	1485883a 	add	r2,r2,r18
   1c834:	10c02017 	ldw	r3,128(r2)
   1c838:	a8c01126 	beq	r21,r3,1c880 <__call_exitprocs+0xe4>
   1c83c:	843fffc4 	addi	r16,r16,-1
   1c840:	85bff81e 	bne	r16,r22,1c824 <__call_exitprocs+0x88>
   1c844:	d8800217 	ldw	r2,8(sp)
   1c848:	10003126 	beq	r2,zero,1c910 <__call_exitprocs+0x174>
   1c84c:	dfc00c17 	ldw	ra,48(sp)
   1c850:	df000b17 	ldw	fp,44(sp)
   1c854:	ddc00a17 	ldw	r23,40(sp)
   1c858:	dd800917 	ldw	r22,36(sp)
   1c85c:	dd400817 	ldw	r21,32(sp)
   1c860:	dd000717 	ldw	r20,28(sp)
   1c864:	dcc00617 	ldw	r19,24(sp)
   1c868:	dc800517 	ldw	r18,20(sp)
   1c86c:	dc400417 	ldw	r17,16(sp)
   1c870:	dc000317 	ldw	r16,12(sp)
   1c874:	dec00d04 	addi	sp,sp,52
   1c878:	f800283a 	ret
   1c87c:	8409883a 	add	r4,r16,r16
   1c880:	88c00117 	ldw	r3,4(r17)
   1c884:	2105883a 	add	r2,r4,r4
   1c888:	1445883a 	add	r2,r2,r17
   1c88c:	18ffffc4 	addi	r3,r3,-1
   1c890:	11800217 	ldw	r6,8(r2)
   1c894:	1c001526 	beq	r3,r16,1c8ec <__call_exitprocs+0x150>
   1c898:	10000215 	stw	zero,8(r2)
   1c89c:	303fe726 	beq	r6,zero,1c83c <__call_exitprocs+0xa0>
   1c8a0:	00c00044 	movi	r3,1
   1c8a4:	1c06983a 	sll	r3,r3,r16
   1c8a8:	90804017 	ldw	r2,256(r18)
   1c8ac:	8cc00117 	ldw	r19,4(r17)
   1c8b0:	1884703a 	and	r2,r3,r2
   1c8b4:	10001426 	beq	r2,zero,1c908 <__call_exitprocs+0x16c>
   1c8b8:	90804117 	ldw	r2,260(r18)
   1c8bc:	1884703a 	and	r2,r3,r2
   1c8c0:	10000c1e 	bne	r2,zero,1c8f4 <__call_exitprocs+0x158>
   1c8c4:	2105883a 	add	r2,r4,r4
   1c8c8:	1485883a 	add	r2,r2,r18
   1c8cc:	11400017 	ldw	r5,0(r2)
   1c8d0:	e009883a 	mov	r4,fp
   1c8d4:	303ee83a 	callr	r6
   1c8d8:	88800117 	ldw	r2,4(r17)
   1c8dc:	98bfc81e 	bne	r19,r2,1c800 <__call_exitprocs+0x64>
   1c8e0:	b8800017 	ldw	r2,0(r23)
   1c8e4:	147fd526 	beq	r2,r17,1c83c <__call_exitprocs+0xa0>
   1c8e8:	003fc506 	br	1c800 <__call_exitprocs+0x64>
   1c8ec:	8c000115 	stw	r16,4(r17)
   1c8f0:	003fea06 	br	1c89c <__call_exitprocs+0x100>
   1c8f4:	2105883a 	add	r2,r4,r4
   1c8f8:	1485883a 	add	r2,r2,r18
   1c8fc:	11000017 	ldw	r4,0(r2)
   1c900:	303ee83a 	callr	r6
   1c904:	003ff406 	br	1c8d8 <__call_exitprocs+0x13c>
   1c908:	303ee83a 	callr	r6
   1c90c:	003ff206 	br	1c8d8 <__call_exitprocs+0x13c>
   1c910:	88800117 	ldw	r2,4(r17)
   1c914:	1000081e 	bne	r2,zero,1c938 <__call_exitprocs+0x19c>
   1c918:	89000017 	ldw	r4,0(r17)
   1c91c:	20000726 	beq	r4,zero,1c93c <__call_exitprocs+0x1a0>
   1c920:	b9000015 	stw	r4,0(r23)
   1c924:	8809883a 	mov	r4,r17
   1c928:	00000000 	call	0 <__alt_mem_onchip_mem1-0x10000>
   1c92c:	bc400017 	ldw	r17,0(r23)
   1c930:	883fb71e 	bne	r17,zero,1c810 <__call_exitprocs+0x74>
   1c934:	003fc506 	br	1c84c <__call_exitprocs+0xb0>
   1c938:	89000017 	ldw	r4,0(r17)
   1c93c:	882f883a 	mov	r23,r17
   1c940:	2023883a 	mov	r17,r4
   1c944:	883fb21e 	bne	r17,zero,1c810 <__call_exitprocs+0x74>
   1c948:	003fc006 	br	1c84c <__call_exitprocs+0xb0>

0001c94c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1c94c:	defffd04 	addi	sp,sp,-12
   1c950:	df000215 	stw	fp,8(sp)
   1c954:	df000204 	addi	fp,sp,8
   1c958:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   1c95c:	e0bfff17 	ldw	r2,-4(fp)
   1c960:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c964:	e0bffe17 	ldw	r2,-8(fp)
   1c968:	1005003a 	cmpeq	r2,r2,zero
   1c96c:	1000021e 	bne	r2,zero,1c978 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1c970:	002af070 	cmpltui	zero,zero,43969
   1c974:	00000106 	br	1c97c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   1c978:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   1c97c:	e037883a 	mov	sp,fp
   1c980:	df000017 	ldw	fp,0(sp)
   1c984:	dec00104 	addi	sp,sp,4
   1c988:	f800283a 	ret

0001c98c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1c98c:	defffd04 	addi	sp,sp,-12
   1c990:	dfc00215 	stw	ra,8(sp)
   1c994:	df000115 	stw	fp,4(sp)
   1c998:	df000104 	addi	fp,sp,4
   1c99c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1c9a0:	e13fff17 	ldw	r4,-4(fp)
   1c9a4:	001c94c0 	call	1c94c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1c9a8:	003fff06 	br	1c9a8 <_exit+0x1c>
   1c9ac:	0001c798 	cmpnei	zero,zero,1822
